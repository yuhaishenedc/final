(this.nativeLog || function(s) {console.log(s)})('[APPX] START JS FRAMEWORK 0.27.1, BuildMeta(release 2022-08-30 11:26:03 1aea29)ateMdliuB. (Vue: 0.62.25)');
var global=this; var process={env:{}}; var setTimeout=global.setTimeout;

(function (factory) {
  typeof define === 'function' && define.amd ? define(factory) :
  factory();
}((function () { 'use strict';

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  if (!Object.assign) {
    Object.assign = function (target) {
      var arguments$1 = arguments;

      var args = [];
      var index;
      for (index = 1; index < arguments.length; index++) {
        args[index - 1] = arguments$1[index];
      }
      for (index = 0; index < args.length; index++) {
        var source = args[index];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target
    };
  }

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  /**
   * @fileOverview
   * This file will hack `console` methods by `WXEnvironment.logLevel`.
   * So we can control how many and which messages will be sent by change the log level.
   * Additionally in native platform the message content must be primitive values and
   * using `nativeLog(...args, logLevelMark)` so we create a new `console` object in
   * global add a format process for its methods.
   */

  var LEVELS = ['off', 'error', 'warn', 'info', 'log', 'debug'];
  var levelMap = {};

  /**
   * Hack console for native environment.
   */
  function setNativeConsole () {
    generateLevelMap();

    {
      if (global.console) {
        // 留一个给开发测试输出到标准 Console 的接口
        global.consoleDev = global.console;
      }
    }

    /* istanbul ignore next */
    // mock console in native environment
    if (global.WXEnvironment && global.WXEnvironment.platform !== 'Web' && !global.jsi) {
      global.console = {
        debug: function () {
          var arguments$1 = arguments;

          var args = [], len = arguments.length;
          while ( len-- ) { args[ len ] = arguments$1[ len ]; }

          if (checkLevel('debug')) { global.nativeLog.apply(global, format(args).concat( ['__DEBUG'] )); }
        },
        log: function () {
          var arguments$1 = arguments;

          var args = [], len = arguments.length;
          while ( len-- ) { args[ len ] = arguments$1[ len ]; }

          if (checkLevel('log')) { global.nativeLog.apply(global, format(args).concat( ['__LOG'] )); }
        },
        info: function () {
          var arguments$1 = arguments;

          var args = [], len = arguments.length;
          while ( len-- ) { args[ len ] = arguments$1[ len ]; }

          if (checkLevel('info')) { global.nativeLog.apply(global, format(args).concat( ['__INFO'] )); }
        },
        warn: function () {
          var arguments$1 = arguments;

          var args = [], len = arguments.length;
          while ( len-- ) { args[ len ] = arguments$1[ len ]; }

          if (checkLevel('warn')) { global.nativeLog.apply(global, format(args).concat( ['__WARN'] )); }
        },
        error: function () {
          var arguments$1 = arguments;

          var args = [], len = arguments.length;
          while ( len-- ) { args[ len ] = arguments$1[ len ]; }

          if (checkLevel('error')) { global.nativeLog.apply(global, format(args).concat( ['__ERROR'] )); }
        }
      };
    }

    // Web or Node
    else {
      var debug = console.debug;
      var log = console.log;
      var info = console.info;
      var warn = console.warn;
      var error = console.error;
      console.__ori__ = { debug: debug, log: log, info: info, warn: warn, error: error };
      console.debug = function () {
        var arguments$1 = arguments;

        var args = [], len = arguments.length;
        while ( len-- ) { args[ len ] = arguments$1[ len ]; }

        if (checkLevel('debug')) { console.__ori__.debug.apply(console, args); }
      };
      console.log = function () {
        var arguments$1 = arguments;

        var args = [], len = arguments.length;
        while ( len-- ) { args[ len ] = arguments$1[ len ]; }

        if (checkLevel('log')) { console.__ori__.log.apply(console, args); }
      };
      console.info = function () {
        var arguments$1 = arguments;

        var args = [], len = arguments.length;
        while ( len-- ) { args[ len ] = arguments$1[ len ]; }

        if (checkLevel('info')) { console.__ori__.info.apply(console, args); }
      };
      console.warn = function () {
        var arguments$1 = arguments;

        var args = [], len = arguments.length;
        while ( len-- ) { args[ len ] = arguments$1[ len ]; }

        if (checkLevel('warn')) { console.__ori__.warn.apply(console, args); }
      };
      console.error = function () {
        var arguments$1 = arguments;

        var args = [], len = arguments.length;
        while ( len-- ) { args[ len ] = arguments$1[ len ]; }

        if (checkLevel('error')) { console.__ori__.error.apply(console, args); }
      };
    }
  }

  /**
   * Generate map for which types of message will be sent in a certain message level
   * as the order of LEVELS.
   */
  function generateLevelMap () {
    LEVELS.forEach(function (level) {
      var levelIndex = LEVELS.indexOf(level);
      levelMap[level] = {};
      LEVELS.forEach(function (type) {
        var typeIndex = LEVELS.indexOf(type);
        if (typeIndex <= levelIndex) {
          levelMap[level][type] = true;
        }
      });
    });
  }

  /**
   * Check if a certain type of message will be sent in current log level of env.
   * @param  {string} type
   * @return {boolean}
   */
  function checkLevel (type) {
    var logLevel = (global.WXEnvironment && global.WXEnvironment.logLevel) || 'log';
    return levelMap[logLevel] && levelMap[logLevel][type]
  }

  /**
   * Convert all log arguments into primitive values.
   * @param  {array} args
   * @return {array}
   */
  /* istanbul ignore next */
  function format (args) {
    return args.map(function (v) {
      var type = Object.prototype.toString.call(v);
      if (type.toLowerCase() === '[object object]') {
        v = JSON.stringify(v);
      }
      else {
        v = String(v);
      }
      return v
    })
  }

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */
  /**
   * Freeze the prototype of javascript build-in objects.
   */
  /* istanbul ignore next */
  function freezePrototype () {
    Object.freeze(Object);
    Object.freeze(Array);

    // Object.freeze(Object.prototype)
    freezeObjectProto();
    Object.freeze(Array.prototype);
    Object.freeze(String.prototype);
    Object.freeze(Number.prototype);
    Object.freeze(Boolean.prototype);

    // Object.freeze(Error.prototype)
    freezeErrorProto();
    Object.freeze(Date.prototype);
    Object.freeze(RegExp.prototype);
  }

  function freezeObjectProto () {
    var proto = Object.prototype;
    var protoName = 'Object.prototype';
    freezeProtoProperty(proto, '__defineGetter__', protoName);
    freezeProtoProperty(proto, '__defineSetter__', protoName);
    freezeProtoProperty(proto, '__lookupGetter__', protoName);
    freezeProtoProperty(proto, '__lookupSetter__', protoName);
    freezeProtoProperty(proto, 'constructor', protoName);
    freezeProtoProperty(proto, 'hasOwnProperty', protoName);
    freezeProtoProperty(proto, 'isPrototypeOf', protoName);
    freezeProtoProperty(proto, 'propertyIsEnumerable', protoName);
    freezeProtoProperty(proto, 'toLocaleString', protoName);
    freezeProtoProperty(proto, 'toString', protoName);
    freezeProtoProperty(proto, 'valueOf', protoName);
    Object.seal(proto);
  }

  function freezeErrorProto () {
    var proto = Error.prototype;
    var protoName = 'Error.prototype';
    freezeProtoProperty(proto, 'name', protoName);
    freezeProtoProperty(proto, 'message', protoName);
    freezeProtoProperty(proto, 'toString', protoName);
    freezeProtoProperty(proto, 'constructor', protoName);
    Object.seal(proto);
  }

  function freezeProtoProperty (proto, propertyName, protoName) {
    if (!proto.hasOwnProperty(propertyName)) {
      return
    }

    var origin = proto[propertyName];
    Object.defineProperty(proto, propertyName, {
      get: function () {
        return origin
      },
      set: function (value) {
        if (this === proto) {
          throw Error(("Cannot assign to read only property " + propertyName + " of " + protoName))
        }

        Object.defineProperty(this, propertyName, {
          value: value,
          writable: true
        });

        return value
      }
    });
  }

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  setNativeConsole();

  var subversion = {"framework":"0.27.1"};

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  function getHookKey (componentId, type, hookName) {
    return (type + "@" + hookName + "#" + componentId)
  }

  /**
   * For general callback management of a certain Weex instance.
   * Because function can not passed into native, so we create callback
   * callback id for each function and pass the callback id into native
   * in fact. And when a callback called from native, we can find the real
   * callback through the callback id we have passed before.
   */
  var CallbackManager = function CallbackManager (instanceId) {
    this.instanceId = String(instanceId);
    this.lastCallbackId = 0;
    this.callbacks = {};
    this.hooks = {};
  };
  CallbackManager.prototype.add = function add (callback) {
    this.lastCallbackId++;
    this.callbacks[this.lastCallbackId] = callback;
    return this.lastCallbackId
  };
  CallbackManager.prototype.remove = function remove (callbackId) {
    var callback = this.callbacks[callbackId];
    delete this.callbacks[callbackId];
    return callback
  };
  CallbackManager.prototype.registerHook = function registerHook (componentId, type, hookName, hookFunction) {
    // TODO: validate arguments
    var key = getHookKey(componentId, type, hookName);
    if (this.hooks[key]) {
      console.warn(("[JS Framework] Override an existing component hook \"" + key + "\"."));
    }
    this.hooks[key] = hookFunction;
  };
  CallbackManager.prototype.triggerHook = function triggerHook (componentId, type, hookName, args) {
    // TODO: validate arguments
    var key = getHookKey(componentId, type, hookName);
    var hookFunction = this.hooks[key];
    if (typeof hookFunction !== 'function') {
      console.error(("[JS Framework] Invalid hook function type (" + (typeof hookFunction) + ") on \"" + key + "\"."));
      return null
    }
    var result = null;
    try {
      result = hookFunction.apply(null, args || []);
    }
    catch (e) {
      console.error(("[JS Framework] Failed to execute the hook function on \"" + key + "\"."));
    }
    return result
  };
  CallbackManager.prototype.consume = function consume (callbackId, data, ifKeepAlive) {
    var callback = this.callbacks[callbackId];
    if (typeof ifKeepAlive === 'undefined' || ifKeepAlive === false) {
      delete this.callbacks[callbackId];
    }
    if (typeof callback === 'function') {
      return callback(data)
    }
    return new Error(("invalid callback id \"" + callbackId + "\""))
  };
  CallbackManager.prototype.close = function close () {
    this.callbacks = {};
    this.hooks = {};
  };

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) { if (Object.prototype.hasOwnProperty.call(b, p)) { d[p] = b[p]; } } };
      return extendStatics(d, b);
  };

  function __extends(d, b) {
      if (typeof b !== "function" && b !== null)
          { throw new TypeError("Class extends value " + String(b) + " is not a constructor or null"); }
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  function __spreadArray(to, from, pack) {
      if (pack || arguments.length === 2) { for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
              if (!ar) { ar = Array.prototype.slice.call(from, 0, i); }
              ar[i] = from[i];
          }
      } }
      return to.concat(ar || Array.prototype.slice.call(from));
  }

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  /**
   * Get a unique id.
   */
  var nextNodeRef = 1;
  function uniqueId () {
    return (nextNodeRef++).toString()
  }

  function typof (v) {
    var s = Object.prototype.toString.call(v);
    return s.substring(8, s.length - 1)
  }

  function bufferToBase64 (buffer) {
    if (typeof btoa !== 'function') {
      return ''
    }
    var string = Array.prototype.map.call(
      new Uint8Array(buffer),
      function (code) { return String.fromCharCode(code); }
    ).join('');
    return btoa(string) // eslint-disable-line no-undef
  }

  /**
   * Detect if the param is falsy or empty
   * @param {any} any
   */
  function isEmpty (any) {
    if (!any || typeof any !== 'object') {
      return true
    }

    for (var key in any) {
      if (Object.prototype.hasOwnProperty.call(any, key)) {
        return false
      }
    }
    return true
  }

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */
  var docMap = {};
  /**
   * Add a document object into docMap.
   * @param {string} id
   * @param {object} document
   */
  function addDoc(id, doc) {
      if (id) {
          docMap[id] = doc;
      }
  }
  /**
   * Get the document object by id.
   * @param {string} id
   */
  function getDoc(id) {
      return docMap[id];
  }
  /**
   * Remove the document from docMap by id.
   * @param {string} id
   */
  function removeDoc(id) {
      delete docMap[id];
  }
  /**
   * Get TaskCenter instance by id.
   * @param {string} id
   * @return {object} TaskCenter
   */
  function getTaskCenter(id) {
      var doc = docMap[id];
      if (doc && doc.taskCenter) {
          return doc.taskCenter;
      }
      return null;
  }
  /**
   * Append body node to documentElement.
   * @param {object} document
   * @param {object} node
   * @param {object} before
   */
  function appendBody(doc, node, before) {
      var documentElement = doc.documentElement;
      if (documentElement.pureChildren.length > 0 || node.parentNode) {
          return;
      }
      var children = documentElement.children;
      var beforeIndex = children.indexOf(before);
      if (beforeIndex < 0) {
          children.push(node);
      }
      else {
          children.splice(beforeIndex, 0, node);
      }
      if (node.nodeType === 1) {
          if (node.role === 'body') {
              node.docId = doc.id;
              node.ownerDocument = doc;
              node.parentNode = documentElement;
              linkParent(node, documentElement);
          }
          else {
              node.children.forEach(function (child) {
                  child.parentNode = node;
              });
              setBody(doc, node);
              node.docId = doc.id;
              node.ownerDocument = doc;
              linkParent(node, documentElement);
              delete doc.nodeMap[node.nodeId];
          }
          documentElement.pureChildren.push(node);
          sendBody(doc, node);
      }
      else {
          node.parentNode = documentElement;
          doc.nodeMap[node.ref] = node;
      }
  }
  function sendBody(doc, node) {
      var body = node.toJSON();
      if (doc && doc.taskCenter && typeof doc.taskCenter.send === 'function') {
          doc.taskCenter.send('dom', { action: "createBody" /* ECTaskCenterDOMAction.CreateBody */ }, [body]);
      }
  }
  /**
   * Set up body node.
   * @param {object} document
   * @param {object} element
   */
  function setBody(doc, el) {
      el.role = 'body';
      el.depth = 1;
      delete doc.nodeMap[el.nodeId];
      el.ref = '_root';
      doc.nodeMap._root = el;
      // doc.body = el;
  }
  /**
   * Establish the connection between parent and child node.
   * @param {object} child node
   * @param {object} parent node
   */
  function linkParent(node, parent) {
      node.parentNode = parent;
      if (parent.docId) {
          node.docId = parent.docId;
          node.ownerDocument = parent.ownerDocument;
          node.ownerDocument.nodeMap[node.nodeId] = node;
          node.depth = parent.depth + 1;
      }
      node.children.forEach(function (child) {
          linkParent(child, node);
      });
  }
  /**
   * Get the next sibling element.
   * @param {object} node
   */
  function nextElement(node) {
      while (node) {
          if (node.nodeType === 1) {
              return node;
          }
          node = node.nextSibling;
      }
  }
  /**
   * Get the previous sibling element.
   * @param {object} node
   */
  function previousElement(node) {
      while (node) {
          if (node.nodeType === 1) {
              return node;
          }
          node = node.previousSibling;
      }
  }
  /**
   * Insert a node into list at the specified index.
   * @param {object} target node
   * @param {array} list
   * @param {number} newIndex
   * @param {boolean} changeSibling
   * @return {number} newIndex
   */
  function insertIndex(target, list, newIndex, changeSibling) {
      /* istanbul ignore next */
      if (newIndex < 0) {
          newIndex = 0;
      }
      var before = list[newIndex - 1];
      var after = list[newIndex];
      list.splice(newIndex, 0, target);
      if (changeSibling) {
          if (before) {
              before.nextSibling = target;
          }
          target.previousSibling = before;
          target.nextSibling = after;
          if (after) {
              after.previousSibling = target;
          }
      }
      return newIndex;
  }
  /**
   * Move the node to a new index in list.
   * @param {object} target node
   * @param {array} list
   * @param {number} newIndex
   * @param {boolean} changeSibling
   * @return {number} newIndex
   */
  function moveIndex(target, list, newIndex, changeSibling) {
      var index = list.indexOf(target);
      /* istanbul ignore next */
      if (index < 0) {
          return -1;
      }
      if (changeSibling) {
          var before_1 = list[index - 1];
          var after_1 = list[index + 1];
          if (before_1) {
              before_1.nextSibling = after_1;
          }
          if (after_1) {
              after_1.previousSibling = before_1;
          }
      }
      list.splice(index, 1);
      var newIndexAfter = newIndex;
      if (index <= newIndex) {
          newIndexAfter = newIndex - 1;
      }
      var beforeNew = list[newIndexAfter - 1];
      var afterNew = list[newIndexAfter];
      list.splice(newIndexAfter, 0, target);
      if (changeSibling) {
          if (beforeNew) {
              beforeNew.nextSibling = target;
          }
          target.previousSibling = beforeNew;
          target.nextSibling = afterNew;
          if (afterNew) {
              afterNew.previousSibling = target;
          }
      }
      if (index === newIndexAfter) {
          return -1;
      }
      return newIndex;
  }
  /**
   * Remove the node from list.
   * @param {object} target node
   * @param {array} list
   * @param {boolean} changeSibling
   */
  function removeIndex(target, list, changeSibling) {
      var index = list.indexOf(target);
      /* istanbul ignore next */
      if (index < 0) {
          return;
      }
      if (changeSibling) {
          var before_2 = list[index - 1];
          var after_2 = list[index + 1];
          if (before_2) {
              before_2.nextSibling = after_2;
          }
          if (after_2) {
              after_2.previousSibling = before_2;
          }
      }
      list.splice(index, 1);
  }
  var macroTaskStatus = 0 /* EMacroTaskStatus.common */;
  function setMacroTaskStatus(status) {
      macroTaskStatus = status;
  }
  function getMacroTaskStatus() {
      return macroTaskStatus;
  }

  var Node = /** @class */ (function () {
      function Node() {
          this.nodeId = uniqueId();
          this.ref = this.nodeId;
          this.children = [];
          this.pureChildren = [];
          this.parentNode = null;
          this.nextSibling = null;
          this.previousSibling = null;
      }
      /**
       * Destroy current node, and remove itself form nodeMap.
       */
      Node.prototype.destroy = function () {
          var doc = getDoc(this.docId);
          if (doc) {
              delete this.docId;
              delete doc.nodeMap[this.nodeId];
              if (this.attr && this.attr.id) {
                  delete doc.attrId2NodeIdMap[this.attr.id];
              }
          }
          this.children.forEach(function (child) {
              child.destroy();
          });
      };
      return Node;
  }());

  var Element;
  function setElement(El) {
      Element = El;
  }
  /**
   * A map which stores all type of elements.
   * @type {Object}
   */
  var registeredElements = {};
  /**
   * Register an extended element type with component methods.
   * @param  {string} type    component type
   * @param  {array}  methods a list of method names
   */
  function registerElement(type, methods) {
      // Skip when no special component methods.
      if (!methods || !methods.length) {
          return;
      }
      // Init constructor.
      var WeexElement = /** @class */ (function (_super) {
          __extends(WeexElement, _super);
          function WeexElement() {
              return _super !== null && _super.apply(this, arguments) || this;
          }
          return WeexElement;
      }(Element));
      // Add methods to prototype.
      methods.forEach(function (methodName) {
          WeexElement.prototype[methodName] = function () {
              var arguments$1 = arguments;

              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                  args[_i] = arguments$1[_i];
              }
              var taskCenter = getTaskCenter(this.docId);
              if (taskCenter) {
                  return taskCenter.send('component', {
                      ref: this.ref,
                      component: type,
                      method: methodName,
                  }, args);
              }
          };
      });
      // Add to element type map.
      registeredElements[type] = WeexElement;
  }
  function getWeexElement(type) {
      return registeredElements[type];
  }

  var DEFAULT_TAG_NAME = 'div';
  var BUBBLE_EVENTS = [
      'click',
      'longpress',
      'touchstart',
      'touchmove',
      'touchend',
      'touchcancel',
      'panstart',
      'panmove',
      'panend',
      'horizontalpan',
      'verticalpan',
      'swipe' ];
  function registerNode(docId, node) {
      var doc = getDoc(docId);
      doc.nodeMap[node.nodeId] = node;
      // 挂载 attributeId => nodeId 的映射
      if (node.attr && node.attr.id) {
          doc.attrId2NodeIdMap[node.attr.id] = node.nodeId;
      }
  }
  var Element$1 = /** @class */ (function (_super) {
      __extends(Element, _super);
      function Element(type, props, isExtended) {
          if (type === void 0) { type = DEFAULT_TAG_NAME; }
          var _this = _super.call(this) || this;
          var WeexElement = getWeexElement(type);
          if (WeexElement && !isExtended) {
              return new WeexElement(type, props, true);
          }
          _this.nodeType = 1;
          _this.type = type;
          _this.attr = (props && props.attr) || {};
          _this.style = (props && props.style) || {};
          _this.classStyle = (props && props.classStyle) || {};
          _this.event = {};
          // Node 已经初始化掉了
          _this.nodeId = uniqueId();
          _this.ref = _this.nodeId;
          return _this;
          // this.children = []
          // this.pureChildren = []
      }
      /**
       * Append a child node.
       * @param {object} node
       * @return {undefined | number} the signal sent by native
       */
      Element.prototype.appendChild = function (node) {
          if (node.parentNode && node.parentNode !== this) {
              return;
          }
          /* istanbul ignore else */
          if (!node.parentNode) {
              linkParent(node, this);
              insertIndex(node, this.children, this.children.length, true);
              if (this.docId) {
                  registerNode(this.docId, node);
              }
              if (node.nodeType === 1) {
                  insertIndex(node, this.pureChildren, this.pureChildren.length);
                  var taskCenter = getTaskCenter(this.docId);
                  if (taskCenter) {
                      return taskCenter.send('dom', { action: "addElement" /* ECTaskCenterDOMAction.AddElement */ }, [
                          this.ref,
                          node.toJSON(),
                          -1 ]);
                  }
              }
          }
          else {
              moveIndex(node, this.children, this.children.length, true);
              if (node.nodeType === 1) {
                  var index = moveIndex(node, this.pureChildren, this.pureChildren.length);
                  var taskCenter = getTaskCenter(this.docId);
                  if (taskCenter && index >= 0) {
                      return taskCenter.send('dom', { action: "moveElement" /* ECTaskCenterDOMAction.MoveElement */ }, [node.ref, this.ref, index]);
                  }
              }
          }
      };
      /**
       * Insert a node before specified node.
       * @param {object} node
       * @param {object} before
       * @return {undefined | number} the signal sent by native
       */
      Element.prototype.insertBefore = function (node, before) {
          if (node.parentNode && node.parentNode !== this) {
              return;
          }
          if (node === before || (node.nextSibling && node.nextSibling === before)) {
              return;
          }
          if (!node.parentNode) {
              linkParent(node, this);
              insertIndex(node, this.children, this.children.indexOf(before), true);
              if (this.docId) {
                  registerNode(this.docId, node);
              }
              if (node.nodeType === 1) {
                  var pureBefore = nextElement(before);
                  var index = insertIndex(node, this.pureChildren, pureBefore ? this.pureChildren.indexOf(pureBefore) : this.pureChildren.length);
                  var taskCenter = getTaskCenter(this.docId);
                  if (taskCenter) {
                      return taskCenter.send('dom', { action: "addElement" /* ECTaskCenterDOMAction.AddElement */ }, [
                          this.ref,
                          node.toJSON(),
                          index ]);
                  }
              }
          }
          else {
              moveIndex(node, this.children, this.children.indexOf(before), true);
              if (node.nodeType === 1) {
                  var pureBefore = nextElement(before);
                  /* istanbul ignore next */
                  var index = moveIndex(node, this.pureChildren, pureBefore ? this.pureChildren.indexOf(pureBefore) : this.pureChildren.length);
                  var taskCenter = getTaskCenter(this.docId);
                  if (taskCenter && index >= 0) {
                      return taskCenter.send('dom', { action: "moveElement" /* ECTaskCenterDOMAction.MoveElement */ }, [node.ref, this.ref, index]);
                  }
              }
          }
      };
      /**
       * Insert a node after specified node.
       * @param {object} node
       * @param {object} after
       * @return {undefined | number} the signal sent by native
       */
      Element.prototype.insertAfter = function (node, after) {
          if (node.parentNode && node.parentNode !== this) {
              return;
          }
          if (node === after || (node.previousSibling && node.previousSibling === after)) {
              return;
          }
          if (!node.parentNode) {
              linkParent(node, this);
              insertIndex(node, this.children, this.children.indexOf(after) + 1, true);
              /* istanbul ignore else */
              if (this.docId) {
                  registerNode(this.docId, node);
              }
              if (node.nodeType === 1) {
                  var index = insertIndex(node, this.pureChildren, this.pureChildren.indexOf(previousElement(after)) + 1);
                  var taskCenter = getTaskCenter(this.docId);
                  /* istanbul ignore else */
                  if (taskCenter) {
                      return taskCenter.send('dom', { action: "addElement" /* ECTaskCenterDOMAction.AddElement */ }, [
                          this.ref,
                          node.toJSON(),
                          index ]);
                  }
              }
          }
          else {
              moveIndex(node, this.children, this.children.indexOf(after) + 1, true);
              if (node.nodeType === 1) {
                  var index = moveIndex(node, this.pureChildren, this.pureChildren.indexOf(previousElement(after)) + 1);
                  var taskCenter = getTaskCenter(this.docId);
                  if (taskCenter && index >= 0) {
                      return taskCenter.send('dom', { action: "moveElement" /* ECTaskCenterDOMAction.MoveElement */ }, [node.ref, this.ref, index]);
                  }
              }
          }
      };
      /**
       * Remove a child node, and decide whether it should be destroyed.
       * @param {object} node
       * @param {boolean} preserved
       */
      Element.prototype.removeChild = function (node, preserved) {
          if (node.parentNode) {
              removeIndex(node, this.children, true);
              if (node.nodeType === 1) {
                  removeIndex(node, this.pureChildren);
                  var taskCenter = getTaskCenter(this.docId);
                  if (taskCenter) {
                      taskCenter.send('dom', { action: "removeElement" /* ECTaskCenterDOMAction.RemoveElement */ }, [node.ref]);
                  }
              }
          }
          if (!preserved) {
              node.destroy();
          }
      };
      /**
       * Clear all child nodes.
       */
      Element.prototype.clear = function () {
          var taskCenter = getTaskCenter(this.docId);
          /* istanbul ignore else */
          if (taskCenter) {
              this.pureChildren.forEach(function (node) {
                  taskCenter.send('dom', { action: "removeElement" /* ECTaskCenterDOMAction.RemoveElement */ }, [node.ref]);
              });
          }
          this.children.forEach(function (node) {
              node.destroy();
          });
          this.children.length = 0;
          this.pureChildren.length = 0;
      };
      /**
       * Set an attribute, and decide whether the task should be send to native.
       * @param {string} key
       * @param {string | number} value
       * @param {boolean} silent
       */
      Element.prototype.setAttr = function (key, value, silent) {
          if (this.attr[key] === value && silent !== false) {
              return;
          }
          // 更新 id 记录
          if (key === 'id' && this.docId) {
              setIdInternal(this.attr[key], value, this.docId, this.nodeId);
          }
          this.attr[key] = value;
          var taskCenter = getTaskCenter(this.docId);
          if (!silent && taskCenter) {
              var result = {};
              if (!taskCenter.shouldEmitAttrUpdate(key)) {
                  return;
              }
              result[key] = value;
              taskCenter.send('dom', { action: "updateAttrs" /* ECTaskCenterDOMAction.UpdateAttrs */ }, [this.ref, result]);
          }
      };
      /**
       * Set batched attributes.
       * @param {object} batchedAttrs
       * @param {boolean} silent
       */
      Element.prototype.setAttrs = function (batchedAttrs, silent) {
          var this$1 = this;

          if (isEmpty(batchedAttrs)) {
              return;
          }
          var taskCenter = getTaskCenter(this.docId);
          if (taskCenter) {
              var mutations = {};
              for (var key in batchedAttrs) {
                  if (this$1.attr[key] !== batchedAttrs[key]) {
                      // 更新 id 记录
                      if (key === 'id' && this$1.docId) {
                          setIdInternal(this$1.attr[key], batchedAttrs[key], this$1.docId, this$1.nodeId);
                      }
                      this$1.attr[key] = batchedAttrs[key];
                      if (taskCenter.shouldEmitAttrUpdate(key)) {
                          mutations[key] = batchedAttrs[key];
                      }
                  }
              }
              if (!isEmpty(mutations)) {
                  if (!silent) {
                      taskCenter.send('dom', { action: "updateAttrs" /* ECTaskCenterDOMAction.UpdateAttrs */ }, [this.ref, mutations]);
                  }
              }
          }
          else {
              for (var key in batchedAttrs) {
                  if (this$1.attr[key] !== batchedAttrs[key]) {
                      // 更新 id 记录
                      if (key === 'id' && this$1.docId) {
                          setIdInternal(this$1.attr[key], batchedAttrs[key], this$1.docId, this$1.nodeId);
                      }
                      this$1.attr[key] = batchedAttrs[key];
                  }
              }
          }
      };
      /**
       * Set a style property, and decide whether the task should be send to native.
       * @param {string} key
       * @param {string | number} value
       * @param {boolean} silent
       */
      Element.prototype.setStyle = function (key, value, silent) {
          if (this.style[key] === value && silent !== false) {
              return;
          }
          this.style[key] = value;
          var taskCenter = getTaskCenter(this.docId);
          if (!silent && taskCenter) {
              var result = {};
              result[key] = value;
              taskCenter.send('dom', { action: "updateStyle" /* ECTaskCenterDOMAction.UpdateStyle */ }, [this.ref, result]);
          }
      };
      /**
       * Set batched style properties.
       * @param {object} batchedStyles
       * @param {boolean} silent
       */
      Element.prototype.setStyles = function (batchedStyles, silent) {
          var this$1 = this;

          if (isEmpty(batchedStyles)) {
              return;
          }
          var mutations = {};
          for (var key in batchedStyles) {
              if (this$1.style[key] !== batchedStyles[key]) {
                  this$1.style[key] = batchedStyles[key];
                  mutations[key] = batchedStyles[key];
              }
          }
          if (!isEmpty(mutations)) {
              var taskCenter = getTaskCenter(this.docId);
              if (!silent && taskCenter) {
                  taskCenter.send('dom', { action: "updateStyle" /* ECTaskCenterDOMAction.UpdateStyle */ }, [this.ref, mutations]);
              }
          }
      };
      /**
       * Set style properties from class.
       * @param {object} classStyle
       */
      Element.prototype.setClassStyle = function (classStyle) {
          var this$1 = this;

          // reset previous class style to empty string
          for (var key in this$1.classStyle) {
              this$1.classStyle[key] = '';
          }
          Object.assign(this.classStyle, classStyle);
          var taskCenter = getTaskCenter(this.docId);
          if (taskCenter) {
              taskCenter.send('dom', { action: "updateStyle" /* ECTaskCenterDOMAction.UpdateStyle */ }, [this.ref, this.toStyle()]);
          }
      };
      /**
       * Add an event handler.
       * @param {string} event type
       * @param {function} event handler
       */
      Element.prototype.addEvent = function (type, handler, params) {
          if (!this.event) {
              this.event = {};
          }
          if (!this.event[type]) {
              this.event[type] = { handler: handler, params: params };
              var taskCenter = getTaskCenter(this.docId);
              if (taskCenter) {
                  taskCenter.send('dom', { action: "addEvent" /* ECTaskCenterDOMAction.AddEvent */ }, [this.ref, type]);
              }
          }
      };
      /**
       * Remove an event handler.
       * @param {string} event type
       */
      Element.prototype.removeEvent = function (type) {
          if (this.event && this.event[type]) {
              delete this.event[type];
              var taskCenter = getTaskCenter(this.docId);
              if (taskCenter) {
                  taskCenter.send('dom', { action: "removeEvent" /* ECTaskCenterDOMAction.RemoveEvent */ }, [this.ref, type]);
              }
          }
      };
      /**
       * Fire an event manually.
       * @param {string} type type
       * @param {function} event handler
       * @param {boolean} isBubble whether or not event bubble
       * @param {boolean} options
       * @return {} anything returned by handler function
       */
      Element.prototype.fireEvent = function (type, event, isBubble, options) {
          var result = null;
          var isStopPropagation = false;
          var eventDesc = this.event[type];
          if (eventDesc && event) {
              var handler = eventDesc.handler;
              event.stopPropagation = function () {
                  isStopPropagation = true;
              };
              if (options && options.params) {
                  result = handler.call.apply(handler, __spreadArray(__spreadArray([this], options.params, false), [event], false));
              }
              else {
                  result = handler.call(this, event);
              }
          }
          if (!isStopPropagation &&
              isBubble &&
              BUBBLE_EVENTS.indexOf(type) !== -1 &&
              this.parentNode &&
              this.parentNode.fireEvent) {
              event.currentTarget = this.parentNode;
              this.parentNode.fireEvent(type, event, isBubble); // no options
          }
          return result;
      };
      /**
       * Get all styles of current element.
       * @return {object} style
       */
      Element.prototype.toStyle = function () {
          return Object.assign({}, this.classStyle, this.style);
      };
      /**
       * Convert current element to JSON like object.
       * @return {object} element
       */
      Element.prototype.toJSON = function () {
          var this$1 = this;

          var result = {
              ref: this.ref.toString(),
              type: this.type,
              attr: this.attr,
              style: this.toStyle(),
          };
          var event = [];
          for (var type in this$1.event) {
              var params = this$1.event[type].params;
              if (!params) {
                  event.push(type);
              }
              else {
                  event.push({ type: type, params: params });
              }
          }
          if (event.length) {
              result.event = event;
          }
          if (this.pureChildren.length) {
              result.children = this.pureChildren.map(function (child) { return child.toJSON(); });
          }
          return result;
      };
      /**
       * Convert to HTML element tag string.
       * @return {stirng} html
       */
      Element.prototype.toString = function () {
          return ('<' +
              this.type +
              ' attr=' +
              JSON.stringify(this.attr) +
              ' style=' +
              JSON.stringify(this.toStyle()) +
              '>' +
              this.pureChildren.map(function (child) { return child.toString(); }).join('') +
              '</' +
              this.type +
              '>');
      };
      return Element;
  }(Node));
  function setIdInternal(oldValue, newValue, docId, nodeId) {
      var doc = getDoc(docId);
      // 创建节点时的 setAttr 还没绑定 doc
      if (!doc) {
          return;
      }
      if (oldValue !== newValue) {
          if (oldValue) {
              delete doc.attrId2NodeIdMap[oldValue];
          }
          if (newValue) {
              doc.attrId2NodeIdMap[newValue] = nodeId;
          }
      }
  }
  if (!!global.Element) {
      setElement(global.Element);
  }
  else {
      setElement(Element$1);
  }

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  /**
   * Normalize a primitive value.
   * @param  {any}        v
   * @return {primitive}
   */
  function normalizePrimitive (v) {
    var type = typof(v);

    switch (type) {
      case 'Undefined':
      case 'Null':
        return ''

      case 'RegExp':
        return v.toString()
      case 'Date':
        return v.toISOString()

      case 'Number':
      case 'String':
      case 'Boolean':
      case 'Array':
      case 'Object':
        return v

      case 'ArrayBuffer':
        return {
          '@type': 'binary',
          dataType: type,
          base64: bufferToBase64(v)
        }

      case 'Int8Array':
      case 'Uint8Array':
      case 'Uint8ClampedArray':
      case 'Int16Array':
      case 'Uint16Array':
      case 'Int32Array':
      case 'Uint32Array':
      case 'Float32Array':
      case 'Float64Array':
        return {
          '@type': 'binary',
          dataType: type,
          base64: bufferToBase64(v.buffer)
        }

      default:
        return JSON.stringify(v)
    }
  }

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  var fallback = function () {};

  // The API of TaskCenter would be re-design.
  var TaskCenter = function TaskCenter (id, supportStyleSheet, sendTasks) {
    Object.defineProperty(this, 'instanceId', {
      enumerable: true,
      value: String(id)
    });
    Object.defineProperty(this, 'callbackManager', {
      enumerable: true,
      value: new CallbackManager(id)
    });
    fallback = sendTasks || function () {};
    this.batchQueue = [];
    this.batchTimer = null;
    // emit className when style_sheet supported
    if (supportStyleSheet) {
      this.shouldEmitAttrUpdate = this.shouldEmitAttrUpdate4StyleSheet;
    }
  };

  TaskCenter.prototype.callback = function callback (callbackId, data, ifKeepAlive) {
    return this.callbackManager.consume(callbackId, data, ifKeepAlive)
  };

  TaskCenter.prototype.registerHook = function registerHook () {
      var arguments$1 = arguments;

      var args = [], len = arguments.length;
      while ( len-- ) { args[ len ] = arguments$1[ len ]; }

    return (ref = this.callbackManager).registerHook.apply(ref, args)
      var ref;
  };

  TaskCenter.prototype.triggerHook = function triggerHook () {
      var arguments$1 = arguments;

      var args = [], len = arguments.length;
      while ( len-- ) { args[ len ] = arguments$1[ len ]; }

    return (ref = this.callbackManager).triggerHook.apply(ref, args)
      var ref;
  };

  TaskCenter.prototype.updateData = function updateData (componentId, newData, callback) {
    this.send('module', {
      module: 'dom',
      method: 'updateComponentData'
    }, [componentId, newData, callback]);
  };

  TaskCenter.prototype.destroyCallback = function destroyCallback () {
    return this.callbackManager.close()
  };

  /**
   * Normalize a value. Specially, if the value is a function, then generate a function id
   * and save it to `CallbackManager`, at last return the function id.
   * @param{any}      v
   * @return {primitive}
   */
  TaskCenter.prototype.normalize = function normalize (v, deep) {
      var this$1 = this;
      if ( deep === void 0 ) { deep = false; }

    var type = typof(v);
    if (v && v instanceof Element$1) {
      return v.ref
    }
    if (v && v._isVue && v.$el instanceof Element$1) {
      return v.$el.ref
    }
    if (type === 'Function') {
      return this.callbackManager.add(v).toString()
    }
    if (deep) {
      if (type === 'Object') {
        var object = {};
        for (var key in v) {
          object[key] = this$1.normalize(v[key], true);
        }
        return object
      }
      if (type === 'Array') {
        return v.map(function (item) { return this$1.normalize(item, true); })
      }
    }
    return normalizePrimitive(v)
  };

  TaskCenter.prototype.pushBatchDom = function pushBatchDom (action, args) {
      var this$1 = this;

    this.batchQueue.push([
      action,
      args
    ]);
    if (!this.batchTimer) {
      this.batchTimer = true;
      setTimeout(function () {
        var queue = this$1.batchQueue.slice();
        this$1.callBatchDoms(this$1.instanceId, {
          args: queue
        });
        this$1.batchQueue = [];
        this$1.batchTimer = null;
      }, 0);
    }
  };

  TaskCenter.prototype.shouldEmitAttrUpdate4StyleSheet = function shouldEmitAttrUpdate4StyleSheet (attrKey) {
    var ret = true;
    if (attrKey) {
      var firstLetter = attrKey[0];
      switch (firstLetter) {
        case 'd':
          if (/^data[A-Z]/.test(attrKey)) {
            ret = false;
          }
          break
      }
    }
    else {
      ret = false;
    }
    return ret
  };

  TaskCenter.prototype.shouldEmitAttrUpdate = function shouldEmitAttrUpdate (attrKey) {
    var ret = true;
    if (attrKey) {
      var firstLetter = attrKey[0];
      switch (firstLetter) {
        case 'i':
        case 'c':
        case 'd':
          if (attrKey === 'id' || attrKey === 'className' || /^data[A-Z]/.test(attrKey)) {
            ret = false;
          }
          break
      }
    }
    else {
      ret = false;
    }
    return ret
  };

  TaskCenter.prototype.send = function send (type, params, args, options) {
      var this$1 = this;

    var action = params.action;
      var component = params.component;
      var ref = params.ref;
      var module = params.module;
      var method = params.method;

    // normalize args and options
    args = args.map(function (arg) { return this$1.normalize(arg); });
    if (typof(options) === 'Object') {
      options = this.normalize(options, true);
    }

    switch (type) {
      case 'dom':
        // return this.pushBatchDom(action, args)
        if (getMacroTaskStatus() === 1 && action === 'updateStyle') {
          args[1]['-cubekit-priority'] = 1;
        }
        return this[action](this.instanceId, args)
      case 'component':
        return this.componentHandler(this.instanceId, ref, method, args, Object.assign({ component: component }, options))
      default:
        return this.moduleHandler(this.instanceId, module, method, args, options)
    }
  };

  TaskCenter.prototype.callDOM = function callDOM (action, args) {
    return this[action](this.instanceId, args)
  };

  TaskCenter.prototype.callComponent = function callComponent (ref, method, args, options) {
    return this.componentHandler(this.instanceId, ref, method, args, options)
  };

  TaskCenter.prototype.callModule = function callModule (module, method, args, options) {
    return this.moduleHandler(this.instanceId, module, method, args, options)
  };

  TaskCenter.prototype.callInitStyle = function callInitStyle (args) {
    return this.initPageStyleSheet(this.instanceId, args)
  };

  function init () {
    var DOM_METHODS = {
      batchDoms: global.callBatchDoms,
      createFinish: global.callCreateFinish,
      updateFinish: global.callUpdateFinish,
      refreshFinish: global.callRefreshFinish,

      createBody: global.callCreateBody,

      addElement: global.callAddElement,
      removeElement: global.callRemoveElement,
      moveElement: global.callMoveElement,
      updateAttrs: global.callUpdateAttrs,
      updateStyle: global.callUpdateStyle,

      addEvent: global.callAddEvent,
      removeEvent: global.callRemoveEvent
    };
    var proto = TaskCenter.prototype;

    var loop = function ( name ) {
      var method = DOM_METHODS[name];
      proto[name] = method ?
        function (id, args) { return method.apply(void 0, [ id ].concat( args )); } :
        function (id, args) { return fallback(id, [{ module: 'dom', method: name, args: args }], '-1'); };
    };

    for (var name in DOM_METHODS) { loop( name ); }

    proto.componentHandler = global.callNativeComponent ||
      (function (id, ref, method, args, options) { return fallback(id, [{ component: options.component, ref: ref, method: method, args: args }]); });

    proto.moduleHandler = global.callNativeModule ||
      (function (id, module, method, args) { return fallback(id, [{ module: module, method: method, args: args }]); });

    proto.initPageStyleSheet = global.callInitPageStyleSheet ||
      (function (id, args) { return fallback(id, [{ args: args }]); });
  }

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  function fireEvent (document, nodeId, type, event, domChanges, params) {
    var el = document.getRef(nodeId);
    if (el) {
      if (type === 'touchmove') {
        setMacroTaskStatus(1);
        var ret = document.fireEvent(el, type, event, domChanges, params);
        setMacroTaskStatus(0);
        return ret;
      }
      else {
        return document.fireEvent(el, type, event, domChanges, params)
      }

    }
    return new Error(("invalid element reference \"" + nodeId + "\""))
  }

  function callback (document, callbackId, data, ifKeepAlive) {
    return document.taskCenter.callback(callbackId, data, ifKeepAlive)
  }

  function componentHook (document, componentId, type, hook, args) {
    if (!document || !document.taskCenter) {
      console.error("[JS Framework] Can't find \"document\" or \"taskCenter\".");
      return null
    }
    var result = null;
    try {
      result = document.taskCenter.triggerHook(componentId, type, hook, args);
    }
    catch (e) {
      console.error(("[JS Framework] Failed to trigger the \"" + type + "@" + hook + "\" hook on " + componentId + "."));
    }
    return result
  }

  /**
   * Accept calls from native (event or callback).
   *
   * @param  {string} id
   * @param  {array} tasks list with `method` and `args`
   */
  function receiveTasks (id, tasks) {
    var document = getDoc(id);
    if (!document) {
      return new Error("[JS Framework] Failed to receiveTasks, "
        + "instance (" + id + ") is not available.")
    }
    if (Array.isArray(tasks)) {
      return tasks.map(function (task) {
        switch (task.method) {
          case 'callback': return callback.apply(void 0, [ document ].concat( task.args ))
          case 'fireEventSync':
          case 'fireEvent': return fireEvent.apply(void 0, [ document ].concat( task.args ))
          case 'componentHook': return componentHook.apply(void 0, [ document ].concat( task.args ))
        }
      })
    }
  }

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  var weexModules = {};

  /**
   * Register native modules information.
   * @param {object} newModules
   */
  function registerModules (newModules) {
    var loop = function ( name ) {
      if (!weexModules[name]) {
        weexModules[name] = {};
      }
      newModules[name].forEach(function (method) {
        if (typeof method === 'string') {
          weexModules[name][method] = true;
        }
        else {
          weexModules[name][method.name] = method.args;
        }
      });
    };

    for (var name in newModules) { loop( name ); }
  }

  /**
   * Check whether the module or the method has been registered.
   * @param {String} module name
   * @param {String} method name (optional)
   */
  function isRegisteredModule (name, method) {
    if (typeof method === 'string') {
      return !!(weexModules[name] && weexModules[name][method])
    }
    return !!weexModules[name]
  }

  function getModuleDescription (name) {
    return weexModules[name]
  }

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  function track (id, type, value) {
    var taskCenter = getTaskCenter(id);
    if (!taskCenter || typeof taskCenter.send !== 'function') {
      console.error("[JS Framework] Failed to create tracker!");
      return
    }
    if (!type || !value) {
      console.warn(("[JS Framework] Invalid track type (" + type + ") or value (" + value + ")"));
      return
    }
    var label = "jsfm." + type + "." + value;
    try {
      if (isRegisteredModule('userTrack', 'addPerfPoint')) {
        var message = Object.create(null);
        message[label] = '4';
        taskCenter.send('module', {
          module: 'userTrack',
          method: 'addPerfPoint'
        }, [message]);
      }
    }
    catch (err) {
      console.error(("[JS Framework] Failed to trace \"" + label + "\"!"));
    }
  }

  function error () {
    var arguments$1 = arguments;

    var messages = [], len = arguments.length;
    while ( len-- ) { messages[ len ] = arguments$1[ len ]; }

    if (typeof console.error === 'function') {
      console.error.apply(console, [ "[JS Framework] " ].concat( messages ));
    }
  }

  /**
   *
   * @param {Function} fn
   */
  var debug =  function (fn) { return nativeLog(fn()); } ;

  function info (str) {
    if (typeof nativeLog === 'function') {
      nativeLog(str);
    }
  }

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  var weexComponents = {};
  var customCubeComponents = [];

  /**
   * Register native components information.
   * @param {array} newComponents
   */
  function registerComponents (newComponents) {
    if (Array.isArray(newComponents)) {
      newComponents.forEach(function (component) {
        if (!component) {
          return
        }
        if (typeof component === 'string') {
          weexComponents[component] = true;
        }
        else if (typeof component === 'object' && typeof component.type === 'string') {
          if (component.group === 'custom') {
            if (!weexComponents[component.type]) {
              customCubeComponents.push(component);
            }
          }
          weexComponents[component.type] = component;
          registerElement(component.type, component.methods);
        }
      });
    }
  }

  function getCustomComponents () {
    return customCubeComponents
  }

  /**
   * Check whether the component has been registered.
   * @param {String} component name
   */
  function isRegisteredComponent (name) {
    return !!weexComponents[name]
  }

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  // JS Services

  var services = [];

  /**
   * Register a JavaScript service.
   * A JavaScript service options could have a set of lifecycle methods
   * for each Weex instance. For example: create, refresh, destroy.
   * For the JS framework maintainer if you want to supply some features
   * which need to work well in different Weex instances, even in different
   * frameworks separately. You can make a JavaScript service to init
   * its variables or classes for each Weex instance when it's created
   * and recycle them when it's destroyed.
   * @param {object} options Could have { create, refresh, destroy }
   *                         lifecycle methods. In create method it should
   *                         return an object of what variables or classes
   *                         would be injected into the Weex instance.
   */
  function register (name, options) {
    if (has(name)) {
      console.warn(("Service \"" + name + "\" has been registered already!"));
    }
    else {
      options = Object.assign({}, options);
      services.push({ name: name, options: options });
    }
  }

  /**
   * Unregister a JavaScript service by name
   * @param {string} name
   */
  function unregister (name) {
    services.some(function (service, index) {
      if (service.name === name) {
        services.splice(index, 1);
        return true
      }
    });
  }

  /**
   * Check if a JavaScript service with a certain name existed.
   * @param  {string}  name
   * @return {Boolean}
   */
  function has (name) {
    return indexOf(name) >= 0
  }

  /**
   * Find the index of a JavaScript service by name
   * @param  {string} name
   * @return {number}
   */
  function indexOf (name) {
    return services.map(function (service) { return service.name; }).indexOf(name)
  }

  /* global hasFeature */
  var FeatureManager = function FeatureManager (id) {
    this.id = id;
    this.cache = {};
    this.supportHasFeature = typeof hasFeature === 'function';
    this.hasFeature = this.hasFeature.bind(this);
  };
  FeatureManager.prototype.hasFeature = function hasFeature$1 (feature, version) {
      if ( version === void 0 ) { version = ''; }

    if (!this.supportHasFeature) {
      return false
    }
    return this.cache[feature] !== undefined
      ? this.cache[feature]
      : (this.cache[feature] = hasFeature(this.id, feature, version))
  };

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  /**
   * @fileOverview
   * Task handler for communication between javascript and native.
   */

  var handlerMap = {
    createBody: 'callCreateBody',
    addElement: 'callAddElement',
    removeElement: 'callRemoveElement',
    moveElement: 'callMoveElement',
    updateAttrs: 'callUpdateAttrs',
    updateStyle: 'callUpdateStyle',
    addEvent: 'callAddEvent',
    removeEvent: 'callRemoveEvent'
  };

  /**
   * Create a task handler.
   * @param {string} id
   * @param {function} handler
   * @return {function} taskHandler
   */
  function createHandler (id, handler) {
    var defaultHandler = handler || global.callNative;

    /* istanbul ignore if */
    if (typeof defaultHandler !== 'function') {
      console.error('[JS Runtime] no default handler');
    }

    return function taskHandler (tasks) {
      /* istanbul ignore if */
      if (!Array.isArray(tasks)) {
        tasks = [tasks];
      }
      for (var i = 0; i < tasks.length; i++) {
        var returnValue = dispatchTask(id, tasks[i], defaultHandler);
        if (returnValue === -1) {
          return returnValue
        }
      }
    }
  }

  /**
   * Check if there is a corresponding available handler in the environment.
   * @param {string} module
   * @param {string} method
   * @return {boolean}
   */
  function hasAvailableHandler (module, method) {
    return module === 'dom'
      && handlerMap[method]
      && typeof global[handlerMap[method]] === 'function'
  }

  /**
   * Dispatch the task to the specified handler.
   * @param {string} id
   * @param {object} task
   * @param {function} defaultHandler
   * @return {number} signal returned from native
   */
  function dispatchTask (id, task, defaultHandler) {
    var module = task.module;
    var method = task.method;
    var args = task.args;

    if (hasAvailableHandler(module, method)) {
      return global[handlerMap[method]].apply(global, [ id ].concat( args, ['-1'] ))
    }

    return defaultHandler(id, [task], '-1')
  }

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  /**
  * Create the action object.
  * @param {string} name
  * @param {array} arguments
  * @return {object} action
  */
  function createAction (name, args) {
    if ( args === void 0 ) { args = []; }

    return { module: 'dom', method: name, args: args }
  }

  var Listener = function Listener (id, handler) {
    this.id = id;
    this.batched = false;
    this.updates = [];
    if (typeof handler === 'function') {
      Object.defineProperty(this, 'handler', {
        configurable: true,
        enumerable: true,
        writable: true,
        value: handler
      });
    }
    else {
      console.error('[JS Runtime] invalid parameter, handler must be a function');
    }
  };

  /**
   * Send the "createFinish" signal.
   * @param {function} callback
   * @return {undefined | number} the signal sent by native
   */
  Listener.prototype.createFinish = function createFinish (callback) {
    var handler = this.handler;
    return handler([createAction('createFinish')], callback)
  };

  /**
   * Send the "updateFinish" signal.
   * @param {function} callback
   * @return {undefined | number} the signal sent by native
   */
  Listener.prototype.updateFinish = function updateFinish (callback) {
    var handler = this.handler;
    return handler([createAction('updateFinish')], callback)
  };

  /**
   * Send the "refreshFinish" signal.
   * @param {function} callback
   * @return {undefined | number} the signal sent by native
   */
  Listener.prototype.refreshFinish = function refreshFinish (callback) {
    var handler = this.handler;
    return handler([createAction('refreshFinish')], callback)
  };

  /**
   * Send the "createBody" signal.
   * @param {object} element
   * @return {undefined | number} the signal sent by native
   */
  Listener.prototype.createBody = function createBody (element) {
    var body = element.toJSON();
    var children = body.children;
    delete body.children;
    var actions = [createAction('createBody', [body])];
    if (children) {
      actions.push.apply(actions, children.map(function (child) {
        return createAction('addElement', [body.ref, child, -1])
      }));
    }
    return this.addActions(actions)
  };

  /**
   * Send the "addElement" signal.
   * @param {object} element
   * @param {stirng} reference id
   * @param {number} index
   * @return {undefined | number} the signal sent by native
   */
  Listener.prototype.addElement = function addElement (element, ref, index) {
    if (!(index >= 0)) {
      index = -1;
    }
    return this.addActions(createAction('addElement', [ref, element.toJSON(), index]))
  };

  /**
   * Send the "removeElement" signal.
   * @param {stirng} reference id
   * @return {undefined | number} the signal sent by native
   */
  Listener.prototype.removeElement = function removeElement (ref) {
    if (Array.isArray(ref)) {
      var actions = ref.map(function (r) { return createAction('removeElement', [r]); });
      return this.addActions(actions)
    }
    return this.addActions(createAction('removeElement', [ref]))
  };

  /**
   * Send the "moveElement" signal.
   * @param {stirng} target reference id
   * @param {stirng} parent reference id
   * @param {number} index
   * @return {undefined | number} the signal sent by native
   */
  Listener.prototype.moveElement = function moveElement (targetRef, parentRef, index) {
    return this.addActions(createAction('moveElement', [targetRef, parentRef, index]))
  };

  /**
   * Send the "updateAttrs" signal.
   * @param {stirng} reference id
   * @param {stirng} key
   * @param {stirng} value
   * @return {undefined | number} the signal sent by native
   */
  Listener.prototype.setAttr = function setAttr (ref, key, value) {
    var result = {};
    result[key] = value;
    return this.addActions(createAction('updateAttrs', [ref, result]))
  };

  /**
   * Send the "updateStyle" signal, update a sole style.
   * @param {stirng} reference id
   * @param {stirng} key
   * @param {stirng} value
   * @return {undefined | number} the signal sent by native
   */
  Listener.prototype.setStyle = function setStyle (ref, key, value) {
    var result = {};
    result[key] = value;
    return this.addActions(createAction('updateStyle', [ref, result]))
  };

  /**
   * Send the "updateStyle" signal.
   * @param {stirng} reference id
   * @param {object} style
   * @return {undefined | number} the signal sent by native
   */
  Listener.prototype.setStyles = function setStyles (ref, style) {
    return this.addActions(createAction('updateStyle', [ref, style]))
  };

  /**
   * Send the "addEvent" signal.
   * @param {stirng} reference id
   * @param {string} event type
   * @return {undefined | number} the signal sent by native
   */
  Listener.prototype.addEvent = function addEvent (ref, type) {
    return this.addActions(createAction('addEvent', [ref, type]))
  };

  /**
   * Send the "removeEvent" signal.
   * @param {stirng} reference id
   * @param {string} event type
   * @return {undefined | number} the signal sent by native
   */
  Listener.prototype.removeEvent = function removeEvent (ref, type) {
    return this.addActions(createAction('removeEvent', [ref, type]))
  };

  /**
   * Default handler.
   * @param {object | array} actions
   * @param {function} callback
   * @return {} anything returned by callback function
   */
  Listener.prototype.handler = function handler (actions, cb) {
    return cb && cb()
  };

  /**
   * Add actions into updates.
   * @param {object | array} actions
   * @return {undefined | number} the signal sent by native
   */
  Listener.prototype.addActions = function addActions (actions) {
    var updates = this.updates;
    var handler = this.handler;

    if (!Array.isArray(actions)) {
      actions = [actions];
    }

    if (this.batched) {
      updates.push.apply(updates, actions);
    }
    else {
      return handler(actions)
    }
  };

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */
  var Comment = /** @class */ (function (_super) {
      __extends(Comment, _super);
      function Comment(value) {
          var _this = _super.call(this) || this;
          _this.nodeType = 8 /* ICNodeType.Comment */;
          _this.type = 'comment';
          _this.value = value || '';
          _this.textContent = value || '';
          // Node 已经初始化了
          _this.nodeId = uniqueId();
          _this.ref = _this.nodeId;
          return _this;
          // this.children = []
          // this.pureChildren = []
      }
      /**
       * Convert to HTML comment string.
       * @return {stirng} html
       */
      Comment.prototype.toString = function () {
          return '<!-- ' + this.value + ' -->';
      };
      return Comment;
  }(Node));

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */
  /**
   * Update all changes for an element.
   * @param {object} element
   * @param {object} changes
   */
  function updateElement(el, changes) {
      var attrs = changes.attrs || {};
      for (var name in attrs) {
          if (attrs.hasOwnProperty(name)) {
              el.setAttr(name, attrs[name], true);
          }
      }
      var style = changes.style || {};
      for (var name in style) {
          if (style.hasOwnProperty(name)) {
              el.setStyle(name, style[name], true);
          }
      }
  }
  var Document = /** @class */ (function () {
      function Document(id, url, handler) {
          id = id ? id.toString() : '';
          this.id = id;
          this.URL = url;
          addDoc(id, this);
          this.nodeMap = {};
          this.attrId2NodeIdMap = Object.create(null);
          var L = Document.Listener || Listener;
          this.listener = new L(id, handler || createHandler(id, Document.handler)); // deprecated
          this.featureManager = new FeatureManager(id);
          var supportStyleSheet = this.featureManager.hasFeature('style_sheet');
          this.taskCenter = new TaskCenter(id, supportStyleSheet, handler ? function (_) {
              var arguments$1 = arguments;

              var args = [];
              for (var _i = 1; _i < arguments.length; _i++) {
                  args[_i - 1] = arguments$1[_i];
              }
              return handler.apply(void 0, args);
          } : Document.handler);
          this.createDocumentElement();
      }
      Document.prototype.getRef = function (ref) {
          return this.nodeMap[ref];
      };
      Document.prototype.getRefsByAttrClassName = function (attrClassName) {
          var refs = [];
          if (attrClassName && this.body) {
              var reClassName = new RegExp("(^|\\s)".concat(attrClassName, "($|\\s)"));
              var virtualStack = [this.body];
              // 从 root 开始 BFS 一遍，然后把符合的节点全都塞进去
              while (virtualStack.length) {
                  var top = virtualStack.pop();
                  if (top) {
                      // 先看下自己
                      var className = top && top.attr && top.attr.className;
                      if (className && reClassName.test(className)) {
                          refs.push(top.ref);
                      }
                      // 然后把 孩子全塞进去
                      if (Array.isArray(top.pureChildren)) {
                          // 反向拼接一次
                          virtualStack = virtualStack.concat(top.pureChildren.slice().reverse());
                      }
                  }
              }
          }
          return refs;
      };
      Document.prototype.getRefByAttrId = function (attrId) {
          var nodeId = this.attrId2NodeIdMap[attrId];
          if (nodeId) {
              return this.getRef(nodeId);
          }
      };
      /**
       * Turn on batched updates.
       */
      Document.prototype.open = function () {
          this.listener.batched = false;
      };
      /**
       * Turn off batched updates.
       */
      Document.prototype.close = function () {
          this.listener.batched = true;
      };
      /**
       * Create the document element.
       * @return {object} documentElement
       */
      Document.prototype.createDocumentElement = function () {
          var _this = this;
          if (!this.documentElement) {
              var el = new Element$1('document');
              el.docId = this.id;
              el.ownerDocument = this;
              el.role = 'documentElement';
              el.depth = 0;
              el.ref = '_documentElement';
              this.nodeMap._documentElement = el;
              this.documentElement = el;
              Object.defineProperty(el, 'appendChild', {
                  configurable: true,
                  enumerable: true,
                  value: function (node) {
                      appendBody(_this, node);
                  },
                  writable: true,
              });
              Object.defineProperty(el, 'insertBefore', {
                  configurable: true,
                  enumerable: true,
                  value: function (node, before) {
                      appendBody(_this, node, before);
                  },
                  writable: true,
              });
          }
          return this.documentElement;
      };
      Document.prototype.mountBody = function (el) {
          // this.documentElement.appendChild(el);
      };
      /**
       * Create the body element.
       * @param {string} type
       * @param {objct} props
       * @return {object} body element
       */
      Document.prototype.createBody = function (type, props) {
          return this.documentElement.body;
      };
      /**
       * Create an element.
       * @param {string} tagName
       * @param {objct} props
       * @return {object} element
       */
      Document.prototype.createElement = function (tagName, props) {
          return new Element$1(tagName, props);
      };
      /**
       * Create an comment.
       * @param {string} text
       * @return {object} comment
       */
      Document.prototype.createComment = function (text) {
          return new Comment(text);
      };
      /**
       * cube属性下沉项目新增接口
       * @param {any} stylesheet
       * @return {void}
       */
      Document.prototype.addPageStyle = function (stylesheet) {
          this.taskCenter.callInitStyle(stylesheet);
      };
      /**
       * Fire an event on specified element manually.
       * @param {object} element
       * @param {string} event type
       * @param {object} event object
       * @param {object} dom changes
       * @param {object} options
       * @return {} anything returned by handler function
       */
      Document.prototype.fireEvent = function (el, type, nativeEvent, domChanges, options) {
          if (!el) {
              return;
          }
          var event = (nativeEvent || {});
          event.type = event.type || type;
          event.target = el;
          event.currentTarget = el;
          event.timestamp = Date.now();
          if (domChanges) {
              updateElement(el, domChanges);
          }
          var isBubble = this.getRef('_root').attr.bubble === 'true';
          return el.fireEvent(type, event, isBubble, options);
      };
      /**
       * Destroy current document, and remove itself form docMap.
       */
      Document.prototype.destroy = function () {
          this.taskCenter.destroyCallback();
          delete this.listener;
          delete this.nodeMap;
          delete this.attrId2NodeIdMap;
          delete this.taskCenter;
          removeDoc(this.id);
      };
      return Document;
  }());
  // default task handler
  Document.handler = null;

  var wrapAttr = function(el) {
el.setAttr = function(k, v) {
                this.setAttribute(k, v.toString());
              };
              el.setAttrs = function(a) {
                for(var i in a)
                  this.setAttribute(i, a[i].toString());
              };
              el.setStyle = function() {};
              el.setStyles = function() {};
              el.addEvent = function() {};
  };

  var NativeDocument = /** @class */ (function (_super) {
      __extends(NativeDocument, _super);
      function NativeDocument() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      NativeDocument.createDocument = function (id, url, handler) {
          if (true) {
              return new NativeDocument(id, url, handler);
          }
          else {
              return new Document(id, url, handler);
          }
      };
      NativeDocument.prototype.addPageStyle = function (stylesheet) {
          // this.taskCenter.callInitStyle(stylesheet);
          var ss = this.documentElement.createElement('style');
          ss.textContent = stylesheet;
          this.documentElement.head.appendChild(ss);
      };

      NativeDocument.prototype.createDocumentElement = function () {
          if (!this.documentElement) {
              var el = global.document.implementation.createDocument(this.id);
              el.docId = this.id;
              el.ownerDocument = this;
              el.role = 'documentElement';
              el.depth = 0;
              el.ref = '_documentElement';
              this.nodeMap._documentElement = el;
              this.nodeMap[el.nodeId] = el;
              this.documentElement = el;
          }
          return this.documentElement;
      };
      NativeDocument.prototype.mountBody = function (el) {
          // _super.prototype.mountBody.call(this, el);
          this.nodeMap._root = el;
      };
      NativeDocument.prototype.createBody = function (type, props) {
          if (!this.body) {
              var el = this.documentElement.body;
              el.docId = this.id;
              wrapAttr(el);
              setBody(this, el);
          }
          return this.body;
      };
      NativeDocument.prototype.createElement = function (tagName, props) {
        if (tagName == "view") tagName = "div";
        if (tagName == "text") tagName = "span";
        if (tagName == "image") tagName = "img";
        if (tagName == "body") tagName = "div";
              if (tagName == "scroller") tagName = "div";
              if (tagName == "root") tagName = "div"
          var element = this.documentElement.createElement(tagName);
        if (tagName == "span") {
          var content = this.documentElement.createTextNode('');
          element.appendChild(content);
        }
        wrapAttr(element);
          this.nodeMap[element.nodeId] = element;
          element.docId = this.id;
          return element;
      };
      NativeDocument.prototype.createComment = function (text) {
          var element = this.documentElement.createComment(text);
          // var element = new global.Element('comment', this.documentElement);
          this.nodeMap[element.nodeId] = element;
          element.docId = this.id;
          wrapAttr(element);
          return element;
      };
      return NativeDocument;
  }(Document));

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  var moduleProxies = {};

  function setId (weex, id) {
    Object.defineProperty(weex, '[[CurrentInstanceId]]', { value: id });
  }

  function getId (weex) {
    return weex['[[CurrentInstanceId]]']
  }

  function moduleGetter (id, module, method) {
    var taskCenter = getTaskCenter(id);
    if (!taskCenter || typeof taskCenter.send !== 'function') {
      console.error(("[JS Framework] Failed to find taskCenter (" + id + ")."));
      return null
    }
    return function () {
      var arguments$1 = arguments;

      var args = [], len = arguments.length;
      while ( len-- ) { args[ len ] = arguments$1[ len ]; }

      return taskCenter.send('module', { module: module, method: method }, args);
    }
  }

  function moduleSetter (id, module, method, fn) {
    var taskCenter = getTaskCenter(id);
    if (!taskCenter || typeof taskCenter.send !== 'function') {
      console.error(("[JS Framework] Failed to find taskCenter (" + id + ")."));
      return null
    }
    if (typeof fn !== 'function') {
      console.error(("[JS Framework] " + module + "." + method + " must be assigned as a function."));
      return null
    }
    return function (fn) { return taskCenter.send('module', { module: module, method: method }, [fn]); }
  }

  var WeexInstance = function WeexInstance (id, config) {
    setId(this, String(id));
    this.config = config || {};
    this.document = NativeDocument.createDocument(id, this.config.bundleUrl);
    this.requireModule = this.requireModule.bind(this);
    this.importScript = this.importScript.bind(this);
    this.isRegisteredModule = isRegisteredModule;
    this.isRegisteredComponent = isRegisteredComponent;
  };

  WeexInstance.prototype.requireModule = function requireModule (moduleName) {
    var id = getId(this);
    if (!(id && this.document && this.document.taskCenter)) {
      console.error("[JS Framework] Failed to requireModule(\"" + moduleName + "\"), "
        + "instance (" + id + ") doesn't exist anymore.");
      return
    }

    // warn for unknown module
    if (!isRegisteredModule(moduleName)) {
      console.warn(("[JS Framework] using unregistered weex module \"" + moduleName + "\""));
      return
    }

    // create new module proxy
    var proxyName = moduleName + "#" + id;
    if (!moduleProxies[proxyName]) {
      // create registered module apis
      var moduleDefine = getModuleDescription(moduleName);
      var moduleApis = {};
      var loop = function ( methodName ) {
        Object.defineProperty(moduleApis, methodName, {
          enumerable: true,
          configurable: true,
          get: function () { return moduleGetter(id, moduleName, methodName); },
          set: function (fn) { return moduleSetter(id, moduleName, methodName, fn); }
        });
      };

        for (var methodName in moduleDefine) { loop( methodName ); }

      // create module Proxy
      // if (typeof Proxy === 'function') {
      // moduleProxies[proxyName] = new Proxy(moduleApis, {
      //   get (target, methodName) {
      //     if (methodName in target) {
      //       return target[methodName]
      //     }
      //     console.warn(`[JS Framework] using unregistered method "${moduleName}.${methodName}"`)
      //     return moduleGetter(id, moduleName, methodName)
      //   }
      // })
      // }
      moduleProxies[proxyName] = moduleApis;
    }

    return moduleProxies[proxyName]
  };

  WeexInstance.prototype.supports = function supports (condition) {
    if (typeof condition !== 'string') { return null }

    var res = condition.match(/^@(\w+)\/([\w-]+)(\.(\w+))?$/i);
    if (res) {
      var type = res[1];
      var name = res[2];
      var method = res[4];
      switch (type) {
        case 'module': return isRegisteredModule(name, method)
        case 'component': return isRegisteredComponent(name)
      }
    }

    return null
  };

  WeexInstance.prototype.importScript = function importScript (src, options) {
      if ( options === void 0 ) { options = {}; }

    var id = getId(this);
    var taskCenter = getTaskCenter(id);
    return new Promise(function (resolve, reject) {
      if (!taskCenter || typeof taskCenter.send !== 'function') {
        reject(new Error("[JS Framework] Failed to import script \"" + src + "\", "
          + "no taskCenter (" + id + ") matched."));
      }
      try {
        taskCenter.send('module', {
          module: 'script',
          method: 'importScript'
        }, [src, options], {
          callback: [
            function (result) { return resolve(result); },
            function (error) { return reject(error); }
          ]
        });
      }
      catch (e) {
        reject(e);
      }
    })
  };

  (typeof nativeLog === 'function' ? nativeLog : function (s) {})('[APPX] cube-native-worker: 2.8.0:2022-08-30 11:22');

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics$1 = function(d, b) {
      extendStatics$1 = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) { if (Object.prototype.hasOwnProperty.call(b, p)) { d[p] = b[p]; } } };
      return extendStatics$1(d, b);
  };

  function __extends$1(d, b) {
      if (typeof b !== "function" && b !== null)
          { throw new TypeError("Class extends value " + String(b) + " is not a constructor or null"); }
      extendStatics$1(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  var __assign = function() {
      __assign = Object.assign || function __assign(t) {
          var arguments$1 = arguments;

          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments$1[i];
              for (var p in s) { if (Object.prototype.hasOwnProperty.call(s, p)) { t[p] = s[p]; } }
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };

  function __rest(s, e) {
      var t = {};
      for (var p in s) { if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          { t[p] = s[p]; } }
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          { for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  { t[p[i]] = s[p[i]]; }
          } }
      return t;
  }

  function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }

  function __generator(thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) { throw t[1]; } return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) { throw new TypeError("Generator is already executing."); }
          while (_) { try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) { return t; }
              if (y = 0, t) { op = [op[0] & 2, t.value]; }
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) { _.ops.pop(); }
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; } }
          if (op[0] & 5) { throw op[1]; } return { value: op[0] ? op[1] : void 0, done: true };
      }
  }

  function __values(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) { return m.call(o); }
      if (o && typeof o.length === "number") { return {
          next: function () {
              if (o && i >= o.length) { o = void 0; }
              return { value: o && o[i++], done: !o };
          }
      }; }
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }

  function __spreadArray$1(to, from, pack) {
      if (pack || arguments.length === 2) { for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
              if (!ar) { ar = Array.prototype.slice.call(from, 0, i); }
              ar[i] = from[i];
          }
      } }
      return to.concat(ar || Array.prototype.slice.call(from));
  }

  // tslint:disable only-arrow-functions
  function toObject(val) {
      if (val === null || val === undefined) {
          throw new TypeError('Object.assign cannot be called with null or undefined');
      }
      return Object(val);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var objectAssign = Object.assign ||
      function (target, source) {
          var arguments$1 = arguments;

          var from;
          var to = toObject(target);
          for (var s = 1; s < arguments.length; s++) {
              from = Object(arguments$1[s]);
              for (var key in from) {
                  if (hasOwnProperty.call(from, key)) {
                      to[key] = from[key];
                  }
              }
          }
          return to;
      };

  // tslint:disable
  function strictUriEncode (str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
          return '%' + c.charCodeAt(0).toString(16).toUpperCase();
      });
  }

  // tslint:disable
  function encoderForArrayFormat(opts) {
      switch (opts.arrayFormat) {
          case 'index':
              return function (key, value, index) {
                  return value === null
                      ? [encode(key, opts), '[', index, ']'].join('')
                      : [encode(key, opts), '[', encode(index, opts), ']=', encode(value, opts)].join('');
              };
          case 'bracket':
              return function (key, value) {
                  return value === null ? encode(key, opts) : [encode(key, opts), '[]=', encode(value, opts)].join('');
              };
          default:
              return function (key, value) {
                  return value === null ? encode(key, opts) : [encode(key, opts), '=', encode(value, opts)].join('');
              };
      }
  }
  function parserForArrayFormat(opts) {
      var result;
      switch (opts.arrayFormat) {
          case 'index':
              return function (key, value, accumulator) {
                  result = /\[(\d*)\]$/.exec(key);
                  key = key.replace(/\[\d*\]$/, '');
                  if (!result) {
                      accumulator[key] = value;
                      return;
                  }
                  if (accumulator[key] === undefined) {
                      accumulator[key] = {};
                  }
                  accumulator[key][result[1]] = value;
              };
          case 'bracket':
              return function (key, value, accumulator) {
                  result = /(\[\])$/.exec(key);
                  key = key.replace(/\[\]$/, '');
                  if (!result) {
                      accumulator[key] = value;
                      return;
                  }
                  else if (accumulator[key] === undefined) {
                      accumulator[key] = [value];
                      return;
                  }
                  accumulator[key] = [].concat(accumulator[key], value);
              };
          default:
              return function (key, value, accumulator) {
                  if (accumulator[key] === undefined) {
                      accumulator[key] = value;
                      return;
                  }
                  accumulator[key] = [].concat(accumulator[key], value);
              };
      }
  }
  function decode(value, opts) {
      if (opts.decode) {
          return decodeURIComponent(value);
      }
      return value;
  }
  function encode(value, opts) {
      if (opts.encode) {
          return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
      }
      return value;
  }
  function keysSorter(input) {
      if (Array.isArray(input)) {
          return input.sort();
      }
      else if (typeof input === 'object') {
          return keysSorter(Object.keys(input))
              .sort(function (a, b) {
              return Number(a) - Number(b);
          })
              .map(function (key) {
              return input[key];
          });
      }
      return input;
  }
  function parse(str, opts) {
      opts = objectAssign({ decode: true, arrayFormat: 'none' }, opts);
      var formatter = parserForArrayFormat(opts);
      // Create an object with no prototype
      // https://github.com/sindresorhus/query-string/issues/47
      var ret = Object.create(null);
      if (typeof str !== 'string') {
          return ret;
      }
      str = str.trim().replace(/^(\?|#|&)/, '');
      if (!str) {
          return ret;
      }
      str.split('&').forEach(function (param) {
          var parts = param.replace(/\+/g, ' ').split('=');
          // Firefox (pre 40) decodes `%3D` to `=`
          // https://github.com/sindresorhus/query-string/pull/37
          var key = parts.shift();
          var val = parts.length > 0 ? parts.join('=') : undefined;
          // missing `=` should be `null`:
          // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
          val = val === undefined ? null : decode(val, opts);
          formatter(decode(key, opts), val, ret);
      });
      return Object.keys(ret)
          .sort()
          .reduce(function (result, key) {
          var val = ret[key];
          if (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {
              // Sort object keys, not values
              result[key] = keysSorter(val);
          }
          else {
              result[key] = val;
          }
          return result;
      }, Object.create(null));
  }
  function stringify(obj, opts) {
      var defaults = {
          encode: true,
          strict: true,
          arrayFormat: 'none',
      };
      opts = objectAssign(defaults, opts);
      var formatter = encoderForArrayFormat(opts);
      return obj
          ? Object.keys(obj)
              .sort()
              .map(function (key) {
              var val = obj[key];
              if (val === undefined) {
                  return '';
              }
              if (val === null) {
                  return encode(key, opts);
              }
              if (Array.isArray(val)) {
                  var result_1 = [];
                  val.slice().forEach(function (val2) {
                      if (val2 === undefined) {
                          return;
                      }
                      result_1.push(formatter(key, val2, result_1.length));
                  });
                  return result_1.join('&');
              }
              return encode(key, opts) + '=' + encode(val, opts);
          })
              .filter(function (x) {
              return x.length > 0;
          })
              .join('&')
          : '';
  }

  var FunctionApply = /*#__PURE__*/ Function.prototype.apply.call.bind(Function.prototype.apply);
  function functionCall(fn, thisContext) {
      var arguments$1 = arguments;

      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
          args[_i - 2] = arguments$1[_i];
      }
      return FunctionApply(fn, thisContext, args);
  }
  function functionApply(fn, thisContext, args) {
      return FunctionApply(fn, thisContext, args);
  }
  function methodCall(fn, thisContext) {
      var arguments$1 = arguments;

      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
          args[_i - 2] = arguments$1[_i];
      }
      if (typeof fn === 'function') {
          if (!FunctionApply) {
              FunctionApply = Function.prototype.apply.call.bind(Function.prototype.apply);
          }
          return FunctionApply(fn, thisContext, args);
      }
      else {
          // 说明是普通对象 .call 被错误替换，改回来
          return fn.call.apply(fn, __spreadArray$1([thisContext], args, false));
      }
  }
  function methodApply(fn, thisContext, args) {
      if (typeof fn === 'function') {
          if (!FunctionApply) {
              FunctionApply = Function.prototype.apply.call.bind(Function.prototype.apply);
          }
          return FunctionApply(fn, thisContext, args);
      }
      else {
          // 说明是普通对象 .apply 被错误替换，改回来
          return fn.apply(thisContext, args);
      }
  }

  /**
   * 频率控制 返回函数连续调用时，func 执行频率限定为 次 / wait
   *
   * @param  {function}   func      传入函数
   * @param  {number}     wait      表示时间窗口的间隔
   * @param  {object}     options   如果想忽略开始边界上的调用，传入{leading: false}。
   *                                如果想忽略结尾边界上的调用，传入{trailing: false}
   * @return {function}             返回客户调用函数
   */
  function throttle(func, wait, setTimeout, clearTimeout, options) {
      var timeout = null;
      var args;
      var result;
      // 上次执行时间点
      var previous = 0;
      if (!options) {
          options = {};
      }
      // 延迟执行函数
      var later = function () {
          // 若设定了开始边界不执行选项，上次执行时间始终为0
          previous = options.leading === false ? 0 : Date.now();
          timeout = null;
          result = functionApply(func, null, args);
          args = null;
      };
      return function () {
          var arguments$1 = arguments;

          var argsArray = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              argsArray[_i] = arguments$1[_i];
          }
          var now = Date.now();
          // 首次执行时，如果设定了开始边界不执行选项，将上次执行时间设定为当前时间。
          if (!previous && options.leading === false) {
              previous = now;
          }
          // 延迟执行时间间隔
          var remaining = wait - (now - previous);
          args = argsArray;
          // 延迟时间间隔remaining小于等于0，表示上次执行至此所间隔时间已经超过一个时间窗口
          // remaining大于时间窗口wait，表示客户端系统时间被调整过
          if (remaining <= 0 || remaining > wait) {
              clearTimeout(timeout);
              timeout = null;
              previous = now;
              result = functionApply(func, null, args);
              args = null;
              // 如果延迟执行不存在，且没有设定结尾边界不执行选项
          }
          else if (!timeout && options.trailing !== false) {
              timeout = setTimeout(later, remaining);
          }
          return result;
      };
  }

  /**
   * @namespace @alipay/appx
   * @copyright @chengyu
   */
  function objectKeys(obj) {
      if (obj && typeof obj === 'object') {
          return Object.keys(obj);
      }
      return [];
  }

  function toString(obj) {
      if (obj !== null && typeof obj === 'object') {
          if (typeof obj.toString === 'function') {
              return String(obj);
          }
          else {
              return '';
          }
      }
      return String(obj);
  }
  function escapeLogParamsWithNested(params, nestedKeys) {
      if (!params) {
          return '';
      }
      if (typeof params === 'string') {
          return params;
      }
      return objectKeys(params)
          .map(function (key) {
          var escaped = "".concat(key, "=");
          if (nestedKeys.indexOf(key) >= 0) {
              escaped += JSON.stringify(params[key]).replace(/,/g, ';').replace(/\^/g, '@').replace(/\=/g, '~');
          }
          else {
              escaped += toString(params[key]).replace(/,/g, ';').replace(/\^/g, '@').replace(/\=/g, '~');
          }
          return escaped;
      })
          .join('^');
  }
  function escapeLogParams(params) {
      if (!params) {
          return '';
      }
      if (typeof params === 'string') {
          return params;
      }
      return objectKeys(params)
          .map(function (key) {
          var escaped = "".concat(key, "=");
          escaped += toString(params[key]).replace(/,/g, ';').replace(/\^/g, '@').replace(/\=/g, '~');
          return escaped;
      })
          .join('^');
  }

  function getMapPolyfillConstructor() {
      var Map = /** @class */ /*#__PURE__*/ (function () {
          function Map() {
              this.keyList = [];
              this.valueList = [];
          }
          Map.prototype.set = function (key, value) {
              var keyList = this.keyList;
              var index = keyList.indexOf(key);
              if (index === -1) {
                  var itemIndex = keyList.push(key) - 1;
                  this.valueList[itemIndex] = value;
              }
              else {
                  this.valueList[index] = value;
              }
              return this;
          };
          Map.prototype.get = function (key) {
              var index = this.keyList.indexOf(key);
              if (index === -1) {
                  return;
              }
              else {
                  return this.valueList[index];
              }
          };
          /**
           * @TODO: forEach 中间有人 delete 怎么办
           * @param cb
           */
          Map.prototype.forEach = function (cb) {
              var this$1 = this;

              var keyList = this.keyList.slice();
              var valueList = this.valueList.slice();
              var length = keyList.length;
              for (var i = 0; i < length; i++) {
                  var key = keyList[i];
                  var value = valueList[i];
                  cb(value, key, this$1);
              }
          };
          Object.defineProperty(Map.prototype, "size", {
              get: function () {
                  return this.keyList.length;
              },
              enumerable: false,
              configurable: true
          });
          Map.prototype.has = function (key) {
              return this.keyList.indexOf(key) !== -1;
          };
          Map.prototype.delete = function (key) {
              var index = this.keyList.indexOf(key);
              if (index === -1) {
                  return false;
              }
              this.keyList.splice(index, 1);
              this.valueList.splice(index, 1);
              return true;
          };
          Map.prototype.clear = function () {
              this.keyList = [];
              this.valueList = [];
          };
          return Map;
      }());
      return Map;
  }

  function getSetPolyfillConstructor() {
      var Set = /** @class */ /*#__PURE__*/ (function () {
          function Set() {
              this.itemList = [];
          }
          Object.defineProperty(Set.prototype, "size", {
              get: function () {
                  return this.itemList.length;
              },
              enumerable: false,
              configurable: true
          });
          Set.prototype.add = function (item) {
              var index = this.itemList.indexOf(item);
              if (index === -1) {
                  this.itemList.push(item);
              }
              return this;
          };
          Set.prototype.delete = function (item) {
              var index = this.itemList.indexOf(item);
              if (index !== -1) {
                  this.itemList.splice(index, 1);
                  return true;
              }
              else {
                  return false;
              }
          };
          Set.prototype.clear = function () {
              this.itemList = [];
          };
          Set.prototype.has = function (item) {
              return this.itemList.indexOf(item) !== -1;
          };
          Set.prototype.forEach = function (fn) {
              var this$1 = this;

              var itemList = this.itemList.slice();
              for (var _i = 0, itemList_1 = itemList; _i < itemList_1.length; _i++) {
                  var item = itemList_1[_i];
                  fn(item, item, this$1);
              }
          };
          return Set;
      }());
      return Set;
  }

  function getWeakMapPolyfillConstructor() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var defineProperty = function (object, name, value) {
          if (Object.defineProperty) {
              Object.defineProperty(object, name, {
                  configurable: true,
                  value: value,
                  writable: true,
              });
          }
          else {
              object[name] = value;
          }
      };
      function isObject(x) {
          return Object(x) === x;
      }
      // ECMA-262 23.3 WeakMap Objects
      function WeakMap() {
          if (this === void 0) {
              throw new TypeError("Constructor WeakMap requires 'new'");
          }
          defineProperty(this, '_id', genId('_WeakMap'));
          // ECMA-262 23.3.1.1 WeakMap([iterable])
          if (arguments.length > 0) {
              // Currently, WeakMap `iterable` argument is not supported
              throw new TypeError('WeakMap iterable is not supported');
          }
      }
      // ECMA-262 23.3.3.2 WeakMap.prototype.delete(key)
      defineProperty(WeakMap.prototype, 'delete', function (key) {
          checkInstance(this, 'delete');
          if (!isObject(key)) {
              return false;
          }
          var entry = key[this._id];
          if (entry && entry[0] === key) {
              delete key[this._id];
              return true;
          }
          return false;
      });
      // ECMA-262 23.3.3.3 WeakMap.prototype.get(key)
      defineProperty(WeakMap.prototype, 'get', function (key) {
          checkInstance(this, 'get');
          if (!isObject(key)) {
              return void 0;
          }
          var entry = key[this._id];
          if (entry && entry[0] === key) {
              return entry[1];
          }
          return void 0;
      });
      // ECMA-262 23.3.3.4 WeakMap.prototype.has(key)
      defineProperty(WeakMap.prototype, 'has', function (key) {
          checkInstance(this, 'has');
          if (!isObject(key)) {
              return false;
          }
          var entry = key[this._id];
          if (entry && entry[0] === key) {
              return true;
          }
          return false;
      });
      // ECMA-262 23.3.3.5 WeakMap.prototype.set(key, value)
      defineProperty(WeakMap.prototype, 'set', function (key, value) {
          checkInstance(this, 'set');
          if (!isObject(key)) {
              throw new TypeError('Invalid value used as weak map key');
          }
          var entry = key[this._id];
          if (entry && entry[0] === key) {
              entry[1] = value;
              return this;
          }
          defineProperty(key, this._id, [key, value]);
          return this;
      });
      function checkInstance(x, methodName) {
          if (!isObject(x) || !hasOwnProperty.call(x, '_id')) {
              throw new TypeError(methodName + ' method called on incompatible receiver ' + typeof x);
          }
      }
      function genId(prefix) {
          return prefix + '_' + rand() + '.' + rand();
      }
      function rand() {
          return Math.random().toString().substring(2);
      }
      defineProperty(WeakMap, '_polyfill', true);
      return WeakMap;
  }

  var MapKlass;
  function getMapConstructorMayBePolyfill() {
      var hasMap = typeof Map !== 'undefined';
      if (hasMap) {
          MapKlass = Map;
      }
      else {
          MapKlass = getMapPolyfillConstructor();
      }
  }
  /**
   * map 带 polyfill 的实现
   */
  function createMap() {
      if (!MapKlass) {
          getMapConstructorMayBePolyfill();
      }
      return new MapKlass();
  }

  var SetKlass;
  function getSetConstructorPolyfill() {
      var hasSet = typeof Set !== 'undefined';
      if (hasSet) {
          SetKlass = Set;
      }
      else {
          SetKlass = getSetPolyfillConstructor();
      }
  }
  /**
   * set 带 polyfill 的实现
   */
  function createSet() {
      if (!SetKlass) {
          getSetConstructorPolyfill();
      }
      return new SetKlass();
  }

  var WeakMapKlass;
  function getWeakMapConstructorMayBePolyfill() {
      var hasWeakMap = typeof WeakMap !== 'undefined';
      if (hasWeakMap) {
          WeakMapKlass = WeakMap;
      }
      else {
          WeakMapKlass = getWeakMapPolyfillConstructor();
      }
  }
  /**
   * weakMap 带 polyfill 的实现
   */
  function createWeakMap() {
      if (!WeakMapKlass) {
          getWeakMapConstructorMayBePolyfill();
      }
      return new WeakMapKlass();
  }

  var StatefulLoadManager = /** @class */ /*#__PURE__*/ (function () {
      function StatefulLoadManager() {
          this.statusMap = {};
      }
      StatefulLoadManager.prototype.loadResource = function (res, callback) {
          var key = this.getKeyFromResource(res);
          var loadStatus = this.getLoadStatus4ResourceByKey(key);
          if (loadStatus.status === 3 /* ELoadStatus.resolved */) {
              return callback(undefined, loadStatus.res);
          }
          else if (loadStatus.status === 1 /* ELoadStatus.loading */) {
              loadStatus.callbacks = __spreadArray$1(__spreadArray$1([], loadStatus.callbacks, true), [callback], false);
              return;
          }
          else if (loadStatus.status === 2 /* ELoadStatus.failed */) {
              if (!this.shouldRetry4Resource(res)) {
                  return callback(loadStatus.error);
              }
              else {
                  this.setLoadStatus4ResourceByKey(key, { status: 1 /* ELoadStatus.loading */, callbacks: [callback] });
                  return this.loadResourceWithStatus(res);
              }
          }
          else if (loadStatus.status === 0 /* ELoadStatus.never */) {
              this.setLoadStatus4ResourceByKey(key, { status: 1 /* ELoadStatus.loading */, callbacks: [callback] });
              return this.loadResourceWithStatus(res);
          }
      };
      StatefulLoadManager.prototype.loadResourceWithStatus = function (res) {
          var _this = this;
          this.loadResourceInternal(res, function (error, payload) {
              var key = _this.getKeyFromResource(res);
              var loadStatus = _this.getLoadStatus4ResourceByKey(key);
              if (loadStatus.status !== 1 /* ELoadStatus.loading */) {
                  return;
              }
              var callbacks = loadStatus.callbacks;
              if (Array.isArray(callbacks)) {
                  for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {
                      var callback = callbacks_1[_i];
                      callback(error, payload);
                  }
              }
              if (error) {
                  _this.setLoadStatus4ResourceByKey(key, { status: 2 /* ELoadStatus.failed */, error: error });
              }
              else {
                  _this.setLoadStatus4ResourceByKey(key, { status: 3 /* ELoadStatus.resolved */, res: payload });
              }
          });
      };
      StatefulLoadManager.prototype.getLoadStatus4ResourceByKey = function (key) {
          var statusMap = this.statusMap;
          if (!statusMap[key]) {
              statusMap[key] = { status: 0 /* ELoadStatus.never */ };
          }
          return statusMap[key];
      };
      StatefulLoadManager.prototype.setLoadStatus4ResourceByKey = function (key, loadStatus) {
          var statusMap = this.statusMap;
          statusMap[key] = loadStatus;
      };
      return StatefulLoadManager;
  }());

  function compareVersion(versionStr, targetVersionStr) {
      if (versionStr && targetVersionStr) {
          var version = stringToIntArraySplitBy(versionStr, '.');
          var targetVersion = stringToIntArraySplitBy(targetVersionStr, '.');
          var result = 0;
          for (var i = 0, n1 = void 0, n2 = void 0; i < version.length; i++) {
              n1 = targetVersion[i] || 0;
              n2 = version[i] || 0;
              if (n1 > n2) {
                  result = -1;
                  break;
              }
              if (n1 < n2) {
                  result = 1;
                  break;
              }
          }
          return result;
      }
      return 0;
  }
  function stringToIntArraySplitBy(v, delimeter) {
      var ret = [];
      var version = v.split(delimeter);
      for (var _i = 0, version_1 = version; _i < version_1.length; _i++) {
          var part = version_1[_i];
          ret.push(parseInt(part, 10));
      }
      return ret;
  }

  var proxyMapping = createWeakMap();
  function getProxyTarget(proxyObject) {
      return proxyMapping.get(proxyObject);
  }
  function hasProxyTarget(proxyObject) {
      return typeof proxyObject === 'object' && proxyObject && proxyMapping.has(proxyObject);
  }

  function extractBridgeCallback(success, fail, complete, treatErrorZeroAsSuccess) {
      if (treatErrorZeroAsSuccess === void 0) { treatErrorZeroAsSuccess = false; }
      if (success || fail || complete) {
          return handleCallbackUnion.bind(null, success, fail, complete, treatErrorZeroAsSuccess);
      }
  }
  function handleCallbackUnion(success, fail, complete, treatErrorZeroAsSuccess, finalResult) {
      var hasError = false;
      if (treatErrorZeroAsSuccess) {
          finalResult = normalizeErrorCode(finalResult);
          hasError = !!finalResult.error;
      }
      else {
          if (typeof finalResult === 'object') {
              hasError = 'error' in finalResult || 'errorMessage' in finalResult;
          }
      }
      if (hasError && typeof fail === 'function') {
          fail(finalResult);
      }
      if (!hasError && typeof success === 'function') {
          success(finalResult);
      }
      if (typeof complete === 'function') {
          complete(finalResult);
      }
  }
  function normalizeErrorCode(finalResult) {
      if (typeof finalResult.error === 'string') {
          finalResult.error = parseInt(finalResult.error, 10);
      }
      if (finalResult.error === 0) {
          delete finalResult.error;
          delete finalResult.errorMessage;
      }
      return finalResult;
  }

  function getClientVersionSequence(originalClientVersion) {
      if (typeof originalClientVersion === 'string') {
          var versionList = stringToIntArraySplitBy(originalClientVersion, '.');
          var result = (versionList[0] ? versionList[0] * 1000000 : 0) +
              (versionList[1] ? versionList[1] * 1000 : 0) +
              (versionList[2] ? versionList[2] * 1 : 0);
          return result;
      }
      else {
          return 0;
      }
  }

  var SharedEventTaskManager = /** @class */ /*#__PURE__*/ (function () {
      function SharedEventTaskManager(addEventListener) {
          this.taskMap = Object.create(null);
          this.addEventListener = addEventListener;
      }
      SharedEventTaskManager.prototype.hasMatcher = function (eventName, taskId) {
          var taskContext = this.taskMap[eventName];
          if (!taskContext) {
              return false;
          }
          if (typeof taskId === 'undefined') {
              var hasSome = Object.keys(taskContext.callbacks).some(function (registedTaskId) {
                  var taskList = taskContext.callbacks[registedTaskId];
                  return taskList && taskList.length > 0 ? true : false;
              });
              return hasSome;
          }
          else {
              var taskList = taskContext.callbacks[taskId];
              if (!taskList) {
                  return false;
              }
              return taskList.length > 0;
          }
      };
      SharedEventTaskManager.prototype.removeMatcher = function (eventName, taskId, invokeCallback) {
          var taskContext = this.taskMap[eventName];
          if (!taskContext) {
              return 0;
          }
          var taskList = taskContext.callbacks[taskId];
          if (!taskList) {
              return 0;
          }
          if (invokeCallback) {
              var listenerCount = taskList.length;
              /**
               * @TODO 头尾交换后删除
               */
              taskContext.callbacks[taskId] = taskList.filter(function (fn) { return fn !== invokeCallback; });
              return listenerCount - taskContext.callbacks[taskId].length;
          }
          else {
              var listenerCount = taskList.length;
              taskList.length = 0;
              return listenerCount;
          }
      };
      SharedEventTaskManager.prototype.addMatcher = function (eventName, taskId, invokeCallback, getTaskIdFromEvent, getPayloadFromEvent, skipCleanData) {
          var regTaskContext = this.taskMap[eventName];
          if (!regTaskContext) {
              regTaskContext = this.taskMap[eventName] = {
                  callbacks: Object.create(null),
              };
              this.addEventListener(eventName, this.onEventHandler.bind(this, eventName, getTaskIdFromEvent, getPayloadFromEvent), skipCleanData);
          }
          var regTaskList = regTaskContext.callbacks[taskId];
          if (!regTaskList) {
              regTaskList = regTaskContext.callbacks[taskId] = [];
          }
          if (regTaskList.indexOf(invokeCallback) < 0) {
              regTaskList.push(invokeCallback);
              return 1;
          }
          else {
              return 0;
          }
      };
      SharedEventTaskManager.prototype.onEventHandler = function (eventName, getTaskIdFromEvent, getPayloadFromEvent, event) {
          var taskContext = this.taskMap[eventName];
          var eventTaskIds = getTaskIdFromEvent(event, taskContext);
          if (eventTaskIds) {
              var callbacks = taskContext.callbacks;
              for (var _i = 0, eventTaskIds_1 = eventTaskIds; _i < eventTaskIds_1.length; _i++) {
                  var matchedTaskId = eventTaskIds_1[_i];
                  var taskList = callbacks[matchedTaskId];
                  if (taskList) {
                      var payload = getPayloadFromEvent(event);
                      if (payload) {
                          for (var _a = 0, taskList_1 = taskList; _a < taskList_1.length; _a++) {
                              var taskCallback = taskList_1[_a];
                              taskCallback(payload);
                          }
                      }
                  }
              }
          }
      };
      return SharedEventTaskManager;
  }());

  var sharedClientInfo;
  function extractClientInfo(ua) {
      if (sharedClientInfo) {
          return sharedClientInfo;
      }
      // Griver/1.0.0 =>  ["Griver/1.0.0", "1.0.0", index: 0, input: "Griver/1.0.0", groups: undefined]
      var GriverVersion = ua.match(/Griver\/(\d+\.\d+\.\d+)/);
      // 规范 https://yuque.antfin-inc.com/velocity_cross-end-web/docs/wiki_app-ua
      // AliApp(AP/10.1.80.00002546)  => ["AliApp(AP/10.1.80.00002546)", "AP/10.1.80.00002546)", index: 0, input: "AliApp(AP/10.1.80.00002546)", groups: undefined]
      var AliAPP = ua.match(/AliApp\((\S*)/);
      // 规范 https://yuque.antfin-inc.com/dgvlgi/ariver/si833v
      var AriverAPP = ua.match(/AriverApp\((\S*)/);
      // "AP/10.1.80.00002546)" =>  ["AP", "10.1.80.00002546)"]
      var GriverAPP = ua.match(/GriverApp\((\S*)/);
      var ClientInfo = (!!AliAPP && AliAPP.length === 2 && AliAPP[1].split('/')) ||
          (!!AriverAPP && AriverAPP.length === 2 && AriverAPP[1].split('/')) ||
          (!!GriverAPP && GriverAPP.length === 2 && GriverAPP[1].split('/'));
      var clientName = 'unknown';
      var clientVersion = '0.0.0';
      var clientVersionSequence = 0;
      var originalClientVersion = '';
      var ucVersion = getUCVersion(ua);
      var isUCWebView = !!((ucVersion && ucVersion[0]) || '');
      var isIDE = ua.indexOf('AlipayIDE') > -1;
      var langMatch = ua.match(/Language\/(\S+)/);
      var isAndroid = ua.indexOf('Android') > -1;
      var isIOS = !isAndroid && !!ua.match(/iPhone|iPad/i);
      var platform = isIOS ? 'ios' : isAndroid ? 'android' : 'unknown';
      var iosVersion = getIosVersion(ua, isIOS);
      // AliApp OR AriverAPP
      if (ClientInfo) {
          clientName = ClientInfo[0]; // AP
          clientVersion = ClientInfo[1].match(/(\d+\.\d+\.\d+)/)[0]; // 10.1.80
          originalClientVersion = ClientInfo[1].match(/([\w.]+)/)[0];
          // consider for 国际小程序
      }
      else if (GriverVersion) {
          clientName = 'Griver';
          clientVersion = GriverVersion[0]; // _GriverVersion[1] = '1.0.0'
          originalClientVersion = clientVersion;
      }
      if (typeof clientVersion === 'string') {
          var versionList = stringToIntArraySplitBy(clientVersion, '.');
          clientVersionSequence =
              (versionList[0] ? versionList[0] * 1000000 : 0) +
                  (versionList[1] ? versionList[1] * 1000 : 0) +
                  (versionList[2] ? versionList[2] * 1 : 0);
      }
      sharedClientInfo = {
          alipayVersionSequence: clientVersionSequence,
          clientName: clientName.toLowerCase(),
          clientVersion: clientVersion,
          clientVersionSequence: clientVersionSequence,
          isAndroid: isAndroid,
          isIDE: isIDE,
          isIOS: isIOS,
          isUCWebView: isUCWebView,
          language: langMatch ? langMatch[1] : '',
          originalClientName: clientName,
          originalClientVersion: originalClientVersion,
          platform: platform,
          ucMajorVersion: ucVersion[1],
          ucMinorVersion: ucVersion[2],
          ucVersion: ucVersion[0],
          iosMajorVersion: iosVersion[0],
          iosMinorVersion: iosVersion[1],
          iosPatchVersion: iosVersion[2],
      };
      return sharedClientInfo;
  }
  var sharedUCVersion;
  function getUCVersion(ua) {
      if (!sharedUCVersion) {
          var ucVersionRegexResult = ua.match(/UCBS\/((\d+)\.(\d+))/);
          if (ucVersionRegexResult) {
              var ucVersion = ucVersionRegexResult[1] || '';
              var ucMajorVersion = parseInt(ucVersionRegexResult[2], 10);
              var ucMinorVersion = parseInt(ucVersionRegexResult[3], 10);
              sharedUCVersion = [ucVersion, ucMajorVersion, ucMinorVersion];
          }
          else {
              sharedUCVersion = ['', 0, 0];
          }
      }
      return sharedUCVersion;
  }
  var sharedIosVersion;
  function getIosVersion(ua, isIOS) {
      if (!sharedIosVersion) {
          if (isIOS) {
              var iosVersionRegexResult = ua.match(/OS (\d+)_(\d+)(?:_(\d+))?/);
              if (iosVersionRegexResult) {
                  var iosMajorVersion = parseInt(iosVersionRegexResult[1], 10);
                  var iosMinorVersion = parseInt(iosVersionRegexResult[2], 10);
                  var iosPatchVersion = parseInt(iosVersionRegexResult[3] || '0', 10);
                  sharedIosVersion = [iosMajorVersion, iosMinorVersion, iosPatchVersion];
              }
          }
          sharedIosVersion = sharedIosVersion || [0, 0, 0];
      }
      return sharedIosVersion;
  }

  function isError(obj) {
      return Object.prototype.toString.call(obj) === '[object Error]' || obj instanceof Error;
  }
  var kReChromeError = /^\s*at .*? ?\(((?:file|https?|blob|chrome-extension|native|eval|<anonymous>|\/|main.js).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
  var kReSafariError = /^(?:[\w\s]+@)?((?:file|https?|blob|chrome-extension|native|eval|<anonymous>|\/|main.js).*?)(?::(\d+))(?::(\d+))\s*$/i;
  function extendAppxErrorDetail(error, detailField, detailValue) {
      try {
          var detail = (error.detail = error.detail || {});
          detail[detailField] = detailValue;
      }
      catch (_) { }
      return error;
  }
  function formatAppxErrorInfo(error, errorType) {
      var message = '';
      var stack = '';
      var detail = '';
      var info = {
          column: 0,
          detail: '',
          line: 0,
          message: message,
          sourceURL: '',
          stack: stack,
      };
      if (errorType) {
          info.type = errorType;
      }
      if (!isError(error)) {
          if (error &&
              error.sourceURL !== undefined &&
              error.message &&
              error.line !== undefined) {
              message = error.message;
              stack = "".concat(error.sourceURL, ":").concat(error.line, ":").concat(error.column || 0);
          }
          else {
              try {
                  // 很可能是 [object Object]
                  message = error.toString();
                  if (/^\[object/.test(message)) {
                      message = '';
                  }
              }
              catch (ex) { }
              try {
                  message = message || JSON.stringify(error);
              }
              catch (ex) { }
              stack = new Error('').stack;
          }
      }
      else if (typeof error === 'string') {
          message = error;
      }
      else if (error) {
          message = error.message;
          stack = error.stack || '';
          try {
              detail = error.detail ? JSON.stringify(error.detail) : '';
          }
          catch (_) {
              detail = error.detail ? "".concat(error.detail) : '';
          }
          if (error.sourceURL) {
              info.sourceURL = error.sourceURL;
              info.line = error.line;
              info.column = error.column;
          }
      }
      info.message = message;
      info.stack = stack;
      info.detail = detail;
      if (!info.sourceURL) {
          var lineColumn = formatLineColumnFromStack(stack);
          if (lineColumn) {
              info.sourceURL = lineColumn.sourceURL;
              info.line = lineColumn.line;
              info.column = lineColumn.column;
          }
      }
      return info;
  }
  function formatLineColumnFromStack(stack) {
      if (typeof stack === 'string') {
          var stacks = stack.split('\n');
          for (var _i = 0, stacks_1 = stacks; _i < stacks_1.length; _i++) {
              var line = stacks_1[_i];
              var matchResult = line.match(kReChromeError) || line.match(kReSafariError);
              // tslint:disable object-literal-sort-keys
              if (matchResult) {
                  return {
                      sourceURL: matchResult[1],
                      line: matchResult[2],
                      column: matchResult[3],
                  };
              }
          }
      }
  }

  var SubPackageManager = /** @class */ /*#__PURE__*/ (function () {
      function SubPackageManager(meta) {
          var this$1 = this;

          this.prepareStatusByRoot = createMap();
          this.loadStatusByRoot = createMap();
          if (meta) {
              if (meta.subPackages) {
                  this.rootByPagePath = createMap();
                  for (var _i = 0, _a = meta.subPackages; _i < _a.length; _i++) {
                      var pack = _a[_i];
                      var root = pack.root, _b = pack.pages, pages = _b === void 0 ? [] : _b;
                      for (var _c = 0, pages_1 = pages; _c < pages_1.length; _c++) {
                          var page = pages_1[_c];
                          var wholePath = "".concat(root, "/").concat(page);
                          this$1.rootByPagePath.set(wholePath, root);
                      }
                  }
              }
              if (meta.preloadRule) {
                  this.preloadRules = meta.preloadRule;
              }
          }
      }
      SubPackageManager.prototype.dispose = function () {
          this.rootLoader = null;
          this.rootPreparer = null;
      };
      SubPackageManager.prototype.setRootLoader = function (loader) {
          this.rootLoader = loader;
      };
      SubPackageManager.prototype.setRootPreparer = function (loader) {
          this.rootPreparer = loader;
      };
      SubPackageManager.prototype.getRoot = function (pagePath) {
          return this.rootByPagePath && this.rootByPagePath.get(pagePath);
      };
      SubPackageManager.prototype.isRootLoaded = function (pagePath) {
          var root = this.getRoot(pagePath);
          var status = this.prepareStatusByRoot.get(root || '');
          return !root || (root && status && status.loaded);
      };
      SubPackageManager.prototype.onRootLoaded = function (root, callback) {
          if (callback) {
              callback();
          }
          var status = this.loadStatusByRoot.get(root);
          if (status) {
              status.loaded = true;
              for (var _i = 0, _a = status.callbacks; _i < _a.length; _i++) {
                  var cb = _a[_i];
                  cb();
              }
              status.callbacks = [];
          }
      };
      SubPackageManager.prototype.preloadPage = function (pagePath) {
          var this$1 = this;

          var rule = this.preloadRules && this.preloadRules[pagePath];
          if (rule) {
              var packages = rule.packages;
              // 容器在处理多 packages 的 callback 时，似乎任意一个package完成就会进行回调
              // 导致状态记录错误，因此这里分开记录状态
              for (var _i = 0, packages_1 = packages; _i < packages_1.length; _i++) {
                  var root = packages_1[_i];
                  this$1.prepareRoot(root);
              }
          }
      };
      SubPackageManager.prototype.prepareAndLoadPage = function (pagePath, callback) {
          var _this = this;
          var root = this.rootByPagePath && this.rootByPagePath.get(pagePath);
          if (!root) {
              // 是主包，或者没有分包
              if (callback) {
                  callback();
              }
              return;
          }
          else {
              this.prepareRoot(root, function () {
                  _this.loadRoot(root, callback);
              });
          }
      };
      SubPackageManager.prototype.preparePage = function (pagePath, callback) {
          var root = this.rootByPagePath && this.rootByPagePath.get(pagePath);
          if (!root) {
              // 是主包，或者没有分包
              if (callback) {
                  callback(false);
              }
              return;
          }
          else {
              this.prepareRoot(root, callback);
          }
      };
      /**
       * @description 调用容器接口准备包
       */
      SubPackageManager.prototype.prepareRoot = function (root, callback) {
          var status = this.prepareStatusByRoot.get(root);
          if (!status) {
              this.prepareStatusByRoot.set(root, {
                  callbacks: callback ? [callback] : [],
                  error: false,
                  loaded: false,
              });
              this.rootPreparer(root, this.onRootPrepared.bind(this, root));
          }
          else {
              if (callback) {
                  if (status.loaded) {
                      callback(status.error);
                  }
                  else {
                      status.callbacks.push(callback);
                  }
              }
          }
      };
      SubPackageManager.prototype.loadRoot = function (root, callback) {
          var status = this.loadStatusByRoot.get(root);
          if (!status) {
              this.loadStatusByRoot.set(root, {
                  callbacks: callback ? [callback] : [],
                  loaded: false,
              });
              this.rootLoader(root, this.onRootLoaded.bind(this, root));
          }
          else {
              if (callback) {
                  if (status.loaded) {
                      callback();
                  }
                  else {
                      status.callbacks.push(callback);
                  }
              }
          }
      };
      SubPackageManager.prototype.onRootPrepared = function (root, error) {
          var status = this.prepareStatusByRoot.get(root);
          if (status) {
              status.loaded = true;
              status.error = error;
              for (var _i = 0, _a = status.callbacks; _i < _a.length; _i++) {
                  var cb = _a[_i];
                  cb(error);
              }
              status.callbacks = [];
          }
      };
      return SubPackageManager;
  }());

  var EmptyAppxMiniExtensionManager = /** @class */ /*#__PURE__*/ (function () {
      function EmptyAppxMiniExtensionManager() {
      }
      EmptyAppxMiniExtensionManager.prototype.bootstrap = function () { };
      EmptyAppxMiniExtensionManager.prototype.inited = function () { };
      EmptyAppxMiniExtensionManager.prototype.dispose = function () { };
      EmptyAppxMiniExtensionManager.prototype.initMiniExtensionById = function () { };
      EmptyAppxMiniExtensionManager.prototype.requireMiniExtensionModule = function (id) { };
      EmptyAppxMiniExtensionManager.prototype.getInitedMiniExtensionInfo = function () {
          return [];
      };
      EmptyAppxMiniExtensionManager.prototype.isStaticMiniExtension = function () {
          return false;
      };
      EmptyAppxMiniExtensionManager.prototype.isLazyMiniExtension = function () {
          return false;
      };
      EmptyAppxMiniExtensionManager.prototype.isInitedByExtensionId = function () {
          return false;
      };
      EmptyAppxMiniExtensionManager.prototype.setStaticExtensionWaitingQueue = function (waitingQueue) { };
      EmptyAppxMiniExtensionManager.prototype.hasMiniExtensionPagePath = function () {
          return false;
      };
      EmptyAppxMiniExtensionManager.prototype.hasMiniExtensionComponentPath = function () {
          return false;
      };
      EmptyAppxMiniExtensionManager.prototype.getMiniExtensionComponentPath = function () {
          return undefined;
      };
      EmptyAppxMiniExtensionManager.prototype.getMetaByExtensionId = function (miniExtensionId) {
          return undefined;
      };
      EmptyAppxMiniExtensionManager.prototype.getMiniExtensionPagePath = function () {
          return undefined;
      };
      EmptyAppxMiniExtensionManager.prototype.getMiniExtensionIdAndPublicNameByPagePath = function () {
          return undefined;
      };
      EmptyAppxMiniExtensionManager.prototype.getExtraInfoByExtensionId = function () {
          return undefined;
      };
      EmptyAppxMiniExtensionManager.prototype.setExtraInfoByExtensionId = function () { };
      EmptyAppxMiniExtensionManager.prototype.setWorkerReady = function () { };
      EmptyAppxMiniExtensionManager.prototype.loadDynamicMiniExtension = function (expression, currentPageId, callback) {
          callback({ error: 1, errorMessage: "".concat(expression, " not exists") });
      };
      EmptyAppxMiniExtensionManager.prototype.loadLazyMiniExtension = function (expressionId, currentPageId, callback) {
          return false;
      };
      EmptyAppxMiniExtensionManager.prototype.getMiniProgramExport = function (extensionId) {
          return undefined;
      };
      EmptyAppxMiniExtensionManager.prototype.setMiniProgramExports = function (miniExtensionExports) { };
      EmptyAppxMiniExtensionManager.prototype.isExtensionDevelopmentRunScene = function (extensionId) {
          return false;
      };
      EmptyAppxMiniExtensionManager.prototype.preloadPlugins = function (config) { };
      EmptyAppxMiniExtensionManager.prototype.remoteDevelopmentDebugLog = function () {
          return;
      };
      return EmptyAppxMiniExtensionManager;
  }());

  /**
   * @description !!!! 编译扫描全局符号映射标识 DO NOT REMOVE LINES BEGIN
   */
  if (typeof SECURITY_FUNCTION_CALL !== 'undefined') {
      SECURITY_FUNCTION_CALL = methodCall;
  }
  if (typeof SECURITY_FUNCTION_APPLY !== 'undefined') {
      SECURITY_FUNCTION_APPLY = methodApply;
  }
  /**
   * @description !!!! 编译扫描全局符号映射标识 DO NOT REMOVE LINES END
   */

  /**
   * 性能埋点系分
   *
   * - 按类型梳理
   *    - Client 层上报
   *      - pageBootPerf 上报细分点位
   *        - RenderFrameworkLoadedStart: 在框架执行完成实时写入
   *        - RenderFrameworkLoadedEnd: 在框架执行完成实时写入
   *        - FirstRenderEnd: 在首屏Page didMount 开始时
   *        - PageLoaded: 在首屏Page didMount 开始时
   *        - FirstRenderStart: 在首屏React.render之前(构造Page构造器之前)
   *        - JSBridgeReady: 启动registerWorker时
   *        - RegisterSW: 启动registerWorker时
   *        - RegisterWorkerReady: registerWorker 回调回来开始根据location启动页面
   *        - NotifyReadyToSW: 准备给 Host 发送第一条消息
   *        - SendReadyToPage: 在首屏Page didMount 结束时
   *        - InitialDataFromSW: 可以开始绘制的第一条消息(在Zephyr中是 RenderMount 消息)
   *      - onAppPerfEvent 上报粗粒度点位
   *        - pageLoaded: 在首屏Page didMount 开始时
   *        - renderFrameworkLoaded: 在框架执行完成实时写入
   *          - loadTime: 耗时字段
   *        - firstPaint: 在首屏Page didMount 开始时
   *        - pageBootPerf: 在首屏Page didMount 结束时
   *    - Host 层上报
   *      - pageBootPerf 上报细分点位
   *        - WorkerFrameworkLoadedStart: 在框架执行完成实时写入
   *        - WorkerFrameworkLoadedEnd: 在框架执行完成实时写入
   *      - onAppPerfEvent 上报粗粒度点位
   *        - workerFrameworkLoaded: 在框架执行完成实时写入
   *          - loadTime: 耗时字段
   *        - appLoaded: App启动时
   *        - appResume: 每个 App 触发 onShow 时
   *        - pageBootPerf: 每个Page 执行 onReady 时
   *
   * - 按触发时刻梳理
   *    - Client 层上报
   *      - 当框架加载完成(仅计时)
   *      - registerWorker 一系列(仅计时)
   *      - 当 RenderMount 完成时(仅计时)
   *      - 当 RenderMount 完成并发送消息后
   *        - 调用API上报 onAppPerfEvent
   *        - 回传 pageBootPerf 数据
   *    - Host 层上报
   *      - 当框架加载完成(仅计时)
   *      - 当 onReady 后
   *        - 调用API上报 onAppPerfEvent(包括pageBootPerf)
   *
   */
  var kPerformancePoint4Client = [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0 ];
  function setPerformancePoint4Client(type, time) {
      kPerformancePoint4Client[type] = time = time || Date.now();
  }
  function getPerformancePoint4Client() {
      return kPerformancePoint4Client;
  }

  function isESharedAppxInternalEvent(event) {
      return typeof event === 'number' && event >= 0 /* ESharedAppxInternalEvent.MIN */ && event <= 8 /* ESharedAppxInternalEvent.MAX */;
  }
  function getSharedAppxEventPageLifeCycleMethod(index) {
      switch (index) {
          case 0 /* ESharedAppxEvent.PageLifeCycleIndex.onLoad */:
              return "onLoad" /* ESharedAppxEvent.Page.onLoad */;
          case 1 /* ESharedAppxEvent.PageLifeCycleIndex.onShow */:
              return "onShow" /* ESharedAppxEvent.Page.onShow */;
          case 2 /* ESharedAppxEvent.PageLifeCycleIndex.onReady */:
              return "onReady" /* ESharedAppxEvent.Page.onReady */;
          case 3 /* ESharedAppxEvent.PageLifeCycleIndex.onHide */:
              return "onHide" /* ESharedAppxEvent.Page.onHide */;
          case 4 /* ESharedAppxEvent.PageLifeCycleIndex.onUnload */:
              return "onUnload" /* ESharedAppxEvent.Page.onUnload */;
      }
  }

  var ENativeBindingInstanceType;
  (function (ENativeBindingInstanceType) {
      ENativeBindingInstanceType["CanvasContext"] = "CanvasContext";
  })(ENativeBindingInstanceType || (ENativeBindingInstanceType = {}));
  function isProviderInfo4MiniExtension(providerInfo) {
      return providerInfo && providerInfo.providerType === 1 /* EZRuntimeLinkedInstanceOption4ProviderType.MiniExtension */;
  }
  function isProviderInfo4MainApp(providerInfo) {
      return providerInfo && providerInfo.providerType === 0 /* EZRuntimeLinkedInstanceOption4ProviderType.MainApp */;
  }
  function createProviderInfo4MiniExtension(id, resolvedPath) {
      return {
          miniExtensionId: id,
          providerType: 1 /* EZRuntimeLinkedInstanceOption4ProviderType.MiniExtension */,
          resolvedPath: resolvedPath,
      };
  }
  function createProviderInfo4MainApp(resolvedPath) {
      return {
          providerType: 0 /* EZRuntimeLinkedInstanceOption4ProviderType.MainApp */,
          resolvedPath: resolvedPath,
      };
  }
  function isProviderInfoSameOrigin(a, b) {
      if (isProviderInfo4MainApp(a)) {
          return isProviderInfo4MainApp(b);
      }
      if (isProviderInfo4MiniExtension(a)) {
          return isProviderInfo4MiniExtension(b) && a.miniExtensionId === b.miniExtensionId;
      }
  }

  function getFlexibleRendererProxyShortType(pType) {
      switch (pType) {
          case 1 /* ESharedAppxFlexibleProxyType.Local */:
              return 'L';
          case 2 /* ESharedAppxFlexibleProxyType.Remote */:
              return 'R';
      }
  }
  function getFlexibleRendererShortType(rType) {
      switch (rType) {
          case 2 /* ESharedAppxFlexibleRendererType.RunloopAsync */:
              return 'rA';
          case 1 /* ESharedAppxFlexibleRendererType.RunloopSync */:
              return 'rS';
          case 4 /* ESharedAppxFlexibleRendererType.SimpleAsync */:
              return 'sA';
          case 8 /* ESharedAppxFlexibleRendererType.SimpleSync */:
              return 'sS';
          default:
              return '0';
      }
  }

  function getErrorInfoType(errorType) {
      switch (errorType) {
          case 1 /* ESharedAppxErrorType.PageNotFound */:
              return 'PAGE_NOT_FOUND';
          default:
              return undefined;
      }
  }
  function getGroupedErrorCodeFromSpecificErrorCode4Lego(code) {
      var retCode;
      switch (code) {
          case 11 /* ESharedAppxSpecificErrorCode.HostGlobalError */:
          case 12 /* ESharedAppxSpecificErrorCode.HostFrameworkError */:
          case 13 /* ESharedAppxSpecificErrorCode.HostUserError */:
          case 16 /* ESharedAppxSpecificErrorCode.KernelReportError */:
              retCode = 11 /* ESharedAppxGroupedErrorCode.HostGroupedError */;
              break;
          case 14 /* ESharedAppxSpecificErrorCode.ClientUserError */:
          case 21 /* ESharedAppxSpecificErrorCode.ClientGlobalError */:
              retCode = 12 /* ESharedAppxGroupedErrorCode.ClientGroupedError */;
              break;
          case 19 /* ESharedAppxSpecificErrorCode.RegisterWorkerError */:
              retCode = 13 /* ESharedAppxGroupedErrorCode.RegisterWorkerError */;
              break;
          case 20 /* ESharedAppxSpecificErrorCode.HostCustomError */:
              retCode = 14 /* ESharedAppxGroupedErrorCode.HostCustomError */;
              break;
          case 22 /* ESharedAppxSpecificErrorCode.ClientBlockError */:
              retCode = 15 /* ESharedAppxGroupedErrorCode.ClientBlockError */;
              break;
          case 23 /* ESharedAppxSpecificErrorCode.PlatformError */:
              retCode = 16 /* ESharedAppxGroupedErrorCode.PlatformError */;
              break;
          case 15 /* ESharedAppxSpecificErrorCode.HostUnhandledRejection */:
              retCode = 16 /* ESharedAppxGroupedErrorCode.UnhandledRejection4Lego */;
              break;
      }
      return "H5_CUSTOM_ERROR_TINY_".concat(retCode);
  }

  /*!
   * Hydrate 状态流转说明
   *
   * 1. 默认 Disabled
   * 2. 当用户在 Page 的 onLoad 生命周期钩子里调用 my.enableSnapshot({ timeout }) 后
   *    2.1 如果设置了 options.timeout 则转入 Pending
   *    2.2 否则转入 Fulfilled（等同于 Snapshot 1.0 行为）
   * 3. 如果超时, 进入 Rejected 状态
   *    3.1 超时之后由于数据不全, hydrate() 节点的效率（一个个节点地比对和删除）是比 create() 链路（离线节点上先挂好所有节点）要低的,
   *       所以超时就走 create()
   * 4. 通过 my.reportSnapshot({ available }) 用户决定状态
   *    4.1 available 为 true 时, 进入 Fulfilled 状态
   *    4.2 否则进入 Rejected 状态
   *
   * 5. Disabled 即忽略任何 Snapshot/Hydrate 相关逻辑
   * 6. Pending 时:
   *    6.1 如果存在上一份快照, 则延迟首次渲染, 直到状态转变到 Fulfilled/Rejected
   *    6.2 否则, 进入 create() 链路, 且由于数据不足而不拍照
   *        6.2.1 之后如果转入 Rejected 状态, 删除以前快照
   *        6.2.3 之后如果转入 Fulfilled 状态, 拍下最新快照
   * 7. Rejected 时:
   *    7.1 如果首次渲染, 进入 create() 链路, 可能存在老快照节点, beforeRenderMount() 时需要清理这些无效节点
   *    7.2 否则不对节点进行任何处理
   *    7.3 始终删除老快照
   * 8. Fulfilled 时:
   *    8.1 如果首次渲染, 进入 hydrate() 链路
   *    8.2 否则不对节点进行任何处理
   *    8.3 始终拍下最新快照（参看 6.2.3 情况）
   */
  function getSharedAppxFlexibleRendererHydrateDebugInfo(state, error) {
      switch (error) {
          case "SWITCH_NOT_OPEN" /* ESharedAppxFlexibleRendererHydrateError.SwitchNotOpen */:
              return "-1" /* ESharedAppxFlexibleRendererHydrateDebugInfo.SwitchNotOpen */;
          case "NON_ONLOAD_CALL" /* ESharedAppxFlexibleRendererHydrateError.NotOnLoadCall */:
              return "-2" /* ESharedAppxFlexibleRendererHydrateDebugInfo.NotOnLoadCall */;
          case "REPEATED_ENABLE_CALL" /* ESharedAppxFlexibleRendererHydrateError.RepeatedSetOptionMethodCall */:
              return "-3" /* ESharedAppxFlexibleRendererHydrateDebugInfo.RepeatedSetOptionMethodCall */;
          case "TIMEOUT" /* ESharedAppxFlexibleRendererHydrateError.PendDataReadyTimeout */:
              return "-4" /* ESharedAppxFlexibleRendererHydrateDebugInfo.PendDataReadyTimeout */;
          case "BAD_SIMPLE_RENDERER" /* ESharedAppxFlexibleRendererHydrateError.BadSimpleRenderer */:
              return "-5" /* ESharedAppxFlexibleRendererHydrateDebugInfo.BadSimpleRenderer */;
          case "CLIENT_ENV_FAIL" /* ESharedAppxFlexibleRendererHydrateError.ClientEnvFail */:
              return "-6" /* ESharedAppxFlexibleRendererHydrateDebugInfo.ClientEnvFail */;
          case "MOUNT_FATAL_ERROR" /* ESharedAppxFlexibleRendererHydrateError.MountFatalError */:
              return "-7" /* ESharedAppxFlexibleRendererHydrateDebugInfo.MountFatalError */;
          case "HAS_PLUGIN" /* ESharedAppxFlexibleRendererHydrateError.HasPlugin */:
              return "-8" /* ESharedAppxFlexibleRendererHydrateDebugInfo.HasPlugin */;
      }
      switch (state) {
          case 4 /* ESharedAppxFlexibleRendererHydrateState.Rejected */:
              return "R" /* ESharedAppxFlexibleRendererHydrateDebugInfo.Rejected */;
          case 1 /* ESharedAppxFlexibleRendererHydrateState.Pending */:
              return "P" /* ESharedAppxFlexibleRendererHydrateDebugInfo.Pending */;
          case 2 /* ESharedAppxFlexibleRendererHydrateState.Fulfilled */:
              return "F" /* ESharedAppxFlexibleRendererHydrateDebugInfo.Fulfilled */;
      }
      return "D" /* ESharedAppxFlexibleRendererHydrateDebugInfo.Disabled */;
  }

  function isPreConnectMessagePort(port) {
      return port && port.preconnect;
  }

  function getInitialRenderFinishMessage() {
      return [[], [], [], [], [], [], null, []];
  }
  function getInitialCompositeElementMessage() {
      return [[], [], []];
  }

  /**
   * 所有插件 url 最终内核计算的时候统一收敛到 plugin-private://
   * 用户可以感知 plugin-private://
   * 用户自行拼接正确 plugin-private:// 是可以正常工作的
   */
  var kStaticMiniExtensionProtocol = 'plugin://'; // 这个接口只是为了让用户不用频繁的感知插件 ID
  var kPrivateMiniExtensionProtocol = 'plugin-private://'; // 这个是核心的计算逻辑
  var kDynamicMiniExtensionProtocol = 'dynamic-plugin://'; // 用户使用这个接口的时候，真实要注册表也是 plugin-private:// 所以要进行替换
  function get_privatePath_by_id_resolvedPath(miniExtensionId, resolvedPath) {
      return {
          type: 0 /* EMiniExtensionStringType.plugin_private_$_id_$_resolved_path */,
          value: "".concat(kPrivateMiniExtensionProtocol).concat(miniExtensionId.value, "/").concat(resolvedPath.value.replace(/\\/g, '/')),
      };
  }
  function get_privatePath_by_id_publicName(miniExtensionId, publicName) {
      return {
          type: 1 /* EMiniExtensionStringType.plugin_private_$_id_$_public_name */,
          value: "".concat(kPrivateMiniExtensionProtocol).concat(miniExtensionId.value, "/").concat(publicName.value),
      };
  }
  function get_dynamicPath_by_id_publicName(miniExtensionId, publicName) {
      return {
          type: 2 /* EMiniExtensionStringType.dynamic_plugin_$_id_$_public_name */,
          value: "".concat(kDynamicMiniExtensionProtocol).concat(miniExtensionId.value, "/").concat(publicName.value),
      };
  }
  function isPluginPrivateProtocolPath(path) {
      return path.substr(0, 17) === kPrivateMiniExtensionProtocol;
  }
  function isPluginProtocolPath(path) {
      // startsWith
      return path.substr(0, 9) === kStaticMiniExtensionProtocol;
  }
  function isLikePluginId(id) {
      return /\d{16}/.test(id);
  }
  function isDynamicProtocolPath(dynamicProtocolPath) {
      return dynamicProtocolPath.substr(0, 17) === kDynamicMiniExtensionProtocol;
  }
  // 这里面都是解构方法
  // copy from appx
  var pluginPrivateRegex = /^plugin:\/\/([^\/]+)\/(.*)/;
  function get_extensionName_publicName(path) {
      var value = path.value;
      if (!isPluginProtocolPath(value)) {
          return undefined;
      }
      var match = value.match(pluginPrivateRegex);
      if (!match) {
          return undefined;
      }
      return {
          extensionName: {
              type: 5 /* EMiniExtensionStringType._$_extension_name_$_ */,
              value: match[1],
          },
          publicName: {
              type: 6 /* EMiniExtensionStringType._$_public_name_$_ */,
              value: match[2],
          },
      };
  }
  // copy from appx
  // 这个正则在 appx 内有多份，选了这份，差别不大
  var dynamicPluginRegex = /^dynamic-plugin:\/\/([^\/]+)\/(.*)/;
  function get_dynamic_extensionId_publicName(path) {
      var value = path.value;
      if (!isDynamicProtocolPath(value)) {
          return undefined;
      }
      var match = value.match(dynamicPluginRegex);
      if (!match) {
          return undefined;
      }
      return {
          extensionId: {
              type: 4 /* EMiniExtensionStringType._$_extension_id_$_ */,
              value: match[1],
          },
          publicName: {
              type: 6 /* EMiniExtensionStringType._$_public_name_$_ */,
              value: match[2],
          },
      };
  }
  var pluginPrivateReg = /^plugin-private:\/\/([^\/]+)\/(.*)/;
  function get_extensionId_resolvedPath(path) {
      var value = path.value;
      if (!isPluginPrivateProtocolPath(value)) {
          return undefined;
      }
      var match = value.match(pluginPrivateReg);
      if (!match) {
          return undefined;
      }
      return {
          extensionId: {
              type: 4 /* EMiniExtensionStringType._$_extension_id_$_ */,
              value: match[1],
          },
          resolvedPath: {
              type: 7 /* EMiniExtensionStringType._$_resolved_path_$_ */,
              value: match[2],
          },
      };
  }
  function get_rewrite_extensionId_idOrClassName(extensionId, idOrClassName) {
      return {
          type: 9 /* EMiniExtensionStringType.p_$_extensionId_$_acss_id_className_ */,
          value: "p-".concat(extensionId.value, "-").concat(idOrClassName.value),
      };
  }
  function get_expression_by_extensionId_version(extensionId, version) {
      return { type: 10 /* EMiniExtensionStringType._extensionId_$_at_$_version */, value: "".concat(extensionId.value, "@").concat(version.value) };
  }
  function get_extensionId_version(extensionExpression) {
      if (extensionExpression) {
          var value = extensionExpression.value;
          if (value) {
              // 有 @ 并且不是 @ 开头
              var indexOfAt = value.indexOf('@');
              if (indexOfAt > 0) {
                  var id = value.substr(0, indexOfAt);
                  var version = value.substr(indexOfAt + 1, value.length);
                  if (id && version) {
                      return {
                          extensionId: {
                              type: 4 /* EMiniExtensionStringType._$_extension_id_$_ */,
                              value: id,
                          },
                          version: {
                              type: 11 /* EMiniExtensionStringType._$_version_$_ */,
                              value: version,
                          },
                      };
                  }
              }
          }
      }
  }
  var kAppxMiniExtensionPluginIsolationKey = 'data-p';

  var SharedAppxUnexpectedBehaviorManager = /** @class */ /*#__PURE__*/ (function () {
      function SharedAppxUnexpectedBehaviorManager(report, warn, getstate) {
          this.report = report;
          this.warn = warn;
          this.getstate = getstate;
          this.behaviors = Object.create(null);
      }
      SharedAppxUnexpectedBehaviorManager.prototype.get = function (name, index) {
          var behaviors = this.behaviors;
          var at;
          var id = name;
          if (index || index === 0) {
              at = index;
              id = name + ':' + at;
          }
          var behavoir = behaviors[id];
          if (!behavoir) {
              var state = this.getstate(name);
              if (at >= 0 && state) {
                  state = state[at];
              }
              behaviors[id] = behavoir = {
                  report: 
                  // tslint:disable-next-line no-bitwise
                  state && state & 1 /* ESharedAppxUnexpectedBehaviorState.Reportable */
                      ? this.report
                      : null,
                  standard: !!(
                  // tslint:disable-next-line no-bitwise
                  (state && state & 2 /* ESharedAppxUnexpectedBehaviorState.Standard */)),
                  warn: this.warn,
              };
          }
          return behavoir;
      };
      return SharedAppxUnexpectedBehaviorManager;
  }());

  var ELazyLoadType;
  (function (ELazyLoadType) {
      ELazyLoadType[ELazyLoadType["PLUGIN"] = 1] = "PLUGIN";
      ELazyLoadType[ELazyLoadType["SUB_PACKAGE"] = 2] = "SUB_PACKAGE";
  })(ELazyLoadType || (ELazyLoadType = {}));

  function transformBridgeSelector(extensionId, selector) {
      if (extensionId) {
          /**
           * #id => #p-pluginId-id
           * .foo => .foo[data-p=pluginId]
           */
          var reg = /([#\.])([^\s\.#]+)/g;
          return selector.replace(reg, function (_, p1, p2) {
              if (p1 === '#') {
                  // #id => #p-pluginId-id
                  return "".concat(p1).concat(get_rewrite_extensionId_idOrClassName({ type: 4 /* EMiniExtensionStringType._$_extension_id_$_ */, value: extensionId }, { type: 8 /* EMiniExtensionStringType._$_acss_id_className_$_ */, value: p2 }).value);
              }
              else if (p1 === '.') {
                  // .foo => .foo[data-p=pluginId]
                  return "".concat(p1).concat(p2, "[").concat(kAppxMiniExtensionPluginIsolationKey, "=").concat(JSON.stringify(extensionId), "]");
              }
              else {
                  return p1 + p2;
              }
          });
      }
      return selector;
  }

  var kAppxVersion = /* PURE */ "2.8.0";
  function hasPackageAndRunSceneType(a, b) {
      return !!(a & b); // tslint:disable-line
  }
  function isConsoleAvaliableToDeveloper(packageAndSceneType) {
      return ifIsMiniProgramEnv(function () {
          if (hasPackageAndRunSceneType(packageAndSceneType, 6 /* EAppxPackageAndRunSceneType.Simulator */)) {
              // 开发者桌面调试环境
              return true;
          }
          if (hasPackageAndRunSceneType(packageAndSceneType, 32 /* EAppxPackageAndRunSceneType.Debug */)) {
              return true;
          }
          // Inspect 默认不开，需要通过额外检测是否能调试
      });
  }
  function getPackageAndRunSceneType(originalStartupParams, userAgent) {
      var finalType = 0;
      // run scene，基于 UA 判断模拟器
      if (typeof userAgent === 'string') {
          if (userAgent.indexOf('AlipayIDE') > -1) {
              finalType += 4 /* EAppxPackageAndRunSceneType.IDESimulator */;
          }
          else if (originalStartupParams.fromTR) {
              finalType += 2 /* EAppxPackageAndRunSceneType.BrowserSimulator */;
          }
          else {
              finalType += 1 /* EAppxPackageAndRunSceneType.Device */;
          }
      }
      else {
          finalType += 1 /* EAppxPackageAndRunSceneType.Device */;
      }
      // package scene
      switch (originalStartupParams.nbsn) {
          case 'DEBUG':
              finalType += 32 /* EAppxPackageAndRunSceneType.Debug */;
              break;
          case 'INSPECT':
              finalType += 48 /* EAppxPackageAndRunSceneType.Inspect */;
              break;
          case 'TRIAL':
              finalType += 64 /* EAppxPackageAndRunSceneType.Trial */;
              break;
          case 'REVIEW':
              finalType += 80 /* EAppxPackageAndRunSceneType.Review */;
              break;
          case 'YUNTEST':
              finalType += 96 /* EAppxPackageAndRunSceneType.Yuntest */;
              break;
          default:
              finalType += 16 /* EAppxPackageAndRunSceneType.Release */;
      }
      return finalType;
  }
  /**
   * 要让 Rollup + Terser 能把 IIFE Shake 掉的话
   * 下面的两个函数里就不能再有条件判断了
   * 比如如下代码是不能被 Shake 的
   * function thisFnWontBeShaken(then, or) {
   *   if (true) {
   *     then();
   *   }
   *   // 这里有了 if 条件判断，就不能被 Shake 了
   *   else if (or) {
   *     or();
   *   }
   * }
   */
  /**
   * 不允许被作为「三元条件判断」以及「或表达式」等条件判断语句的一部分，
   * 否则无法被代码压缩。
   * 如果不同环境有不同执行，请使用 switchIsMiniProgramEnv
   */
  // @ts-ignore
  function ifIsMiniProgramEnv(then) {
      {
          return then();
      }
  }
  /**
   * 不允许被作为「三元条件判断」以及「或表达式」等条件判断语句的一部分，
   * 否则无法被代码压缩。
   * 如果只需要在小程序环境执行，请使用 ifIsMiniProgramEnv
   */
  function switchIsMiniProgramEnv(then, or) {
      {
          return then();
      }
  }

  function isCanvasGradient(a) {
      return a && (a.class === 'linearGradient' || a.class === 'radialGradient');
  }
  function isCanvasPattern(a) {
      return a && a.class === 'pattern';
  }
  function isCanvasAsyncAction4Image(a) {
      return a && a.type === 'loadImage';
  }
  function isCanvasAsyncAction4Pattern(a) {
      return a && a.type === 'pattern';
  }
  function isCanvasValidImageInfo(imgInfo) {
      return imgInfo && imgInfo.id !== '' && imgInfo.id >= 0 && imgInfo.width > 0 && imgInfo.height > 0;
  }
  function isCanvasContextDrawable(a) {
      return a && a.isCanvasContext === true;
  }

  var kCubeRuntimeSupportMin = /* PURE */ 1;
  var kCubeRuntimeSupportMax = /* PURE */ 131;

  var kBridgeAppxDomain4Empty = {
      type: "empty" /* EBridgeAppxDomainType.empty */,
      value: undefined,
  };
  var kBridgeAppxDomain4App = {
      type: "app" /* EBridgeAppxDomainType.app */,
      value: 'app',
  };
  var kBridgeAppxDomain4Appx = {
      type: "appx" /* EBridgeAppxDomainType.appx */,
      value: 'appx',
  };
  function isAppxDomain4Empty(appxDomain) {
      return appxDomain && appxDomain.type === "empty" /* EBridgeAppxDomainType.empty */;
  }
  function isAppxDomain4App(appxDomain) {
      return appxDomain && appxDomain.type === "app" /* EBridgeAppxDomainType.app */;
  }
  function isAppxDomain4Extension(appxDomain) {
      return appxDomain && appxDomain.type === "extension" /* EBridgeAppxDomainType.extension */;
  }

  var insideFeatureRuntimeConfig;
  var insideFeatureRuntimeVersion;
  var insideFeatureRuntimeClientName;
  var insideFeatureRuntimePlatform;
  function setInsideFeatureRuntime(clientName, version, platform) {
      insideFeatureRuntimeClientName = clientName;
      insideFeatureRuntimeVersion = version;
      insideFeatureRuntimePlatform = platform;
      /**
       * @description !!!! 编译扫描全局符号映射标识 DO NOT REMOVE LINES BEGIN
       */
      if (typeof INSIDE_FEATURE_CLIENTNAME !== 'undefined') {
          INSIDE_FEATURE_CLIENTNAME = insideFeatureRuntimeClientName;
      }
      if (typeof INSIDE_FEATURE_VERSION !== 'undefined') {
          INSIDE_FEATURE_VERSION = insideFeatureRuntimeVersion;
      }
      if (typeof INSIDE_FEATURE_PLATFORM !== 'undefined') {
          INSIDE_FEATURE_PLATFORM = insideFeatureRuntimePlatform;
      }
      /**
       * @description !!!! 编译扫描全局符号映射标识 DO NOT REMOVE LINES END
       */
  }
  /**
   * @description !!!! 编译扫描全局符号映射标识 DO NOT REMOVE LINES BEGIN
   */
  /**
   * @description 仅提供 version, platform 的解析能力，启动参数以及函数解析不可用
   */
  var hasInsideFeature = (typeof HAS_INSIDE_FEATURE !== 'undefined' && HAS_INSIDE_FEATURE) || hasInsideFeatureRuntimeImplemention;
  /**
   * @description !!!! 编译扫描全局符号映射标识 DO NOT REMOVE LINES END
   */
  function hasInsideSupport(value, startupParams) {
      if (value === false || value === true) {
          return value;
      }
      if (typeof value === 'number') {
          return insideFeatureRuntimeVersion >= value;
      }
      // ios && 10.1.80 后续编译期搞定
      // 如果运行时没注入启动参数，则默认不可使用启动参数
      if (typeof value === 'function') {
          return value({
              clientName: insideFeatureRuntimeClientName,
              platform: insideFeatureRuntimePlatform,
              startupParams: (startupParams || {}),
              version: insideFeatureRuntimeVersion,
          });
      }
      return false;
  }
  function hasInsideFeatureRuntimeImplemention(feature) {
      return hasInsideSupport(insideFeatureRuntimeConfig );
  }

  function getInsideClientExtendConfig() {
      try {
          return CLIENT_EXTEND_CONFIG;
      }
      catch (_) { }
  }
  var insideStaticConfig;
  var insideRuntimeConfig;
  function getInsideRuntimeConfig() {
      if (!insideRuntimeConfig) {
          insideRuntimeConfig = getInsideRuntimeConfigImpl();
      }
      return insideRuntimeConfig;
  }
  function getInsideRuntimeConfigImpl() {
      try {
          var config = (function () { /*! INSIDE_CONFIG_RUNTIME */ return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAPI", function() { return getAPI; });

    function getAPI() {
      return __webpack_require__(2)
    }
    

/***/ }),
/* 1 */,
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "onLocalServiceResolveFail", function() { return /* reexport */ onLocalServiceResolveFail; });
__webpack_require__.d(__webpack_exports__, "onLocalServiceLost", function() { return /* reexport */ onLocalServiceLost; });
__webpack_require__.d(__webpack_exports__, "onLocalServiceFound", function() { return /* reexport */ onLocalServiceFound; });
__webpack_require__.d(__webpack_exports__, "onLocalServiceDiscoveryStop", function() { return /* reexport */ onLocalServiceDiscoveryStop; });
__webpack_require__.d(__webpack_exports__, "offLocalServiceResolveFail", function() { return /* reexport */ offLocalServiceResolveFail; });
__webpack_require__.d(__webpack_exports__, "offLocalServiceLost", function() { return /* reexport */ offLocalServiceLost; });
__webpack_require__.d(__webpack_exports__, "offLocalServiceFound", function() { return /* reexport */ offLocalServiceFound; });
__webpack_require__.d(__webpack_exports__, "offLocalServiceDiscoveryStop", function() { return /* reexport */ offLocalServiceDiscoveryStop; });
__webpack_require__.d(__webpack_exports__, "stopLocalServiceDiscovery", function() { return /* reexport */ stopLocalServiceDiscovery; });
__webpack_require__.d(__webpack_exports__, "startLocalServiceDiscovery", function() { return /* reexport */ startLocalServiceDiscovery; });
__webpack_require__.d(__webpack_exports__, "showFuCard", function() { return /* reexport */ showFuCard; });
__webpack_require__.d(__webpack_exports__, "onIotRawMessage", function() { return /* binding */ onIotRawMessage; });
__webpack_require__.d(__webpack_exports__, "offIotRawMessage", function() { return /* binding */ offIotRawMessage; });
__webpack_require__.d(__webpack_exports__, "onIotNotify", function() { return /* binding */ onIotNotify; });
__webpack_require__.d(__webpack_exports__, "offIotNotify", function() { return /* binding */ offIotNotify; });
__webpack_require__.d(__webpack_exports__, "sendLanHttpRequest", function() { return /* binding */ sendLanHttpRequest; });
__webpack_require__.d(__webpack_exports__, "getAdTrackClues", function() { return /* binding */ getAdTrackClues; });
__webpack_require__.d(__webpack_exports__, "getMainSelectedCity", function() { return /* binding */ getMainSelectedCity; });
__webpack_require__.d(__webpack_exports__, "preloadVideo", function() { return /* binding */ preloadVideo; });
__webpack_require__.d(__webpack_exports__, "isScreenReaderEnabled", function() { return /* binding */ isScreenReaderEnabled; });
__webpack_require__.d(__webpack_exports__, "reportIotEvent", function() { return /* binding */ reportIotEvent; });
__webpack_require__.d(__webpack_exports__, "replyRoomInvitation", function() { return /* binding */ replyRoomInvitation; });
__webpack_require__.d(__webpack_exports__, "agreementConfirm", function() { return /* binding */ agreementConfirm; });
__webpack_require__.d(__webpack_exports__, "setBLEMTU", function() { return /* binding */ setBLEMTU; });
__webpack_require__.d(__webpack_exports__, "getBLEDeviceRSSI", function() { return /* binding */ getBLEDeviceRSSI; });
__webpack_require__.d(__webpack_exports__, "getMapInfo", function() { return /* binding */ getMapInfo; });
__webpack_require__.d(__webpack_exports__, "getBLEMTU", function() { return /* binding */ getBLEMTU; });
__webpack_require__.d(__webpack_exports__, "showBLEPermissionGuide", function() { return /* binding */ showBLEPermissionGuide; });
__webpack_require__.d(__webpack_exports__, "getBLEDeviceStatus", function() { return /* binding */ getBLEDeviceStatus; });
__webpack_require__.d(__webpack_exports__, "chooseDistrict", function() { return /* binding */ chooseDistrict; });
__webpack_require__.d(__webpack_exports__, "navigateToSetting", function() { return /* binding */ navigateToSetting; });
__webpack_require__.d(__webpack_exports__, "onDecibelChange", function() { return /* binding */ onDecibelChange; });
__webpack_require__.d(__webpack_exports__, "offDecibelChange", function() { return /* binding */ offDecibelChange; });
__webpack_require__.d(__webpack_exports__, "isAppInMyApps", function() { return /* binding */ isAppInMyApps; });
__webpack_require__.d(__webpack_exports__, "canAddAppToMyApps", function() { return /* binding */ canAddAppToMyApps; });
__webpack_require__.d(__webpack_exports__, "addAppToMyApps", function() { return /* binding */ addAppToMyApps; });
__webpack_require__.d(__webpack_exports__, "createSharedBiz", function() { return /* binding */ createSharedBiz; });

// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.js
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

// CONCATENATED MODULE: ./src/alipay/api/m-dns/index.ts
// 10.1.92 需求：https://aone.alipay.com/req/22056668
var onLocalServiceResolveFail = {};
var onLocalServiceLost = {};
var onLocalServiceFound = {};
var onLocalServiceDiscoveryStop = {};
var offLocalServiceResolveFail = {};
var offLocalServiceLost = {};
var offLocalServiceFound = {};
var offLocalServiceDiscoveryStop = {};
var stopLocalServiceDiscovery = {};
var startLocalServiceDiscovery = {};

// CONCATENATED MODULE: ./src/alipay/api/wufu/index.ts
var showFuCard = {
    m: "AlipayNewYearNebulaPlugin.showFuCard" /* NativeAPI.AlipayNewYearNebulaPlugin$showFuCard */,
    ns: 'ap',
    in: ['fuCard', 'sourceType', 'hideToast'],
    out: ['toastViewDismiss', 'received'],
    // b(finalOption: Partial<INativeAPIRegistry[NativeAPI.AlipayNewYearNebulaPlugin$showFuCard]['request']
    //  & IMiniAPIRegistry[MiniAPI.ap$showFuCard]['request']>) {
    b: function (finalOption) {
        if (finalOption.fuCard) {
            finalOption.showFuCard = finalOption.fuCard;
            delete finalOption.fuCard;
        }
        return finalOption;
    },
    // a(res: Partial<INativeAPIRegistry[NativeAPI.AlipayNewYearNebulaPlugin$showFuCard]['response']
    //  & INativeAPIRegistry[NativeAPI.AlipayNewYearNebulaPlugin$showFuCard]['error'] & IMiniAPIRegistry[MiniAPI.ap$showFuCard]['response']>) {
    a: function (res) {
        // 确保无error字段或者error不为0
        if (res && (!res.error || res.error !== 0)) {
            res.received = res.success === 1 || res.success === 'YES' || res.success === true;
            delete res.success;
            res.toastViewDismiss = res.toastViewDimiss;
            delete res.toastViewDimiss;
        }
        return res;
    },
};
// export const removeFuCard: IBridgeInsideAPITypedInfo<MiniAPI.ap$removeFuCard> = {
//   m: 'AlipayNewYearNebulaPlugin.removeFuCard',
//   ns: 'ap',
// };
// export const addFuCard: IBridgeInsideAPITypedInfo<MiniAPI.ap$addFuCard> = {
//   m: 'AlipayNewYearNebulaPlugin.addFuCard',
//   ns: 'ap',
// };
// export const getFuCardTasks: IBridgeInsideAPITypedInfo<MiniAPI.ap$getFuCardTasks> = {
//   m: 'AlipayNewYearNebulaPlugin.fuCardTasks',
//   ns: 'ap',
// };
// export const getFuCardList: IBridgeInsideAPITypedInfo<MiniAPI.ap$getFuCardList> = {
//   m: 'AlipayNewYearNebulaPlugin.fuCardList',
//   ns: 'ap',
// };
// export const getZodiacPrizeList: IBridgeInsideAPITypedInfo<MiniAPI.ap$getZodiacPrizeList> = {
//   m: 'AlipayNewYearNebulaPlugin.zodiacPrizeList',
//   ns: 'ap',
// };

// CONCATENATED MODULE: ./src/alipay/api/index.ts


// 10.2.50

// 10.1.85
var onIotRawMessage = {
    start: function () {
        this.callBridge('startMonitorIotRawMessage', {});
    },
};
var offIotRawMessage = {
    end: function () {
        this.callBridge('stopMonitorIotRawMessage', {});
    },
};
var onIotNotify = {
    start: function () {
        this.callBridge('startMonitorIotNotify', {});
    },
};
var offIotNotify = {
    end: function () {
        this.callBridge('stopMonitorIotNotify', {});
    },
};
var sendLanHttpRequest = {};
var getAdTrackClues = {
    ns: 'ap',
    d: function (opt, cb) {
        var _a = this.getStartupParams(), scm = _a.scm, cid = _a.cid;
        cb({ scm: scm, cid: cid });
    },
};
var getMainSelectedCity = {
    ns: 'ap',
};
// 10.1.87
var preloadVideo = {
    m: 'preloadWithSrc',
};
var isScreenReaderEnabled = {};
// 10.1.88
var reportIotEvent = {};
// 10.1.90
var replyRoomInvitation = {};
var agreementConfirm = {};
// 10.1.95
var setBLEMTU = {};
var getBLEDeviceRSSI = {};
var getMapInfo = {};
var getBLEMTU = {
    a: function (res) {
        // 10.2.30 Android端返回了MTU字段，纠正为mtu
        if (res.mtu === undefined && res.MTU !== undefined) {
            res.mtu = res.MTU;
            delete res.MTU;
        }
        return res;
    },
};
var showBLEPermissionGuide = {
    b: function (opt) {
        var bizType = opt.bizType, viewId = opt.viewId, rest = __rest(opt, ["bizType", "viewId"]);
        var finalOption = {
            config: rest,
        };
        if (bizType !== undefined) {
            finalOption.bizType = bizType;
        }
        if (viewId !== undefined) {
            finalOption.viewId = viewId;
        }
        return finalOption;
    },
};
var getBLEDeviceStatus = {};
// 10.2.0
var chooseDistrict = {};
// 10.2.3
var navigateToSetting = {};
// 10.2.6
var onDecibelChange = {};
var offDecibelChange = {};
// 10.2.6 @戴云 https://baiyan.alipay.com/task/63255?bqlKey=7d13835
var isAppInMyApps = {
    m: 'homeIsAppInMyApps',
    ns: 'ap',
    a: function (res) {
        if (typeof res === 'object' && res.success !== undefined) {
            if (res.success === 'true') {
                res.isAppInMyApps = true;
                delete res.success;
            }
            else if (res.success === 'false') {
                res.isAppInMyApps = false;
                // res.error = 1;
                // res.errorMessage = "当前应用不在我的应用中";
                delete res.success;
            }
            else if (res.success === 'unavailable') {
                res.error = 60001;
                res.errorMessage = '应用在黑名单中，无法调用接口';
                delete res.success;
            }
        }
    },
};
var canAddAppToMyApps = {
    m: 'homeCanAddAppToMyApps',
    ns: 'ap',
    a: function (res) {
        if (typeof res === 'object' && res.success !== undefined) {
            if (res.success === 'true') {
                res.canAddAppToMyApps = true;
                delete res.success;
            }
            else if (res.success === 'false') {
                res.canAddAppToMyApps = false;
                // res.error = 1;
                // res.errorMessage = '当前应用不能被添加到我的应用中';
                delete res.success;
            }
            else if (res.success === 'unavailable') {
                res.error = 60001;
                res.errorMessage = '当前应用不在白名单中或者疲劳度检测不通过';
                delete res.success;
            }
        }
    },
};
var addAppToMyApps = {
    m: 'homeAddAppToMyApps',
    ns: 'ap',
    a: function (res) {
        if (typeof res === 'object' && res.success !== undefined) {
            if (res.success === 'true') {
                delete res.success;
            }
            else if (res.success === 'false') {
                res.error = 60001;
                res.errorMessage = '应用添加失败';
                delete res.success;
            }
            else if (res.success === 'unavailable') {
                res.error = 60002;
                res.errorMessage = '当前应用不在白名单中，或者疲劳度检测不通过';
                delete res.success;
            }
        }
    },
};
var createSharedBiz = {
    ns: 'ap',
};


/***/ })
/******/ ]);})();
          return config || {};
      }
      catch (_) {
          return {};
      }
  }
  function getInsideStaticConfig() {
      if (!insideStaticConfig) {
          insideStaticConfig = getInsideStaticConfigImpl();
      }
      return insideStaticConfig;
  }
  function getInsideStaticConfigImpl() {
      try {
          var config = (function () { /*! INSIDE_CONFIG_STATIC */ return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "config", function() { return config; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAPI", function() { return getAPI; });

      var config = {"clientName":"ap","trackerPluginType":"inside"};
      
      function getAPI() {
        return {
            "onIotRawMessage": function (env) { return env.version >= /* 10.1.85 */ 10001085 }
            ,
            "offIotRawMessage": function (env) { return env.version >= /* 10.1.85 */ 10001085 }
            ,
            "onIotNotify": function (env) { return env.version >= /* 10.1.85 */ 10001085 }
            ,
            "offIotNotify": function (env) { return env.version >= /* 10.1.85 */ 10001085 }
            ,
            "sendLanHttpRequest": function (env) { return env.version >= /* 10.1.85 */ 10001085 }
            ,
            "getMainSelectedCity": function (env) { return env.version >= /* 10.1.88 */ 10001088 }
            ,
            "preloadVideo": function (env) { return env.version >= /* 10.1.87 */ 10001087 }
            ,
            "isScreenReaderEnabled": function (env) { return env.version >= /* 10.1.87 */ 10001087 }
            ,
            "reportIotEvent": function (env) { return env.version >= /* 10.1.88 */ 10001088 }
            ,
            "replyRoomInvitation": function (env) { return env.version >= /* 10.1.90 */ 10001090 }
            ,
            "agreementConfirm": function (env) { return env.version >= /* 10.1.90 */ 10001090 }
            ,
            "onLocalServiceResolveFail": function (env) { return env.version >= /* 10.1.92 */ 10001092 }
            ,
            "onLocalServiceLost": function (env) { return env.version >= /* 10.1.92 */ 10001092 }
            ,
            "onLocalServiceFound": function (env) { return env.version >= /* 10.1.92 */ 10001092 }
            ,
            "onLocalServiceDiscoveryStop": function (env) { return env.version >= /* 10.1.92 */ 10001092 }
            ,
            "offLocalServiceResolveFail": function (env) { return env.version >= /* 10.1.92 */ 10001092 }
            ,
            "offLocalServiceLost": function (env) { return env.version >= /* 10.1.92 */ 10001092 }
            ,
            "offLocalServiceFound": function (env) { return env.version >= /* 10.1.92 */ 10001092 }
            ,
            "offLocalServiceDiscoveryStop": function (env) { return env.version >= /* 10.1.92 */ 10001092 }
            ,
            "stopLocalServiceDiscovery": function (env) { return env.version >= /* 10.1.92 */ 10001092 }
            ,
            "startLocalServiceDiscovery": function (env) { return env.version >= /* 10.1.92 */ 10001092 }
            ,
            "setBLEMTU": function (env) { return env.version >= 10001095 && env.platform === "android" }
            ,
            "getBLEDeviceRSSI": function (env) { return env.version >= /* 10.1.95 */ 10001095 }
            ,
            "getMapInfo": function (env) { return env.version >= /* 10.1.95 */ 10001095 }
            ,
            "chooseDistrict": function (env) { return env.version >= /* 10.2.0 */ 10002000 }
            ,
            "navigateToSetting": function (env) { return env.version >= 10002003 && env.platform === "ios" }
            ,
            "onDecibelChange": function (env) { return env.version >= /* 10.2.6 */ 10002006 }
            ,
            "offDecibelChange": function (env) { return env.version >= /* 10.2.6 */ 10002006 }
            ,
            "isAppInMyApps": function (env) { return env.version >= /* 10.2.6 */ 10002006 }
            ,
            "canAddAppToMyApps": function (env) { return env.version >= /* 10.2.6 */ 10002006 }
            ,
            "addAppToMyApps": function (env) { return env.version >= /* 10.2.6 */ 10002006 }
            ,
            "createSharedBiz": function (env) { return env.version >= /* 10.2.10 */ 10002010 }
            ,
            "getBLEMTU": function (env) { return env.version >= /* 10.2.30 */ 10002030 }
            ,
            "showBLEPermissionGuide": function (env) { return env.version >= /* 10.2.38 */ 10002038 }
            ,
            "getBLEDeviceStatus": function (env) { return env.version >= /* 10.2.38 */ 10002038 }
            ,
            "showFuCard": function (env) { return env.version >= /* 10.2.50 */ 10002050 }
            };
      }
      

/***/ })
/******/ ]);})();
          return (config || {});
      }
      catch (_) {
          return {};
      }
  }
  function getInsideConfig4ClientName() {
      return /*! INSIDE_STATIC_CLIENTNAME */ "ap";
  }

  function getElementFactoryOrderedList(view, viewstate, text, textnest, image, scrollview, button, input, swiper, swiperitem, navigator, richtext, checkbox, checkboxgroup, form, switchTag, textarea, canvas, radiogroup, radio, icon, map, progress, slider, pickerview, pickerviewcolumn, picker, lottie, webview, movableview, movablearea, audio, video, label, coverview, coverimage, appmarketeditor, contactbutton, ad, liveplayer, livepusher, aicamera, camera, lifestyle, cdp, ar, rtcroom, pageMeta, inside, errorArea, matchMedia, pageContainer) {
      return [
          null,
          view,
          viewstate,
          text,
          textnest,
          image,
          scrollview,
          button,
          input,
          swiper,
          swiperitem,
          navigator,
          richtext,
          checkbox,
          checkboxgroup,
          form,
          switchTag,
          textarea,
          canvas,
          radiogroup,
          radio,
          icon,
          map,
          progress,
          slider,
          pickerview,
          pickerviewcolumn,
          picker,
          lottie,
          webview,
          movableview,
          movablearea,
          audio,
          video,
          label,
          coverview,
          coverimage,
          appmarketeditor,
          contactbutton,
          ad,
          liveplayer,
          livepusher,
          aicamera,
          camera,
          lifestyle,
          cdp,
          ar,
          rtcroom,
          pageMeta,
          null,
          errorArea,
          matchMedia,
          pageContainer ];
  }

  function parseStyleStringToArray(inlineStyle) {
      var styles = [];
      var step = 0 /* EZephyrStyleParserStep.Key */;
      var index = 0;
      var sliceStart = 0;
      var len = inlineStyle.length;
      var currentKey;
      var currentValue;
      while (index < len) {
          var nextChar = inlineStyle[index];
          switch (step) {
              case 0 /* EZephyrStyleParserStep.Key */:
                  if (nextChar === ':') {
                      step = 1 /* EZephyrStyleParserStep.Value */;
                      currentKey = inlineStyle.slice(sliceStart, index).trim();
                      sliceStart = index + 1;
                  }
                  else if (nextChar === ';') {
                      // 异常状态，终止当前属性识别，跳下一个
                      step = 0 /* EZephyrStyleParserStep.Key */;
                      // 不需要继续消费下一个字符
                      sliceStart = index + 1;
                  }
                  break;
              case 1 /* EZephyrStyleParserStep.Value */:
                  if (nextChar === '(') {
                      step = 2 /* EZephyrStyleParserStep.Arguments */;
                  }
                  else if (nextChar === ';') {
                      step = 0 /* EZephyrStyleParserStep.Key */;
                      currentValue = inlineStyle.slice(sliceStart, index).trim();
                      // 不需要继续消费下一个字符
                      sliceStart = index + 1;
                      styles.push(currentKey, currentValue);
                  }
                  else if (nextChar === "'") {
                      step = 5 /* EZephyrStyleParserStep.StringSingleInValue */;
                  }
                  else if (nextChar === '"') {
                      step = 6 /* EZephyrStyleParserStep.StringDoubleInValue */;
                  }
                  break;
              case 2 /* EZephyrStyleParserStep.Arguments */:
                  if (nextChar === "'") {
                      step = 3 /* EZephyrStyleParserStep.StringSingleInArguments */;
                  }
                  else if (nextChar === '"') {
                      step = 4 /* EZephyrStyleParserStep.StringDoubleInArguments */;
                  }
                  else if (nextChar === ')') {
                      step = 1 /* EZephyrStyleParserStep.Value */;
                  }
                  break;
              case 3 /* EZephyrStyleParserStep.StringSingleInArguments */:
                  if (nextChar === "'") {
                      step = 2 /* EZephyrStyleParserStep.Arguments */;
                  }
                  else if (nextChar === '\\') {
                      index += 1;
                  }
                  break;
              case 4 /* EZephyrStyleParserStep.StringDoubleInArguments */:
                  if (nextChar === '"') {
                      step = 2 /* EZephyrStyleParserStep.Arguments */;
                  }
                  else if (nextChar === '\\') {
                      index += 1;
                  }
                  break;
              case 5 /* EZephyrStyleParserStep.StringSingleInValue */:
                  if (nextChar === "'") {
                      step = 1 /* EZephyrStyleParserStep.Value */;
                  }
                  else if (nextChar === '\\') {
                      index += 1;
                  }
                  break;
              case 6 /* EZephyrStyleParserStep.StringDoubleInValue */:
                  if (nextChar === '"') {
                      step = 1 /* EZephyrStyleParserStep.Value */;
                  }
                  else if (nextChar === '\\') {
                      index += 1;
                  }
                  break;
          }
          index++;
      }
      // 凡是 Value 内部状态均截断
      if (step >= 1 /* EZephyrStyleParserStep.Value */) {
          styles.push(currentKey, inlineStyle.slice(sliceStart).trim());
      }
      return styles;
  }

  function isWebUnitlessNumberProperty(property) {
      if (property) {
          // 解决 CSS Variable 数字会被自动添加 px 单位
          if (property[0] === '-' && property[1] === '-') {
              return true;
          }
          else if (property[0] === '-' && property[1] === 'w') {
              return !!kWebUnitlessNumberPropertyWithVendor[property];
          }
          else {
              return !!kWebUnitlessNumberProperty[property];
          }
      }
      else {
          return false;
      }
  }
  var kWebUnitlessNumberPropertyWithVendor = {
      '-webkit-animation-iteration-count': true,
      '-webkit-box-flex': true,
      '-webkit-box-ordinal-group': true,
      '-webkit-column-count': true,
      '-webkit-columns': true,
      '-webkit-flex': true,
      '-webkit-flex-grow': true,
      '-webkit-flex-shrink': true,
      '-webkit-line-clamp': true,
      '-webkit-opacity': true,
      '-webkit-order': true,
  };
  var kWebUnitlessNumberProperty = {
      'animation-iteration-count': true,
      'border-image-outset': true,
      'border-image-slice': true,
      'border-image-width': true,
      'box-flex': true,
      'box-flex-group': true,
      'box-ordinal-group': true,
      'column-count': true,
      columns: true,
      flex: true,
      'flex-grow': true,
      'flex-negative': true,
      'flex-order': true,
      'flex-positive': true,
      'flex-shrink': true,
      'font-weight': true,
      'grid-area': true,
      'grid-column': true,
      'grid-column-end': true,
      'grid-column-span': true,
      'grid-column-start': true,
      'grid-row': true,
      'grid-row-end': true,
      'grid-row-span': true,
      'grid-row-start': true,
      'line-clamp': true,
      'line-height': true,
      opacity: true,
      order: true,
      orphans: true,
      'tab-size': true,
      widows: true,
      'z-index': true,
      zoom: true,
  };
  var reStyleNormalizeIsValidNumber = /^-?(\d+|\d*\.\d+)([E|e][+|-]?\d+)?$/;
  // tslint:enable no-bitwise

  var zephyrInsideFeatureRuntimeVersion;
  var zephyrInsideFeatureRuntimeClientName;
  var zephyrInsideFeatureRuntimePlatform;
  var zephyrHasInsideFeatureRuntimeImplemention = function () { return false; };
  var zephyrGetInsideCompositeElementConfigImpl;
  var zephyrIsInsideUnsupportElementImpl = function () { return false; };
  var zephyrGetInsideCompositePlatformEvents = function () { return []; };
  // const setInsideRuntimeCallbacks: Array<() => void> = [];
  // export function executeCallbackAfterSetInsideRuntime(callback: () => void) {
  //   setInsideRuntimeCallbacks.push(callback);
  // }
  function setZephyrInsideFeatureRuntime(clientName, version, platform, impl, insideCompositeImpl, isUnsupportElementImpl, insideCompositePlatformEvents) {
      zephyrInsideFeatureRuntimeClientName = clientName;
      zephyrInsideFeatureRuntimeVersion = version;
      zephyrInsideFeatureRuntimePlatform = platform;
      /**
       * @description !!!! 编译扫描全局符号映射标识 DO NOT REMOVE LINES BEGIN
       */
      if (typeof ZEPHYR_INSIDE_FEATURE_CLIENTNAME !== 'undefined') {
          ZEPHYR_INSIDE_FEATURE_CLIENTNAME = zephyrInsideFeatureRuntimeClientName;
      }
      if (typeof ZEPHYR_INSIDE_FEATURE_VERSION !== 'undefined') {
          ZEPHYR_INSIDE_FEATURE_VERSION = zephyrInsideFeatureRuntimeVersion;
      }
      if (typeof ZEPHYR_INSIDE_FEATURE_PLATFORM !== 'undefined') {
          ZEPHYR_INSIDE_FEATURE_PLATFORM = zephyrInsideFeatureRuntimePlatform;
      }
      zephyrHasInsideFeatureRuntimeImplemention = impl;
      /**
       * @description !!!! 编译扫描全局符号映射标识 DO NOT REMOVE LINES END
       */
      if (insideCompositeImpl) {
          zephyrGetInsideCompositeElementConfigImpl = insideCompositeImpl;
      }
      if (isUnsupportElementImpl !== undefined) {
          zephyrIsInsideUnsupportElementImpl = isUnsupportElementImpl;
      }
      if (insideCompositePlatformEvents) {
          zephyrGetInsideCompositePlatformEvents = insideCompositePlatformEvents;
      }
  }

  /**
   * @description !!!! 编译扫描全局符号映射标识 DO NOT REMOVE LINES BEGIN
   */
  /**
   * @description 仅提供 version, platform 的解析能力，启动参数以及函数解析不可用
   */
  var hasZephyrInsideFeature = (typeof ZEPHYR_HAS_INSIDE_FEATURE !== 'undefined' && ZEPHYR_HAS_INSIDE_FEATURE) ||
      zephyrHasInsideFeatureRuntimeImplemention;
  /**
   * @description !!!! 编译扫描全局符号映射标识 DO NOT REMOVE LINES END
   */

  var isZephyrInsideUnsupportElement = (typeof ZEPHYR_IS_INSIDE_UNSUPPORT_ELEMENT !== 'undefined' && ZEPHYR_IS_INSIDE_UNSUPPORT_ELEMENT) ||
      zephyrIsInsideUnsupportElementImpl;

  // css 中有部分情况与通用转换方案不一致，因此单独提供一个转换函数仅用于 css 中划线转驼峰。
  function camelize4CSS(str) {
      // 无需转换
      if (str.indexOf('--') === 0 || str.indexOf('-') === -1) {
          return str;
      }
      var ret = '';
      var nextChrUpper = false;
      for (var i = 0, len = str.length; i < len; i++) {
          var chr = str.charAt(i);
          if (nextChrUpper) {
              nextChrUpper = false;
              chr = chr.toLocaleUpperCase();
          }
          if (i !== 0 && chr === '-') {
              nextChrUpper = true;
              continue;
          }
          else if (chr !== '-') {
              ret += chr;
          }
      }
      return ret;
  }

  var hasNativeLog = typeof nativeLog !== 'undefined';
  var debug$1 =  function (fn) { return info$1(fn()); } ;
  function info$1(str) {
      if (hasNativeLog) {
          nativeLog(str, Date.now());
      }
      else {
          console.log(str, Date.now()); // tslint:disable-line
      }
  }

  var SharedAppxMiniExtensionManager = /** @class */ /*#__PURE__*/ (function () {
      function SharedAppxMiniExtensionManager(appInstanceId) {
          this.extensionExtraInfos = createMap();
          this.appInstanceId = appInstanceId;
      }
      SharedAppxMiniExtensionManager.prototype.bootstrap = function () { };
      SharedAppxMiniExtensionManager.prototype.inited = function () { };
      SharedAppxMiniExtensionManager.prototype.dispose = function () { };
      SharedAppxMiniExtensionManager.prototype.getInitedMiniExtensionInfo = function () {
          return [];
      };
      /** end: client 不需要 */
      SharedAppxMiniExtensionManager.prototype.setStaticExtensionWaitingQueue = function (waitingQueue) { };
      /**
       * 上游有 cache 这里不做了
       */
      SharedAppxMiniExtensionManager.prototype.getMiniExtensionComponentPath = function (type, miniExtensionIdOrDynamicMiniExtensionPath, componentPath) {
          debug$1(function () {
              return "[APPX][EXTENSION] get component path type: ".concat(type, ", idOrPath: ").concat(JSON.stringify(miniExtensionIdOrDynamicMiniExtensionPath), ", componentPath: ").concat(JSON.stringify(componentPath));
          });
          var extensionId;
          var publicName;
          // 换 extensionId 和 publicName
          if (type === 1 /* ERequireZComponentType.MainAppRequireStaticExtensionComponent */) {
              extensionId = miniExtensionIdOrDynamicMiniExtensionPath;
              publicName = componentPath;
          }
          else if (type === 2 /* ERequireZComponentType.MainAppRequireDynamicExtensionComponent */) {
              var typedString4DynamicPath = miniExtensionIdOrDynamicMiniExtensionPath;
              var extensionInfo = get_dynamic_extensionId_publicName(typedString4DynamicPath);
              if (extensionInfo) {
                  extensionId = extensionInfo.extensionId;
                  publicName = extensionInfo.publicName;
              }
          }
          else {
              // dead Code
              // 上游切走了所有的 type === 0
              throw new Error("[APPX][EXTENSION] Error getMiniExtensionComponentPath type:".concat(type, " path: ").concat(JSON.stringify(miniExtensionIdOrDynamicMiniExtensionPath), " componentPath: ").concat(JSON.stringify(componentPath), "}"));
          }
          if (extensionId && publicName) {
              var miniExtensionConfig = this.getMetaByExtensionId(extensionId);
              if (miniExtensionConfig) {
                  var publicConfig = miniExtensionConfig.publicConfig;
                  if (publicConfig) {
                      var publicName2Config = publicConfig.publicName2Config;
                      if (publicName2Config) {
                          var componentInfo = publicName2Config.components[publicName.value];
                          if (componentInfo) {
                              var result_1 = {
                                  extensionId: extensionId.value,
                                  type: 0 /* EMiniExtensionStringType.plugin_private_$_id_$_resolved_path */,
                                  value: componentInfo.pluginPrivatePath,
                              };
                              debug$1(function () {
                                  return "[APPX][EXTENSION] get component path type: ".concat(type, ", idOrPath: ").concat(JSON.stringify(miniExtensionIdOrDynamicMiniExtensionPath), ", componentPath: ").concat(JSON.stringify(componentPath), ", result: ").concat(JSON.stringify(result_1));
                              });
                              return result_1;
                          }
                      }
                  }
              }
          }
      };
      SharedAppxMiniExtensionManager.prototype.getMiniExtensionPagePath = function (publicPagePath) {
          var _a = this.getMiniExtensionIdAndPublicNameByPagePath(publicPagePath), extensionId = _a.extensionId, publicName = _a.publicName;
          // 开始查 extension publicConfig
          if (extensionId && publicName) {
              var miniExtensionConfig = this.getMetaByExtensionId(extensionId);
              if (miniExtensionConfig) {
                  var publicConfig = miniExtensionConfig.publicConfig;
                  if (publicConfig) {
                      var publicName2Config = publicConfig.publicName2Config;
                      if (publicName2Config) {
                          var pageInfo = publicName2Config.pages[publicName.value];
                          if (pageInfo) {
                              var result_2 = {
                                  extensionId: extensionId,
                                  resolvedPath: {
                                      type: 7 /* EMiniExtensionStringType._$_resolved_path_$_ */,
                                      value: pageInfo.resolvedPath,
                                  },
                              };
                              debug$1(function () {
                                  return "[APPX][EXTENSION] get public page path: ".concat(JSON.stringify(publicPagePath), " ").concat(JSON.stringify(result_2));
                              });
                              return result_2;
                          }
                      }
                  }
              }
          }
      };
      SharedAppxMiniExtensionManager.prototype.getMiniExtensionIdAndPublicNameByPagePath = function (publicPagePath) {
          debug$1(function () { return "[APPX][EXTENSION] get public page path: ".concat(JSON.stringify(publicPagePath)); });
          var v = publicPagePath.value;
          var extensionId;
          var publicName;
          // 从这里换 extensionId 和 publicName
          if (isPluginProtocolPath(v)) {
              var extensionInfo = get_extensionName_publicName(publicPagePath);
              if (extensionInfo) {
                  var extensionName = extensionInfo.extensionName;
                  publicName = extensionInfo.publicName;
                  var extensionProviderConfig = this.getExtensionInfoByExtensionName(extensionName);
                  if (extensionProviderConfig) {
                      var provider = extensionProviderConfig.provider;
                      extensionId = {
                          type: 4 /* EMiniExtensionStringType._$_extension_id_$_ */,
                          value: provider,
                      };
                  }
              }
          }
          else if (isDynamicProtocolPath(v)) {
              var extensionInfo = get_dynamic_extensionId_publicName(publicPagePath);
              if (extensionInfo) {
                  publicName = extensionInfo.publicName;
                  extensionId = extensionInfo.extensionId;
              }
          }
          return {
              extensionId: extensionId,
              publicName: publicName,
          };
      };
      SharedAppxMiniExtensionManager.prototype.loadDynamicMiniExtension = function (dynamicPluginExpression, currentPageId, callback) {
          var _this = this;
          debug$1(function () { return "[APPX][EXTENSION] loadDynamicMiniExtension: ".concat(JSON.stringify(dynamicPluginExpression)); });
          var loader = this.getDynamicMiniExtensionLoader();
          loader.hostLoadDynamicMiniExtension(dynamicPluginExpression, function (errorFromHost, payload) {
              if (errorFromHost) {
                  callback(errorFromHost);
                  return;
              }
              else {
                  /**
                   * currentPageId 可能出现的值
                   * 1. 当前栈顶的 pageId
                   * 2. 用户传入的 pageId
                   * 3. 新页面，还未入栈的 pageId
                   */
                  var pageId = currentPageId == null ? _this.getPageId() : currentPageId;
                  if (pageId == null) {
                      debug$1(function () {
                          return "[APPX][EXTENSION] loadDynamicMiniExtension: ".concat(JSON.stringify(dynamicPluginExpression), " pageIdNotFound client NotLoad index.js");
                      });
                      callback();
                      return;
                  }
                  if (payload.isStatic) {
                      debug$1(function () {
                          return "[APPX][EXTENSION] loadDynamicMiniExtension: ".concat(JSON.stringify(dynamicPluginExpression), " isStatic client load skip");
                      });
                      callback();
                      return;
                  }
                  if (payload) {
                      var version = payload.version, package_nick = payload.package_nick, componentContext = payload.componentContext;
                      if (version) {
                          var extraInfo = { version: version };
                          if (package_nick) {
                              extraInfo.package_nick = package_nick;
                          }
                          if (componentContext) {
                              extraInfo.componentContext = componentContext;
                          }
                          _this.setExtraInfoByExtensionId(payload.extensionId.value, extraInfo);
                      }
                  }
                  loader.clientLoadDynamicMiniExtension(__assign(__assign({}, payload), { appInstanceId: _this.appInstanceId, pageId: pageId }), function (errorFromClient) {
                      if (errorFromClient) {
                          callback(errorFromClient);
                          return;
                      }
                      else {
                          callback();
                          return;
                      }
                  });
              }
          });
      };
      SharedAppxMiniExtensionManager.prototype.getDynamicMiniExtensionLoader = function () {
          if (!this.dynamicMiniExtensionLoader) {
              this.dynamicMiniExtensionLoader = this.createDynamicMiniExtensionLoader();
          }
          return this.dynamicMiniExtensionLoader;
      };
      SharedAppxMiniExtensionManager.prototype.setExtraInfoByExtensionId = function (miniExtensionId, extra) {
          if (!miniExtensionId) {
              return;
          }
          this.extensionExtraInfos.set(miniExtensionId, extra);
      };
      return SharedAppxMiniExtensionManager;
  }());

  var SharedHostMiniExtensionLoadManager = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(SharedHostMiniExtensionLoadManager, _super);
      function SharedHostMiniExtensionLoadManager() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      SharedHostMiniExtensionLoadManager.prototype.getLoadPluginOption = function (exp) {
          var extractValue = get_extensionId_version(exp);
          if (!extractValue) {
              // 解析失败则原样传递，保持以前逻辑
              return {
                  plugin: exp.value,
              };
          }
          var compileInfo = this.getCompileInfo();
          var debugPlugins = compileInfo && compileInfo.debugPlugins;
          if (!debugPlugins) {
              return {
                  plugin: exp.value,
              };
          }
          var hitDebugPluginInfo = debugPlugins && extractValue.extensionId.value && debugPlugins[extractValue.extensionId.value];
          if (hitDebugPluginInfo) {
              info$1("[APPX] debugOptions.plugins[".concat(extractValue.extensionId.value, "] hit => ").concat(hitDebugPluginInfo.scene, ":").concat(hitDebugPluginInfo.version));
              return {
                  plugin: get_expression_by_extensionId_version(extractValue.extensionId, {
                      type: 11 /* EMiniExtensionStringType._$_version_$_ */,
                      value: hitDebugPluginInfo.version,
                  }).value,
                  pluginScene: hitDebugPluginInfo.scene,
              };
          }
          else {
              info$1("[APPX] debugOptions.plugins[".concat(extractValue.extensionId.value, "] miss"));
              return {
                  plugin: exp.value,
              };
          }
      };
      SharedHostMiniExtensionLoadManager.prototype.loadResourceInternal = function (res, callback) {
          /**
           * 发起 loadPlugin 的请求即可完成 host 侧加载插件
           */
          var pluginOption = this.getLoadPluginOption(res.dynamicPluginExpression);
          this.callInternalAPI('loadPlugin', pluginOption, function (resFromBridge) {
              if (resFromBridge === void 0) { resFromBridge = {}; }
              if (resFromBridge.error) {
                  callback(resFromBridge, undefined);
              }
              else if (!resFromBridge.url) {
                  callback({
                      error: 1,
                      errorMessage: 'loadPlugin failed, did not get url',
                      res: resFromBridge,
                  }, undefined);
              }
              else {
                  var package_nick = resFromBridge.package_nick, url = resFromBridge.url, version = resFromBridge.version, componentContext = resFromBridge.componentContext;
                  // tslint:disable object-literal-sort-keys
                  var payLoad = {
                      package_nick: package_nick,
                      url: url,
                      version: version,
                      componentContext: componentContext,
                  };
                  // tslint:enable object-literal-sort-keys
                  callback(undefined, payLoad);
              }
          });
      };
      SharedHostMiniExtensionLoadManager.prototype.getKeyFromResource = function (res) {
          return res.extensionId.value;
      };
      SharedHostMiniExtensionLoadManager.prototype.shouldRetry4Resource = function () {
          return true;
      };
      return SharedHostMiniExtensionLoadManager;
  }(StatefulLoadManager));

  var DynamicMiniExtensionLoadManager = /** @class */ /*#__PURE__*/ (function () {
      function DynamicMiniExtensionLoadManager(miniExtensionManager) {
          this.miniExtensionManager = miniExtensionManager;
      }
      DynamicMiniExtensionLoadManager.prototype.dispose = function () {
          this.isDispose = true;
          this.miniExtensionManager = null;
      };
      DynamicMiniExtensionLoadManager.prototype.clientLoadDynamicMiniExtension = function (resource, resolve) {
          var _this = this;
          if (this.isDispose) {
              return resolve({
                  error: 1,
                  errorMessage: "dynamic load manager disposed when loading ".concat(resource.url),
              });
          }
          if (!resource || !resource.url || resource.pageId === undefined || resource.pageId === null) {
              resolve({ error: 1, errorMessage: "client load extension resource: ".concat(JSON.stringify(resource)) });
          }
          else {
              var pageId = resource.pageId;
              var clientLoadManager = this.getClientMiniExtensionLoader(pageId);
              if (!clientLoadManager) {
                  // TODO 没有对应 client 的情况直接 resolve？
                  return resolve();
              }
              clientLoadManager.loadResource(resource, function (e) {
                  if (_this.isDispose) {
                      return resolve({ error: 1, errorMessage: "dispose when loadResource ".concat(resource.url) });
                  }
                  if (e) {
                      return resolve(e);
                  }
                  else {
                      return resolve();
                  }
              });
          }
      };
      DynamicMiniExtensionLoadManager.prototype.hostLoadDynamicMiniExtension = function (dynamicPluginExpression, resolve) {
          var _this = this;
          if (this.isDispose) {
              return resolve({ error: 1, errorMessage: "dispose when loadResource ".concat(dynamicPluginExpression.value) });
          }
          // plugin 语法校验
          if (!dynamicPluginExpression) {
              return resolve({ error: 1, errorMessage: '参数plugin格式错误，应为 pluginId@version' });
          }
          var res = get_extensionId_version(dynamicPluginExpression);
          if (!res) {
              return resolve({ error: 1, errorMessage: '参数plugin格式错误，应为 pluginId@version' });
          }
          var extensionId = res.extensionId, version = res.version;
          // 静态插件不要再打客户端的 loadPlugin
          var isStatic = this.miniExtensionManager.isStaticMiniExtension(extensionId);
          if (isStatic) {
              resolve(undefined, { isStatic: isStatic, url: '', extensionId: extensionId });
              return;
          }
          // 插件开发场景
          // 对于已经注册过的插件(worker 启动)，不再动态拉包，执行插件业务逻辑
          if (this.miniExtensionManager.isExtensionDevelopmentRunScene(extensionId)) {
              debug$1(function () { return "\n        loadDynamicPlugin fits development scene. Extension: [".concat(extensionId.value, "]\n      "); });
              var config_1 = this.miniExtensionManager.getMetaByExtensionId(extensionId);
              if (config_1) {
                  debug$1(function () { return "init loaded development miniExtension start ".concat(extensionId.value); });
                  // 执行插件 worker 业务逻辑
                  setTimeout(function () {
                      // 当前事件循环后执行
                      _this.miniExtensionManager.initMiniExtensionById(extensionId.value, config_1, false);
                      debug$1(function () { return "init loaded development miniExtension end ".concat(extensionId.value); });
                      resolve(undefined, { isStatic: true, url: null, extensionId: extensionId });
                  }, 0);
                  return;
              }
          }
          debug$1(function () { return "host load miniExtension start ".concat(extensionId.value); });
          var hostLoader = this.getHostMiniExtensionLoader();
          // 在 host 侧开始加载
          hostLoader.loadResource({ extensionId: extensionId, dynamicPluginExpression: dynamicPluginExpression }, function (error, payLoad) {
              if (_this.isDispose) {
                  return resolve({ error: 1, errorMessage: "dispose when loadResource ".concat(dynamicPluginExpression.value) });
              }
              if (error) {
                  debug$1(function () { return "host load miniExtension end ".concat(extensionId.value, " error ").concat(JSON.stringify(error)); });
                  resolve(error);
                  return;
              }
              else {
                  debug$1(function () { return "host load miniExtension end ".concat(extensionId.value, " success ").concat(payLoad.url); });
                  // 在 client 侧开始加载
                  resolve(undefined, __assign(__assign({}, payLoad), { extensionId: extensionId, isStatic: isStatic }));
              }
          });
      };
      return DynamicMiniExtensionLoadManager;
  }());

  function getWatchShakeInterval(interval) {
      var samplingPeriodUs;
      switch (interval) {
          case "game" /* EWatchShakeSamplingPeriodUs.game */:
              samplingPeriodUs = 0.02 /* EWatchShakeInterval.game */;
              break;
          case "ui" /* EWatchShakeSamplingPeriodUs.ui */:
              samplingPeriodUs = 0.06 /* EWatchShakeInterval.ui */;
              break;
          case "normal" /* EWatchShakeSamplingPeriodUs.normal */:
              samplingPeriodUs = 0.2 /* EWatchShakeInterval.normal */;
              break;
          default:
              samplingPeriodUs = 0.2 /* EWatchShakeInterval.normal */;
      }
      return samplingPeriodUs;
  }

  function getNativeV8PluginName(fn) {
      switch (fn) {
          case "__createAR" /* ENativeV8PluginFunctionName.createAR */:
          case "__createARSession" /* ENativeV8PluginFunctionName.createARSession */:
              return 'v8jsbridge';
          case "__createCanvas" /* ENativeV8PluginFunctionName.createCanvas */:
              return 'gcanvas_runtime';
          case "__createCanvasContext" /* ENativeV8PluginFunctionName.createCanvasContext */:
              return 'gcanvas_runtime';
          case "__createOffscreenCanvas" /* ENativeV8PluginFunctionName.createOffscreenCanvas */:
              return 'gcanvas_runtime';
          case "__createXnn" /* ENativeV8PluginFunctionName.createXnn */:
              return 'xnnv8plugin';
      }
  }
  function getNativeFunctionIfExisted(nativePluginFnName, getFrameworkContextSymbol) {
      if (!getFrameworkContextSymbol(nativePluginFnName)) {
          var pluginName = getNativeV8PluginName(nativePluginFnName);
          if (typeof __nativeLoadPlugins__ !== 'undefined' && pluginName) {
              __nativeLoadPlugins__([pluginName]);
          }
          return getFrameworkContextSymbol(nativePluginFnName);
      }
      else {
          return getFrameworkContextSymbol(nativePluginFnName);
      }
  }

  var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u08a0-\u08b4\u08b6-\u08c7\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\u9ffc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7bf\ua7c2-\ua7ca\ua7f5-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
  var nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d3-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf\u1ac0\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1df9\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
  var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
  var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
  function isIdentifierStart(code) {
      if (code < 65)
          { return code === 36; }
      if (code < 91)
          { return true; }
      if (code < 97)
          { return code === 95; }
      if (code < 123)
          { return true; }
      if (code <= 0xffff)
          { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)); }
      return false;
  }
  function isIdentifierChar(code) {
      if (code < 48)
          { return code === 36; }
      if (code < 58)
          { return true; }
      if (code < 65)
          { return false; }
      if (code < 91)
          { return true; }
      if (code < 97)
          { return code === 95; }
      if (code < 123)
          { return true; }
      if (code <= 0xffff)
          { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)); }
      return false;
  }

  var Tokenizer = /** @class */ /*#__PURE__*/ (function () {
      function Tokenizer(input) {
          var this$1 = this;

          this.pos = 0;
          this.input = input;
          if (this.input.trim().length === this.input.length) {
              this.sourceIndex = 0;
              this.srcEnd = this.input.length;
          }
          else {
              for (var i = 0; i < this.input.length; i++) {
                  if (this$1.input.charCodeAt(i) !== 32 || this$1.input.charCodeAt(i) !== 160) {
                      this$1.pos = this$1.sourceIndex = i;
                      break;
                  }
              }
              for (var i = this.input.length - 1; i >= 0; i--) {
                  if (this$1.input.charCodeAt(i) !== 32 || this$1.input.charCodeAt(i) !== 160) {
                      this$1.srcEnd = i;
                      break;
                  }
              }
          }
      }
      Tokenizer.prototype.next = function () {
          var code = this.fullCharCodeAtPos();
          if (isIdentifierStart(code)) {
              return this.readTagToken();
          }
          else {
              switch (code) {
                  case 46: // '.'
                      return this.readClassToken();
                  case 35: // '#'
                      return this.readIdToken();
                  case 58: // ':'
                      return this.readPseudoToken();
                  case 91: // '['
                      return this.readAttributeToken();
                  case 9: // '\t'
                  case 10: // '\n'
                  case 12: // '\f'
                  case 13: // '\r'
                  case 32: // ' '
                      return this.readSpaceCombinator();
                  case 42: // '*'
                      this.pos++;
                      return this.finishToken(7 /* universal */);
                  case 44: // ','
                  case 62: // '>'
                  // btw: >>> 被称为deep-selector 不是css标准
                  // https://stackoverflow.com/questions/55801112/what-is-a-triple-greater-than-selector-in-css
                  case 43: // '+'
                  case 126: // '~'
                      this.pos++;
                      return this.finishToken(4 /* combinator */);
                  default:
                      throw new Error("unknown char code at pos: " + this.pos + ", with selector: " + this.input);
              }
          }
      };
      Tokenizer.prototype.readSpaceCombinator = function () {
          var this$1 = this;

          this.pos++;
          while (this.input.charCodeAt(this.pos) === 32
              || this.input.charCodeAt(this.pos) === 9
              || this.input.charCodeAt(this.pos) === 10
              || this.input.charCodeAt(this.pos) === 12
              || this.input.charCodeAt(this.pos) === 13) {
              this$1.pos++;
          }
          return this.finishToken(4 /* combinator */);
      };
      Tokenizer.prototype.readAttributeToken = function () {
          var this$1 = this;

          // 这里写的不够严格 后面再补逻辑
          this.pos++;
          while (this.input.charCodeAt(this.pos) !== 93) { // ']'
              this$1.pos++;
          }
          this.pos++;
          return this.finishToken(6 /* attribute */);
      };
      Tokenizer.prototype.readPseudoToken = function () {
          var this$1 = this;

          this.pos++;
          if (this.input.charCodeAt(this.pos) === 58) { // ::before or ::after这种双冒号伪元素
              this.pos++;
          }
          while (isIdentifierChar(this.input.charCodeAt(this.pos))
              || this.input.charCodeAt(this.pos) === 45 // 伪元素可能包含 '-' 比如 ::-webkit-scrollbar
              || this.input.charCodeAt(this.pos) === 40 // '(' 伪元素nth
              || this.input.charCodeAt(this.pos) === 41 // ')' 伪元素nth
              || this.input.charCodeAt(this.pos) === 43 // '+' 伪元素nth计算表达式
          ) {
              this$1.pos++;
          }
          return this.finishToken(5 /* pseudo */);
      };
      Tokenizer.prototype.readTagToken = function () {
          var this$1 = this;

          this.pos++;
          while (isIdentifierChar(this.input.charCodeAt(this.pos))
              || this.input.charCodeAt(this.pos) === 45 // '-'
              || this.input.charCodeAt(this.pos) === 95 // '_'
          ) {
              this$1.pos++;
          }
          return this.finishToken(1 /* tag */);
      };
      Tokenizer.prototype.readClassToken = function () {
          var this$1 = this;

          this.pos++;
          while (isIdentifierChar(this.input.charCodeAt(this.pos))
              || this.input.charCodeAt(this.pos) === 45 // '-'
              || this.input.charCodeAt(this.pos) === 95 // '_'
          ) {
              this$1.pos++;
          }
          return this.finishToken(2 /* class */);
      };
      Tokenizer.prototype.readIdToken = function () {
          var this$1 = this;

          this.pos++;
          while (isIdentifierChar(this.input.charCodeAt(this.pos))
              || this.input.charCodeAt(this.pos) === 45 // '-'
              || this.input.charCodeAt(this.pos) === 95 // '_
          ) {
              this$1.pos++;
          }
          return this.finishToken(3 /* id */);
      };
      Tokenizer.prototype.finishToken = function (tokType) {
          var node = {
              type: tokType,
              value: this.input.slice(this.sourceIndex, this.pos),
              sourceIndex: this.sourceIndex,
          };
          this.sourceIndex = this.pos;
          return node;
      };
      Tokenizer.prototype.fullCharCodeAtPos = function () {
          // 暂时先只处理单字符
          // let code = this.input.charCodeAt(this.pos)
          // if (code <= 0xd7ff || code >= 0xe000) return code
          // let next = this.input.charCodeAt(this.pos + 1)
          // return (code << 10) + next - 0x35fdc00
          return this.input.charCodeAt(this.pos);
      };
      Tokenizer.prototype.isEnd = function () {
          if (this.pos < this.srcEnd) {
              return false;
          }
          else {
              return true;
          }
      };
      return Tokenizer;
  }());

  var AcssSelectorParser = /** @class */ /*#__PURE__*/ (function () {
      function AcssSelectorParser(option) {
          this.isSupportCss3 = true;
          if (option.version >= 3) {
              this.isSupportCss3 = true;
          }
          else {
              this.isSupportCss3 = false;
          }
      }
      AcssSelectorParser.prototype.tokenize = function (input) {
          var tokenizer = new Tokenizer(input);
          var output = [];
          while (!tokenizer.isEnd()) {
              var node = tokenizer.next();
              output.push(node);
          }
          return output;
      };
      return AcssSelectorParser;
  }());

  function cubestylemerge() {
      var arguments$1 = arguments;

      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments$1[_i];
      }
      var cubeStyle = {
          '@FONTFACE': {},
          '@KEYFRAMES': {},
          rules: [],
      };
      if (args.length <= 1) {
          var stylesheet = args[0] || cubeStyle;
          return isCubeFormat(stylesheet) ? stylesheet : handleNativeStyle(stylesheet);
      }
      for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
          var stylesheet = args_1[_a];
          if (!isCubeFormat(stylesheet)) {
              stylesheet = handleNativeStyle(stylesheet);
          }
          cubeStyle.rules = cubeStyle.rules.concat(stylesheet.rules);
          cubeStyle['@KEYFRAMES'] = Object.assign(cubeStyle['@KEYFRAMES'], stylesheet['@KEYFRAMES']);
          cubeStyle['@FONTFACE'] = Object.assign(cubeStyle['@FONTFACE'], stylesheet['@FONTFACE']);
      }
      return cubeStyle;
  }
  function isCubeFormat(styleObj) {
      var objKeys = Object.keys(styleObj);
      if (objKeys.length === 3 &&
          objKeys.includes('rules') &&
          objKeys.includes('@KEYFRAMES') &&
          objKeys.includes('@FONTFACE')) {
          return true;
      }
      return false;
  }
  function handleSelector4Cube(nodes) {
      var items = [];
      var relations = [];
      for (var i = 0; i < nodes.length; i++) {
          var prevNode = nodes[i - 1];
          var node = nodes[i];
          if (node.type === 4 /* TokenType.combinator */) {
              continue;
          }
          else {
              items.push(node.value);
          }
          if (i > 0) {
              if (prevNode.type === 4 /* TokenType.combinator */) {
                  switch (prevNode.value) {
                      case '>':
                          relations.push(2);
                          break;
                      case '+':
                          relations.push(3);
                          break;
                      case '~':
                          relations.push(4);
                          break;
                      case ',':
                          relations.push(5);
                          break;
                      default:
                          if (/^\s+$/.test(prevNode.value)) {
                              relations.push(1);
                          }
                          else {
                              throw new Error('unexcepted combinator token in acss selector');
                          }
                  }
              }
              else {
                  relations.push(0);
              }
          }
          else {
              relations.push(0);
          }
      }
      return {
          items: items,
          relations: relations,
      };
  }
  /**
   * 这里是对旧的native链路上stylesheet的k-v格式做处理
   * 因为框架样式即使在新的cube下沉链路上，依然是旧格式
   */
  function handleNativeStyle(naStyle) {
      var rules = [];
      var keyframe = {};
      var fontface = {};
      var naStyleKeys = Object.keys(naStyle);
      for (var _i = 0, naStyleKeys_1 = naStyleKeys; _i < naStyleKeys_1.length; _i++) {
          var selKey = naStyleKeys_1[_i];
          var parser = new AcssSelectorParser({ version: 3 });
          var nodes = parser.tokenize(selKey);
          var cubeSelector = handleSelector4Cube(nodes);
          var rule = {
              declarations: [],
              selectors: cubeSelector,
              type: 0,
          };
          var styleKeys = Object.keys(naStyle[selKey]);
          for (var _a = 0, styleKeys_1 = styleKeys; _a < styleKeys_1.length; _a++) {
              var styleKey = styleKeys_1[_a];
              var decl = {};
              decl[styleKey] = naStyle[selKey][styleKey];
              rule.declarations.push(decl);
          }
          rules.push(rule);
      }
      if (typeof naStyle['@KEYFRAMES'] === 'object') {
          keyframe = naStyle['@KEYFRAMES'];
      }
      if (typeof naStyle['@FONTFACE'] === 'object') {
          fontface = naStyle['@FONTFACE'];
      }
      return {
          '@FONTFACE': fontface,
          '@KEYFRAMES': keyframe,
          rules: rules,
      };
  }

  function getAppVersion(startupParams) {
      return startupParams ? startupParams.version || startupParams.appVersion || '' : '';
  }

  function simpleDeepCopy(obj) {
      return JSON.parse(JSON.stringify(obj));
  }

  function getFlexiblePageInstanceByPagePublicInstance(runtimeGetter, publicInstance) {
      if (publicInstance) {
          var pageInstance = runtimeGetter()
              .getPageManager()
              .getInstanceById(publicInstance.$viewId);
          if (pageInstance && pageInstance.getPageLogicInstance().publicInstance === publicInstance) {
              return pageInstance;
          }
      }
  }
  function getFlexiblePageInstanceByComponentPublicInstance(runtimeGetter, publicInstance) {
      if (publicInstance) {
          var pageInstance = runtimeGetter()
              .getPageManager()
              .getInstanceById(publicInstance.$page && publicInstance.$page.$viewId);
          if (pageInstance &&
              pageInstance.logics[publicInstance.$id]
                  .publicInstance === publicInstance) {
              return pageInstance;
          }
      }
  }
  function getFlexibleComponentInstanceByComponentPublicInstance(runtimeGetter, publicInstance) {
      if (publicInstance) {
          var pageInstance = runtimeGetter()
              .getPageManager()
              .getInstanceById(publicInstance.$page && publicInstance.$page.$viewId);
          var componentInstance = pageInstance && pageInstance.logics[publicInstance.$id];
          if (componentInstance && componentInstance.publicInstance === publicInstance) {
              return componentInstance;
          }
      }
  }
  function isAppSupportCustomizeTabBar(tabBar, startupParams) {
      var isCustomizeTabBar = tabBar && tabBar.customize;
      return isCustomizeTabBar && startupParams && startupParams.hideDefaultTabBar;
  }

  var SharedEventEmitter = /** @class */ /*#__PURE__*/ (function () {
      function SharedEventEmitter() {
          this.eventMap = Object.create(null);
      }
      SharedEventEmitter.prototype.dispatchEvent = function (name, payload, returnContext) {
          if (returnContext) {
              var callbacks = this.getCallbacks(name);
              var callbackLength = callbacks ? callbacks.length : 0;
              if (!callbackLength) {
                  returnContext.code = 2 /* ESharedEventDispatchReturnCode.CALLBACK_NOT_FOUND */;
              }
              else if (callbackLength === 1) {
                  // success
                  try {
                      returnContext.returnValue = callbacks[0].call(null, payload);
                      returnContext.code = 0 /* ESharedEventDispatchReturnCode.SUCCESS */;
                  }
                  catch (ex) {
                      returnContext.code = 1 /* ESharedEventDispatchReturnCode.CALL_EXCEPTION */;
                  }
              }
              else {
                  returnContext.code = 3 /* ESharedEventDispatchReturnCode.CALLBACK_TOO_MUCH */;
              }
          }
          else {
              for (var _i = 0, _a = this.getCallbacks(name); _i < _a.length; _i++) {
                  var callback = _a[_i];
                  callback(payload);
              }
          }
      };
      SharedEventEmitter.prototype.addEventListener = function (name, callback) {
          var callbacks = this.getCallbacks(name);
          if (callbacks.indexOf(callback) === -1) {
              callbacks.push(callback);
          }
      };
      SharedEventEmitter.prototype.removeEventListener = function (name, callback) {
          var callbacks = this.getCallbacks(name);
          if (callbacks.indexOf(callback) !== -1) {
              this.setCallbacks(name, callbacks.filter(function (d) { return d !== callback; }));
          }
      };
      SharedEventEmitter.prototype.removeEventListeners = function (name) {
          this.setCallbacks(name, []);
      };
      SharedEventEmitter.prototype.getCallbacks = function (name) {
          if (!this.eventMap[name]) {
              this.eventMap[name] = [];
          }
          return this.eventMap[name];
      };
      SharedEventEmitter.prototype.setCallbacks = function (name, callbacks) {
          this.eventMap[name] = callbacks;
      };
      return SharedEventEmitter;
  }());

  var EmptyAppxPageStateManager4AppxNg = /** @class */ /*#__PURE__*/ (function () {
      function EmptyAppxPageStateManager4AppxNg() {
      }
      EmptyAppxPageStateManager4AppxNg.prototype.registerPageRequirement = function (options, appxDomain, global, page) { };
      EmptyAppxPageStateManager4AppxNg.prototype.addRequirement = function (page) { };
      return EmptyAppxPageStateManager4AppxNg;
  }());

  var precisionTimestampBasis = 0;
  var getPrecisionTimestamp = typeof performance === 'object' && performance && typeof performance.now === 'function'
      ? function () { return performance.now() * 1000 + precisionTimestampBasis; }
      : function () { return Date.now() * 1000; };

  function createClassMethodInteceptor(constructor) {
      return {
          after: function (method, hook) {
              inteceptClassMethodAfter(constructor, method, hook);
              return this;
          },
          all: function (method, before, after) {
              inteceptClassMethodAll(constructor, method, before, after);
              return this;
          },
          before: function (method, hook) {
              inteceptClassMethodBefore(constructor, method, hook);
              return this;
          },
      };
  }
  function inteceptClassMethodBefore(constructor, method, hook) {
      var originalMethod = constructor.prototype[method];
      constructor.prototype[method] = function () {
          var args = arguments;
          var finalArgs = invokeGuard(hook, null, [this, args]) || args;
          return functionApply(originalMethod, this, finalArgs);
      };
  }
  function inteceptClassMethodAll(constructor, method, before, after) {
      var originalMethod = constructor.prototype[method];
      constructor.prototype[method] = function () {
          var _a;
          var start = getPrecisionTimestamp();
          var args = arguments;
          var beforeResult = invokeGuard(before, null, [this, args]);
          var returnType;
          var finalArgs = args;
          if (beforeResult) {
              returnType = beforeResult[0], _a = beforeResult[1], finalArgs = _a === void 0 ? args : _a;
          }
          var result;
          var error;
          var hasError;
          try {
              result = functionApply(originalMethod, this, finalArgs);
          }
          catch (ex) {
              hasError = true;
              error = ex;
          }
          invokeGuard(after, null, [this, [returnType, finalArgs, error], result, start]);
          if (hasError) {
              throw error;
          }
          return result;
      };
  }
  function inteceptClassMethodAfter(constructor, method, hook) {
      var originalMethod = constructor.prototype[method];
      constructor.prototype[method] = function () {
          var start = getPrecisionTimestamp();
          var args = arguments;
          var result;
          var error;
          var hasError;
          try {
              result = functionApply(originalMethod, this, args);
          }
          catch (ex) {
              hasError = true;
              error = ex;
          }
          result = invokeGuard(hook, null, [this, args, error, result, start]) || result;
          if (hasError) {
              throw error;
          }
          return result;
      };
  }
  function invokeGuard(fn, context, args) {
      try {
          return functionApply(fn, context, args);
      }
      catch (ex) {
          // tslint:disable-next-line
          console.error(ex);
      }
  }

  var SharedAppxLazyLoadManager = /** @class */ /*#__PURE__*/ (function () {
      function SharedAppxLazyLoadManager() {
      }
      SharedAppxLazyLoadManager.prototype.register = function (loadType, payload, pageId, instance) { };
      return SharedAppxLazyLoadManager;
  }());

  function bitwiseAddState(current, state) {
      // tslint:disable no-bitwise
      return (current | state);
      // tslint:enable no-bitwise
  }
  function bitwiseHasState(current, state) {
      // tslint:disable no-bitwise
      return !!(current & state);
      // tslint:enable no-bitwise
  }
  function bitwiseRemoveState(current, state) {
      // tslint:disable no-bitwise
      return (current & ~state);
      // tslint:enable no-bitwise
  }

  function getAppxLoggerPerfError(pagePath, appMeta, runtime, isHost) {
      var isPageDefined = false;
      var isJsLoaded = false;
      var miniExtensionInfo = get_extensionId_resolvedPath({
          type: 0 /* EMiniExtensionStringType.plugin_private_$_id_$_resolved_path */,
          value: pagePath,
      });
      try {
          if (miniExtensionInfo) {
              var miniExtensionMeta = runtime.getMiniExtensionManager().getMetaByExtensionId(miniExtensionInfo.extensionId);
              if (miniExtensionMeta && Array.isArray(miniExtensionMeta.config.pages)) {
                  isPageDefined = miniExtensionMeta.config.pages.indexOf(miniExtensionInfo.resolvedPath.value) > -1;
                  isJsLoaded = true;
              }
          }
          else if (appMeta) {
              isPageDefined = appMeta.pages.indexOf(pagePath) > -1;
              if (!isPageDefined && appMeta.subPackages) {
                  var _loop_1 = function (root, pages) {
                      if (Array.isArray(pages) && pages.some(function (page) { return root + '/' + page === pagePath; })) {
                          isPageDefined = true;
                          return "break";
                      }
                  };
                  for (var _i = 0, _a = appMeta.subPackages; _i < _a.length; _i++) {
                      var _b = _a[_i], root = _b.root, pages = _b.pages;
                      var state_1 = _loop_1(root, pages);
                      if (state_1 === "break")
                          { break; }
                  }
              }
              isJsLoaded = true;
          }
      }
      catch (_c) {
          // meta 信息不对
      }
      return isHost
          ? isJsLoaded
              ? isPageDefined
                  ? 5 /* EAppxLoggerPerfError.PageNotFound_HostRegistry */
                  : 6 /* EAppxLoggerPerfError.PageNotFound_HostMetaMissing */
              : 4 /* EAppxLoggerPerfError.PageNotFound_HostLoadJs */
          : isJsLoaded
              ? isPageDefined
                  ? 2 /* EAppxLoggerPerfError.PageNotFound_ClientRegistry */
                  : 3 /* EAppxLoggerPerfError.PageNotFound_ClientMetaMissing */
              : 1 /* EAppxLoggerPerfError.PageNotFound_ClientLoadJs */;
  }

  var runtimeDepImplMap = [
      [null, null, null, null, null, null, null, null],
      [null, null, null, null, null, null, null, null] ];
  function setRuntimeDependencyImpl(depType, type, impl) {
      runtimeDepImplMap[type][depType] = impl;
  }
  function createRuntimeDependency(depType, type, appInstanceId, payload) {
      var impl = runtimeDepImplMap[type][depType];
      if (payload) {
          return new impl(appInstanceId, payload);
      }
      else {
          return new impl(appInstanceId);
      }
  }

  function noop() { }
  var hasNativeLog$1 = typeof nativeLog !== 'undefined' && typeof mqEnvironment !== 'undefined';
  var logs4core = [];
  var flag4logs4core = false;
  function setLogs4CoreEnable() {
      flag4logs4core = true;
  }
  function getLogs4Core() {
      return logs4core;
  }
  /**
   * 使用 rollup 能做到 development 分析出传入是一个纯还是直接把整个语句 tree-shaking
   */
  var debug$1$1 =  function (fn) { return info$1$1(fn()); } ;
  function info$1$1(str) {
      if (hasNativeLog$1) {
          nativeLog(str, Date.now());
      }
      else {
          console.log(str, Date.now()); // tslint:disable-line
      }
      if (flag4logs4core) {
          logs4core.push([Date.now(), str]);
      }
  }

  function isObject(value) {
      return typeof value === 'object' && value !== null && !Array.isArray(value);
  }

  function isUndefined(v) {
      return v === undefined;
  }
  function isObject$1(v) {
      return v && typeof v === 'object';
  }
  function isFunction(v) {
      return typeof v === 'function';
  }
  function isFromObjectConstructor(v) {
      return Object.prototype.toString.call(v) === '[object Object]';
  }

  function isIBridgeAPIInfo4CacheGetter(v) {
      return !!(v && v.get && v.update);
  }

  function validateBridgeCallOption(runtime, option) {
      if (option &&
          option.__appxDomain !== undefined &&
          runtime().getSwitchManager().get("filterAppxDomainForSecurity245" /* ESharedAppxSwitchManagerName.FilterAppxDomainForSecurity */) &&
          // 隔离上下文: 容器调用了 getAppContext
          // 如果不是隔离上下文那么就扔掉 __appxDomain
          // isUsingExtensionMode 通过 getAppContext 来打标记
          !runtime().getKernel().isUsingExtensionMode) {
          option.__appxDomain = undefined;
      }
  }
  var invokeBridgeCallAsyncWithRuntime = function (runtime, name, option, callback, specificViewId) {
      ifIsMiniProgramEnv(function () {
          specificViewId = specificViewId || runtime().getNav().getTopViewId();
          validateBridgeCallOption(runtime, option);
      });
      runtime()
          .getKernel()
          .__BRIDGE_CALL__(specificViewId, name, option, callback);
  };
  var invokeBridgeCallSyncWithRuntime = function (runtime, name, option, specificViewId) {
      ifIsMiniProgramEnv(function () {
          specificViewId = specificViewId || runtime().getNav().getTopViewId();
          validateBridgeCallOption(runtime, option);
      });
      return runtime()
          .getKernel()
          .__BRIDGE_CALL_SYNC__(specificViewId, name, option);
  };

  function isCacheKeyInWhiteList(startupParams, cacheKey) {
      var whileList = startupParams.jsApiCacheWhitelist;
      if (whileList && typeof whileList === 'string' && whileList.indexOf(cacheKey) >= 0) {
          return true;
      }
      else {
          return false;
      }
  }
  function getCacheInfoFromStartupParams(startupParams, cacheKey) {
      return startupParams[cacheKey];
  }

  var hasNativeLog$2 = typeof nativeLog !== 'undefined' && typeof mqEnvironment !== 'undefined';
  var debug$2 =  function (fn) { return info$2(fn()); } ;
  function info$2(str) {
      if (hasNativeLog$2) {
          nativeLog(str, Date.now());
      }
      else {
          console.log(str, Date.now()); // tslint:disable-line
      }
  }
  function error$1(str) {
      if (hasNativeLog$2) {
          nativeLog(str, Date.now());
      }
      else {
          console.error(str, Date.now()); // tslint:disable-line
      }
  }

  var kJSAPIBlackMap = {
      internalAPI: true,
      openInBrowser: true,
  };
  var kEmptyBridgeAPIDef = {};
  /**
   *
   * @param collection
   * @param runtime
   * @param publicNamed
   *  - true 表示外部通过 my.getUserInfo 来调用
   *  - false 表示通过 .call('getUserInfo') 来调用
   * @param publicCallNoProxy
   *  - true 表示只有 private 标的 api 才能被代理，其他都不识别
   *  - false 表示所有都识别
   * @param apiName
   * @param option
   */
  function callSync(collection, appxDomain, runtime, flag, apiName, option, viewId) {
      var name = "".concat(apiName);
      debug$2(function () {
          var hasAPI = publicProxy ? collection.hasPublicCallProxyAPI(name) : collection.has(name);
          return "[APPX] bridge.callSync ".concat(name, ": ").concat(hasAPI);
      });
      // tslint:disable no-bitwise
      var publicNamed = !!(flag & 1 /* EBridgeCallFlag.Bit4PublicNamed */);
      var publicCallNoProxy = !!(flag & 2 /* EBridgeCallFlag.Bit4PublicCallProxyOnlyPrivateWithoutOther */);
      var publicInside = !!(flag & 4 /* EBridgeCallFlag.Bit4Inside */);
      // tslint:enable no-bitwise
      var publicProxy = publicNamed === false && publicCallNoProxy === true;
      var apiInfo = publicProxy
          ? collection.getPublicCallProxyAPIInfoByName(name)
          : collection.getAPIInfoByName(name);
      // getPublicCallApiInfo
      // 1. private
      //  1.1 remotelog 类，移动到 publicProxy 的 Collection 中完成，不需要通过配置值区分
      //  1.2 context > 私有 api，移动到 linked collection 中完成
      //  1.3 share 移动到 invoke host method 中完成
      // 2. cache
      //  移动到 publicProxy collection 中
      //  cache && cache.public 只有 getSystemInfo & getUserInfo
      // 3. publicProxy
      //  只有 rpc 和 remoteLog
      //  移动到 publicProxy collection 中
      if (!apiInfo) {
          apiInfo = kEmptyBridgeAPIDef;
      }
      if (kJSAPIBlackMap[name]) {
          return;
      }
      var isPublic = publicNamed || publicCallNoProxy;
      if (isPublic) {
          viewId = null;
      }
      var context = createCallSyncContext(apiInfo, runtime, publicNamed, publicInside, viewId, appxDomain, name, option);
      return context.invoke();
  }
  // tslint:disable no-bitwise
  /**
   *
   * @param collection
   * @param runtime
   * @param publicNamed
   *  - true 表示外部通过 my.getUserInfo 来调用
   *  - false 表示通过 .call('getUserInfo') 来调用
   * @param publicCallNoProxy
   *  - true 表示只有 private 标的 api 才能被代理，其他都不识别
   *  - false 表示所有都识别
   * @param apiName
   * @param option
   * @param callback
   */
  function call(collection, appxDomain, runtime, flag, apiName, option, callback, viewId) {
      var name = "".concat(apiName);
      // tslint:disable no-bitwise
      var publicNamed = !!(flag & 1 /* EBridgeCallFlag.Bit4PublicNamed */);
      var publicCallNoProxy = !!(flag & 2 /* EBridgeCallFlag.Bit4PublicCallProxyOnlyPrivateWithoutOther */);
      var publicInside = !!(flag & 4 /* EBridgeCallFlag.Bit4Inside */);
      // tslint:enable no-bitwise
      var publicProxy = publicNamed === false && publicCallNoProxy === true;
      var apiInfo = kEmptyBridgeAPIDef;
      if (collection) {
          apiInfo = publicProxy ? collection.getPublicCallProxyAPIInfoByName(name) : collection.getAPIInfoByName(name);
      }
      if (!apiInfo) {
          apiInfo = kEmptyBridgeAPIDef;
      }
      debug$2(function () {
          var hasAPI = collection ? (publicProxy ? collection.hasPublicCallProxyAPI(name) : collection.has(name)) : false;
          return "[APPX] bridge.call ".concat(name, ": ").concat(hasAPI, ":").concat(!!apiInfo.fn);
      });
      if (kJSAPIBlackMap[name]) {
          return;
      }
      var isPublic = publicNamed || publicCallNoProxy;
      if (isPublic) {
          viewId = null;
      }
      var context = createCallContext(apiInfo, runtime, publicNamed, publicInside, viewId, appxDomain, name, option, callback);
      return context.invoke();
  }
  function callAPIInfo(apiName, apiInfo, appxDomain, runtime, option, callback) {
      var context = createCallContext(apiInfo, runtime, false, false, null, appxDomain, apiName, option, callback);
      return context.invoke();
  }
  function callLinkedContext(collection, appxDomain, runtime, apiName, args, shouldNotRewriteIdOrClass) {
      var name = "".concat(apiName);
      var apiInfo = (collection.getAPIInfoByName(name) || kEmptyBridgeAPIDef);
      debug$2(function () {
          return "[APPX] bridge.call ".concat(name, ": ").concat(collection.has(name), ":false");
      });
      if (kJSAPIBlackMap[name]) {
          return;
      }
      var context = createLinkedContext(apiInfo, runtime, true, 
      /* viewId 要靠用户传入的参数来处理 */ null, appxDomain, name, args, shouldNotRewriteIdOrClass);
      return context.invoke();
  }
  function callProtoContext(apiInfo, appxDomain, runtime, args, shouldNotRewriteIdOrClass) {
      var context = createProtoContext(apiInfo, runtime, true, 
      /* viewId 要靠用户传入的参数来处理 */ null, appxDomain, null, args, shouldNotRewriteIdOrClass);
      return context.invoke();
  }

  var BridgeCallContext4Inside = /** @class */ /*#__PURE__*/ (function () {
      // tslint:disable-next-line
      function BridgeCallContext4Inside(_context) {
          this._context = _context;
          this.__appxDomain = _context.appxDomain.value;
          var _a = this._context.runtime().getEnv(), isIOS = _a.isIOS, isAndroid = _a.isAndroid, isIDE = _a.isIDE;
          this.isIOS = isIOS;
          this.isAndroid = isAndroid;
          this.isIDE = isIDE;
      }
      BridgeCallContext4Inside.prototype.callBridge = function (apiName, option, callback) {
          this._context.callDefaultBridge(apiName, option, callback);
      };
      BridgeCallContext4Inside.prototype.callBridgeSync = function (apiName, option) {
          return this._context.callDefaultBridgeSync(apiName, option);
      };
      BridgeCallContext4Inside.prototype.on = function (eventName, callback) {
          return this._context
              .runtime()
              .getBridge()
              .event.addEventListener(eventName, 0 /* EBridgeEventCustomTypeContext.Raw */, callback);
      };
      BridgeCallContext4Inside.prototype.off = function (eventName, callback) {
          return this._context
              .runtime()
              .getBridge()
              .event.removeEventListener(eventName, 0 /* EBridgeEventCustomTypeContext.Raw */, callback);
      };
      BridgeCallContext4Inside.prototype.getStartupParams = function () {
          return this._context.runtime().getEnv().originalStartupParams;
      };
      return BridgeCallContext4Inside;
  }());

  var keys2Set;
  function getKeysSet(keys) {
      if (!keys2Set) {
          keys2Set = createMap();
      }
      var set = keys2Set.get(keys);
      if (!set) {
          set = createSet();
          keys2Set.set(keys, set);
          for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
              var key = keys_1[_i];
              if (typeof key === 'string') {
                  set.add(key);
              }
          }
      }
      return set;
  }
  var kSet4Error;
  function getConstantSet4Error() {
      if (!kSet4Error) {
          kSet4Error = createSet();
          kSet4Error.add('success');
          kSet4Error.add('error');
          kSet4Error.add('errorMessage');
      }
      return kSet4Error;
  }
  function extractSpecificKeys(result, keys, extraSet) {
      if (result && typeof result === 'object') {
          var keysSet = getKeysSet(keys);
          var newResult = {};
          for (var _i = 0, _a = Object.keys(result); _i < _a.length; _i++) {
              var key = _a[_i];
              if (keysSet.has(key) || (extraSet && extraSet.has(key))) {
                  newResult[key] = result[key];
              }
              else {
                  if (typeof process !== 'undefined' &&
                      process &&
                      typeof process.env === 'object' &&
                      "development" !== 'production') {
                      // tslint:disable-next-line
                      console.warn("[APPX] bridge property ".concat(JSON.stringify(key), " dropped"));
                  }
              }
          }
          return newResult;
      }
      else {
          return result;
      }
  }
  function normalizeCallParameterCompatible(optionOrCallback, callbackOrUndefined, treatDuplicatedCallbackBehavior) {
      var option = optionOrCallback;
      var callback = callbackOrUndefined;
      if (isFunction(optionOrCallback)) {
          if (!isUndefined(callbackOrUndefined)) {
              // https://baiyan.antfin.com/task/107411?bqlKey=9cbd4f2
              // my.call('method', callback1, callback2) appx1.0执行callback1，appx2.0执行callback2
              // 第二个参数已经是callback了，还存在第三个参数，且可能还是callback。。
              if (treatDuplicatedCallbackBehavior()) {
                  callback = optionOrCallback;
                  option = {};
              }
          }
      }
      return normalizeCallParameter(option, callback);
  }
  function shouldFixDuplicatedCallback(runtimeGetter, apiName) {
      try {
          var insideBasicCfg = getInsideStaticConfig().config;
          if (insideBasicCfg && insideBasicCfg.clientName === 'ap') {
              var runtime = runtimeGetter();
              runtime.getBehaviorManager().report("duplicated my.call(".concat(apiName, ")"));
              // 支付宝端，新增开关，万一遇到这种case，可以将行为改为跟1.0一致
              if (runtime.getSwitchManager().get("IgnoreCallbackWhenInvokeMyCall" /* ESharedAppxSwitchManagerName.IgnoreCallbackWhenInvokeMyCall */)) {
                  return true;
              }
          }
          else {
              // 非支付宝端跟1.0保持一致，强制忽略第三个参数
              return true;
          }
      }
      catch (_) { }
      return false;
  }
  function normalizeCallParameter(optionOrCallback, callbackOrUndefined) {
      var option = optionOrCallback;
      var callback = callbackOrUndefined;
      // 处理 cb 和 opt 的顺序
      if (isUndefined(callbackOrUndefined) && isFunction(optionOrCallback)) {
          callback = optionOrCallback;
          option = {};
      }
      if (!isObject$1(optionOrCallback) && optionOrCallback !== undefined) {
          // WONTFIX: before、doing、after 方法中直接取 opt._ 作为参数
          option = {};
      }
      // 兜底
      if (isUndefined(option)) {
          option = {};
      }
      return {
          callback: callback,
          option: option,
      };
  }
  function normalizeErrorCode$1(result) {
      if (typeof result.error === 'string') {
          result.error = parseInt(result.error, 10);
      }
      // 处理 error: 0 的情况，error 为 0 表示成功
      if (result.error === 0) {
          delete result.error;
          delete result.errorMessage;
      }
      return result;
  }
  function normalizeAPICallBacks(option) {
      var callbackUnion = {};
      option = option || {};
      if (isFunction(option.success)) {
          callbackUnion.success = option.success;
          delete option.success;
      }
      if (isFunction(option.fail)) {
          callbackUnion.fail = option.fail;
          delete option.fail;
      }
      if (isFunction(option.complete)) {
          callbackUnion.complete = option.complete;
          delete option.complete;
      }
      return callbackUnion;
  }
  function normalizeEventData(evtObj) {
      var data = {};
      if (!isUndefined(evtObj.data)) {
          data = evtObj.data;
          data = isObject$1(data) ? data : { data: data };
      }
      return data;
  }

  var sharedTaskId = 1;
  var bridgeLogIgnoreList = {};
  function setBridgeIgnoreList(ignoreList) {
      bridgeLogIgnoreList = ignoreList;
  }
  function getBridgeIgnoreList() {
      return bridgeLogIgnoreList;
  }
  var BridgeCallContext = /** @class */ /*#__PURE__*/ (function () {
      function BridgeCallContext(runtime, appxDomain, apiName, option, apiInfo, callback, extraInfo) {
          if (isFromObjectConstructor(option)) {
              var copiedOption = __assign({}, option);
              if (copiedOption.page !== undefined) {
                  copiedOption.page = undefined;
              }
              this.option = copiedOption;
          }
          else {
              this.option = option;
          }
          this.runtime = runtime;
          this.extraInfo = extraInfo;
          this.apiName = apiName;
          this.appxDomain = appxDomain;
          this.isMiniExtension = isAppxDomain4Extension(appxDomain);
          this.appxDomainIsNotEmpty = !isAppxDomain4Empty(appxDomain);
          this.callback = callback;
          this.apiInfo = apiInfo || {};
          if (apiInfo.t) {
              this.taskId = sharedTaskId++;
          }
          this.startTime = new Date().getTime();
          this.initDependency(option, extraInfo.viewId, apiInfo, callback);
          this.callStack = new Error('');
      }
      BridgeCallContext.prototype.invoke = function () { };
      BridgeCallContext.prototype.callScopedBridge = function (name, option, callback, viewId) {
          var appxDomain = this.appxDomain;
          if (appxDomain && !isAppxDomain4Empty(appxDomain)) {
              option = __assign(__assign({}, option), { __appxDomain: appxDomain.value });
          }
          return this.callDefaultBridge(name, option, callback, viewId);
      };
      BridgeCallContext.prototype.callScopedBridgeSync = function (name, option, viewId) {
          var appxDomain = this.appxDomain;
          if (appxDomain && !isAppxDomain4Empty(appxDomain)) {
              option = __assign(__assign({}, option), { __appxDomain: appxDomain.value });
          }
          return this.callDefaultBridgeSync(name, option, viewId);
      };
      BridgeCallContext.prototype.callBridge = function (name, option, callback, viewId) {
          // TODO 开关控制转发
          return this.callDefaultBridge(name, option, callback, viewId);
      };
      BridgeCallContext.prototype.callDefaultBridge = function (name, option, callback, viewId) {
          var runtime = this.runtime();
          if (runtime) {
              var bridge = runtime.getBridge();
              if (bridge) {
                  bridge.callBridge(name, option, callback);
              }
          }
      };
      BridgeCallContext.prototype.callDefaultBridgeSync = function (name, option, viewId) {
          var runtime = this.runtime();
          if (runtime) {
              var bridge = runtime.getBridge();
              if (bridge) {
                  return bridge.callBridgeSync(name, option, viewId);
              }
          }
      };
      BridgeCallContext.prototype.callInternalAPI = function (name, option, callback, viewId) {
          var runtime = this.runtime();
          if (runtime) {
              var bridge = runtime.getBridge();
              if (bridge) {
                  bridge.callInternalAPI(name, option, callback, viewId);
              }
          }
      };
      BridgeCallContext.prototype.callInternalAPISync = function (name, option, viewId) {
          var runtime = this.runtime();
          if (runtime) {
              var bridge = runtime.getBridge();
              if (bridge) {
                  return bridge.callInternalAPISync(name, option, viewId);
              }
          }
      };
      BridgeCallContext.prototype.getEnvAppBiz = function () {
          return "TinyAppBiz-".concat(this.getEnvAppId());
      };
      BridgeCallContext.prototype.getEnvAppId = function () {
          var _a = this.runtime().getEnv().startupParams.appId, appId = _a === void 0 ? '' : _a;
          return appId;
      };
      BridgeCallContext.prototype.getEnvPlatformIOS = function () {
          return this.runtime().getEnv().platform === 'ios';
      };
      BridgeCallContext.prototype.invokeExternalElementMethod = function (page, elementId, method, payload) {
          if (!page || page.$viewId === undefined) {
              return;
          }
          var $viewId = page.$viewId;
          var $page = this.runtime().getPageManager().getInstanceById("".concat($viewId));
          if ($page) {
              $page.invokeClientElementMethod(elementId, 'onHostExternalMessage', [method, payload]);
          }
      };
      BridgeCallContext.prototype.getBridgeExtraInfo = function () {
          return this.runtime().getBridge().extraInfo;
      };
      BridgeCallContext.prototype.getEnvPlatformAndroid = function () {
          return this.runtime().getEnv().platform === 'android';
      };
      BridgeCallContext.prototype.getEnvOnlyCube = function () {
          return this.runtime().getEnv().isOnlyCube;
      };
      BridgeCallContext.prototype.invokeCallback = function (type, payload) {
          if (type) {
              if (this.callbackUnion[type]) {
                  this.callbackUnion[type](payload);
              }
          }
          else {
              if (this.callback) {
                  this.callback(payload);
              }
          }
      };
      BridgeCallContext.prototype.dispatchResultCallback = function (finalResult) {
          var _this = this;
          debug$2(function () { return "[APPX] bridge.callback ".concat(_this.apiName, "/").concat(new Date().getTime() - _this.startTime); });
          // 5. callbackUnion
          var hasError = false;
          if (typeof finalResult === 'object') {
              hasError = 'error' in finalResult || 'errorMessage' in finalResult;
          }
          if (hasError) {
              if (this.shouldEmitEvent()) {
                  this.runtime()
                      .getTypedEventManager()
                      .invokeInternalEvent(8 /* ESharedAppxInternalEvent.BridgeInvoke */, [
                      {
                          key: this.apiName,
                          option: this.option,
                          result: finalResult,
                          type: 'fail',
                      } ]);
              }
              this.invokeCallback('fail', finalResult);
          }
          else {
              if (this.shouldEmitEvent()) {
                  this.runtime()
                      .getTypedEventManager()
                      .invokeInternalEvent(8 /* ESharedAppxInternalEvent.BridgeInvoke */, [
                      {
                          key: this.apiName,
                          option: this.option,
                          result: finalResult,
                          type: 'success',
                      } ]);
              }
              this.invokeCallback('success', finalResult);
          }
          this.invokeCallback('complete', finalResult);
          this.invokeCallback(null, finalResult);
          if (hasError) {
              if (this.shouldNotReturnPromise()) ;
              else {
                  // 不存在 callback，依赖 promise 需要 throw error
                  var runtime = this.runtime();
                  if (runtime && typeof runtime.getLogger === 'function') {
                      var logger = runtime.getLogger();
                      if (logger && logger.attachErrorSource) {
                          logger.attachErrorSource(finalResult, {
                              from: 'api',
                              method: this.apiName,
                              payload: this.option,
                              stack: this.callStack,
                          });
                      }
                  }
                  throw finalResult;
              }
          }
          else {
              return finalResult;
          }
      };
      BridgeCallContext.prototype.shouldNotReturnPromise = function () {
          if (this.apiInfo.noPromise) {
              return true;
          }
          var hasCallback = !!(this.callbackUnion.complete ||
              this.callbackUnion.success ||
              this.callbackUnion.fail ||
              this.callback);
          var needReturn = this.apiInfo.allowAbort || this.apiInfo.progress || this.apiInfo.returnProto;
          return hasCallback && !needReturn;
      };
      BridgeCallContext.prototype.shouldEmitEvent = function () {
          return (
          /* AppX 原逻辑要求必须是直接方法调用，不能直接使用 call */
          this.extraInfo.directly &&
              /* AppX 对 无参数的调用都过滤了 */
              typeof this.option === 'object' &&
              /* AppX 配置了一份忽略表: http://gitlab.alipay-inc.com/appx/af-appx/blob/master/src/bridge/worker/logAPI.tsx#L130 */
              !getBridgeIgnoreList()[this.apiName]);
      };
      BridgeCallContext.prototype.prepareOption = function () {
          // TODO: 如果入参是只有一个 params 的话，上报
          if (this.shouldEmitEvent()) {
              this.runtime()
                  .getTypedEventManager()
                  .invokeInternalEvent(8 /* ESharedAppxInternalEvent.BridgeInvoke */, [
                  {
                      key: this.apiName,
                      type: 'invoke',
                  } ]);
          }
          var finalOption = this.callHookBefore();
          // 1. b: TODO
          return finalOption;
      };
      BridgeCallContext.prototype.getInsideContext = function () {
          var insideContext = this.insideContext;
          if (!insideContext) {
              insideContext = this.insideContext = new BridgeCallContext4Inside(this);
          }
          return insideContext;
      };
      BridgeCallContext.prototype.callHookValidate = function () {
          // 是否只允许通过tap事件调用API
          if (this.apiInfo.tapMark) {
              var page = this.getPageInstance();
              if (page && !page.getTapMarkManager().checkTapMark()) {
                  this.validateResult = {
                      error: 5,
                      errorMessage: "".concat(this.apiName, " can only be invoked by user tap gesture"),
                  };
              }
          }
          if (this.validateResult === undefined) {
              if (this.apiInfo.v && !this.extraInfo.inside) {
                  this.validateResult = functionCall(this.apiInfo.v, this, this.option);
              }
          }
          return this.validateResult;
      };
      BridgeCallContext.prototype.callHookBefore = function () {
          var finalOption = this.option;
          if (this.optionPageViewId || this.apiInfo.b) {
              finalOption = __assign({}, finalOption);
              if (Array.isArray(this.apiInfo.in)) {
                  finalOption = extractSpecificKeys(finalOption, this.apiInfo.in, getConstantSet4Error());
              }
              if (this.optionPageViewId) {
                  finalOption.viewId = this.optionPageViewId;
              }
              if (this.apiInfo.b) {
                  if (this.extraInfo.inside) {
                      finalOption =
                          functionCall(this.apiInfo.b, this.getInsideContext(), finalOption, this.callback) || finalOption;
                  }
                  else {
                      finalOption =
                          functionCall(this.apiInfo.b, this, finalOption, this.callback) || finalOption;
                  }
              }
          }
          else {
              if (Array.isArray(this.apiInfo.in)) {
                  finalOption = extractSpecificKeys(finalOption, this.apiInfo.in, getConstantSet4Error());
              }
          }
          return finalOption;
      };
      BridgeCallContext.prototype.callHookAfter = function (result) {
          var finalResult = result;
          if (this.apiInfo.a) {
              finalResult = __assign({}, result);
              if (this.extraInfo.inside === true) {
                  finalResult =
                      functionCall(this.apiInfo.a, this.getInsideContext(), finalResult, this.finalOption, this.option) || finalResult;
              }
              else {
                  finalResult =
                      functionCall(this.apiInfo.a, this, finalResult, this.finalOption, this.option) || finalResult;
              }
          }
          if (Array.isArray(this.apiInfo.out)) {
              finalResult = extractSpecificKeys(finalResult, this.apiInfo.out, getConstantSet4Error());
          }
          return finalResult;
      };
      BridgeCallContext.prototype.processResult = function (result) {
          var _a;
          var finalResult = result || {};
          finalResult = this.callHookAfter(finalResult);
          var shouldNormalizeErrorCode = true;
          if ((_a = this.extraInfo) === null || _a === void 0 ? void 0 : _a.directly) {
              // my.call ignore error normalize
              var runtime = this.runtime();
              if (runtime && runtime.getSwitchManager) {
                  var switchManager = runtime.getSwitchManager();
                  if (switchManager && switchManager.get("disablePublicCallErrorCodeNormalize" /* ESharedAppxSwitchManagerName.DisablePublicCallErrorCodeNormalize */)) {
                      shouldNormalizeErrorCode = false;
                  }
              }
          }
          if (shouldNormalizeErrorCode) {
              finalResult = normalizeErrorCode$1(finalResult);
          }
          return finalResult;
      };
      BridgeCallContext.prototype.getRewriteIdWithAppxDomain = function (id) {
          var finalId = id;
          var appxDomain = this.appxDomain;
          if (isAppxDomain4Extension(appxDomain) && !this.extraInfo.shouldNotRewriteIdOrClass) {
              finalId = get_rewrite_extensionId_idOrClassName({
                  type: 4 /* EMiniExtensionStringType._$_extension_id_$_ */,
                  value: appxDomain.value,
              }, {
                  type: 8 /* EMiniExtensionStringType._$_acss_id_className_$_ */,
                  value: finalId,
              }).value;
          }
          return finalId;
      };
      BridgeCallContext.prototype.getPageInstance = function () {
          var pageInstance = this.pageInstance;
          if (!pageInstance || pageInstance.hasPageUnloaded()) {
              // 避免下次还进一次 hasPageUnloaded() 栈
              if (pageInstance) {
                  this.pageInstance = null;
              }
              pageInstance = this.runtime().getNav().getTopInstance();
          }
          return pageInstance;
      };
      BridgeCallContext.prototype.initDependency = function (arg1, extraViewId, apiInfo, arg2) {
          var runtime = this.runtime();
          var optionPageViewId = (arg1 && arg1.page && arg1.page.$viewId) || undefined;
          var viewId = optionPageViewId || extraViewId || undefined;
          var pageInstance;
          if (viewId) {
              pageInstance = runtime.getPageManager().getInstanceById(viewId);
          }
          if (!pageInstance || pageInstance.hasPageUnloaded()) {
              pageInstance = runtime.getNav().getTopInstance();
          }
          // 在页面没有建连前创建 JSAPI 的话
          // 就拿不到 pageInstance
          if (pageInstance) {
              viewId = pageInstance.pageId;
              this.pageInstance = pageInstance;
          }
          this.assignedViewId = viewId;
          this.optionPageViewId = optionPageViewId;
      };
      BridgeCallContext.prototype.getState = function () {
          return this.extraInfo.parentState;
      };
      BridgeCallContext.prototype.getProtoContext = function () {
          return this.extraInfo.parentProtoContext;
      };
      BridgeCallContext.prototype.callProtoAPI = function (proto, args) {
          return callProtoContext(proto, this.appxDomain, this.runtime, args, this.extraInfo.shouldNotRewriteIdOrClass);
      };
      return BridgeCallContext;
  }());

  var sharedBridgeAsyncCallContextImpl;
  function getBridgeAsyncCallContextMethodInteceptor() {
      var klass = /* PURE */ getBridgeAsyncCallContext();
      var methodInterceptor = /* PURE */ createClassMethodInteceptor(klass);
      return methodInterceptor;
  }
  function getBridgeAsyncCallContext() {
      if (!sharedBridgeAsyncCallContextImpl) {
          sharedBridgeAsyncCallContextImpl = getBridgeAsyncCallContextImpl();
      }
      return sharedBridgeAsyncCallContextImpl;
  }
  function getBridgeAsyncCallContextImpl() {
      return /** @class */ (function (_super) {
          __extends$1(BridgeAsyncCallContext, _super);
          function BridgeAsyncCallContext(runtime, appxDomain, apiName, option, apiInfo, callback, extraInfo) {
              return _super.call(this, runtime, appxDomain, apiName, option, apiInfo, callback, extraInfo) || this;
          }
          BridgeAsyncCallContext.prototype.invoke = function () {
              var _this = this;
              var promise = this.invokeMethodAsync();
              if (this.shouldNotReturnPromise()) {
                  // 如果传入 callback/success/fail/complete 就不返回promise
                  return;
              }
              var apiInfo = this.apiInfo;
              var allowAbort = apiInfo.allowAbort;
              var progressInfo = apiInfo.progress;
              var returnEvent = apiInfo.returnEvent;
              var returnProto = apiInfo.returnProto;
              if (allowAbort || progressInfo || returnEvent || returnProto) {
                  if (allowAbort) {
                      var cancelName = this.apiInfo.cancelname || 'abort';
                      promise[cancelName] = function () {
                          if (isFunction(_this.apiInfo.c)) {
                              functionCall(_this.apiInfo.c, _this);
                          }
                          if (_this.resolveImmediate) {
                              _this.resolveImmediate({
                                  error: 9,
                                  errorMessage: "".concat(_this.apiName, ":fail abort"),
                              });
                          }
                      };
                  }
                  if (typeof returnEvent === 'object' && returnEvent) {
                      var _loop_1 = function (name) {
                          var _b = returnEvent[name], taskId = _b.taskId, getTaskId = _b.getTaskId, eventName = _b.eventName, getPayload = _b.getPayload;
                          var suffix = name[0].toUpperCase() + name.slice(1);
                          promise["on".concat(suffix)] = function (handler) {
                              var runtime = _this.runtime();
                              if (runtime) {
                                  var event = runtime.getBridge().event;
                                  if (event) {
                                      var id = typeof taskId === 'function' ? functionCall(taskId, _this) : taskId;
                                      event.taskManager.addMatcher(eventName, id, handler, getTaskId, getPayload);
                                  }
                              }
                          };
                          promise["off".concat(suffix)] = function (handler) {
                              var runtime = _this.runtime();
                              if (runtime) {
                                  var event = runtime.getBridge().event;
                                  if (event) {
                                      var id = typeof taskId === 'function' ? functionCall(taskId, _this) : taskId;
                                      event.taskManager.removeMatcher(eventName, id);
                                  }
                              }
                          };
                      };
                      for (var _i = 0, _a = Object.keys(returnEvent); _i < _a.length; _i++) {
                          var name = _a[_i];
                          _loop_1(name);
                      }
                  }
                  if (progressInfo) {
                      var taskId_1 = this.taskId;
                      var progressKey_1 = progressInfo.key, getPayload_1 = progressInfo.getPayload, getTaskId_1 = progressInfo.getTaskId;
                      promise.onProgressUpdate = function (handler) {
                          var runtime = _this.runtime();
                          if (runtime) {
                              var event = runtime.getBridge().event;
                              if (event) {
                                  event.taskManager.addMatcher("".concat(progressKey_1, "StateChange"), taskId_1, handler, getTaskId_1, getPayload_1);
                              }
                          }
                      };
                  }
                  if (returnProto) {
                      var protoResult = functionCall(returnProto, this);
                      objectAssign(promise, protoResult);
                  }
              }
              return promise;
          };
          BridgeAsyncCallContext.prototype.callHookDoingAsync = function (resolve) {
              if (this.apiInfo.allowAbort) {
                  // 暂存为了后面直接调度
                  this.resolveImmediate = resolve;
              }
              if (isFunction(this.apiInfo.d)) {
                  if (this.extraInfo.inside === true) {
                      functionCall(this.apiInfo.d, this.getInsideContext(), this.finalOption, resolve);
                  }
                  else {
                      functionCall(this.apiInfo.d, this, this.finalOption, resolve);
                  }
              }
              else if (isFunction(this.apiInfo.d_with_cache)) {
                  if (!this.interceptBridgeCall4Cache(this.apiInfo.cache, resolve)) {
                      if (this.extraInfo.inside === true) {
                          functionCall(this.apiInfo.d_with_cache, this.getInsideContext(), this.finalOption, resolve);
                      }
                      else {
                          functionCall(this.apiInfo.d_with_cache, this, this.finalOption, resolve);
                      }
                  }
              }
              else {
                  // 如果存在 cache.get
                  // 先判定是否允许，再判定是否存在
                  // 一次性初始化 persistInfo
                  if (!this.interceptBridgeCall4Cache(this.apiInfo.cache, resolve)) {
                      if (this.shouldForbidAsyncJSAPI(this.apiInfo.m || this.apiName, this.finalOption)) {
                          var packageAndRunSceneType = this.runtime().getEnv().packageAndRunSceneType;
                          if (isConsoleAvaliableToDeveloper(packageAndRunSceneType)) {
                              // tslint:disable-next-line no-console
                              console.error("".concat(this.apiName || this.apiInfo.m, "\u8C03\u7528\u5DF2\u53D7\u9650"));
                          }
                          resolve({
                              error: 4,
                              errorMessage: 'API调用受限',
                          });
                      }
                      else {
                          invokeBridgeCallAsyncWithRuntime(this.runtime, this.apiInfo.m || this.apiName, this.appxDomainIsNotEmpty
                              ? __assign(__assign({}, this.finalOption), { __appxDomain: this.appxDomain.value }) : this.finalOption, resolve, this.assignedViewId);
                      }
                  }
              }
          };
          BridgeAsyncCallContext.prototype.shouldForbidAsyncJSAPI = function (JSAPIName, option) {
              var isForbiddenJSAPI = false;
              switch (JSAPIName) {
                  // 需禁用my.hideFavoriteMenu/my.hideAllFavoriteMenu/my.call('hideOptionMenuItem', {name: 'favorite'}) 三种调用姿势，
                  // https://aone.alipay.com/v2/project/584054/req/35852464
                  case 'hideOptionMenuItem':
                      var forbidAPIList = this.runtime().getSwitchManager().get("forbidAPIList" /* ESharedAppxSwitchManagerName.ForbidAPIList */);
                      if (option.name === 'favorite' &&
                          forbidAPIList &&
                          forbidAPIList.indexOf('hideOptionMenuItem') > -1) {
                          isForbiddenJSAPI = true;
                      }
                      break;
              }
              return isForbiddenJSAPI;
          };
          BridgeAsyncCallContext.prototype.interceptBridgeCall4Cache = function (cacheInfo, resolve) {
              var _this = this;
              if (!cacheInfo) {
                  return false;
              }
              var runtime = this.runtime();
              var bridge = runtime.getBridge();
              var cacheKey = cacheInfo.key;
              var startupParams = runtime.getEnv().originalStartupParams;
              if (!isCacheKeyInWhiteList(startupParams, cacheKey)) {
                  debug$2(function () { return "[APPX] not in cache whitelist ".concat(cacheKey); });
                  return false;
              }
              // 开启的情况，判断需要走 get还是set逻辑
              var persistInfo = bridge.extraInfo[cacheKey];
              if (!persistInfo) {
                  persistInfo = bridge.extraInfo[cacheKey] = {
                      cache: getCacheInfoFromStartupParams(startupParams, cacheKey),
                  };
              }
              if (isIBridgeAPIInfo4CacheGetter(cacheInfo)) {
                  // 需要从 get 开始拦截
                  var cacheResult_1 = functionCall(cacheInfo.get, null, persistInfo, this.finalOption);
                  if (cacheResult_1) {
                      debug$2(function () { return "[APPX] get cache hit ".concat(cacheKey, ":").concat(JSON.stringify(cacheResult_1)); });
                      var platformSetTimeout = this.runtime().getKernel().setTimeout;
                      platformSetTimeout(function () {
                          resolve(cacheResult_1);
                      }, 0);
                      return true;
                  }
                  else {
                      debug$2(function () { return "[APPX] get cache miss ".concat(cacheKey); });
                      invokeBridgeCallAsyncWithRuntime(this.runtime, this.apiInfo.m || this.apiName, this.appxDomainIsNotEmpty ? __assign(__assign({}, this.finalOption), { __appxDomain: this.appxDomain.value }) : this.finalOption, function (rawResult) {
                          // get miss 后需要主动 update
                          functionCall(cacheInfo.update, null, persistInfo, _this.finalOption, rawResult);
                          debug$2(function () { return "[APPX] get cache updated ".concat(cacheKey, ":").concat(JSON.stringify(rawResult)); });
                          resolve(rawResult);
                      }, this.assignedViewId);
                      return true;
                  }
              }
              else if (cacheInfo.set) {
                  // 需要从 set 开始拦截
                  debug$2(function () { return "[APPX] set cache ".concat(cacheKey, ":").concat(JSON.stringify(_this.finalOption)); });
                  functionCall(cacheInfo.set, null, persistInfo, this.finalOption);
                  // 拦截后再走标准流程
                  return false;
              }
          };
          BridgeAsyncCallContext.prototype.invokeMethodAsync = function () {
              var _this = this;
              var PromiseConstructor = this.runtime().getKernel().Promise;
              if (this.callHookValidate()) {
                  this.callbackUnion = normalizeAPICallBacks(this.option);
                  return PromiseConstructor.resolve().then(function () {
                      return _this.dispatchResultCallback(_this.validateResult);
                  });
              }
              else {
                  this.callbackUnion = normalizeAPICallBacks(this.option);
                  // apiInfo.b 不能操作 success/fail/complete
                  this.finalOption = this.prepareOption();
                  return new PromiseConstructor(function (resolve, reject) {
                      _this.callHookDoingAsync(function (result) {
                          var apiInfo = _this.apiInfo;
                          var progressInfo = apiInfo.progress;
                          if (progressInfo) {
                              var progressKey = progressInfo.key;
                              var runtime = _this.runtime();
                              if (runtime) {
                                  var event = runtime.getBridge().event;
                                  if (event) {
                                      event.taskManager.removeMatcher("".concat(progressKey, "StateChange"), _this.taskId);
                                  }
                              }
                          }
                          if (apiInfo.allowAbort) {
                              // 至多因为 真实resolve, doingResolve 进入2次
                              // 1. 先真实 resolve, 那么把 doingResolve 干掉，保证第二次直接return
                              // 2. 先用户 abort，那么把 doingResolve 干掉，保证第二次真实return
                              if (!_this.resolveImmediate) {
                                  return;
                              }
                              _this.resolveImmediate = null;
                          }
                          var finalResult = _this.processResult(result);
                          try {
                              resolve(_this.dispatchResultCallback(finalResult));
                          }
                          catch (ex) {
                              reject(ex);
                          }
                      });
                  });
              }
          };
          return BridgeAsyncCallContext;
      }(BridgeCallContext));
  }

  function isEvent(apiName) {
      return /^(?:on|off)[A-Z](?:\w+)/.test(apiName);
  }
  var rEventAPIName = /^(?:on|off)([A-Z])(\w+)/;
  function normalizeEventName(apiName, apiInfo) {
      var eventName = '';
      if (apiInfo && rEventAPIName.test(apiName)) {
          var matched = apiName.match(rEventAPIName);
          if (typeof apiInfo.m === 'string') {
              eventName = apiInfo.m;
          }
          if (!eventName && matched[1] && matched[2]) {
              eventName = matched[1].toLowerCase() + matched[2];
          }
      }
      return eventName;
  }
  var sharedBridgeEventCallContextImpl;
  function getBridgeEventCallContext() {
      if (!sharedBridgeEventCallContextImpl) {
          sharedBridgeEventCallContextImpl = getBridgeEventCallContextImpl();
      }
      return sharedBridgeEventCallContextImpl;
  }
  function getBridgeEventCallContextImpl() {
      return /** @class */ (function (_super) {
          __extends$1(BridgeEventCallContext, _super);
          function BridgeEventCallContext(runtime, appxDomain, apiName, option, apiInfo, callback, extraInfo) {
              var _this = _super.call(this, runtime, appxDomain, apiName, option, apiInfo, callback, extraInfo) || this;
              if (typeof apiInfo.e === 'function') {
                  _this.eventName = functionCall(apiInfo.e, _this);
              }
              else {
                  _this.eventName = normalizeEventName(apiName, _this.apiInfo);
              }
              return _this;
          }
          BridgeEventCallContext.prototype.invoke = function () {
              // event 不处理 v 参数，没意义
              this.finalOption = this.prepareOption();
              this.callbackUnion = normalizeAPICallBacks(this.finalOption);
              // 默认模式，走 bridge.event.addEventListener
              if (/^on/.test(this.apiName)) {
                  if (isESharedAppxInternalEvent(this.apiInfo.m)) {
                      if (typeof this.callback === 'function') {
                          return this.runtime().getTypedEventManager().addEventListener(this.apiInfo.m, this.callback, true);
                      }
                      else {
                          return {
                              remove: function () { },
                          };
                      }
                  }
                  else if (this.apiInfo.task) {
                      if (typeof this.callback === 'function') {
                          var _a = this.apiInfo.task, id = _a.id, getTaskId = _a.getTaskId, getPayload = _a.getPayload, isolate = _a.isolate;
                          var taskId = typeof id === 'function' ? functionCall(id, this) : id;
                          this.callHookEventTask('start', isolate, taskId);
                          this.runtime()
                              .getBridge()
                              .event.taskManager.addMatcher(this.eventName, taskId, this.callback, getTaskId, getPayload);
                      }
                  }
                  else {
                      this.callHookEvent('start');
                      this.runtime()
                          .getBridge()
                          .event.addEventListener(this.eventName, 1 /* EBridgeEventCustomTypeContext.User */, this.processEventResult.bind(this), this.callback);
                  }
              }
              else {
                  if (isESharedAppxInternalEvent(this.apiInfo.m)) {
                      if (typeof this.callback === 'function') {
                          this.runtime().getTypedEventManager().removeEventListener(this.apiInfo.m, this.callback);
                      }
                  }
                  else if (this.apiInfo.task) {
                      if (typeof this.callback === 'function') {
                          var _b = this.apiInfo.task, id = _b.id, isolate = _b.isolate;
                          var taskId = typeof id === 'function' ? functionCall(id, this) : id;
                          this.runtime()
                              .getBridge()
                              .event.taskManager.removeMatcher(this.eventName, taskId, this.callback);
                          this.callHookEventTask('end', isolate, taskId);
                      }
                  }
                  else {
                      this.runtime()
                          .getBridge()
                          .event.removeEventListener(this.eventName, 1 /* EBridgeEventCustomTypeContext.User */, this.callback);
                      this.callHookEvent('end');
                  }
              }
          };
          BridgeEventCallContext.prototype.processEventResult = function (result) {
              result = normalizeEventData(result);
              var finalResult = this.processResult(result);
              this.dispatchResultCallback(finalResult);
          };
          BridgeEventCallContext.prototype.callHookEventTask = function (hook, isolate, taskId) {
              var hasMatch;
              var taskManager = this.runtime().getBridge().event.taskManager;
              if (isolate === 2 /* EBridgeAPIInfoTaskIsolateType.TaskId */) {
                  hasMatch = taskManager.hasMatcher(this.eventName, taskId);
              }
              else if (isolate === 1 /* EBridgeAPIInfoTaskIsolateType.Name */) {
                  hasMatch = taskManager.hasMatcher(this.eventName);
              }
              else {
                  hasMatch = false;
              }
              if (!hasMatch) {
                  if (isFunction(this.apiInfo[hook])) {
                      if (this.extraInfo.inside) {
                          functionCall(this.apiInfo[hook], this.getInsideContext());
                      }
                      else {
                          functionCall(this.apiInfo[hook], this);
                      }
                  }
              }
          };
          BridgeEventCallContext.prototype.callHookEvent = function (hook) {
              if (!this.runtime().getBridge().event.hasEventListener(this.eventName, 1 /* EBridgeEventCustomTypeContext.User */)) {
                  if (isFunction(this.apiInfo[hook])) {
                      if (this.extraInfo.inside) {
                          functionCall(this.apiInfo[hook], this.getInsideContext());
                      }
                      else {
                          functionCall(this.apiInfo[hook], this);
                      }
                  }
              }
          };
          return BridgeEventCallContext;
      }(BridgeCallContext));
  }

  var sharedBridgeFnCallContextImpl;
  function getBridgeFnCallContext() {
      if (!sharedBridgeFnCallContextImpl) {
          sharedBridgeFnCallContextImpl = getBridgeFnCallContextImpl();
      }
      return sharedBridgeFnCallContextImpl;
  }
  function getBridgeFnCallContextImpl() {
      return /** @class */ (function (_super) {
          __extends$1(BridgeFnCallContext, _super);
          function BridgeFnCallContext(runtime, appxDomain, apiName, arg1, arg2, apiInfo, extraInfo) {
              return _super.call(this, runtime, appxDomain, apiName, arg1, apiInfo, arg2, extraInfo) || this;
          }
          BridgeFnCallContext.prototype.invoke = function () {
              if (this.extraInfo.inside === true) {
                  return functionCall(this.apiInfo.fn, this.getInsideContext(), this.option, this.callback);
              }
              else {
                  return functionCall(this.apiInfo.fn, this, this.option, this.callback);
              }
          };
          BridgeFnCallContext.prototype.initDependency = function (arg1, extraViewId, apiInfo, arg2) {
              var optionIndex = apiInfo.fnOptionIndex;
              var option = optionIndex === 0 ? arg1 : optionIndex === 1 ? arg2 : null;
              _super.prototype.initDependency.call(this, option, extraViewId, apiInfo, null);
          };
          return BridgeFnCallContext;
      }(BridgeCallContext));
  }

  var kEmptyBridgeAPIDef$1 = {};
  var sharedBridgeLinkedCallContextImpl;
  function getBridgeLinkedCallContext() {
      if (!sharedBridgeLinkedCallContextImpl) {
          sharedBridgeLinkedCallContextImpl = getBridgeLinkedCallContextImpl();
      }
      return sharedBridgeLinkedCallContextImpl;
  }
  function getBridgeLinkedCallContextImpl() {
      return /** @class */ (function (_super) {
          __extends$1(BridgeLinkedCallContext, _super);
          function BridgeLinkedCallContext(runtime, appxDomain, apiName, params, apiInfo, extraInfo) {
              var _this = _super.call(this, runtime, appxDomain, apiName, params, apiInfo, undefined, extraInfo) || this;
              _this.cache4ApiInfo = Object.create(null);
              _this.callLinkedCollection = _this.callLinkedCollection.bind(_this);
              _this.callAfterCompositeElementReady = _this.callAfterCompositeElementReady.bind(_this);
              _this.callSyncLinkedCollection = _this.callSyncLinkedCollection.bind(_this);
              return _this;
          }
          BridgeLinkedCallContext.prototype.invoke = function () {
              return functionApply(this.apiInfo.create, this, this.option);
          };
          BridgeLinkedCallContext.prototype.callScopedBridge = function (name, option, callback, viewId) {
              var appxDomain = this.appxDomain;
              if (appxDomain && !isAppxDomain4Empty(appxDomain)) {
                  option = __assign(__assign({}, option), { __appxDomain: appxDomain.value });
              }
              var runtime = this.runtime();
              if (runtime) {
                  var bridge = runtime.getBridge();
                  if (bridge) {
                      bridge.callBridge(name, option, callback);
                  }
              }
          };
          BridgeLinkedCallContext.prototype.callLinkedCollection = function (name, option, callbackOrUndefined) {
              var apiInfo = this.getApiInfoFromLinkedCollection(name);
              var context = createCallContext(apiInfo, this.runtime, false, false, this.assignedViewId, this.appxDomain, name, option, callbackOrUndefined);
              return context.invoke();
          };
          BridgeLinkedCallContext.prototype.callSyncLinkedCollection = function (name, option) {
              var apiInfo = this.getApiInfoFromLinkedCollection(name);
              var context = createCallSyncContext(apiInfo, this.runtime, false, false, this.assignedViewId, this.appxDomain, name, option);
              return context.invoke();
          };
          BridgeLinkedCallContext.prototype.callAfterCompositeElementReady = function (name, option) {
              var _this = this;
              var pageInstance = this.getPageInstance();
              if (pageInstance) {
                  pageInstance.whenCompositeElementReady(option.element, function () {
                      _this.callLinkedCollection(name, option);
                  });
              }
          };
          BridgeLinkedCallContext.prototype.initDependency = function (arg1, extraViewId, apiInfo, arg2) {
              var optionIndex = apiInfo.createOptionIndex;
              var option = optionIndex === false ? null : arg1[optionIndex];
              _super.prototype.initDependency.call(this, option, extraViewId, apiInfo, null);
          };
          BridgeLinkedCallContext.prototype.getApiInfoFromLinkedCollection = function (name) {
              if (!this.cache4ApiInfo[name]) {
                  var linked = this.apiInfo.linked;
                  var apiInfo = kEmptyBridgeAPIDef$1;
                  if (linked) {
                      apiInfo = linked[name] || kEmptyBridgeAPIDef$1;
                  }
                  else {
                      apiInfo = kEmptyBridgeAPIDef$1;
                  }
                  this.cache4ApiInfo[name] = apiInfo;
              }
              return this.cache4ApiInfo[name];
          };
          return BridgeLinkedCallContext;
      }(BridgeCallContext));
  }

  function getBridgeProtoCallContext() {
      return BridgeProtoCallContext;
  }
  var BridgeProtoCallContext = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(BridgeProtoCallContext, _super);
      function BridgeProtoCallContext(runtime, appxDomain, apiName, params, apiInfo, extraInfo) {
          return _super.call(this, runtime, appxDomain, apiName, params, apiInfo, undefined, extraInfo) || this;
      }
      BridgeProtoCallContext.prototype.invoke = function () {
          var _this = this;
          var state = functionApply(this.apiInfo.state, this, this.option);
          var returnObject = {};
          var _loop_1 = function (method) {
              var apiInfo = this_1.apiInfo.proto[method];
              if (typeof apiInfo.feature === 'function') {
                  var featureEnable = functionCall(apiInfo.feature, this_1);
                  if (!featureEnable) {
                      return "continue";
                  }
              }
              returnObject[method] = function (option, callbackOrUndefined) {
                  var context = createCallContext(apiInfo, _this.runtime, false, false, _this.assignedViewId, _this.appxDomain, method, option, callbackOrUndefined);
                  context.extraInfo.parentState = state;
                  context.extraInfo.parentProtoContext = returnObject;
                  return context.invoke();
              };
          };
          var this_1 = this;
          for (var _i = 0, _a = Object.keys(this.apiInfo.proto); _i < _a.length; _i++) {
              var method = _a[_i];
              _loop_1(method);
          }
          return returnObject;
      };
      return BridgeProtoCallContext;
  }(BridgeCallContext));

  var sharedBridgeSyncCallContextImpl;
  function getBridgeSyncCallContextMethodInteceptor() {
      var klass = /* PURE */ getBridgeSyncCallContext();
      var methodInteceptor = /* PURE */ createClassMethodInteceptor(klass);
      return methodInteceptor;
  }
  function getBridgeSyncCallContext() {
      if (!sharedBridgeSyncCallContextImpl) {
          sharedBridgeSyncCallContextImpl = getBridgeSyncCallContextImpl();
      }
      return sharedBridgeSyncCallContextImpl;
  }
  function getBridgeSyncCallContextImpl() {
      return /** @class */ (function (_super) {
          __extends$1(BridgeSyncCallContext, _super);
          function BridgeSyncCallContext(runtime, appxDomain, apiName, option, apiInfo, extraInfo) {
              return _super.call(this, runtime, appxDomain, apiName, option, apiInfo, null, extraInfo) || this;
          }
          BridgeSyncCallContext.prototype.interceptBridgeCallSync4Cache = function (cacheInfo) {
              var _this = this;
              if (!cacheInfo) {
                  return undefined;
              }
              var runtime = this.runtime();
              var bridge = runtime.getBridge();
              var cacheKey = cacheInfo.key;
              var startupParams = runtime.getEnv().originalStartupParams;
              if (!isCacheKeyInWhiteList(startupParams, cacheKey)) {
                  debug$2(function () { return "[APPX] not in cache whitelist ".concat(cacheKey); });
                  return undefined;
              }
              // 开启的情况，判断需要走 get还是set逻辑
              var persistInfo = bridge.extraInfo[cacheKey];
              if (!persistInfo) {
                  persistInfo = bridge.extraInfo[cacheKey] = {
                      cache: getCacheInfoFromStartupParams(startupParams, cacheKey),
                  };
              }
              if (isIBridgeAPIInfo4CacheGetter(cacheInfo)) {
                  // 需要从 get 开始拦截
                  var cacheResult_1 = functionCall(cacheInfo.get, null, persistInfo, this.finalOption);
                  if (cacheResult_1) {
                      debug$2(function () { return "[APPX] get cache hit ".concat(cacheKey, ":").concat(JSON.stringify(cacheResult_1)); });
                      return {
                          hit: true,
                          result: cacheResult_1,
                      };
                  }
                  else {
                      debug$2(function () { return "[APPX] get cache miss ".concat(cacheKey); });
                      var rawResult_1 = invokeBridgeCallSyncWithRuntime(this.runtime, this.apiInfo.m || this.apiName, this.appxDomainIsNotEmpty ? __assign(__assign({}, this.finalOption), { __appxDomain: this.appxDomain.value }) : this.finalOption, this.assignedViewId);
                      functionCall(cacheInfo.update, null, persistInfo, this.finalOption, rawResult_1);
                      debug$2(function () { return "[APPX] get cache updated ".concat(cacheKey, ":").concat(JSON.stringify(rawResult_1)); });
                      return {
                          hit: false,
                          result: rawResult_1,
                      };
                  }
              }
              else if (cacheInfo.set) {
                  // 需要从 set 开始拦截
                  debug$2(function () { return "[APPX] set cache ".concat(cacheKey, ":").concat(JSON.stringify(_this.finalOption)); });
                  functionCall(cacheInfo.set, null, persistInfo, this.finalOption);
                  // 拦截后再走标准流程
                  return undefined;
              }
          };
          BridgeSyncCallContext.prototype.callHookDoingSync = function () {
              var result;
              if (isFunction(this.apiInfo.d)) {
                  if (this.extraInfo.inside === true) {
                      result = functionCall(this.apiInfo.d, this.getInsideContext(), this.finalOption, undefined);
                  }
                  else {
                      result = functionCall(this.apiInfo.d, this, this.finalOption, undefined);
                  }
              }
              else if (isFunction(this.apiInfo.d_with_cache_sync)) {
                  var interceptedResponse = this.interceptBridgeCallSync4Cache(this.apiInfo.cache);
                  if (interceptedResponse) {
                      result = interceptedResponse.result;
                  }
                  else {
                      if (this.extraInfo.inside === true) {
                          result = functionCall(this.apiInfo.d_with_cache_sync, this.getInsideContext(), this.finalOption, undefined);
                      }
                      else {
                          result = functionCall(this.apiInfo.d_with_cache_sync, this, this.finalOption, undefined);
                      }
                  }
                  if (result) {
                      result = this.processResult(result) || result;
                  }
              }
              else {
                  var interceptedResponse = this.interceptBridgeCallSync4Cache(this.apiInfo.cache);
                  if (interceptedResponse) {
                      result = interceptedResponse.result;
                  }
                  else {
                      result = invokeBridgeCallSyncWithRuntime(this.runtime, this.apiInfo.m || this.apiName, this.appxDomainIsNotEmpty ? __assign(__assign({}, this.finalOption), { __appxDomain: this.appxDomain.value }) : this.finalOption, this.assignedViewId);
                  }
                  if (result) {
                      result = this.processResult(result) || result;
                  }
              }
              if (!result) {
                  result = {
                      error: 999,
                      errorMessage: "System Error: Return ".concat(result),
                  };
              }
              return result;
          };
          BridgeSyncCallContext.prototype.invoke = function () {
              if (this.callHookValidate()) {
                  return this.validateResult;
              }
              this.finalOption = this.prepareOption();
              var result;
              if (isFunction(this.apiInfo.responseProxy) &&
                  this.extraInfo.inside !== true &&
                  this.runtime().getSwitchManager().get("enableBridgeResponseProxy" /* ESharedAppxSwitchManagerName.EnableBridgeResponseProxy */)) {
                  result = functionCall(this.apiInfo.responseProxy, this, this.finalOption, this.callHookDoingSync.bind(this), this.callHookDoingAsync4ResponseProxy.bind(this));
              }
              if (!result) {
                  result = this.callHookDoingSync();
              }
              return result;
          };
          BridgeSyncCallContext.prototype.callHookDoingAsync4ResponseProxy = function (callback) {
              var _this = this;
              // 也要走一下近端缓存
              var resolve = function (result) {
                  var finalResult = _this.processResult(result);
                  callback(finalResult);
              };
              if (!this.interceptBridgeCall4CacheAsync(this.apiInfo.cache, resolve)) {
                  invokeBridgeCallAsyncWithRuntime(this.runtime, this.apiInfo.m || this.apiName, this.appxDomainIsNotEmpty ? __assign(__assign({}, this.finalOption), { __appxDomain: this.appxDomain.value }) : this.finalOption, resolve, this.assignedViewId);
              }
          };
          BridgeSyncCallContext.prototype.interceptBridgeCall4CacheAsync = function (cacheInfo, resolve) {
              var _this = this;
              if (!cacheInfo) {
                  return false;
              }
              var runtime = this.runtime();
              var bridge = runtime.getBridge();
              var cacheKey = cacheInfo.key;
              var startupParams = runtime.getEnv().originalStartupParams;
              if (!isCacheKeyInWhiteList(startupParams, cacheKey)) {
                  debug$2(function () { return "[APPX] not in cache whitelist ".concat(cacheKey); });
                  return false;
              }
              // 开启的情况，判断需要走 get还是set逻辑
              var persistInfo = bridge.extraInfo[cacheKey];
              if (!persistInfo) {
                  persistInfo = bridge.extraInfo[cacheKey] = {
                      cache: getCacheInfoFromStartupParams(startupParams, cacheKey),
                  };
              }
              if (isIBridgeAPIInfo4CacheGetter(cacheInfo)) {
                  // 需要从 get 开始拦截
                  var cacheResult_2 = functionCall(cacheInfo.get, null, persistInfo, this.finalOption);
                  if (cacheResult_2) {
                      debug$2(function () { return "[APPX] get cache hit ".concat(cacheKey, ":").concat(JSON.stringify(cacheResult_2)); });
                      var platformSetTimeout = this.runtime().getKernel().setTimeout;
                      platformSetTimeout(function () {
                          resolve(cacheResult_2);
                      }, 0);
                      return true;
                  }
                  else {
                      debug$2(function () { return "[APPX] get cache miss ".concat(cacheKey); });
                      invokeBridgeCallAsyncWithRuntime(this.runtime, this.apiInfo.m || this.apiName, this.appxDomainIsNotEmpty ? __assign(__assign({}, this.finalOption), { __appxDomain: this.appxDomain.value }) : this.finalOption, function (rawResult) {
                          // get miss 后需要主动 update
                          functionCall(cacheInfo.update, null, persistInfo, _this.finalOption, rawResult);
                          debug$2(function () { return "[APPX] get cache updated ".concat(cacheKey, ":").concat(JSON.stringify(rawResult)); });
                          resolve(rawResult);
                      }, this.assignedViewId);
                      return true;
                  }
              }
              else if (cacheInfo.set) {
                  // 需要从 set 开始拦截
                  debug$2(function () { return "[APPX] set cache ".concat(cacheKey, ":").concat(JSON.stringify(_this.finalOption)); });
                  functionCall(cacheInfo.set, null, persistInfo, this.finalOption);
                  // 拦截后再走标准流程
                  return false;
              }
          };
          return BridgeSyncCallContext;
      }(BridgeCallContext));
  }

  function callInternalAPI(runtime, method, param, callback, viewId) {
      var env = runtime().getEnv();
      if (!env) {
          return;
      }
      var insideBasicCfg = getInsideStaticConfig().config;
      if (insideBasicCfg && insideBasicCfg.noUseInternalAPI === true) {
          invokeBridgeCallAsyncWithRuntime(runtime, method, param, callback, viewId);
      }
      else {
          invokeBridgeCallAsyncWithRuntime(runtime, 'internalAPI', {
              method: method,
              param: param,
              viewId: param && param.viewId,
          }, callback, viewId);
      }
  }
  function callInternalAPISync(runtime, method, param, viewId) {
      var env = runtime().getEnv();
      if (!env) {
          return;
      }
      var insideBasicCfg = getInsideStaticConfig().config;
      if (insideBasicCfg && insideBasicCfg.noUseInternalAPI === true) {
          return invokeBridgeCallSyncWithRuntime(runtime, method, param, viewId);
      }
      else {
          return invokeBridgeCallSyncWithRuntime(runtime, 'internalAPI', {
              method: method,
              param: param,
              viewId: param && param.viewId,
          });
      }
  }

  function createLinkedContext(apiInfo, runtime, directly, viewId, appxDomain, apiName, params, shouldNotRewriteIdOrClass) {
      var impl = getBridgeLinkedCallContext();
      return new impl(runtime, appxDomain, apiName, params, apiInfo, {
          directly: directly,
          shouldNotRewriteIdOrClass: shouldNotRewriteIdOrClass,
          viewId: viewId,
      });
  }
  function createProtoContext(apiInfo, runtime, directly, viewId, appxDomain, apiName, params, shouldNotRewriteIdOrClass) {
      var impl = getBridgeProtoCallContext();
      return new impl(runtime, appxDomain, apiName, params, apiInfo, {
          directly: directly,
          inside: false,
          shouldNotRewriteIdOrClass: shouldNotRewriteIdOrClass,
          viewId: viewId,
      });
  }
  function createCallContext(apiInfo, runtime, directly, inside, viewId, appxDomain, apiName, optionOrCallback, callbackOrUndefined) {
      if (apiInfo.fn) {
          var impl = getBridgeFnCallContext();
          return new impl(runtime, appxDomain, apiName, optionOrCallback, callbackOrUndefined, apiInfo, {
              directly: directly,
              inside: inside,
              viewId: viewId,
          });
      }
      else {
          var _a = normalizeCallParameterCompatible(optionOrCallback, callbackOrUndefined, function () {
              return shouldFixDuplicatedCallback(runtime, apiName);
          }), option = _a.option, callback = _a.callback;
          if (isEvent(apiName)) {
              var impl = getBridgeEventCallContext();
              return new impl(runtime, appxDomain, apiName, option, apiInfo, callback, {
                  directly: directly,
                  inside: inside,
                  viewId: viewId,
              });
          }
          else {
              var impl = getBridgeAsyncCallContext();
              return new impl(runtime, appxDomain, apiName, option, apiInfo, callback, {
                  directly: directly,
                  inside: inside,
                  viewId: viewId,
              });
          }
      }
  }
  function createCallSyncContext(apiInfo, runtime, directly, inside, viewId, appxDomain, apiName, optionOrUndefined) {
      var option = normalizeCallParameterCompatible(optionOrUndefined, undefined, function () {
          return shouldFixDuplicatedCallback(runtime, apiName);
      }).option;
      var impl = getBridgeSyncCallContext();
      return new impl(runtime, appxDomain, apiName, option, apiInfo, {
          directly: directly,
          inside: inside,
          viewId: viewId,
      });
  }

  /**
   * @namespace @alipay/appx
   * @copyright @chengyu
   */
  function objectKeys$1(obj) {
      if (obj && typeof obj === 'object') {
          return Object.keys(obj);
      }
      return [];
  }

  /**
   * 拆分类型键名里真正的 key 和对应的 type
   * @method _separateTypeKey
   * @param  {String}         key 带类型标识的键名
   * @return {Object}             返回键名和类型标识两个字段，
   *                              如{k: 'content', t: '%s'}
   */
  function _separateTypeKey(key) {
      var matches = (key || '').match(/(\w+)(%\w)$/i);
      var tk = {
          k: key,
      };
      if (matches) {
          tk.k = matches[1];
          tk.t = matches[2];
      }
      return tk;
  }
  /**
   * 超级字符串转换
   */
  function __superToString(content) {
      var str = content;
      if (typeof content === 'object') {
          str = JSON.stringify(content);
      }
      else {
          str = content + '';
      }
      return str;
  }
  /**
   * 16进制颜色转成10进制数字
   * @method __h2dColor
   * @param  {String}   hex 16进制颜色字符串
   * @return {Number}       10进制数字
   */
  function __h2dColor(hex) {
      var dec = '' + hex;
      // 如果加了#号，去掉
      if (dec.indexOf('#') === 0) {
          dec = dec.substr(1);
      }
      // 如果是3位简写，补全成6位
      if (dec.length === 3) {
          dec = dec.replace(/(.)/g, '$1$1');
      }
      var ret = parseInt(dec, 16);
      if (isNaN(ret)) {
          error$1("".concat(hex, " is invalid hex color."));
      }
      return ret;
  }
  /**
   * 移除 base64 数据头，native 接口不需要传入头部
   * @method __removeBase64Head
   * @param  {String}           base64 有头数据
   * @return {String}                  无头数据
   */
  function __removeBase64Head(base64) {
      if (typeof base64 === 'string') {
          base64 = base64.replace(/^data:(\/|\w|\-|\.)+;base64,/i, '');
      }
      return base64;
  }
  function toType(type, value) {
      if (type === "%s" /* EToType.String */) {
          value = __superToString(value);
      }
      else if (type === "%c" /* EToType.Color */) {
          value = __h2dColor(value);
      }
      else if (type === "%b" /* EToType.Base64 */) {
          value = __removeBase64Head(value);
      }
      else if (type === "%d" /* EToType.Decimal */) {
          value = parseInt(value, 10);
      }
      else if (type === "%f" /* EToType.Float */) {
          value = parseFloat(value);
      }
      return value;
  }
  function mapping(tObj, map, sObj) {
      var typeKey;
      sObj = sObj || {};
      objectKeys$1(map).forEach(function (sKey) {
          var tKey = map[sKey];
          typeKey = _separateTypeKey(tKey);
          // 目标 key
          tKey = typeKey.k;
          // 映射条件，否则不赋值，避免添加 value 为 undefined 的 key
          if (tKey !== undefined && // 目标 key 定义过
              (sKey in tObj || sKey in sObj) && // 源数据至少有一个有效
              tObj[tKey] === undefined // 目标数据空缺待赋值
          ) {
              // sKey 既可以是 sObj 的，也可以是 tObj 自己的，但sObj 优先级高于原始 tObj
              // 即 sObj[sKey]的值 会覆盖 tObj[sKey]的值
              // 并且要根据 type 占位符做相应类型转换
              tObj[tKey] = toType(typeKey.t, sObj[sKey] === undefined ? tObj[sKey] : sObj[sKey]);
              // 删除原始 tObj 中的 sKey，tKey 和 sKey 同名时不做删除
              if (tKey !== sKey) {
                  delete tObj[sKey];
              }
          }
      });
      return tObj;
  }
  function toConstructorString(obj) {
      return Object.prototype.toString.call(obj);
  }

  /**
   *
   * @copyright af-appx
   */
  // tslint:disable no-bitwise
  /**
   * encode
   * @param str
   */
  function encode$1(str) {
      var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
      var strValue = String(str);
      var result = '';
      var currentIndex = 0;
      var sum = 0;
      while (
      // currentIndex | 0 : 取整数
      strValue.charAt(0 | currentIndex) ||
          // tslint:disable-next-line
          ((encodings = '='), currentIndex % 1)) {
          currentIndex += 0.75; // 每次移动3/4个位置
          var currentCode = strValue.charCodeAt(currentIndex); // 获取code point
          if (currentCode > 255) {
              // 大于255无法处理
              throw new Error('"btoa" failed');
          }
          sum = (sum << 8) | currentCode; // 每次在上次的基础上左移8位再加上当前code point
          var encodeIndex = 63 & (sum >> (8 - (currentIndex % 1) * 8)); // 去除多余的位数，再去最后6位
          result += encodings.charAt(encodeIndex);
      }
      return result;
  }
  function decode$1(str) {
      var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
      var res = '';
      var strValue = String(str).replace(/=+$/, '');
      if (strValue.length % 4 === 1) {
          throw new Error('"atob" failed');
      }
      var o = 0;
      var r = 0;
      var i = 0;
      var currentIndex = 0;
      // tslint:disable-next-line
      while ((r = strValue.charAt(currentIndex))) {
          currentIndex = currentIndex + 1;
          r = encodings.indexOf(r);
          if (~r) {
              o = i % 4 ? 64 * o + r : r;
              if (i++ % 4) {
                  res += String.fromCharCode(255 & (o >> ((-2 * i) & 6)));
              }
          }
      }
      return res;
  }
  function arrayBufferToBase64(buffer) {
      var result = '';
      var uintArray = new Uint8Array(buffer);
      var byteLength = uintArray.byteLength;
      for (var i = 0; i < byteLength; i++) {
          result += String.fromCharCode(uintArray[i]);
      }
      return encode$1(result);
  }
  function base64ToArrayBuffer(base64) {
      var str = decode$1(base64);
      var length = str.length;
      var uintArray = new Uint8Array(length);
      for (var i = 0; i < length; i++) {
          uintArray[i] = str.charCodeAt(i);
      }
      return uintArray.buffer;
  }
  function isArrayBuffer(data) {
      return toConstructorString(data) === '[object ArrayBuffer]' && data.byteLength !== undefined;
  }

  /**
   * v8 的 hidden-class 的 hacky 方法，广泛流传于社区
   * - convertToFastObject
   * - convertToSlowObject
   */
  // tslint:disable
  function convertToFastObject(obj) {
      var MyClass = function MyClass() { };
      MyClass.prototype = obj;
      preventTreeShaking(new MyClass());
      return obj;
  }
  function convertToSlowObject(obj) {
      obj.__MAGIC_SLOW_PROPERTY = 1;
      delete obj.__MAGIC_SLOW_PROPERTY;
      return obj;
  }
  function preventTreeShaking(x) {
      if (x === preventTreeShaking)
          { throw preventTreeShaking; }
      return x;
  }

  /**
   * 按屏幕高度判断是否为 iPhone X 系列
   * @method iphoneXSeriesIdentify
   * @param  {Number} screenHeight  屏幕高度
   * iphone xs max 414*896
   * iphone xs     375*812
   * iphone xr     414*896
   * iphone x      375*812
   * @return {boolean}       返回是否为 iPhone X 系列的布尔值
   */
  function iphoneXSeriesIdentify(screenHeight) {
      return screenHeight === 812 || screenHeight === 896;
  }

  var publicBridgeMap = {
      SDKVersion: true,
      call: true,
      callSync: true,
      canIUse: true,
      emit: true,
      off: true,
      on: true,
      renderTarget: true,
  };
  /**
   * 暂时不涉及到二方组件的加载
   * 1. 先检查是否是 public bridge
   * 2. 再检查是否在 apiMap 中
   * 3. 最后检查是否在 caniuseMap 中
   */
  function canIUse(collection, domain, bridgePublicInstance, getRuntime, query) {
      var parts = String(query).split('.');
      // 1. check public bridge
      if (parts.length === 1 && !!publicBridgeMap[parts[0]]) {
          return true;
      }
      // 2. checkapi 直接去 publicInstance 上找，不应该在 collection 找了
      // if (parts.length === 1 && collection.has(parts[0])) {
      //   return true;
      // }
      // 根据栈顶拿页面
      var platformType = 0 /* ESharedAppxPageEngineType.UnknownEngine */;
      var runtime = getRuntime();
      if (runtime) {
          var topInstance = runtime.getNav().getTopInstance();
          if (topInstance) {
              platformType = topInstance.getEngineType();
          }
      }
      // 3. check caniuse map
      if (checkCanIUse(collection.getCanIUseMap(getRuntime, platformType), parts)) {
          return true;
      }
      // 用于进行实时 canIUse 计算
      if (collection.evaluateCanIUse(getRuntime, domain, parts)) {
          return true;
      }
      // 4. 额外检查，看用户是否使用了 bridge.publicInstance 上属性
      if (checkCanIUse(bridgePublicInstance, parts)) {
          // TODO 埋点
          return true;
      }
      return false;
  }
  function checkCanIUse(map, parts) {
      if (!parts.length) {
          return false;
      }
      var current = map;
      for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
          var part = parts_1[_i];
          current = current && current[part];
          if (!current) {
              return false;
          }
      }
      return true;
  }

  var AppxBridgeScope = /** @class */ /*#__PURE__*/ (function () {
      function AppxBridgeScope(bridgeCore, appxDomain, getRuntime, unrefRuntime) {
          this.collection = new BridgeAPICollection();
          this.getRuntime = getRuntime;
          this.appxDomain = appxDomain;
          this.unrefRuntime = unrefRuntime;
          this.callSync4PublicNamed = this.callSync4PublicNamed.bind(this);
          this.callSync4PublicNamedInside = this.callSync4PublicNamedInside.bind(this);
          this.call4PublicNamed = this.call4PublicNamed.bind(this);
          this.call4PublicNamedInside = this.call4PublicNamedInside.bind(this);
          this.call = this.call.bind(this);
          this.callSync = this.callSync.bind(this);
          this.canIUse = this.canIUse.bind(this);
          this.call4LinkedContext = this.call4LinkedContext.bind(this);
          this.call4ProtoContext = this.call4ProtoContext.bind(this);
          this.call4PublicCall = this.call4PublicCall.bind(this);
          this.callSync4PublicCall = this.callSync4PublicCall.bind(this);
          this.publicInstance = {
              call: this.call4PublicCall,
              callSync: this.callSync4PublicCall,
              canIUse: this.canIUse,
              emit: bridgeCore.emit,
              off: bridgeCore.off,
              on: bridgeCore.on,
          };
      }
      AppxBridgeScope.prototype.callSync4PublicNamed = function (apiName, option, viewId) {
          return callSync(this.collection, this.appxDomain, this.getRuntime, 1 /* EBridgeCallFlag.Group4CallPublicNamed */, apiName, option, viewId);
      };
      AppxBridgeScope.prototype.callSync4PublicNamedInside = function (apiName, option, viewId) {
          return callSync(this.collection, this.appxDomain, this.getRuntime, 5 /* EBridgeCallFlag.Group4CallPublicNamedInside */, apiName, option, viewId);
      };
      AppxBridgeScope.prototype.callSync4PublicCall = function (apiName, option, viewId) {
          return callSync(this.collection, this.appxDomain, this.getRuntime, 2 /* EBridgeCallFlag.Group4CallPublicCall */, apiName, option, viewId);
      };
      AppxBridgeScope.prototype.call4PublicCall = function (apiName, option, callback, viewId) {
          return call(this.collection, this.appxDomain, this.getRuntime, 2 /* EBridgeCallFlag.Group4CallPublicCall */, apiName, option, callback, viewId);
      };
      AppxBridgeScope.prototype.call4PublicNamed = function (apiName, option, callback, viewId) {
          return call(this.collection, this.appxDomain, this.getRuntime, 1 /* EBridgeCallFlag.Group4CallPublicNamed */, apiName, option, callback, viewId);
      };
      AppxBridgeScope.prototype.call4PublicNamedInside = function (apiName, option, callback, viewId) {
          return call(this.collection, this.appxDomain, this.getRuntime, 5 /* EBridgeCallFlag.Group4CallPublicNamedInside */, apiName, option, callback, viewId);
      };
      AppxBridgeScope.prototype.removeAPIs = function (apis, namespace) {
          this.collection.removeAPIs(apis);
          var publicInstance = namespace
              ? this.publicInstance[namespace]
              : this.publicInstance;
          for (var _i = 0, apis_1 = apis; _i < apis_1.length; _i++) {
              var api = apis_1[_i];
              if (publicInstance && publicInstance[api]) {
                  publicInstance[api] = undefined;
              }
          }
      };
      AppxBridgeScope.prototype.replaceAPI = function (replacedAPIName, replacerAPIDefiniton) {
          this.collection.replaceAPI(replacedAPIName, replacerAPIDefiniton);
      };
      AppxBridgeScope.prototype.getCollection = function () {
          return this.collection;
      };
      AppxBridgeScope.prototype.callSync = function (apiName, option, viewId) {
          return callSync(this.collection, this.appxDomain, this.getRuntime, 0 /* EBridgeCallFlag.Group4DirectCall */, apiName, option, viewId);
      };
      AppxBridgeScope.prototype.canIUse = function (query) {
          return canIUse(this.collection, this.appxDomain, this.publicInstance, this.getRuntime, query);
      };
      AppxBridgeScope.prototype.call = function (apiName, option, callback, viewId) {
          return call(this.collection, this.appxDomain, this.getRuntime, 0 /* EBridgeCallFlag.Group4DirectCall */, apiName, option, callback, viewId);
      };
      AppxBridgeScope.prototype.call4LinkedContext = function (name, shouldNotRewriteIdOrClass) {
          var arguments$1 = arguments;

          var args = [];
          for (var _i = 2; _i < arguments.length; _i++) {
              args[_i - 2] = arguments$1[_i];
          }
          return callLinkedContext(this.collection, this.appxDomain, this.getRuntime, name, args, shouldNotRewriteIdOrClass);
      };
      AppxBridgeScope.prototype.call4ProtoContext = function (name, shouldNotRewriteIdOrClass) {
          var arguments$1 = arguments;

          var args = [];
          for (var _i = 2; _i < arguments.length; _i++) {
              args[_i - 2] = arguments$1[_i];
          }
          var apiInfo = this.collection.getAPIInfoByName(name);
          return callProtoContext(apiInfo, this.appxDomain, this.getRuntime, args, shouldNotRewriteIdOrClass);
      };
      AppxBridgeScope.prototype.destroy = function () {
          this.publicInstance = null;
          this.collection = null;
          if (this.unrefRuntime) {
              this.unrefRuntime();
          }
      };
      return AppxBridgeScope;
  }());
  function appendCollection2PublicInstance(apiExportList, publicContext) {
      var collection = publicContext.getCollection();
      collection.setAPIs(apiExportList);
      var apiMap = collection.getAPIMap();
      var bridgeCallSync4Public = publicContext.callSync4PublicNamed;
      var bridgeCallSync4PublicInside = publicContext.callSync4PublicNamedInside;
      var bridgeCall4Public = publicContext.call4PublicNamed;
      var bridgeCall4PublicInside = publicContext.call4PublicNamedInside;
      var bridgeCallLinkedContext = publicContext.call4LinkedContext;
      var bridgeCallProtoContext = publicContext.call4ProtoContext;
      var bridgePublicInstance = publicContext.publicInstance;
      convertToSlowObject(bridgePublicInstance);
      for (var _i = 0, apiExportList_1 = apiExportList; _i < apiExportList_1.length; _i++) {
          var apiExport = apiExportList_1[_i];
          var ns = apiExport.namespace;
          var assignObj = bridgePublicInstance;
          if (ns) {
              if (!assignObj[ns]) {
                  assignObj[ns] = {};
              }
              assignObj = assignObj[ns];
              convertToSlowObject(assignObj);
          }
          if (apiExport.linked) {
              for (var _a = 0, _b = apiExport.keys; _a < _b.length; _a++) {
                  var apiName = _b[_a];
                  if (apiMap[apiName]) {
                      assignObj[apiName] = bridgeCallLinkedContext.bind(null, apiName, false);
                  }
              }
          }
          else if (apiExport.proto) {
              for (var _c = 0, _d = apiExport.keys; _c < _d.length; _c++) {
                  var apiName = _d[_c];
                  if (apiMap[apiName]) {
                      assignObj[apiName] = bridgeCallProtoContext.bind(null, apiName, false);
                  }
              }
          }
          else {
              var bindFn = apiExport.sync
                  ? apiExport.inside
                      ? bridgeCallSync4PublicInside
                      : bridgeCallSync4Public
                  : apiExport.inside
                      ? bridgeCall4PublicInside
                      : bridgeCall4Public;
              for (var _e = 0, _f = apiExport.keys; _e < _f.length; _e++) {
                  var apiName = _f[_e];
                  if (apiMap[apiName]) {
                      assignObj[apiName] = bindFn.bind(null, apiName);
                  }
              }
          }
          if (ns) {
              convertToFastObject(assignObj);
          }
      }
      // 结束 setup 之后，再设置成 fastPath
      convertToFastObject(bridgePublicInstance);
  }
  function exportCollection2PublicInstance(apiExportList, publicCallProxyApiExportList, typedCanIUseMapInfo, publicContext) {
      var collection = publicContext.getCollection();
      collection.setCanIUses(typedCanIUseMapInfo);
      collection.setPublicCallProxyAPIs(publicCallProxyApiExportList);
      appendCollection2PublicInstance(apiExportList, publicContext);
      var bridgePublicInstance = publicContext.publicInstance;
      return bridgePublicInstance;
  }

  var AppxBridgeInstance = /** @class */ /*#__PURE__*/ (function () {
      function AppxBridgeInstance(getRuntime, unrefRuntime) {
          var _this = this;
          this.extraInfo = {};
          this.scope4Domain = Object.create(null);
          this.scopeList4Plugin = [];
          this.getRuntime = getRuntime;
          this.unrefRuntime = unrefRuntime;
          this.callBridge = function (name, option, callback, viewId) { return _this.callBridgeImpl(name, option, callback, viewId); };
          this.callBridgeSync = function (name, option, viewId) { return _this.callBridgeSyncImpl(name, option, viewId); };
          this.on = this.on.bind(this);
          this.off = this.off.bind(this);
          this.emit = this.emit.bind(this);
          this.defaultScope = new AppxBridgeScope(this, kBridgeAppxDomain4Empty, this.getRuntime);
      }
      Object.defineProperty(AppxBridgeInstance.prototype, "event", {
          get: function () {
              return this.getEventManager();
          },
          enumerable: false,
          configurable: true
      });
      AppxBridgeInstance.prototype.off = function (name, indexCallback) {
          return this.getEventManager().removeEventListener(name, 1 /* EBridgeEventCustomTypeContext.User */, indexCallback);
      };
      AppxBridgeInstance.prototype.on = function (name, callback, indexCallback) {
          return this.getEventManager().addEventListener(name, 1 /* EBridgeEventCustomTypeContext.User */, callback, indexCallback);
      };
      AppxBridgeInstance.prototype.emit = function (name) {
          var arguments$1 = arguments;

          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments$1[_i];
          }
          return this.getEventManager().invokeTypedEvent(name, 1 /* EBridgeEventCustomTypeContext.User */, args);
      };
      AppxBridgeInstance.prototype.callBridgeImpl = function (name, option, callback, viewId) {
          return invokeBridgeCallAsyncWithRuntime(this.getRuntime, name, option, callback);
      };
      AppxBridgeInstance.prototype.callBridgeSyncImpl = function (name, option, viewId) {
          return invokeBridgeCallSyncWithRuntime(this.getRuntime, name, option, viewId);
      };
      AppxBridgeInstance.prototype.dispose = function () {
          if (this.unrefRuntime) {
              this.unrefRuntime();
          }
      };
      AppxBridgeInstance.prototype.callInternalAPI = function (name, option, callback, viewId) {
          return callInternalAPI(this.getRuntime, name, option, callback, viewId);
      };
      AppxBridgeInstance.prototype.callInternalAPISync = function (name, option, viewId) {
          return callInternalAPISync(this.getRuntime, name, option, viewId);
      };
      AppxBridgeInstance.prototype.getPluginScopes = function () {
          return this.scopeList4Plugin;
      };
      AppxBridgeInstance.prototype.createScope = function (appxDomain) {
          if (isAppxDomain4Empty(appxDomain)) {
              return this.defaultScope;
          }
          var scope4Domain = this.scope4Domain;
          if (!scope4Domain[appxDomain.value]) {
              var scope = (scope4Domain[appxDomain.value] = new AppxBridgeScope(this, appxDomain, this.getRuntime));
              if (isAppxDomain4Extension(appxDomain)) {
                  this.scopeList4Plugin.push(scope);
              }
          }
          return scope4Domain[appxDomain.value];
      };
      AppxBridgeInstance.prototype.getScope = function (appxDomain) {
          if (isAppxDomain4Empty(appxDomain)) {
              return this.defaultScope;
          }
          return this.scope4Domain[appxDomain.value];
      };
      AppxBridgeInstance.prototype.getScopeByProviderInfo = function (providerInfo) {
          // 表示该 LogicInstance 归属
          if (providerInfo.providerType === 1 /* EZRuntimeLinkedInstanceOption4ProviderType.MiniExtension */) {
              return this.scope4Domain[providerInfo.miniExtensionId];
          }
          else {
              // 区分 defaultScope 和 MainApp
              var runtime = this.getRuntime();
              if (runtime) {
                  if (runtime.getKernel().isUsingExtensionMode) {
                      return this.scope4Domain[kBridgeAppxDomain4App.value];
                  }
                  else {
                      return this.defaultScope;
                  }
              }
          }
      };
      AppxBridgeInstance.prototype.getEventManager = function () {
          if (!this.eventInstance) {
              this.eventInstance = createBridgeEventManager(this.getRuntime);
          }
          return this.eventInstance;
      };
      return AppxBridgeInstance;
  }());
  function createAppxBridgeInstance(getRuntime, unrefRuntime) {
      return new AppxBridgeInstance(getRuntime, unrefRuntime);
  }

  var BridgeAPICollection = /** @class */ /*#__PURE__*/ (function () {
      function BridgeAPICollection() {
          this.apiMap = Object.create(null);
          this.publicProxyMap = Object.create(null);
      }
      BridgeAPICollection.prototype.setCanIUses = function (typedCanIUseMapInfo) {
          this.typedCanIUseMapInfo = typedCanIUseMapInfo;
      };
      BridgeAPICollection.prototype.removeAPIs = function (apis) {
          var apiMap = this.apiMap;
          for (var _i = 0, apis_1 = apis; _i < apis_1.length; _i++) {
              var api = apis_1[_i];
              apiMap[api] = undefined;
          }
      };
      BridgeAPICollection.prototype.setAPIs = function (apiExport) {
          var apiMap = this.apiMap;
          convertToSlowObject(apiMap);
          for (var _i = 0, apiExport_1 = apiExport; _i < apiExport_1.length; _i++) {
              var map = apiExport_1[_i];
              // Removed: 已经支持直接访问 publicInstance[ns][key]
              var values = map.values;
              for (var _a = 0, _b = map.keys; _a < _b.length; _a++) {
                  var apiName = _b[_a];
                  apiMap[apiName] = values[apiName];
              }
          }
          convertToFastObject(apiMap);
          return apiMap;
      };
      BridgeAPICollection.prototype.replaceAPI = function (replacedAPIName, replacerAPIDefiniton) {
          var apiMap = this.apiMap;
          if (apiMap[replacedAPIName] && replacerAPIDefiniton) {
              // 替换一波
              apiMap[replacedAPIName] = replacerAPIDefiniton;
          }
      };
      BridgeAPICollection.prototype.setPublicCallProxyAPIs = function (apiExport) {
          var publicProxyMap = this.publicProxyMap;
          convertToSlowObject(publicProxyMap);
          for (var _i = 0, apiExport_2 = apiExport; _i < apiExport_2.length; _i++) {
              var map = apiExport_2[_i];
              var values = map.values;
              for (var _a = 0, _b = map.keys; _a < _b.length; _a++) {
                  var apiName = _b[_a];
                  publicProxyMap[apiName] = values[apiName];
              }
          }
          convertToFastObject(publicProxyMap);
          this.publicProxyMap = publicProxyMap;
          return publicProxyMap;
      };
      BridgeAPICollection.prototype.getPublicCallProxyAPIInfoByName = function (name) {
          return this.publicProxyMap[name];
      };
      BridgeAPICollection.prototype.hasPublicCallProxyAPI = function (name) {
          return !!this.publicProxyMap[name];
      };
      BridgeAPICollection.prototype.has = function (name) {
          return !!this.apiMap[name];
      };
      BridgeAPICollection.prototype.evaluateCanIUse = function (getRuntime, domain, parts) {
          if (getRuntime()) {
              var domainKey = !domain || isAppxDomain4Empty(domain) ? 'empty' : "".concat(domain.type, "_").concat(domain.value);
              if (!this.typedCanIUseMap) {
                  this.typedCanIUseMap = initCanIUsesWithRuntimeRequired(this.typedCanIUseMapInfo, getRuntime);
              }
              var evaluateMap = this.typedCanIUseMap.evaluate;
              var domainEvaluateMap = evaluateMap[domainKey];
              if (!evaluateMap[domainKey]) {
                  domainEvaluateMap = evaluateMap[domainKey] = {};
              }
              var fns = this.typedCanIUseMapInfo.evaluate;
              if (fns) {
                  for (var _i = 0, fns_1 = fns; _i < fns_1.length; _i++) {
                      var fn = fns_1[_i];
                      var result = fn(getRuntime, domain, parts, domainEvaluateMap);
                      if (result !== undefined) {
                          return result;
                      }
                  }
              }
          }
          return 0;
      };
      BridgeAPICollection.prototype.getCanIUseMap = function (getRuntime, platformType) {
          if (getRuntime()) {
              if (!this.typedCanIUseMap) {
                  this.typedCanIUseMap = initCanIUsesWithRuntimeRequired(this.typedCanIUseMapInfo, getRuntime);
              }
              if (platformType !== 1 /* ESharedAppxPageEngineType.WebEngine */ &&
                  platformType !== 2 /* ESharedAppxPageEngineType.CubeEngine */) {
                  if (this.typedCanIUseMap) {
                      platformType = this.typedCanIUseMap.defaultType;
                  }
                  else {
                      return {};
                  }
              }
              return this.typedCanIUseMap ? this.typedCanIUseMap[platformType] : {};
          }
          else {
              return {};
          }
      };
      BridgeAPICollection.prototype.getAPIMap = function () {
          return this.apiMap;
      };
      BridgeAPICollection.prototype.getAPIInfoByName = function (name) {
          return this.apiMap[name];
      };
      return BridgeAPICollection;
  }());
  function initCanIUsesWithRuntimeRequired(typedCanIUseMapInfo, getRuntime) {
      var _a;
      var typedCanIUseMap = (_a = {
              defaultType: typedCanIUseMapInfo.defaultType,
              evaluate: {}
          },
          _a[1 /* ESharedAppxPageEngineType.WebEngine */] = Object.create(null),
          _a[2 /* ESharedAppxPageEngineType.CubeEngine */] = Object.create(null),
          _a);
      for (var _i = 0, _b = [1 /* ESharedAppxPageEngineType.WebEngine */, 2 /* ESharedAppxPageEngineType.CubeEngine */]; _i < _b.length; _i++) {
          var type = _b[_i];
          var mapList = typedCanIUseMapInfo[type];
          if (mapList) {
              var caniuseMap = typedCanIUseMap[type];
              for (var _c = 0, _d = mapList(getRuntime); _c < _d.length; _c++) {
                  var map = _d[_c];
                  caniuseMap = deepMergeValue4CanIUse(caniuseMap, map);
              }
              typedCanIUseMap[type] = caniuseMap;
          }
      }
      return typedCanIUseMap;
  }
  function deepMergeValue4CanIUse(oldValue, newValue) {
      // oldValue or newValue is false
      if (!oldValue) {
          return newValue;
      }
      if (!newValue) {
          return oldValue;
      }
      // 都不是 false, 开始合并 map
      var ret = oldValue === 1
          ? {}
          : __assign({}, oldValue);
      if (typeof newValue === 'object') {
          for (var _i = 0, _a = Object.keys(newValue); _i < _a.length; _i++) {
              var key = _a[_i];
              ret[key] = deepMergeValue4CanIUse(ret[key], newValue[key]);
          }
      }
      return ret;
  }

  function wrapCleanDataTask(event, task) {
      var needOverrideData = !!(event && event.data);
      if (!needOverrideData) {
          task(event);
      }
      else {
          var originalData = event.data;
          var cleanedData = cleanData(originalData);
          event.data = cleanedData;
          task(event);
          event.data = originalData;
      }
  }
  function cleanData(data) {
      var mutableData = __assign({}, data);
      delete mutableData.appInstanceId;
      delete mutableData.instanceId;
      delete mutableData.pageName;
      return mutableData;
  }
  function createBridgeEventManager(runtime) {
      var BridgeEventManager = /** @class */ /*#__PURE__*/ (function () {
          function BridgeEventManager() {
              var _this = this;
              this.eventMap = Object.create(null);
              this.eventInvokeMap = Object.create(null);
              this.taskManager = new SharedEventTaskManager(function (name, cb, skipCleanData) {
                  _this.addEventListener(name, skipCleanData ? 0 /* EBridgeEventCustomTypeContext.Raw */ : 1 /* EBridgeEventCustomTypeContext.User */, cb);
              });
          }
          BridgeEventManager.prototype.hasEventListener = function (name, type) {
              var context = this.getCustomTypeContext(name);
              if (!type) {
                  return !!(context[0 /* EBridgeEventCustomTypeContext.Raw */].length ||
                      context[1 /* EBridgeEventCustomTypeContext.User */].length ||
                      context[2 /* EBridgeEventCustomTypeContext.UserData */].length);
              }
              else {
                  return !!(context[type] && context[type].length);
              }
          };
          BridgeEventManager.prototype.addEventListener = function (name, type, invokeCallback, indexCallback) {
              var _this = this;
              if (indexCallback === void 0) { indexCallback = invokeCallback; }
              if (!this.hasCustomEventMatched(name, type, indexCallback)) {
                  this.eventMap[name][type].push({
                      cache: indexCallback,
                      invoke: invokeCallback,
                  });
              }
              this.registerListener(name);
              if (type === 1 /* EBridgeEventCustomTypeContext.User */) {
                  // return remove function
                  return {
                      remove: function () {
                          _this.removeEventListener(name, type, indexCallback);
                      },
                  };
              }
          };
          BridgeEventManager.prototype.removeEventListener = function (name, type, indexCallback) {
              // TODO
              if (!type) {
                  this.eventMap[name] = null;
                  this.unregisterListener(name);
              }
              else {
                  // 定向清除
                  this.removeEventListener4Type(name, type, indexCallback);
                  if (!this.hasEventListener(name)) {
                      this.unregisterListener(name);
                  }
              }
          };
          BridgeEventManager.prototype.removeEventListener4Type = function (name, type, indexCallback) {
              var context = this.getCustomTypeContext(name);
              if (!indexCallback) {
                  context[type] = [];
              }
              if (context[type].length) {
                  context[type] = context[type].filter(function (info) { return info.cache !== indexCallback; });
              }
          };
          BridgeEventManager.prototype.invokeTypedEvent = function (name, type, args) {
              if (!this.hasEventListener(name)) {
                  return;
              }
              var context = this.getCustomTypeContext(name);
              var callbacks = context[type];
              if (callbacks && callbacks.length) {
                  for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {
                      var info = callbacks_1[_i];
                      info.invoke.apply(null, args);
                  }
              }
          };
          BridgeEventManager.prototype.getCustomTypeContext = function (name) {
              if (!this.eventMap[name]) {
                  this.eventMap[name] = [[], [], []];
              }
              return this.eventMap[name];
          };
          BridgeEventManager.prototype.hasCustomEventMatched = function (name, type, indexCallback) {
              var context = this.getCustomTypeContext(name);
              return context[type].some(function (info) { return info.cache === indexCallback; });
          };
          BridgeEventManager.prototype.registerListener = function (name) {
              if (!this.eventInvokeMap[name]) {
                  var impl = (this.eventInvokeMap[name] = this.invokeEventImpl.bind(this, name));
                  runtime().getKernel().__EVENT_ADD_LISTENER__(name, impl);
              }
          };
          BridgeEventManager.prototype.unregisterListener = function (name) {
              var impl = this.eventInvokeMap[name];
              if (impl) {
                  runtime().getKernel().__EVENT_REMOVE_LISTENER__(name, impl);
                  this.eventInvokeMap[name] = null;
              }
          };
          BridgeEventManager.prototype.invokeEventImpl = function (name, event) {
              if (!this.hasEventListener(name)) {
                  return;
              }
              var context = this.getCustomTypeContext(name);
              for (var _i = 0, _a = context[0 /* EBridgeEventCustomTypeContext.Raw */]; _i < _a.length; _i++) {
                  var info = _a[_i];
                  functionCall(info.invoke, null, event);
              }
              var hasUserCallback = context[1 /* EBridgeEventCustomTypeContext.User */].length;
              var hasUserDataCallback = context[2 /* EBridgeEventCustomTypeContext.UserData */].length;
              if (hasUserCallback || hasUserDataCallback) {
                  wrapCleanDataTask(event, function (modEvent) {
                      for (var _i = 0, _a = context[1 /* EBridgeEventCustomTypeContext.User */]; _i < _a.length; _i++) {
                          var info = _a[_i];
                          functionCall(info.invoke, null, modEvent);
                      }
                      for (var _b = 0, _c = context[2 /* EBridgeEventCustomTypeContext.UserData */]; _b < _c.length; _b++) {
                          var info = _c[_b];
                          functionCall(info.invoke, null, modEvent.data);
                      }
                  });
              }
          };
          return BridgeEventManager;
      }());
      return new BridgeEventManager();
  }

  function getBridgeShared(getRuntime, unrefRuntime) {
      var bridge = createAppxBridgeInstance(getRuntime, unrefRuntime);
      return bridge;
  }
  function getBridge(apiExportList, publicCallProxyApiExportList, typedCanIUseMapInfo, getRuntime, unrefRuntime) {
      var bridge = getBridgeShared(getRuntime, unrefRuntime);
      var publicContext = bridge.defaultScope;
      exportCollection2PublicInstance(apiExportList, publicCallProxyApiExportList, typedCanIUseMapInfo, publicContext);
      var runtimeOrNull = getRuntime();
      if (runtimeOrNull) {
          runtimeOrNull.setBridge(bridge);
      }
      return bridge;
  }

  function createBridgeTypedAPI(apis) {
      return {
          keys: Object.keys(apis),
          values: apis,
      };
  }

  function getAPIExportGroup(ns) {
      return [
          {
              inside: true,
              keys: [],
              namespace: ns ? ns : undefined,
              sync: false,
              values: {},
          },
          {
              inside: true,
              keys: [],
              namespace: ns ? ns : undefined,
              sync: true,
              values: {},
          } ];
  }
  function getAPIExportGroupByNamespace(a, ns) {
      var group = a[ns];
      if (!group) {
          group = a[ns] = getAPIExportGroup(ns);
      }
      return group;
  }
  function upperFirstCase(str) {
      return str.substring(0, 1).toUpperCase() + str.substring(1);
  }
  var sharedBridgeAPI4InsideAPI;
  function getBridgeAPI4InsideAPI(env) {
      if (!sharedBridgeAPI4InsideAPI) {
          sharedBridgeAPI4InsideAPI = getBridgeAPI4InsideAPIImpl(env);
      }
      return sharedBridgeAPI4InsideAPI;
  }
  function getBridgeAPI4InsideAPIImpl(env) {
      var _a = getInsideRuntimeConfig(), getInsideAPI = _a.getAPI, getInsideCustomAPI = _a.getCustomAPI;
      var _b = getInsideStaticConfig(), getInsideAPISupport = _b.getAPI, getInsideCustomAPISupport = _b.getCustomAPI, config = _b.config;
      var insideAPI = getInsideAPI ? getInsideAPI() : null;
      var customInsideAPI = getInsideCustomAPI ? getInsideCustomAPI() : null;
      var insideAPISupport = getInsideAPISupport ? getInsideAPISupport() : null;
      var customInsideAPISupport = getInsideCustomAPISupport ? getInsideCustomAPISupport() : null;
      var APIExportRoot = getAPIExportGroup('');
      var APIExportByNamespace = {};
      var currentAPIExports;
      var clientExtendConfig = getInsideClientExtendConfig();
      if (clientExtendConfig && clientExtendConfig.apis) {
          for (var _i = 0, _c = clientExtendConfig.apis; _i < _c.length; _i++) {
              var clientAPI = _c[_i];
              if (clientAPI) {
                  var type = clientAPI.type, namespace = clientAPI.namespace, cmd = clientAPI.cmd;
                  var name = clientAPI.name;
                  if (name && typeof name === 'string') {
                      if (namespace) {
                          currentAPIExports = getAPIExportGroupByNamespace(APIExportByNamespace, namespace);
                      }
                      else {
                          currentAPIExports = APIExportRoot;
                      }
                      if (type === 'event') {
                          name = upperFirstCase(name);
                          currentAPIExports[0 /* EInsideAPIExportGroupIndex.Call */].keys.push("on".concat(name));
                          currentAPIExports[0 /* EInsideAPIExportGroupIndex.Call */].values["on".concat(name)] = {
                              m: cmd,
                          };
                          currentAPIExports[0 /* EInsideAPIExportGroupIndex.Call */].keys.push("off".concat(name));
                          currentAPIExports[0 /* EInsideAPIExportGroupIndex.Call */].values["off".concat(name)] = {
                              m: cmd,
                          };
                      }
                      else if (type === 'invoke') {
                          // 看是否 Sync
                          if (/Sync$/i.test(name)) {
                              currentAPIExports[1 /* EInsideAPIExportGroupIndex.CallSync */].keys.push(name);
                              currentAPIExports[1 /* EInsideAPIExportGroupIndex.CallSync */].values[name] = {
                                  m: cmd,
                              };
                          }
                          else {
                              currentAPIExports[0 /* EInsideAPIExportGroupIndex.Call */].keys.push(name);
                              currentAPIExports[0 /* EInsideAPIExportGroupIndex.Call */].values[name] = {
                                  m: cmd,
                              };
                          }
                      }
                  }
              }
          }
      }
      // 增补一下 extraNS
      if (config) {
          APIExportByNamespace[config.clientName] = getAPIExportGroupByNamespace(APIExportByNamespace, config.clientName);
          if (config.clientName === 'tb' && Array.isArray(config.extraNS)) {
              for (var _d = 0, _e = config.extraNS; _d < _e.length; _d++) {
                  var ns = _e[_d];
                  APIExportByNamespace[ns] = getAPIExportGroupByNamespace(APIExportByNamespace, ns);
              }
          }
      }
      if (insideAPI) {
          for (var _f = 0, _g = Object.keys(insideAPI); _f < _g.length; _f++) {
              var apiName = _g[_f];
              if (!insideAPISupport ||
                  !insideAPISupport[apiName] ||
                  (insideAPISupport[apiName] && insideAPISupport[apiName](env))) {
                  var insideAPIConfig = insideAPI[apiName];
                  if (insideAPIConfig) {
                      if (insideAPIConfig.ns) {
                          currentAPIExports = APIExportByNamespace[insideAPIConfig.ns];
                      }
                      else {
                          currentAPIExports = APIExportRoot;
                      }
                  }
                  else {
                      currentAPIExports = null;
                  }
                  if (currentAPIExports) {
                      if (/Sync$/.test(apiName)) {
                          currentAPIExports[1 /* EInsideAPIExportGroupIndex.CallSync */].keys.push(apiName);
                          currentAPIExports[1 /* EInsideAPIExportGroupIndex.CallSync */].values[apiName] = insideAPIConfig;
                      }
                      else {
                          currentAPIExports[0 /* EInsideAPIExportGroupIndex.Call */].keys.push(apiName);
                          currentAPIExports[0 /* EInsideAPIExportGroupIndex.Call */].values[apiName] = insideAPI[apiName];
                      }
                  }
              }
          }
      }
      if (customInsideAPI) {
          for (var _h = 0, _j = Object.keys(customInsideAPI); _h < _j.length; _h++) {
              var customApiName = _j[_h];
              if (!customInsideAPISupport ||
                  !customInsideAPISupport[customApiName] ||
                  (customInsideAPISupport[customApiName] && customInsideAPISupport[customApiName](env))) {
                  var insideAPIConfig = customInsideAPI[customApiName];
                  if (insideAPIConfig) {
                      if (insideAPIConfig.ns) {
                          currentAPIExports = APIExportByNamespace[insideAPIConfig.ns];
                      }
                      else {
                          currentAPIExports = APIExportRoot;
                      }
                  }
                  else {
                      currentAPIExports = null;
                  }
                  currentAPIExports[0 /* EInsideAPIExportGroupIndex.Call */].keys.push(customApiName);
                  currentAPIExports[0 /* EInsideAPIExportGroupIndex.Call */].values[customApiName] = customInsideAPI[customApiName];
              }
          }
      }
      var namespaces = Object.keys(APIExportByNamespace);
      if (namespaces.length) {
          var APIExports4All = __spreadArray$1([], APIExportRoot, true);
          for (var _k = 0, namespaces_1 = namespaces; _k < namespaces_1.length; _k++) {
              var ns = namespaces_1[_k];
              APIExports4All = APIExports4All.concat(APIExportByNamespace[ns]);
          }
          return APIExports4All;
      }
      else {
          return APIExportRoot;
      }
  }

  var runtimeContextMap = Object.create(null);
  function setRuntimeContext(appInstanceId, context) {
      // to slow
      runtimeContextMap[appInstanceId] = context;
      // to fast
      convertToFastObject(runtimeContextMap);
  }
  function removeRuntimeContext(appInstanceId) {
      delete runtimeContextMap[appInstanceId];
  }
  /**
   * @description 获取特定 AppxRuntimeContext
   * @param appInstanceId {string}
   */
  function getRuntimeById(appInstanceId) {
      return runtimeContextMap[appInstanceId];
  }

  var AppxRuntimeContext = /** @class */ /*#__PURE__*/ (function () {
      /* tslint:enable:variable-name */
      function AppxRuntimeContext(type, appInstanceId, kernel, meta, pageMeta, bizContextAccessor) {
          var _this = this;
          this.id = appInstanceId;
          this.type = type;
          this._kernel = kernel;
          this._bizContextAccessor = bizContextAccessor;
          this._miniExtensionManager = createRuntimeDependency(6 /* ESharedAppxRuntimeDependencyType.MiniExtensionManager */, type, appInstanceId);
          this._pageStateManager = createRuntimeDependency(7 /* ESharedAppxRuntimeDependencyType.PageStateManager */, type, appInstanceId);
          this._lazyLoadManager = createRuntimeDependency(8 /* ESharedAppxRuntimeDependencyType.LazyLoadManager */, type, appInstanceId);
          this.setEnv(initAppxEnvironment(this));
          this._logger = createRuntimeDependency(0 /* ESharedAppxRuntimeDependencyType.Logger */, type, appInstanceId);
          this._eventManager = new EventBaseManager(appInstanceId);
          this._meta = createRuntimeDependency(4 /* ESharedAppxRuntimeDependencyType.Meta */, type, appInstanceId, [meta, pageMeta]);
          this._pageManager = createRuntimeDependency(2 /* ESharedAppxRuntimeDependencyType.PageInstanceManager */, type, appInstanceId);
          this._nav = createRuntimeDependency(3 /* ESharedAppxRuntimeDependencyType.Navigation */, type, appInstanceId);
          this._subPackageManger = new SubPackageManager4Host(appInstanceId, meta);
          ifIsMiniProgramEnv(function () {
              var compileInfo = _this.getMeta().getCompileInfo();
              if (compileInfo && compileInfo.enableHotModuleReplace) {
                  _this._hmrUpdateManager = new HMRUpdateManager(_this);
              }
          });
      }
      AppxRuntimeContext.prototype.getBizContext = function () {
          return this._bizContextAccessor;
      };
      AppxRuntimeContext.prototype.bootstrap = function () {
          this._miniExtensionManager.bootstrap();
          this._logger.bootstrap();
          this._pageManager.bootstrap();
          this._nav.bootstrap();
      };
      AppxRuntimeContext.prototype.inited = function () {
          this._miniExtensionManager.inited();
          this._nav.inited();
          this._logger.inited();
      };
      AppxRuntimeContext.prototype.getSwitchManager = function () {
          var _this = this;
          if (!this._switchManager) {
              var env = this._env;
              var meta = this._meta;
              if (!(env || meta)) {
                  return;
              }
              var originalStartupParams = env.originalStartupParams;
              this._switchManager = new SharedAppxSwitchManager(originalStartupParams && originalStartupParams.__appxFrameworkConfig, function (code, error) { return _this.getLogger().reportError(code, error); }, env.startupParams.appId, env.appxVersion, meta.getStaticMiniExtensionId());
          }
          return this._switchManager;
      };
      AppxRuntimeContext.prototype.getBehaviorManager = function () {
          var _this = this;
          var behaviorManager = this._behaviorManager;
          if (!behaviorManager) {
              behaviorManager = this._behaviorManager = new SharedAppxUnexpectedBehaviorManager(function (message, payload) {
                  var nav = _this.getNav();
                  if (nav.whenTopInstancePushed) {
                      nav.whenTopInstancePushed(function (pageInstance) {
                          pageInstance.invokeRenderMethod("reportUnexpectedBehaviorToBasement" /* ESharedAppxPageRenderMethod.ReportUnexpectedBehaviorToBasement */, [
                              payload ? [message, payload] : message ]);
                      });
                  }
              }, isConsoleAvaliableToDeveloper(this.getEnv().packageAndRunSceneType)
                  ? // tslint:disable-next-line no-console
                      function (message) { return console.error(message); }
                  : noop, function (name) { return _this.getSwitchManager().get(name); });
          }
          return behaviorManager;
      };
      AppxRuntimeContext.prototype.getSubPackageManager = function () {
          return this._subPackageManger;
      };
      // 内部事件管理
      AppxRuntimeContext.prototype.getTypedEventManager = function () {
          if (!this._typedEventManager) {
              this._typedEventManager = new SharedAppxTypedEventManager();
          }
          return this._typedEventManager;
      };
      AppxRuntimeContext.prototype.getLogger = function () {
          return this._logger;
      };
      AppxRuntimeContext.prototype.getApp = function () {
          return this._app;
      };
      AppxRuntimeContext.prototype.setApp = function (v) {
          this._app = v;
      };
      AppxRuntimeContext.prototype.getEnv = function () {
          return this._env;
      };
      AppxRuntimeContext.prototype.setEnv = function (v) {
          this._env = v;
      };
      AppxRuntimeContext.prototype.setBridge = function (v) {
          if (this._bridge) {
              if (v !== this._bridge) {
                  throw getError4RuntimeException(this.id, 'bridge conflict');
              }
          }
          this._bridge = v;
      };
      AppxRuntimeContext.prototype.getBridge = function () {
          return this._bridge;
      };
      AppxRuntimeContext.prototype.getMiniExtensionManager = function () {
          return this._miniExtensionManager;
      };
      AppxRuntimeContext.prototype.getPageStateManager = function () {
          return this._pageStateManager;
      };
      AppxRuntimeContext.prototype.getLazyLoadManager = function () {
          return this._lazyLoadManager;
      };
      AppxRuntimeContext.prototype.getMeta = function () {
          return this._meta;
      };
      AppxRuntimeContext.prototype.getKernel = function () {
          return this._kernel;
      };
      AppxRuntimeContext.prototype.getEventManager = function () {
          return this._eventManager;
      };
      AppxRuntimeContext.prototype.getPageManager = function () {
          return this._pageManager;
      };
      AppxRuntimeContext.prototype.getHMRUpdateManager = function () {
          return this._hmrUpdateManager;
      };
      AppxRuntimeContext.prototype.getNav = function () {
          return this._nav;
      };
      AppxRuntimeContext.prototype.setRegistry = function (v) {
          this._registry = v;
      };
      AppxRuntimeContext.prototype.getRegistry = function () {
          return this._registry;
      };
      AppxRuntimeContext.prototype.setStyleRegistry = function (v) {
          this._styleRegistry = v;
      };
      AppxRuntimeContext.prototype.getStyleRegistry = function () {
          return this._styleRegistry;
      };
      AppxRuntimeContext.prototype.dispose = function () {
          if (this._pageManager) {
              // 依赖 eventManager
              this._pageManager.dispose();
              this._pageManager = null;
          }
          if (this._nav) {
              this._nav.dispose();
              this._nav = null;
          }
          if (this._app) {
              this._app.dispose();
              this._app = null;
          }
          if (this._registry) {
              this._registry.dispose();
              this._registry = null;
          }
          if (this._bridge) {
              this._bridge.dispose();
              this._bridge = null;
          }
          if (this._eventManager) {
              this._eventManager.dispose();
              this._eventManager = null;
          }
          if (this._kernel) {
              this._kernel = null;
          }
          if (this._switchManager) {
              this._switchManager = null;
          }
          if (this._subPackageManger) {
              this._subPackageManger.dispose();
              this._subPackageManger = null;
          }
          unregisterRuntime(this.id);
      };
      return AppxRuntimeContext;
  }());
  function unregisterRuntime(appInstanceId) {
      removeRuntimeContext(appInstanceId);
  }
  function registerRuntime(kernel, meta, pageMeta, bizContextAccessor, type) {
      if (type === undefined) {
          type = 0 /* ESharedAppxRuntimeContextType.App */;
      }
      var appInstanceId = kernel.appInstanceId;
      if (getRuntimeById(appInstanceId)) {
          throw getError4RuntimeException(appInstanceId, 'register conflict');
      }
      else {
          var context_1 = new AppxRuntimeContext(type, appInstanceId, kernel, meta, pageMeta, bizContextAccessor);
          setRuntimeContext(appInstanceId, context_1);
          context_1.bootstrap();
          return context_1;
      }
  }

  var kAppxVersion$1 = "2.8.0";
  var kCubeProjectCommitHash = "1aea294cf1";
  var kConsistAppxVersion = "".concat(kAppxVersion$1, "-").concat(kCubeProjectCommitHash);
  /**
   * @example
   *  {
   *    "chInfo": "ch_appid-20000001__chsub_pageid-HPHomeWidgetGroup",
   *    "bundleUrl": "index.bundle.js",
   *    "showOptionMenu": "NO",
   *    "app_startup_type": "inner",
   *    "url": "https://77700080.h5app.alipay.com/index.html#pages/index/index",
   *    "appLaunchMode": 1,
   *    "isInternalApp": "YES",
   *    "enableCube": "YES",
   *    "package_nick": "0.1.36",
   *    "version": "0.1.1809181041.24",
   *    "nboffline": "sync",
   *    "backBehavior": "pop",
   *    "enableTabBar": "YES",
   *    "kAC_OPEN_PLATFORM_HANDLE_APP_FLAG": "1",
   *    "sourceId": "innerUrl",
   *    "enableDSL": "YES",
   *    "launchParamsTag": "pages/index/index",
   *    "appId": "77700080",
   *    "defaultTitle": "组件Demo",
   *    "page": "pages/index/index",
   *    "appCenterSourceId": "innerUrl",
   *    "nebulaStartflag": "77700080_online",
   *    "enableWK": "YES",
   *    "ap_framework_sceneId": "20000001",
   *    "enableJSC": "YES"
   *  }
   */
  function initAppxEnvironment(runtime) {
      // FIXME: 如果拿不到?
      var startupParams = {};
      var kernel = runtime.getKernel();
      try {
          startupParams = kernel.__GET_STARTUP_PARAMS__() || {};
          debug$1$1(function () { return '[APPX][Bootstrap] initAppxEnvironment by __GET_STARTUP_PARAMS__'; });
      }
      catch (ex) {
          startupParams = kernel.__BRIDGE_CALL_SYNC__(undefined, 'getStartupParams', {}) || {};
          debug$1$1(function () { return '[APPX][Bootstrap] initAppxEnvironment by getStartupParamsSync'; });
      }
      var userAgent = kernel.userAgent || '';
      var _a = extractClientInfo(userAgent), alipayVersionSequence = _a.alipayVersionSequence, clientName = _a.clientName, clientVersion = _a.clientVersion, clientVersionSequence = _a.clientVersionSequence, isAndroid = _a.isAndroid, isIDE = _a.isIDE, isIOS = _a.isIOS, isUCWebView = _a.isUCWebView, language = _a.language, originalClientName = _a.originalClientName, originalClientVersion = _a.originalClientVersion, platform = _a.platform, ucMajorVersion = _a.ucMajorVersion, ucMinorVersion = _a.ucMinorVersion, ucVersion = _a.ucVersion, iosMajorVersion = _a.iosMajorVersion, iosMinorVersion = _a.iosMinorVersion, iosPatchVersion = _a.iosPatchVersion;
      var env = {
          alipayVersionSequence: alipayVersionSequence,
          appxVersion: kAppxVersion$1,
          clientName: clientName,
          clientVersion: clientVersion,
          clientVersionSequence: clientVersionSequence,
          isAndroid: isAndroid,
          isIDE: isIDE,
          isIOS: isIOS,
          isPortalWorkerScene: isAppxPortalWorkerEnv(startupParams),
          isUCWebView: isUCWebView,
          language: language,
          originalClientName: originalClientName,
          originalClientVersion: originalClientVersion,
          originalStartupParams: startupParams,
          packageAndRunSceneType: getPackageAndRunSceneType(startupParams, userAgent),
          platform: platform,
          startupParams: normalizeAppxEnvironment(startupParams),
          ucMajorVersion: ucMajorVersion,
          ucMinorVersion: ucMinorVersion,
          ucVersion: ucVersion,
          userAgent: userAgent,
          iosMajorVersion: iosMajorVersion,
          iosMinorVersion: iosMinorVersion,
          iosPatchVersion: iosPatchVersion,
      };
      debug$1$1(function () {
          return "[APPX][Bootstrap] initAppxEnvironment ".concat(JSON.stringify(__assign(__assign({ alipayVersion: originalClientVersion }, env), { alipayVersionSequence: undefined, clientName: undefined, clientVersion: undefined, clientVersionSequence: undefined, isAndroid: undefined, isIDE: undefined, isIOS: undefined, isPortalWorkerScene: undefined, isUCWebView: undefined, language: undefined, originalClientName: undefined, originalClientVersion: undefined, packageAndRunSceneType: undefined, ucMajorVersion: undefined, ucMinorVersion: undefined, ucVersion: undefined, iosMajorVersion: undefined, iosMinorVersion: undefined, iosPatchVersion: undefined })));
      });
      env.isOnlyCube = typeof nativeLog === 'function';
      return env;
  }
  function refreshAppxEnvStartupParams(appInstanceId, newStartupParams) {
      var runtime = getRuntimeById(appInstanceId);
      var refreshKeys = runtime.getSwitchManager().get("resumeStartupParamsUpdateKeys" /* ESharedAppxSwitchManagerName.ResumeStartupParamsUpdateKeys */);
      if (!refreshKeys) {
          refreshKeys = ['appXPromotionModal'];
      }
      if (refreshKeys && Array.isArray(refreshKeys)) {
          var env = runtime.getEnv();
          var updatedOriginalStartupParams = __assign({}, env.originalStartupParams);
          var changed = false;
          for (var _i = 0, refreshKeys_1 = refreshKeys; _i < refreshKeys_1.length; _i++) {
              var key = refreshKeys_1[_i];
              if (newStartupParams[key] !== undefined) {
                  updatedOriginalStartupParams[key] = newStartupParams[key];
                  changed = true;
              }
          }
          if (changed) {
              env.originalStartupParams = updatedOriginalStartupParams;
          }
      }
  }
  function getLaunchOptionFromLatestStartupParams(startupParams, pagePath, decodeQuery) {
      var option = {};
      var query = startupParams.query, referrerInfo = startupParams.referrerInfo, ap_framework_sceneId = startupParams.ap_framework_sceneId;
      if (pagePath) {
          option.path = pagePath.replace(/^\//, '');
      }
      if (query) {
          // my.navigateToMiniProgram({query: {}}) 传入的query为object，需特判处理
          // my.navigateToMiniProgram传入的query在调用 qs.stringify时默认对键值对做了encodeComponent，所以这里必须强制decode
          var forceDecodeQuery = query.indexOf('__queryObjectFromNavigateToMiniProgram__') > -1 ? true : false;
          option.query = parse(query, {
              decode: forceDecodeQuery ? true : decodeQuery,
          });
          // forceDecodeQuery为true 代表额外加了 __queryObjectFromNavigateToMiniProgram__，这里再删除
          if (forceDecodeQuery && option.query) {
              delete option.query.__queryObjectFromNavigateToMiniProgram__;
          }
      }
      if (referrerInfo) {
          option.referrerInfo = JSON.parse(referrerInfo);
      }
      option.scene = ap_framework_sceneId;
      // apiCategory API 类别
      var isHalfScreen = typeof startupParams.halfScreen === 'string'
          ? startupParams.halfScreen.toUpperCase() === 'YES'
          : !!startupParams.halfScreen;
      var isEmbeddedCategory = isHalfScreen && (insideFeatureRuntimeVersion >= /* f_openEmbeddedMiniProgram_2_7_19:10.2.63 */ 10002063);
      option.apiCategory = isEmbeddedCategory ? 'embedded' : 'default';
      return option;
  }
  function normalizeAppxEnvironment(startupParams) {
      return {
          appId: startupParams.appId || '',
          app_startup_type: startupParams.app_startup_type || '',
          chInfo: startupParams.chInfo || '',
          componentContext: startupParams.componentContext ? __spreadArray$1([], startupParams.componentContext, true) : undefined,
          enablePolyfillWorker: normalizeParamsBoolean(startupParams.enablePolyfillWorker),
          enableSnapshot: normalizeSnapshotStartupParams(startupParams),
          // TODO: 钉钉取的是 frameworkSceneId
          framework_sceneId: startupParams.ap_framework_sceneId || '',
          hasNativeCanvas: normalizeParamsBoolean(startupParams.hasNativeCanvas),
          isInternalApp: normalizeParamsBoolean(startupParams.isInternalApp),
          isNotTinyProcess: normalizeParamsBoolean(startupParams.isNotTinyProcess),
          page: startupParams.page,
          parentAppId: startupParams.parentAppId || '',
          query: startupParams.query || '',
          referrerInfo: startupParams.referrerInfo || '',
          titleBarColor: 0,
          url: startupParams.url || '',
          version: getAppVersion(startupParams),
      };
  }
  // WebView 侧由 SDK 改 AlipayJSBridge.startupParams 注入
  // Android Worker 由 appx-portal.worker.min.js 注入
  // iOS Worker 由容器注入
  function isAppxPortalWorkerEnv(startupParams) {
      return startupParams.workerStartupScene === 'portal';
  }
  function normalizeSnapshotStartupParams(startupParams) {
      if (startupParams.__use_snapshot_2_unstable__) {
          return {
              crossVersion: false,
          };
      }
      var enableSnapshot = startupParams.enableSnapshot;
      if (enableSnapshot) {
          if (typeof enableSnapshot === 'string') {
              enableSnapshot = JSON.parse(enableSnapshot);
          }
          return enableSnapshot;
      }
      return false;
  }
  function normalizeParamsBoolean(v) {
      switch (typeof v) {
          case 'string':
              return v === 'YES';
          default:
              return !!v;
      }
  }

  var kAppxErrorPrefix = '[APPX][Error]';
  function getError4UrlEmpty() {
      return new Error("".concat(kAppxErrorPrefix, " input url is empty"));
  }
  function getError4RuntimeException(id, status) {
      return new Error("".concat(kAppxErrorPrefix, " runtime(").concat(id, ") ").concat(status));
  }
  function getError4UnsupportedState(state, event) {
      return new Error("".concat(kAppxErrorPrefix, " unsupported state ").concat(state, " when ").concat(event));
  }
  function getError4ListenerNeedCallback(action) {
      return new Error("".concat(kAppxErrorPrefix, " ").concat(action, " event need callback"));
  }
  function getError4ComponentActionFail(action, componentId) {
      return new Error("".concat(kAppxErrorPrefix, " ").concat(action, " component(").concat(componentId, ") fail"));
  }
  function getError4NavigationException(status) {
      return new Error("".concat(kAppxErrorPrefix, " navigation ").concat(status));
  }
  function getPublicError4AppLaunchOnce() {
      return new Error('App() can only be called once');
  }

  var AppLifecycleManager = /** @class */ /*#__PURE__*/ (function () {
      function AppLifecycleManager(app) {
          this.state = "Inited" /* ESharedAppxLifeCycle.AppState.INITED */;
          this.app = app;
      }
      AppLifecycleManager.prototype.dispose = function () {
          this.app = null;
      };
      AppLifecycleManager.prototype.onAppLaunch = function (payload) {
          switch (this.state) {
              case "Inited" /* ESharedAppxLifeCycle.AppState.INITED */:
                  this.setState("Launched" /* ESharedAppxLifeCycle.AppState.LAUNCHED */, payload);
                  break;
              case "Hidden_NotLaunched" /* ESharedAppxLifeCycle.AppState.HIDDEN_NOTLAUNCHED */:
                  this.setState("Hidden" /* ESharedAppxLifeCycle.AppState.HIDDEN */, payload);
                  break;
              case "Launched" /* ESharedAppxLifeCycle.AppState.LAUNCHED */:
                  break;
              default:
                  throw getError4UnsupportedState(this.state, 'AppLaunch');
          }
      };
      AppLifecycleManager.prototype.onAppResume = function (payload) {
          switch (this.state) {
              case "Hidden" /* ESharedAppxLifeCycle.AppState.HIDDEN */:
              // 对齐 appx 逻辑，已经 launched 的页面，触发 resume 依然会执行 onShow
              case "Launched" /* ESharedAppxLifeCycle.AppState.LAUNCHED */:
                  this.setState("Launched" /* ESharedAppxLifeCycle.AppState.LAUNCHED */, payload);
                  break;
              case "Hidden_NotLaunched" /* ESharedAppxLifeCycle.AppState.HIDDEN_NOTLAUNCHED */:
                  this.setState("Inited" /* ESharedAppxLifeCycle.AppState.INITED */);
                  break;
              case "Inited" /* ESharedAppxLifeCycle.AppState.INITED */:
                  break;
              default:
                  throw getError4UnsupportedState(this.state, 'AppResume');
          }
      };
      AppLifecycleManager.prototype.onAppPause = function () {
          switch (this.state) {
              case "Launched" /* ESharedAppxLifeCycle.AppState.LAUNCHED */:
                  this.setState("Hidden" /* ESharedAppxLifeCycle.AppState.HIDDEN */);
                  break;
              case "Inited" /* ESharedAppxLifeCycle.AppState.INITED */:
                  this.setState("Hidden_NotLaunched" /* ESharedAppxLifeCycle.AppState.HIDDEN_NOTLAUNCHED */);
                  break;
              case "Hidden" /* ESharedAppxLifeCycle.AppState.HIDDEN */:
              case "Hidden_NotLaunched" /* ESharedAppxLifeCycle.AppState.HIDDEN_NOTLAUNCHED */:
                  // 幂等
                  break;
              default:
                  throw getError4UnsupportedState(this.state, 'AppPause');
          }
      };
      AppLifecycleManager.prototype.onAppUnload = function () {
          switch (this.state) {
              case "Hidden" /* ESharedAppxLifeCycle.AppState.HIDDEN */:
              case "Hidden_NotLaunched" /* ESharedAppxLifeCycle.AppState.HIDDEN_NOTLAUNCHED */:
              case "Launched" /* ESharedAppxLifeCycle.AppState.LAUNCHED */:
              case "Inited" /* ESharedAppxLifeCycle.AppState.INITED */:
                  this.setState("Unloaded" /* ESharedAppxLifeCycle.AppState.UNLOADED */);
                  break;
              case "Unloaded" /* ESharedAppxLifeCycle.AppState.UNLOADED */:
                  // 幂等
                  break;
              default:
                  throw getError4UnsupportedState(this.state, 'AppUnload');
          }
      };
      AppLifecycleManager.prototype.setState = function (nextState, payload) {
          this.setStateFromState(nextState, this.state, payload);
      };
      AppLifecycleManager.prototype.performLifeHook = function (method, payload, extraOption) {
          debug$1$1(function () { return "[APPX] AppLifecycleManager:perform ".concat(method); });
          // 然后触发一下生命周期
          this.app.invokeLifeCycle(method, payload);
          switch (method) {
              case 'onLaunch':
                  this.hookOnLaunch();
                  break;
              case 'onHide':
                  this.hookOnHide();
                  break;
              case 'onShow':
                  this.hookOnShow(extraOption);
                  break;
              case 'onUnload':
                  this.hookOnUnload();
                  break;
          }
      };
      AppLifecycleManager.prototype.hookOnLaunch = function () {
          var runtime = getRuntimeById(this.app.appInstanceId);
          if (runtime.getMeta().hasTabBar()) {
              runtime.getBridge().callBridge('setTabBar', {
                  actionType: 'enable',
              }, function () {
                  debug$1$1(function () { return '[APPX] RenderBaseInstance::onActionRenderMount setTabBar:enable:finish'; });
              });
          }
          runtime.getLogger().logAppLaunch();
      };
      AppLifecycleManager.prototype.hookOnHide = function () { };
      AppLifecycleManager.prototype.hookOnShow = function (extraOption) {
          // 如果是非 Launch 场景，需要触发 Foreground
          if (extraOption && !extraOption.fromLaunch) ;
      };
      AppLifecycleManager.prototype.hookOnUnload = function () { };
      AppLifecycleManager.prototype.setStateFromState = function (nextState, previousState, payload) {
          debug$1$1(function () { return "[APPX] AppLifecycleManager:setStateFromState ".concat(previousState, "=>").concat(nextState); });
          var typedEventManager = getRuntimeById(this.app.appInstanceId).getTypedEventManager();
          // 状态变迁
          // 进行各种判断...
          if (nextState === "Unloaded" /* ESharedAppxLifeCycle.AppState.UNLOADED */) ;
          else if (nextState === "Hidden" /* ESharedAppxLifeCycle.AppState.HIDDEN */ ||
              nextState === "Hidden_NotLaunched" /* ESharedAppxLifeCycle.AppState.HIDDEN_NOTLAUNCHED */) {
              if (nextState === "Hidden" /* ESharedAppxLifeCycle.AppState.HIDDEN */ &&
                  previousState === "Hidden_NotLaunched" /* ESharedAppxLifeCycle.AppState.HIDDEN_NOTLAUNCHED */) {
                  // hidden 内迁移 launch
                  // tslint:disable-next-line no-bitwise
                  if (typedEventManager.flag & 1 /* ESharedAppxInternalEventFlag.AppWillLaunch */) {
                      typedEventManager.invokeInternalEvent(0 /* ESharedAppxInternalEvent.AppWillLaunch */, [payload || {}]);
                  }
                  // 同时出发 onLaunch/onShow
                  this.performLifeHook('onLaunch', payload);
              }
              else {
                  // 进入 hidden
                  // tslint:disable-next-line no-bitwise
                  if (typedEventManager.flag & 4 /* ESharedAppxInternalEventFlag.AppWillHide */) {
                      typedEventManager.invokeInternalEvent(2 /* ESharedAppxInternalEvent.AppWillHide */, []);
                  }
                  this.performLifeHook('onHide');
              }
          }
          else if (nextState === "Launched" /* ESharedAppxLifeCycle.AppState.LAUNCHED */) {
              if (previousState === "Inited" /* ESharedAppxLifeCycle.AppState.INITED */) {
                  // tslint:disable-next-line no-bitwise
                  if (typedEventManager.flag & 1 /* ESharedAppxInternalEventFlag.AppWillLaunch */) {
                      typedEventManager.invokeInternalEvent(0 /* ESharedAppxInternalEvent.AppWillLaunch */, [payload || {}]);
                  }
                  // 同时出发 onLaunch/onShow
                  this.performLifeHook('onLaunch', payload);
                  // tslint:disable-next-line no-bitwise
                  if (typedEventManager.flag & 2 /* ESharedAppxInternalEventFlag.AppWillShow */) {
                      typedEventManager.invokeInternalEvent(1 /* ESharedAppxInternalEvent.AppWillShow */, [payload || {}]);
                  }
                  this.performLifeHook('onShow', payload, {
                      fromLaunch: true,
                  });
              }
              else {
                  // tslint:disable-next-line no-bitwise
                  if (typedEventManager.flag & 2 /* ESharedAppxInternalEventFlag.AppWillShow */) {
                      typedEventManager.invokeInternalEvent(1 /* ESharedAppxInternalEvent.AppWillShow */, [payload || {}]);
                  }
                  // 触发 onShow
                  this.performLifeHook('onShow', payload, {
                      fromLaunch: false,
                  });
              }
          }
          else if (nextState === "Inited" /* ESharedAppxLifeCycle.AppState.INITED */) {
              // tslint:disable-next-line no-bitwise
              if (typedEventManager.flag & 2 /* ESharedAppxInternalEventFlag.AppWillShow */) {
                  typedEventManager.invokeInternalEvent(1 /* ESharedAppxInternalEvent.AppWillShow */, [payload || {}]);
              }
              this.performLifeHook('onShow', {
                  fromLaunch: false,
              });
          }
          this.state = nextState;
      };
      return AppLifecycleManager;
  }());
  function getAppLifecycleManagerInterceptor() {
      var klass = AppLifecycleManager;
      var methodInterceptor = /* PURE */ createClassMethodInteceptor(klass);
      return methodInterceptor;
  }

  var AppBaseInstance = /** @class */ /*#__PURE__*/ (function () {
      function AppBaseInstance(appInstanceId, options) {
          this.appInstanceId = appInstanceId;
          this.publicInstance = options;
          this.initTime = Date.now();
          // 开始执行声明周期
          // onLaunch 由 SharedNavigationController 当第一个PageCreate的时候发起
          this.lifecycle = new AppLifecycleManager(this);
      }
      AppBaseInstance.prototype.bootstrap = function () { };
      AppBaseInstance.prototype.dispose = function () {
          this.lifecycle.dispose();
          this.lifecycle = null;
      };
      AppBaseInstance.prototype.onResume = function (payload) {
          this.resumeOptions = payload;
          if (payload && payload.referrerInfo && !payload.referrerInfo._back) {
              this.launchOptionReferrerInfoLastAppId = payload.referrerInfo.appId;
          }
          this.lifecycle.onAppResume(payload);
      };
      AppBaseInstance.prototype.onPause = function () {
          this.lifecycle.onAppPause();
      };
      AppBaseInstance.prototype.onLaunch = function (payload) {
          this.launchOptions = payload;
          if (payload && payload.referrerInfo && !payload.referrerInfo._back) {
              this.launchOptionReferrerInfoLastAppId = payload.referrerInfo.appId;
          }
          this.launchTime = Date.now();
          this.lifecycle.onAppLaunch(payload);
          this.launchedTime = Date.now();
      };
      AppBaseInstance.prototype.getResumeOptions = function () {
          return this.resumeOptions;
      };
      AppBaseInstance.prototype.getLaunchOptions = function () {
          return this.launchOptions;
      };
      AppBaseInstance.prototype.getLaunchOptionReferrerInfoLastAppId = function (clearAppId) {
          if (clearAppId === void 0) { clearAppId = false; }
          var launchOptionReferrerInfoLastAppId = this.launchOptionReferrerInfoLastAppId;
          if (clearAppId) {
              this.launchOptionReferrerInfoLastAppId = undefined;
          }
          return launchOptionReferrerInfoLastAppId;
      };
      AppBaseInstance.prototype.onUnload = function () {
          this.lifecycle.onAppUnload();
      };
      AppBaseInstance.prototype.reportUnhandledRejection = function (error) {
          if (!this.inErrorReporting) {
              this.inErrorReporting = true;
              this.invokePublicMethod('onUnhandledRejection', error);
              this.inErrorReporting = false;
          }
      };
      AppBaseInstance.prototype.reportError = function (message, code, formattedError) {
          if (!this.inErrorReporting) {
              this.inErrorReporting = true;
              this.invokeMethod('onError', [message, formattedError.stack]);
              this.inErrorReporting = false;
          }
      };
      AppBaseInstance.prototype.invokeLifeCycle = function (method, arg) {
          this.invokePublicMethod(method, arg);
      };
      AppBaseInstance.prototype.invokeMethod = function (name, args) {
          var method = this.publicInstance[name];
          debug$1$1(function () { return "[APPX] AppBaseInstance::invokeMethod ".concat(name, ":").concat(typeof method === 'function'); });
          if (typeof method === 'function') {
              try {
                  return method.apply(this.publicInstance, args);
              }
              catch (ex) {
                  reportHostError(this.appInstanceId, 13 /* ESharedAppxSpecificErrorCode.HostUserError */, ex, "[APPX][App] ".concat(this.appInstanceId, " CallMethod error"));
              }
          }
      };
      AppBaseInstance.prototype.invokePublicMethod = function (name, payload) {
          var method = this.publicInstance[name];
          debug$1$1(function () { return "[APPX] AppBaseInstance::invokePublicMethod ".concat(name, ":").concat(typeof method === 'function'); });
          if (typeof method === 'function') {
              try {
                  return method.call(this.publicInstance, payload);
              }
              catch (ex) {
                  reportHostError(this.appInstanceId, 13 /* ESharedAppxSpecificErrorCode.HostUserError */, ex, "[APPX][App] ".concat(this.appInstanceId, " CallMethod error"));
              }
          }
      };
      return AppBaseInstance;
  }());
  var appLogicImpl;
  function setAppImpl(v) {
      appLogicImpl = v;
  }
  function createAppInstance(appInstanceId, options) {
      var instance = new appLogicImpl(appInstanceId, options);
      instance.bootstrap();
      return instance;
  }
  var AppBaseInstanceInterceptor;
  function getAppBaseInstanceInterceptor() {
      if (!AppBaseInstanceInterceptor) {
          AppBaseInstanceInterceptor = createClassMethodInteceptor(AppBaseInstance);
      }
      return AppBaseInstanceInterceptor;
  }

  var assign = Object['ass' + 'ign'] ||
      (function (target) {
          var arguments$1 = arguments;

          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments$1[_i];
          }
          for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
              var source = args_1[_a];
              for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                  }
              }
          }
          return target;
      });

  function _c($vm, a, b, c, d) {
      return $vm._c(a, b, c, d);
  }
  function _e($vm) {
      return $vm._e();
  }
  function _l($vm, a, b) {
      return $vm._l(a, b);
  }
  function _s($vm, a) {
      return $vm._s(a);
  }
  function _v($vm, a) {
      return $vm._v(a);
  }
  function _t($vm, a, b, c) {
      return $vm._t(a, b, c);
  }
  function _u($vm, a) {
      return $vm._u(a);
  }
  function _ut($vm, templateObj, data) {
      return templateObj.render.call(null, $vm, data || {});
  }

  /**
   * 合并style样式用
   * @param args
   */
  function stylemerge() {
      var args = arguments;
      if (args.length === 0) {
          return null;
      }
      if (args.length === 1) {
          return args[0];
      }
      var target = args[args.length - 1] || {}; // this is page-style.
      for (var i = args.length - 2; i >= 0; i--) {
          if (args[i]) {
              target = styleMergeLevelOne(target, args[i]);
          }
      }
      return target;
  }
  /**
   * 顶层合并
   * 在两端都存在的以page的为准进行覆盖
   * 只在import中存在的，采用assign的方式复制
   * @param pageLevel
   * @param importStyle
   */
  function styleMergeLevelOne(pageLevel, importStyle) {
      var pageItems = Object.keys(pageLevel);
      var importItems = Object.keys(importStyle);
      for (var _i = 0, pageItems_1 = pageItems; _i < pageItems_1.length; _i++) {
          var i = pageItems_1[_i];
          if (importStyle[i] && pageLevel[i]) {
              pageLevel[i] = styleMergeLevelTwo(pageLevel[i], importStyle[i]);
          }
      }
      for (var _a = 0, importItems_1 = importItems; _a < importItems_1.length; _a++) {
          var i = importItems_1[_a];
          if (!pageLevel[i]) {
              pageLevel[i] = assign({}, importStyle[i]);
          }
      }
      return pageLevel;
  }
  /**
   * 在某一条规则内，当且仅但这条规则在pagelevel中不存在，在会加入当前的`pagelevelitem`
   * @param pageLevelItem
   * @param importStyleItem
   */
  function styleMergeLevelTwo(pageLevelItem, importStyleItem) {
      var importStyleItemKeys = Object.keys(importStyleItem);
      for (var _i = 0, importStyleItemKeys_1 = importStyleItemKeys; _i < importStyleItemKeys_1.length; _i++) {
          var i = importStyleItemKeys_1[_i];
          if (!pageLevelItem[i]) {
              pageLevelItem[i] = importStyleItem[i];
          }
      }
      return pageLevelItem;
  }

  function getStyleFragmentKlass() {
      var entryContextIds = [];
      return /** @class */ (function () {
          function StyleSheetFragment(path, text, deps) {
              this.path = path;
              this.text = text;
              this.deps = deps;
              this.entryState = [];
              this.value = null;
          }
          StyleSheetFragment.prototype.toString = function (entryId) {
              if (this.value === null) {
                  var allText = [];
                  var entryIdIndex = entryContextIds.indexOf(entryId);
                  if (entryIdIndex < 0) {
                      entryIdIndex = entryContextIds.length;
                      entryContextIds.push(entryId);
                  }
                  if (this.deps) {
                      this.entryState[entryIdIndex] = true;
                      traverse(allText, this.deps, entryIdIndex);
                  }
                  allText.push(this.text);
                  this.value = allText.join('\n');
              }
              return this.value;
          };
          return StyleSheetFragment;
      }());
  }
  function traverse(allText, deps, entryIdIndex) {
      var entryState;
      var childDeps;
      for (var _i = 0, deps_1 = deps; _i < deps_1.length; _i++) {
          var childDep = deps_1[_i];
          if (childDep) {
              entryState = childDep.entryState;
              if (entryIdIndex < entryState.length ? !entryState[entryIdIndex] : true) {
                  entryState[entryIdIndex] = true;
                  childDeps = childDep.deps;
                  if (childDeps) {
                      traverse(allText, childDeps, entryIdIndex);
                  }
                  allText.push(childDep.text);
              }
          }
      }
  }



  var helper = {
      __proto__: null,
      assign: assign,
      _c: _c,
      _e: _e,
      _l: _l,
      _s: _s,
      _v: _v,
      _t: _t,
      _u: _u,
      _ut: _ut,
      stylemerge: stylemerge,
      getStyleFragmentKlass: getStyleFragmentKlass
  };

  /**
   * @namespace @alipay/appx
   * @copyright @chengyu
   */
  function shallowEqual(objA, objB) {
      if (objA === objB) {
          return true;
      }
      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
          return false;
      }
      var keysA = objectKeys(objA);
      var keysB = objectKeys(objB);
      var len = keysA.length;
      if (len !== keysB.length) {
          return false;
      }
      for (var i = 0; i < len; i++) {
          var key = keysA[i];
          if (!objB.hasOwnProperty(key)) {
              return false;
          }
          var valueA = objA[key];
          var valueB = objB[key];
          if (valueA !== valueB) {
              return false;
          }
      }
      return true;
  }

  /**
   * @namespace @alipay/appx
   * @copyright @chengyu
   */
  /**
   * 1: ".","[","]" 不是这三个字符直接全匹配
   * 2: 必须是 [正负整数] 数组
   * 3: 必须是 ["a\""] 字符串Member，支持 \ 转译
   * 4: 必须是 ".","[]" 开头
   *
   * 识别 a..b 意味着 ['a','','b'] 合理
   * 识别 a[][]b 意味着 ['a','','b'] 似乎有问题
   */
  // a..b
  // a[][]b
  var rePropName = /[^.[\]]+|\[(?:(-?\d+)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;
  var reLeadingDot = /^\./;
  function stringToPath(path) {
      var result = [];
      if (reLeadingDot.test(path)) {
          result.push('');
      }
      path.replace(rePropName, function (match, num, quote, str) {
          var part = match;
          if (quote) {
              part = str.replace(reEscapeChar, '$1');
          }
          else if (num) {
              part = parseInt(num, 10);
          }
          result.push(part);
          return match;
      });
      return result;
  }

  /**
   * @namespace @alipay/appx
   * @copyright @chengyu
   */
  function isNumber(value) {
      return typeof value === 'number';
  }
  function isArray(obj) {
      return Array.isArray(obj);
  }
  function clone(obj, assumeArray) {
      if (!obj) {
          return assumeArray ? [] : {};
      }
      else if (isArray(obj)) {
          return obj.slice();
      }
      return assign({}, obj);
  }
  function set(dest, src, path, changeCallback, deepLevel) {
      if (deepLevel === void 0) { deepLevel = false; }
      var currentPath = path[0];
      if ((deepLevel && dest === src) || !dest) {
          dest = clone(src, isNumber(currentPath));
      }
      if (path.length === 1) {
          return changeCallback(dest, currentPath);
      }
      if (src) {
          src = src[currentPath];
      }
      dest[currentPath] = set(dest[currentPath], src, path.slice(1), changeCallback, true);
      return dest;
  }
  function setDataByType(type, data, changedData) {
      switch (type) {
          case 1 /* EAppxCoreHelperSetDataType.SetData */:
              return setData(data, changedData);
          case 2 /* EAppxCoreHelperSetDataType.SpliceData */:
              return spliceData(data, changedData);
      }
  }
  function setDataByTypeForZephyr(type, data, changedData, diffObj, dataKeys) {
      switch (type) {
          case 1 /* EAppxCoreHelperSetDataType.SetData */:
              setDataForZephyr(data, changedData, diffObj, dataKeys);
              return 1;
          case 2 /* EAppxCoreHelperSetDataType.SpliceData */:
              spliceDataForZephyr(data, changedData, diffObj, dataKeys);
              return 1;
          default:
              return 0;
      }
  }
  function setData(data, changedData) {
      var ret = assign({}, data);
      objectKeys(changedData).forEach(function (pathString) {
          var path = stringToPath(pathString);
          set(ret, ret, path, function (clonedObj, finalPath) {
              clonedObj[finalPath] = changedData[pathString];
              return clonedObj;
          });
      });
      if (shallowEqual(ret, data)) {
          return data;
      }
      return ret;
  }
  function setDataForZephyr(data, changedData, diffObj, dataKeys) {
      var ret = data;
      objectKeys(changedData).forEach(function (pathString) {
          var path = stringToPath(pathString);
          var rootPath = path[0] + '';
          if (diffObj) {
              diffObj[rootPath] = true;
          }
          if (dataKeys && !dataKeys.has(rootPath)) {
              dataKeys.add(rootPath);
          }
          set(ret, ret, path, function (clonedObj, finalPath) {
              clonedObj[finalPath] = changedData[pathString];
              return clonedObj;
          });
      });
  }
  function spliceData(data, changedData) {
      var ret = assign({}, data);
      objectKeys(changedData).forEach(function (pathString) {
          var path = stringToPath(pathString);
          set(ret, ret, path, function (clonedObj, finalPath) {
              var arr = clonedObj[finalPath];
              if (Array.isArray(arr)) {
                  arr = arr.concat();
                  arr.splice.apply(arr, changedData[pathString]);
                  clonedObj[finalPath] = arr;
              }
              return clonedObj;
          });
      });
      if (shallowEqual(ret, data)) {
          return data;
      }
      return ret;
  }
  function spliceDataForZephyr(data, changedData, diffObj, dataKeys) {
      var ret = data;
      objectKeys(changedData).forEach(function (pathString) {
          var path = stringToPath(pathString);
          var rootPath = path[0] + '';
          if (diffObj) {
              diffObj[rootPath] = true;
          }
          if (dataKeys && !dataKeys.has(rootPath)) {
              dataKeys.add(rootPath);
          }
          // TODO: 后面在 for 循环层进行 === 浅比较
          set(ret, ret, path, function (clonedObj, finalPath) {
              var arr = clonedObj[finalPath];
              if (Array.isArray(arr)) {
                  arr = arr.concat();
                  arr.splice.apply(arr, changedData[pathString]);
                  clonedObj[finalPath] = arr;
              }
              return clonedObj;
          });
      });
  }

  var pagePathMatchReg = /^([^?]+)(\?.+)?/;
  function getPageUrlPrefix(url) {
      var index = url.indexOf('#');
      if (index !== -1) {
          url = url.slice(0, index);
      }
      index = url.indexOf('?');
      if (index !== -1) {
          url = url.slice(0, index);
      }
      return url;
  }
  function getPageInfoFromHash(hash) {
      var pageMatch = hash.match(pagePathMatchReg);
      if (pageMatch) {
          var pagePath = pageMatch[1];
          if (pagePath.charAt(0) === '/') {
              pagePath = pagePath.slice(1);
          }
          var queryString = pageMatch[2] ? pageMatch[2].replace(/^\?/, '') : '';
          return {
              pagePath: pagePath,
              queryString: queryString,
          };
      }
      else {
          return null;
      }
  }
  function getPageInfoWithNavActionIdFromUrl(url) {
      var hashIndex = url && url.indexOf('#');
      if (hashIndex > -1) {
          var pageInfo = getPageInfoFromHash(url.substring(hashIndex + 1));
          if (pageInfo) {
              var navInfo = extractPageInstanceNavActionIdFromQueryString(pageInfo.queryString);
              if (navInfo) {
                  pageInfo.queryString = navInfo[0];
                  pageInfo.navActionId = navInfo[1];
              }
              return pageInfo;
          }
      }
  }
  var kAppxPageInstanceNavActionIdQueryParam = '__appxPageId';
  function addPageNavActionIdParamToNavigateUrl(url, appxPageId) {
      var navigateUrlWithQuestion;
      var queryString;
      var index = url.indexOf('?');
      if (index > -1) {
          navigateUrlWithQuestion = url.substring(0, index + 1);
          queryString = url.substring(index + 1);
      }
      else {
          navigateUrlWithQuestion = url + '?';
      }
      return (navigateUrlWithQuestion +
          kAppxPageInstanceNavActionIdQueryParam +
          '=' +
          appxPageId +
          (queryString ? '&' + queryString : ''));
  }
  function extractPageInstanceNavActionIdFromQueryString(queryString) {
      var _a = parse(queryString), __appxPageId = _a.__appxPageId, userQuery = __rest(_a, ["__appxPageId"]);
      var appxPageId = Number(__appxPageId);
      if (appxPageId > 0) {
          return [stringify(userQuery), appxPageId];
      }
  }

  /**
   * 只计算相对路径
   * @param path
   * @param currentPath
   */
  function resolveRelative(path, currentPath) {
      if (startsWith(path, '/')) {
          return path;
      }
      if (!startsWith(path, './') && !startsWith(path, '../')) {
          path = './' + path;
      }
      return resolveDot(path, currentPath);
  }
  function resolveDot(path, currentPath) {
      var currentPaths = currentPath.split('/');
      if (currentPaths[currentPaths.length - 1]) {
          currentPaths.length -= 1;
      }
      var fullPath = currentPaths.join('/') + '/' + path;
      var segments = fullPath.split('/').reverse();
      var finalPaths = [];
      var skipCount = 0;
      for (var _i = 0, segments_1 = segments; _i < segments_1.length; _i++) {
          var seg = segments_1[_i];
          if (!seg || seg === '.') {
              continue;
          }
          else if (seg === '..') {
              skipCount++;
          }
          else {
              if (skipCount > 0) {
                  skipCount--;
              }
              else {
                  finalPaths.unshift(seg);
              }
          }
      }
      while (skipCount--) {
          finalPaths.unshift('..');
      }
      return finalPaths.join('/');
  }
  function startsWith(str, prefix) {
      return str.slice(0, prefix.length) === prefix;
  }

  var sharedContextPath;
  function getContextPath() {
      if (sharedContextPath === undefined) {
          if (typeof appXRuntimeConfig !== 'undefined' && appXRuntimeConfig) {
              sharedContextPath = appXRuntimeConfig.contextPath || '';
          }
          else {
              sharedContextPath = '';
          }
      }
      return sharedContextPath;
  }
  var kNormalizeSrcProtocolRegExp = /^((https?|file|myfile|local|temp):\/\/|\/\/|data:image)/;
  var kMiniExtensionRoutePrefix = '/__plugins__/';
  function startWithMiniExtensionRoutePrefix(s) {
      return s.substr(0, kMiniExtensionRoutePrefix.length) === kMiniExtensionRoutePrefix;
  }
  function getNormalizedSrc(source, pagePath, providerInfo) {
      var normalizedSrc;
      if (typeof source === 'string' && source.trim()) {
          normalizedSrc = source;
          if (!kNormalizeSrcProtocolRegExp.test(source)) {
              var refer = void 0;
              var miniExtensionId = void 0;
              if (isProviderInfo4MiniExtension(providerInfo)) {
                  // 对齐 1.0 当且仅当插件的组件需要转换到插件组件的地址进行相对路径
                  refer = providerInfo.resolvedPath;
                  miniExtensionId = providerInfo.miniExtensionId;
              }
              if (!refer) {
                  // 如果上述插件组件path不存在，或者不是插件组件，都按照 Page 处理
                  refer = pagePath;
              }
              normalizedSrc = resolveResourceUrl(normalizedSrc, refer);
              // 主体写的 plugin-private://${id}/a.png ==> /__plugins__/${id}/a.png
              if (miniExtensionId && isPluginPrivateProtocolPath(normalizedSrc)) {
                  normalizedSrc = normalizedSrc.replace(kPrivateMiniExtensionProtocol, kMiniExtensionRoutePrefix);
              }
              if (normalizedSrc[0] !== '/') {
                  normalizedSrc = '/' + normalizedSrc;
              }
              // 插件自己写的 /a.png ==> /__plugins__/${id}/a.png
              if (miniExtensionId && !startWithMiniExtensionRoutePrefix(normalizedSrc)) {
                  normalizedSrc = "".concat(kMiniExtensionRoutePrefix).concat(miniExtensionId) + normalizedSrc;
              }
              normalizedSrc = getContextPath() + normalizedSrc;
          }
      }
      return normalizedSrc;
  }
  function resolveResourceUrl(sourceUrl, refer) {
      var url = sourceUrl;
      var queryString = '';
      var queryIndex = url.indexOf('?');
      if (queryIndex !== -1) {
          queryString = url.slice(queryIndex + 1);
          url = url.slice(0, queryIndex);
      }
      if (url.charAt(0) === '/') {
          url = url.slice(1);
      }
      else if (refer) {
          url = resolveRelative(url, refer);
      }
      queryString = queryString ? "?".concat(queryString) : queryString;
      return "".concat(url).concat(queryString);
  }

  function compareByDecimal(a, b) {
      return a - b;
  }

  function getEntryPagePath(meta) {
      /**
       * - 产物侧 meta里 entryPagePath为可选
       * - 旧产物 一定没有 entryPagePath
       */
      return meta.entryPagePath || meta.pages[0];
  }

  function getProtectedProperty(fnOrObject, needClone, appInstanceId, componentPath) {
      if (fnOrObject) {
          var typeOfData = typeof fnOrObject;
          if (typeOfData === 'function') {
              try {
                  return fnOrObject();
              }
              catch (ex) {
                  reportHostError(appInstanceId, 13 /* ESharedAppxSpecificErrorCode.HostUserError */, ex, "[APPX][Component] ".concat(componentPath, " data call error"));
                  return {};
              }
          }
          else {
              if (needClone) {
                  return __assign({}, fnOrObject);
              }
              else {
                  return fnOrObject;
              }
          }
      }
      else {
          return {};
      }
  }
  function createComponentLogicPublicInstance(componentInstance, propsNotClone, component2, providerInfo) {
      var options = componentInstance.publicOptions;
      var mixedMethods = options.methods || {}; // mergeMixins(options, 'methods', propsNotClone);
      var publicInstance = Object.create(mixedMethods, {
          $spliceData: {
              configurable: component2,
              enumerable: component2,
              value: function (data, callback) {
                  return componentInstance.setData(2 /* EAppxCoreHelperSetDataType.SpliceData */, data, callback);
              },
              writable: component2,
          },
          setData: {
              configurable: component2,
              enumerable: component2,
              value: function (data, callback) {
                  return componentInstance.setData(1 /* EAppxCoreHelperSetDataType.SetData */, data, callback);
              },
              writable: component2,
          },
      });
      publicInstance.$page = componentInstance.pagePublicInstance;
      publicInstance.$id = componentInstance.id;
      publicInstance.is = componentInstance.componentPath;
      // 对 生命周期 didMount, didUpdate, didUnmount 进行数组合并
      // clone 一下
      var appInstanceId = componentInstance.page.appInstanceId;
      var componentPath = componentInstance.componentPath;
      publicInstance.props = getProtectedProperty(options.props, !propsNotClone, appInstanceId, componentPath);
      publicInstance.data = getProtectedProperty(options.data, true, appInstanceId, componentPath);
      return publicInstance;
  }
  function performComponentOptionMixin(publicOptionWithMixin, usageInfo) {
      var mixins = publicOptionWithMixin.mixins;
      // 都有 mixin 了，当然要浅拷贝？
      // 先获取一下，然后再进行 mixin 级别合并
      // props, data 直接合并
      // methods 直接合并
      //  走数组合并策略，保证一定是数组 | void
      var finalProps = {};
      var finalMethods = {};
      var dataList = [];
      var mergeContext = {
          dataHasFunction: false,
          pageEventsMap: null,
      };
      var onInitList = [];
      var deriveDataFromPropsList = [];
      var didMountList = [];
      var didUpdateList = [];
      var didUnmountList = [];
      var onErrorList = [];
      var mergedOptions = {
          data: null,
          methods: finalMethods,
          pageEvents: null,
          props: finalProps,
      };
      for (var _i = 0, mixins_1 = mixins; _i < mixins_1.length; _i++) {
          var toBeMixinConfig = mixins_1[_i];
          if (usageInfo) {
              if (usageInfo.reportObservers && toBeMixinConfig.observers) {
                  // tslint:disable no-bitwise
                  if (!(usageInfo.flag & 2 /* EComponentNewFeatureUsage.MixinObservers */)) {
                      usageInfo.flag = usageInfo.flag | 2 /* EComponentNewFeatureUsage.MixinObservers */;
                      // tslint:enable no-bitwise
                  }
                  if (!usageInfo.observers && isObject(toBeMixinConfig.observers)) {
                      usageInfo.observers = true;
                  }
              }
              if (usageInfo.reportLifetimes && toBeMixinConfig.lifetimes) {
                  // tslint:disable no-bitwise
                  if (!(usageInfo.flag & 16 /* EComponentNewFeatureUsage.MixinLifetimes */)) {
                      usageInfo.flag = usageInfo.flag | 16 /* EComponentNewFeatureUsage.MixinLifetimes */;
                      // tslint:enable no-bitwise
                  }
                  if (!usageInfo.lifetimes && isObject(toBeMixinConfig.lifetimes)) {
                      usageInfo.lifetimes = true;
                  }
              }
          }
          mergeObject(toBeMixinConfig, mergedOptions, mergeContext, onInitList, deriveDataFromPropsList, didMountList, didUpdateList, didUnmountList, onErrorList, dataList);
      }
      // 最后合并主 option
      mergeObject(publicOptionWithMixin, mergedOptions, mergeContext, onInitList, deriveDataFromPropsList, didMountList, didUpdateList, didUnmountList, onErrorList, dataList);
      mergedOptions.data = mergeObjectOrFunction(dataList, mergeContext.dataHasFunction);
      mergeLifecycle(mergedOptions, 'onInit', onInitList);
      mergeLifecycle(mergedOptions, 'deriveDataFromProps', deriveDataFromPropsList);
      mergeLifecycle(mergedOptions, 'didMount', didMountList);
      mergeLifecycle(mergedOptions, 'didUpdate', didUpdateList);
      mergeLifecycle(mergedOptions, 'didUnmount', didUnmountList);
      mergeLifecycle(mergedOptions, 'onError', onErrorList);
      if (mergeContext.pageEventsMap) {
          var assignPageEvents_1 = (mergedOptions.pageEvents = {});
          mergeContext.pageEventsMap.forEach(function (pageEventList, pageEventKey) {
              mergeLifecycle(assignPageEvents_1, pageEventKey, pageEventList);
          });
      }
      return mergedOptions;
  }
  function getDataFunctionList(fnOrObjectList) {
      var finalData = {};
      for (var _i = 0, fnOrObjectList_1 = fnOrObjectList; _i < fnOrObjectList_1.length; _i++) {
          var item = fnOrObjectList_1[_i];
          if (typeof item === 'function') {
              item = item();
          }
          for (var _a = 0, _b = objectKeys(item); _a < _b.length; _a++) {
              var key = _b[_a];
              finalData[key] = item[key];
          }
      }
      return finalData;
  }
  function mergeObjectOrFunction(fnOrObjectList, hasFunction) {
      var retData;
      if (fnOrObjectList.length) {
          if (fnOrObjectList.length === 1) {
              retData = fnOrObjectList[0] || {};
          }
          else {
              if (hasFunction) {
                  retData = getDataFunctionList.bind(null, fnOrObjectList);
              }
              else {
                  retData = {};
                  for (var _i = 0, fnOrObjectList_2 = fnOrObjectList; _i < fnOrObjectList_2.length; _i++) {
                      var item = fnOrObjectList_2[_i];
                      for (var _a = 0, _b = objectKeys(item); _a < _b.length; _a++) {
                          var key = _b[_a];
                          retData[key] = item[key];
                      }
                  }
              }
          }
      }
      else {
          retData = {};
      }
      return retData;
  }
  function mergeLifecycle(finalOption, lifeName, fnList) {
      if (fnList.length) {
          finalOption[lifeName] = function () {
              var arguments$1 = arguments;
              var this$1 = this;

              var argcount = arguments.length;
              for (var _i = 0, fnList_1 = fnList; _i < fnList_1.length; _i++) {
                  var fn = fnList_1[_i];
                  switch (argcount) {
                      case 0:
                          fn.call(this$1);
                          break;
                      case 1:
                          fn.call(this$1, arguments$1[0]);
                          break;
                      case 2:
                          fn.call(this$1, arguments$1[0], arguments$1[1]);
                          break;
                      default:
                          fn.apply(this$1, arguments$1);
                          break;
                  }
              }
          };
      }
  }
  function mergeObject(toBeMixinConfig, finalOption, mergeContext, onInit, deriveDataFromProps, didMount, didUpdate, didUnmount, onError, dataList) {
      // 分别进行 data, props, method 合并,
      // 再进行 didMount, didUpdate, didUnmount, deriveDataFromProps, onInit 合并
      // 再进行 pageEvents 合并
      mergeProperty(toBeMixinConfig.props, finalOption.props);
      if (toBeMixinConfig.data) {
          dataList.push(toBeMixinConfig.data);
          if (!mergeContext.dataHasFunction && typeof toBeMixinConfig.data === 'function') {
              mergeContext.dataHasFunction = true;
          }
      }
      mergeProperty(toBeMixinConfig.methods, finalOption.methods);
      if (typeof toBeMixinConfig.onInit === 'function') {
          onInit.push(toBeMixinConfig.onInit);
      }
      if (typeof toBeMixinConfig.deriveDataFromProps === 'function') {
          deriveDataFromProps.push(toBeMixinConfig.deriveDataFromProps);
      }
      if (typeof toBeMixinConfig.didMount === 'function') {
          didMount.push(toBeMixinConfig.didMount);
      }
      if (typeof toBeMixinConfig.didUpdate === 'function') {
          didUpdate.push(toBeMixinConfig.didUpdate);
      }
      if (typeof toBeMixinConfig.didUnmount === 'function') {
          didUnmount.push(toBeMixinConfig.didUnmount);
      }
      if (typeof toBeMixinConfig.onError === 'function') {
          onError.push(toBeMixinConfig.onError);
      }
      var pageEvents = toBeMixinConfig.pageEvents;
      if (pageEvents && typeof pageEvents === 'object') {
          var pageEventsMap_1 = mergeContext.pageEventsMap;
          if (!pageEventsMap_1) {
              pageEventsMap_1 = mergeContext.pageEventsMap = createMap();
          }
          Object.keys(pageEvents).forEach(function (fnKey) {
              var fn = pageEvents[fnKey];
              if (typeof fn === 'function') {
                  var fnList = pageEventsMap_1.get(fnKey);
                  if (!fnList) {
                      pageEventsMap_1.set(fnKey, [fn]);
                  }
                  else {
                      fnList.push(fn);
                  }
              }
          });
      }
  }
  function mergeProperty(toBeMixinObject, toOption) {
      if (toBeMixinObject && typeof toBeMixinObject === 'function') {
          toBeMixinObject = toBeMixinObject();
      }
      if (toBeMixinObject) {
          for (var _i = 0, _a = Object.keys(toBeMixinObject); _i < _a.length; _i++) {
              var key = _a[_i];
              toOption[key] = toBeMixinObject[key];
          }
      }
  }
  // function mergeMixins(
  //   publicOptions: ISharedAppxComponentLogicOptions,
  //   propName: 'props' | 'data' | 'methods',
  //   notClone?: boolean
  // ): Record<string, any> {
  //   const mixins = publicOptions.mixins;
  //   if (notClone && !mixins) {
  //     const propOption = publicOptions[propName];
  //     const ret = typeof propOption === 'function' ? propOption() : propOption;
  //     debug(() => `[APPX] ComponentLogicBaseInstance::mergeMixins ${propName}:${objectKeys(ret)}`);
  //     return ret || {};
  //   } else {
  //     let mergedRecords: Record<string, any> = {};
  //     if (Array.isArray(mixins)) {
  //       mergedRecords = mergedRecords || {};
  //       mixins.forEach(toBeMixinConfig => {
  //         const toBeMixinObject = toBeMixinConfig[propName];
  //         if (typeof toBeMixinObject === 'function') {
  //           assignWithException(mergedRecords, toBeMixinObject(), propName);
  //         } else {
  //           assignWithException(mergedRecords, toBeMixinObject, propName);
  //         }
  //       });
  //     }
  //     // 根据 appx 先合并 mixin 再合并 instance
  //     const propOption = publicOptions[propName];
  //     if (typeof propOption === 'function') {
  //       assignWithException(mergedRecords, propOption(), propName);
  //     } else {
  //       assignWithException(mergedRecords, propOption, propName);
  //     }
  //     debug(() => `[APPX] ComponentLogicBaseInstance::mergeMixins ${propName}:${Object.keys(mergedRecords)}`);
  //     return mergedRecords;
  //   }
  // }
  // function assignWithException(target: Record<string, any>, added: Record<string, any>, propName: string) {
  //   if (added) {
  //     Object.keys(added).forEach(key => {
  //       if (key in target) {
  //         throw getPublicError4PropsMergeConflict(key, propName);
  //       }
  //       target[key] = added[key];
  //     });
  //   }
  // }

  function createTargetInstanceMethodDescriptor(instanceGetter, runtimeGetter, method, isComponent) {
      return {
          configurable: true,
          get: function () {
              var context = this;
              // 返回一个闭包函数持有上下文，如
              // const { createSelectorQuery } = this
              // createSelectorQuery().select('.foo')
              return function (payload) {
                  var componentInstance = instanceGetter(runtimeGetter, context);
                  if (componentInstance) {
                      return componentInstance[method](payload, isComponent ? context.$id : undefined);
                  }
              };
          },
          set: function (value) {
              // 如果主动设置，从不可枚举改为可枚举
              Object.defineProperty(this, method, {
                  configurable: true,
                  enumerable: true,
                  value: value,
                  writable: true,
              });
          },
      };
  }
  function createTargetInstanceMethodDescriptorWithSwitchGetter(instanceGetter, runtimeGetter, method, switchGetter, isComponent) {
      return {
          configurable: true,
          get: function () {
              var context = this;
              var enable = switchGetter();
              if (enable) {
                  return function (payload) {
                      var componentInstance = instanceGetter(runtimeGetter, context);
                      if (componentInstance) {
                          return componentInstance[method](payload, isComponent ? context.$id : undefined);
                      }
                  };
              }
              return undefined;
          },
          set: function (value) {
              // 如果主动设置，从不可枚举改为可枚举
              Object.defineProperty(this, method, {
                  configurable: true,
                  enumerable: true,
                  value: value,
                  writable: true,
              });
          },
      };
  }
  function createTargetInstancePropertyDescriptor(instanceGetter, runtimeGetter, property, isComponent) {
      return {
          configurable: true,
          get: function () {
              var context = this;
              var pageOrComponentInstance = instanceGetter(runtimeGetter, context);
              if (pageOrComponentInstance) {
                  if (isComponent) {
                      var componentLogicInstance = pageOrComponentInstance;
                      return componentLogicInstance[property]();
                  }
                  else {
                      var pageLogicInstance = pageOrComponentInstance.getPageLogicInstance();
                      return pageLogicInstance[property]();
                  }
              }
          },
          set: function (value) {
              // 如果主动设置，从不可枚举改为可枚举
              Object.defineProperty(this, property, {
                  configurable: true,
                  enumerable: true,
                  value: value,
                  writable: true,
              });
          },
      };
  }

  var KlassRegistryImpl;
  function setOptionRegistryImpl(impl) {
      KlassRegistryImpl = impl;
  }
  function createOptionRegistryImpl(runtimeGetter) {
      return new KlassRegistryImpl(runtimeGetter);
  }

  var OptionRegistry = /** @class */ /*#__PURE__*/ (function () {
      function OptionRegistry(runtimeGetter) {
          var _this = this;
          this.lazyCodeLoading = 0 /* ESharedAppxPerformanceFeatureValue.No */;
          this.lastComponentConfigRegistered = null;
          this.pageLogicFlexibleMap = Object.create(null);
          this.pageLogicOptionMap = Object.create(null);
          this.pageRenderConfigMap = Object.create(null);
          this.pageHostRenderConfigMap = Object.create(null);
          this.componentLogicOptionMap = Object.create(null);
          this.componentRenderConfigMap = Object.create(null);
          this.componentHostRenderConfigMap = Object.create(null);
          this.componentLogicMixedOptionMap = Object.create(null);
          // 这层做插件安全
          // { 'private-plugin://123/public-component': 'private-plugin://123/components/list/list',
          //   'dynamic-plugin://123/public-component': 'private-plugin://123/components/list/list' }
          // 防止用户调用到插件非公开接口
          this.extensionPublicComponentMap = Object.create(null);
          this.extensionPublicPageMap = Object.create(null);
          this.miniExtensionConfigMap = createMap();
          this.miniExtensionIdList = []; // 加速后续遍历
          this.pageCallbacks = null;
          this.runtimeGetter = runtimeGetter;
          this.registerMiniExtensionConfig = function (arg) { return _this.registerMiniExtensionConfigImpl(arg); };
          this.registerPageLogicOption = function (arg) { return _this.registerPageLogicOptionImpl(arg); };
          this.registerComponentLogicOption = function (arg) { return _this.registerComponentLogicOptionImpl(arg); };
          this.registerAppLogicOption = function (arg) { return _this.registerAppLogicOptionImpl(arg); };
          var enableSelectGetter = function () {
              return runtimeGetter().getSwitchManager().get("enableSelectComponent" /* ESharedAppxSwitchManagerName.EnableSelectComponent */) !== false;
          };
          this.pageDescriptorMap = {
              createIntersectionObserver: createTargetInstanceMethodDescriptor(getFlexiblePageInstanceByPagePublicInstance, runtimeGetter, 'createIntersectionObserver'),
              createSelectorQuery: createTargetInstanceMethodDescriptor(getFlexiblePageInstanceByPagePublicInstance, runtimeGetter, 'createSelectorQuery'),
              getOpenerEventChannel: createTargetInstanceMethodDescriptor(getFlexiblePageInstanceByPagePublicInstance, runtimeGetter, 'getOpenerEventChannel'),
              getTabBar: createTargetInstanceMethodDescriptor(getFlexiblePageInstanceByPagePublicInstance, runtimeGetter, 'getTabBar'),
              $selectComponent: createTargetInstanceMethodDescriptorWithSwitchGetter(getFlexiblePageInstanceByPagePublicInstance, runtimeGetter, 'selectComponent', enableSelectGetter),
              $selectAllComponents: createTargetInstanceMethodDescriptorWithSwitchGetter(getFlexiblePageInstanceByPagePublicInstance, runtimeGetter, 'selectAllComponents', enableSelectGetter),
              pageRouter: createTargetInstancePropertyDescriptor(getFlexiblePageInstanceByPagePublicInstance, runtimeGetter, 'pageRouter'),
              router: createTargetInstancePropertyDescriptor(getFlexiblePageInstanceByPagePublicInstance, runtimeGetter, 'router'),
          };
      }
      OptionRegistry.prototype.setLazyCodeLoading = function (value) {
          this.lazyCodeLoading = value;
      };
      OptionRegistry.prototype.appendPageCallbacks = function (pages) {
          if (!this.pageCallbacks) {
              this.pageCallbacks = pages;
          }
          else {
              this.pageCallbacks = __assign(__assign({}, this.pageCallbacks), pages);
          }
      };
      OptionRegistry.prototype.hasPageCallbacks = function () {
          return !!this.pageCallbacks;
      };
      OptionRegistry.prototype.dispose = function () {
          this.registerPageLogicOption = null;
          this.registerComponentLogicOption = null;
          this.registerAppLogicOption = null;
      };
      OptionRegistry.prototype.getAppInstanceId = function () {
          return this.runtimeGetter().id;
      };
      /* 注册用户 Page */
      OptionRegistry.prototype.registerPageLogicOptionImpl = function (options) {
          if (options === void 0) { options = {}; }
          var pageCurrentConfig = this.pageCurrentConfig;
          if (pageCurrentConfig) {
              var pagePath = this.pageCurrentConfig.pagePath;
              var allComponents = this.pageCurrentConfig.allComponents;
              var renderType = this.pageCurrentConfig.renderType;
              this.pageLogicOptionMap[pagePath] = __assign(Object.create(Object.create(Object.prototype, this.pageDescriptorMap)), __assign(__assign({}, options), { route: pagePath }));
              var flexibleInfo = (this.pageLogicFlexibleMap[pagePath] = {
                  componentDeps: null,
                  renderType: renderType || 0,
              });
              if (allComponents) {
                  flexibleInfo.componentDeps = allComponents;
              }
              this.pageCurrentConfig = null;
          }
      };
      OptionRegistry.prototype.getPageLogicOption = function (pagePath) {
          this.ensurePageCallback(pagePath);
          return this.pageLogicOptionMap[pagePath];
      };
      OptionRegistry.prototype.getPageLogicComponentDep = function (pagePath) {
          this.ensurePageCallback(pagePath);
          return this.pageLogicFlexibleMap[pagePath].componentDeps;
      };
      OptionRegistry.prototype.getPageLogicRenderType = function (pagePath) {
          this.ensurePageCallback(pagePath);
          return this.pageLogicFlexibleMap[pagePath].renderType;
      };
      OptionRegistry.prototype.hasAnyPageLogicRenderTypeMatch = function (matchType) {
          var this$1 = this;

          if (this.pageLogicFlexibleMap) {
              var pages = Object.keys(this.pageLogicFlexibleMap);
              if (pages.length) {
                  for (var _i = 0, pages_1 = pages; _i < pages_1.length; _i++) {
                      var pagePath = pages_1[_i];
                      var option = this$1.pageLogicFlexibleMap[pagePath];
                      if (option && option.renderType) {
                          var pageRenderType = option.renderType;
                          // tslint:disable no-bitwise
                          if (pageRenderType & matchType) {
                              // tslint:enable no-bitwise
                              // 至少一个 Page 匹配上了
                              return true;
                          }
                      }
                  }
                  // 全都不匹配
                  return false;
              }
          }
          // 当前返回结果无效
          return undefined;
      };
      /* Page逻辑层内置逻辑 */
      OptionRegistry.prototype.registerPageLogicConfig = function (config) {
          this.pageCurrentConfig = config;
      };
      /* Page渲染层内置逻辑 */
      OptionRegistry.prototype.registerPageRenderConfig = function (config) {
          this.pageRenderConfigMap[config.pagePath] = config;
      };
      OptionRegistry.prototype.getPageRenderConfig = function (pagePath) {
          this.ensurePageCallback(pagePath);
          return this.pageRenderConfigMap[pagePath].options();
      };
      /* Page渲染层内置逻辑 */
      OptionRegistry.prototype.registerPageHostRenderConfig = function (config) {
          this.pageHostRenderConfigMap[config.pagePath] = config;
      };
      OptionRegistry.prototype.getPageHostRenderConfig = function (pagePath) {
          this.ensurePageCallback(pagePath);
          return this.pageHostRenderConfigMap[pagePath].options();
      };
      /* Component渲染层内置逻辑 */
      OptionRegistry.prototype.registerComponentHostRenderConfig = function (config) {
          this.componentHostRenderConfigMap[config.componentPath] = config;
      };
      OptionRegistry.prototype.getComponentHostRenderConfig = function (componentPath) {
          return this.componentHostRenderConfigMap[componentPath].options();
      };
      /* 注册用户 App */
      OptionRegistry.prototype.registerAppLogicOptionImpl = function (option) {
          if (option === void 0) { option = {}; }
          var runtime = this.runtimeGetter();
          var compileInfo = runtime.getMeta().getCompileInfo();
          var enableHotModuleReplace = compileInfo && compileInfo.enableHotModuleReplace;
          var runningInstance = runtime.getApp();
          if (runningInstance) {
              if (enableHotModuleReplace) {
                  this.appLogicOption = option;
                  return runningInstance;
              }
              var level = runtime.getSwitchManager().get("appRegisterDuplicateReportLevel" /* ESharedAppxSwitchManagerName.AppRegisterDuplicateReportLevel */);
              var error = getPublicError4AppLaunchOnce();
              if (level) {
                  switch (level) {
                      case 2 /* ESharedAppxSwitchManagerValue4AppRegisterDuplicateReportLevel.ConsoleError */:
                          try {
                              // tslint:disable-next-line
                              console.error(error);
                          }
                          catch (_) { }
                          break;
                      case 3 /* ESharedAppxSwitchManagerValue4AppRegisterDuplicateReportLevel.ThrowError */:
                          throw error;
                  }
              }
              else {
                  try {
                      // tslint:disable-next-line
                      console.warn(error);
                  }
                  catch (_) { }
              }
              return;
          }
          var appInstanceId = runtime.id;
          this.appLogicOption = option;
          var instance = createAppInstance(appInstanceId, enableHotModuleReplace ? this.getAppLogicOption() : option);
          runtime.setApp(instance);
          return instance.publicInstance;
      };
      OptionRegistry.prototype.getAppLogicOption = function () {
          return this.appLogicOption;
      };
      /* 注册用户 Component */
      OptionRegistry.prototype.registerComponentLogicOptionImpl = function (options) {
          if (options === void 0) { options = {}; }
          // 还需要记录 lastComponentPath
          var componentCurrentConfig = this.componentCurrentConfig;
          if (componentCurrentConfig) {
              var componentPath = componentCurrentConfig.componentPath;
              this.componentLogicOptionMap[componentPath] = options;
              this.lastComponentConfigRegistered = this.componentCurrentConfig;
              this.componentCurrentConfig = null;
          }
          else {
              var lastComponentConfigRegistered = this.lastComponentConfigRegistered;
              // warn developer
              var runtime = this.runtimeGetter();
              if (lastComponentConfigRegistered &&
                  runtime &&
                  isConsoleAvaliableToDeveloper(runtime.getEnv().packageAndRunSceneType)) {
                  // tslint:disable-next-line
                  console.error("\u5728".concat(lastComponentConfigRegistered.miniExtensionId
                      ? "\u63D2\u4EF6 ".concat(lastComponentConfigRegistered.miniExtensionId, " \u7684")
                      : '', " ").concat(lastComponentConfigRegistered.componentPath, " \u4E2D Component() \u6784\u9020\u5668\u88AB\u8C03\u7528\u591A\u6B21"));
              }
          }
      };
      OptionRegistry.prototype.getComponentLogicOption = function (componentPath) {
          return this.componentLogicOptionMap[componentPath];
      };
      OptionRegistry.prototype.getComponentLogicOptionMergedMixin = function (componentPath) {
          var map = this.componentLogicMixedOptionMap;
          var mixedOption = map[componentPath];
          if (!mixedOption) {
              mixedOption = map[componentPath] = this.getComponentLogicOptionMergedMixinInternal(componentPath);
          }
          return mixedOption;
      };
      /* Component逻辑层内置逻辑 */
      OptionRegistry.prototype.registerComponentLogicConfig = function (config) {
          this.componentCurrentConfig = config;
      };
      /* Component渲染层内置逻辑 */
      OptionRegistry.prototype.registerComponentRenderConfig = function (config) {
          this.componentRenderConfigMap[config.componentPath] = config;
      };
      OptionRegistry.prototype.getComponentRenderConfig = function (componentPath) {
          return this.componentRenderConfigMap[componentPath].options();
      };
      OptionRegistry.prototype.getCompileInfoZephyrFlagWithMiniExtension = function () {
          var this$1 = this;

          var runtime = this.runtimeGetter();
          var mainCompileInfo = runtime.getMeta().getCompileInfo();
          var zFlag = mainCompileInfo ? mainCompileInfo.zephyrFlag || 0 : 0;
          for (var _i = 0, _a = this.miniExtensionIdList; _i < _a.length; _i++) {
              var id = _a[_i];
              var config = this$1.miniExtensionConfigMap.get(id);
              var extCompileInfo = config.config.__compile_info__;
              if (extCompileInfo) {
                  // tslint:disable-next-line
                  zFlag = zFlag & (extCompileInfo.zephyrFlag || 0);
              }
              else {
                  zFlag = 0;
              }
          }
          return zFlag;
      };
      OptionRegistry.prototype.getMiniExtensionConfigs = function () {
          var this$1 = this;

          var list = [];
          for (var _i = 0, _a = this.miniExtensionIdList; _i < _a.length; _i++) {
              var id = _a[_i];
              var config = this$1.miniExtensionConfigMap.get(id);
              list.push(config);
          }
          return list;
      };
      OptionRegistry.prototype.setImmediateInitMiniExtension = function () {
          // 之前已经存下来的组件，全量 flush 一把
          var runtime = this.runtimeGetter();
          var manager = runtime.getMiniExtensionManager();
          // init pluginVersion
          var originalStartupParams = runtime.getEnv().originalStartupParams;
          var appxPluginsExtra = originalStartupParams.__appxPluginsExtra;
          if (appxPluginsExtra) {
              for (var _i = 0, _a = Object.keys(appxPluginsExtra); _i < _a.length; _i++) {
                  var pluginId = _a[_i];
                  var pluginExtra = appxPluginsExtra[pluginId];
                  if (pluginExtra) {
                      var version = pluginExtra.version, developerVersion = pluginExtra.developerVersion, componentContext = pluginExtra.componentContext;
                      if (version) {
                          var extensionExtraInfo = { version: version };
                          if (developerVersion) {
                              extensionExtraInfo.package_nick = developerVersion;
                          }
                          if (componentContext) {
                              extensionExtraInfo.componentContext = __spreadArray$1([], componentContext, true);
                          }
                          manager.setExtraInfoByExtensionId(pluginId, extensionExtraInfo);
                      }
                  }
              }
          }
          var _loop_1 = function (id) {
              var config = this_1.miniExtensionConfigMap.get(id);
              var extension = {
                  type: 4 /* EMiniExtensionStringType._$_extension_id_$_ */,
                  value: id,
              };
              // 如果当前插件是开发中的插件，并且不是显式声明的静态插件，先不执行业务逻辑
              if (manager.isExtensionDevelopmentRunScene(extension) && !manager.isStaticMiniExtension(extension)) {
                  debug$1$1(function () { return "\n          registerMiniExtensionConfig fits development scene. Extension: [".concat(id, "]\n        "); });
                  return "continue";
              }
              manager.initMiniExtensionById(id, config, true);
          };
          var this_1 = this;
          // 这里主要针对插件开发的场景，插件信息下发在包信息的 plugins 中
          // 容器会提前加载并且启动插件 worker
          for (var _b = 0, _c = this.miniExtensionIdList; _b < _c.length; _b++) {
              var id = _c[_b];
              _loop_1(id);
          }
          // 应用启动前，静态组件一起注册，等到应用启动后，也就是动态插件注册的模式就可以立即执行了
          // 为什么要「等」呢？
          // 因为应用启动之前没有 runtime，也就没有 $AppRegistry 和 manager 等
          // appx 是注册后立马执行 init 的，出问题的话就改成全量立即 init
          this.immediateInitMiniExtension = true;
      };
      OptionRegistry.prototype.registerMiniExtensionConfigImpl = function (config) {
          var this$1 = this;

          debug$1$1(function () { return "registerMiniExtensionConfig ".concat(JSON.stringify(config)); });
          if (!config.publicConfig) {
              // 说明加载到了 1.0 的插件
              var runtime = this.runtimeGetter();
              // 静态插件过程，拿不到 runtime
              if (runtime) {
                  var packageAndRunSceneType = runtime.getEnv().packageAndRunSceneType;
                  if (isConsoleAvaliableToDeveloper(packageAndRunSceneType)) {
                      console.error('当前加载的插件未升级到基础库 2.0，请升级后使用'); // tslint:disable-line
                  }
              }
          }
          var pluginId = config.publicConfig.pluginId;
          if (this.miniExtensionConfigMap.has(pluginId)) {
              // 防止重入
              debug$1$1(function () { return "registerMiniExtensionConfig ".concat(JSON.stringify(config), " already loaded, skip"); });
              return;
          }
          this.miniExtensionIdList.push(pluginId);
          this.miniExtensionConfigMap.set(pluginId, config);
          var typedString4ExtensionId = {
              type: 4 /* EMiniExtensionStringType._$_extension_id_$_ */,
              value: pluginId,
          };
          var _a = config.publicConfig.publicName2Config, componentNames = _a.componentNames, components = _a.components;
          for (var _i = 0, componentNames_1 = componentNames; _i < componentNames_1.length; _i++) {
              var componentName = componentNames_1[_i];
              var publicComponentConfig = components[componentName];
              if (!publicComponentConfig) {
                  continue;
              }
              this$1.registerMiniExtensionPublicComponent(typedString4ExtensionId, {
                  type: 6 /* EMiniExtensionStringType._$_public_name_$_ */,
                  value: componentName,
              }, {
                  type: 7 /* EMiniExtensionStringType._$_resolved_path_$_ */,
                  value: publicComponentConfig.resolvedPath,
              });
          }
          var _b = config.publicConfig.publicName2Config, pageNames = _b.pageNames, pages = _b.pages;
          for (var _c = 0, pageNames_1 = pageNames; _c < pageNames_1.length; _c++) {
              var pageName = pageNames_1[_c];
              var publicPageConfig = pages[pageName];
              if (!publicPageConfig) {
                  continue;
              }
              this$1.registerMiniExtensionPublicPage(typedString4ExtensionId, {
                  type: 6 /* EMiniExtensionStringType._$_public_name_$_ */,
                  value: pageName,
              }, {
                  type: 7 /* EMiniExtensionStringType._$_resolved_path_$_ */,
                  value: publicPageConfig.resolvedPath,
              });
          }
          if (this.immediateInitMiniExtension) {
              // 动态插件是在启动后注册的
              // 当时立即启动即可
              this.runtimeGetter().getMiniExtensionManager().initMiniExtensionById(pluginId, config, false);
          }
      };
      OptionRegistry.prototype.getConfig4MiniExtensionById = function (id) {
          return this.miniExtensionConfigMap.get(id);
      };
      OptionRegistry.prototype.ensurePageCallback = function (pagePath) {
          var pageCallbacks = this.pageCallbacks;
          if (pageCallbacks) {
              var callback = pageCallbacks[pagePath];
              if (typeof callback === 'function') {
                  callback();
              }
          }
      };
      OptionRegistry.prototype.ensureComponentDescriptorMap = function () {
          var componentDescriptorMap = this.componentDescriptorMap;
          if (!componentDescriptorMap) {
              var runtimeGetter_1 = this.runtimeGetter;
              var disableSelectMethods = runtimeGetter_1().getSwitchManager().get("disableSelectComponentMethods" /* ESharedAppxSwitchManagerName.DisableSelectComponentMethods */) || 0;
              var enableSelectGetter = function () {
                  return runtimeGetter_1().getSwitchManager().get("enableSelectComponent" /* ESharedAppxSwitchManagerName.EnableSelectComponent */) !== false;
              };
              componentDescriptorMap = {
                  createIntersectionObserver: createTargetInstanceMethodDescriptor(getFlexiblePageInstanceByComponentPublicInstance, runtimeGetter_1, 'createIntersectionObserver', true),
                  createSelectorQuery: createTargetInstanceMethodDescriptor(
                  //
                  getFlexiblePageInstanceByComponentPublicInstance, runtimeGetter_1, 'createSelectorQuery', true),
                  getTabBar: createTargetInstanceMethodDescriptor(getFlexiblePageInstanceByComponentPublicInstance, runtimeGetter_1, 'getTabBar', true),
                  $selectComponent: createTargetInstanceMethodDescriptorWithSwitchGetter(getFlexiblePageInstanceByComponentPublicInstance, runtimeGetter_1, 'selectComponent', enableSelectGetter, true),
                  $selectAllComponents: createTargetInstanceMethodDescriptorWithSwitchGetter(getFlexiblePageInstanceByComponentPublicInstance, runtimeGetter_1, 'selectAllComponents', enableSelectGetter, true),
                  pageRouter: createTargetInstancePropertyDescriptor(getFlexibleComponentInstanceByComponentPublicInstance, runtimeGetter_1, 'pageRouter', true),
                  router: createTargetInstancePropertyDescriptor(getFlexibleComponentInstanceByComponentPublicInstance, runtimeGetter_1, 'router', true),
              };
              if (
              // tslint:disable-next-line no-bitwise
              !(disableSelectMethods & 1 /* ESharedAppxSwitchManagerValue4DisableSelectComponentMethods.ComposedParentComponent */)) {
                  componentDescriptorMap.selectComposedParentComponent = createTargetInstanceMethodDescriptor(getFlexiblePageInstanceByComponentPublicInstance, runtimeGetter_1, 'selectComposedParentComponent', true);
              }
              // tslint:disable-next-line no-bitwise
              if (!(disableSelectMethods & 2 /* ESharedAppxSwitchManagerValue4DisableSelectComponentMethods.OwnerComponent */)) {
                  componentDescriptorMap.selectOwnerComponent = createTargetInstanceMethodDescriptor(getFlexiblePageInstanceByComponentPublicInstance, runtimeGetter_1, 'selectOwnerComponent', true);
              }
              this.componentDescriptorMap = componentDescriptorMap;
          }
          return componentDescriptorMap;
      };
      OptionRegistry.prototype.registerMiniExtensionPublicComponent = function (id, publicName, resolvedPath) {
          debug$1$1(function () { return "registerMiniExtensionPublicComponent ".concat(id.value, " ").concat(publicName.value, " ").concat(resolvedPath.value); });
          var pluginPrivateWithResolvedPath = get_privatePath_by_id_resolvedPath(id, resolvedPath);
          var pluginPrivateWithPublicName = get_privatePath_by_id_publicName(id, publicName);
          var dynamicPrivateWithPublicName = get_dynamicPath_by_id_publicName(id, publicName);
          this.extensionPublicComponentMap[dynamicPrivateWithPublicName.value] = pluginPrivateWithResolvedPath.value;
          this.extensionPublicComponentMap[pluginPrivateWithPublicName.value] = pluginPrivateWithResolvedPath.value;
      };
      OptionRegistry.prototype.registerMiniExtensionPublicPage = function (id, publicName, resolvedPath) {
          debug$1$1(function () { return "registerMiniExtensionPublicPage ".concat(id.value, " ").concat(publicName.value, " ").concat(resolvedPath.value); });
          var pluginPrivateWithResolvedPath = get_privatePath_by_id_resolvedPath(id, resolvedPath);
          var pluginPrivateWithPublicName = get_privatePath_by_id_publicName(id, publicName);
          var dynamicPrivateWithPublicName = get_dynamicPath_by_id_publicName(id, publicName);
          this.extensionPublicPageMap[dynamicPrivateWithPublicName.value] = pluginPrivateWithResolvedPath.value;
          this.extensionPublicPageMap[pluginPrivateWithPublicName.value] = pluginPrivateWithResolvedPath.value;
      };
      OptionRegistry.prototype.getComponentLogicOptionMergedMixinInternal = function (componentPath) {
          var behaviorManager = this.runtimeGetter().getBehaviorManager();
          var behavior4Observers = behaviorManager.get("enableComponentFeature" /* ESharedAppxSwitchManagerName.EnableComponentFeature */, 0 /* ESharedAppxSwitchManagerValue4EnableComponentFeatureIndex.Observers */);
          var behavior4Lifetimes = behaviorManager.get("enableComponentFeature" /* ESharedAppxSwitchManagerName.EnableComponentFeature */, 1 /* ESharedAppxSwitchManagerValue4EnableComponentFeatureIndex.Lifetimes */);
          var behavior4Relations = behaviorManager.get("enableComponentFeature" /* ESharedAppxSwitchManagerName.EnableComponentFeature */, 2 /* ESharedAppxSwitchManagerValue4EnableComponentFeatureIndex.Relations */);
          var usageInfo;
          if (behavior4Observers.report || behavior4Lifetimes.report || behavior4Relations.report) {
              usageInfo = {
                  flag: 0 /* EComponentNewFeatureUsage.None */,
                  observers: false,
                  lifetimes: false,
                  relations: false,
                  reportObservers: !!behavior4Observers.report,
                  reportLifetimes: !!behavior4Lifetimes.report,
                  reportRelations: !!behavior4Relations.report,
              };
          }
          var rawOption = this.componentLogicOptionMap[componentPath];
          var mixingOption;
          if (!rawOption) {
              mixingOption = {};
          }
          else {
              if (Array.isArray(rawOption.mixins) && rawOption.mixins.length) {
                  mixingOption = performComponentOptionMixin(rawOption, usageInfo);
              }
              else {
                  var methods = rawOption.methods;
                  if (methods) {
                      mixingOption = __assign(__assign({}, rawOption), { methods: __assign({}, (typeof methods === 'function' ? methods() : methods)) });
                  }
                  else {
                      mixingOption = rawOption;
                  }
              }
              if (usageInfo) {
                  if (usageInfo.reportObservers && rawOption.observers) {
                      // 探测线上小程序是否使用observers
                      // tslint:disable no-bitwise
                      usageInfo.flag = usageInfo.flag | 1 /* EComponentNewFeatureUsage.SelfObservers */;
                      // tslint:enable no-bitwise
                      if (!usageInfo.observers && isObject(rawOption.observers)) {
                          usageInfo.observers = true;
                      }
                  }
                  if (usageInfo.reportLifetimes && rawOption.lifetimes) {
                      // 探测线上小程序是否使用lifetime
                      // tslint:disable no-bitwise
                      usageInfo.flag = usageInfo.flag | 8 /* EComponentNewFeatureUsage.SelfLifetimes */;
                      // tslint:enable no-bitwise
                      if (!usageInfo.lifetimes && isObject(rawOption.lifetimes)) {
                          usageInfo.lifetimes = true;
                      }
                  }
                  if (usageInfo.reportRelations && rawOption.relations) {
                      // 探测线上小程序是否使用realtions
                      // tslint:disable no-bitwise
                      usageInfo.flag = usageInfo.flag | 64 /* EComponentNewFeatureUsage.SelfRelations */;
                      // tslint:enable no-bitwise
                      if (!usageInfo.relations && isObject(rawOption.relations)) {
                          usageInfo.relations = true;
                      }
                  }
                  // tslint:disable no-bitwise
                  if (usageInfo.flag & 1 /* EComponentNewFeatureUsage.SelfObservers */ || usageInfo.flag & 2 /* EComponentNewFeatureUsage.MixinObservers */) {
                      // tslint:enable no-bitwise
                      debug$1$1(function () { return "[APPX] Component:".concat(componentPath, " Observer Usage: ").concat(JSON.stringify({
                          flag: usageInfo.flag,
                          observers: usageInfo.observers,
                      })); });
                      if (behavior4Observers.report) {
                          // 采集线上自定义组件构造器以及mixin 内是否已定义observers配置
                          behavior4Observers.report("Component observers usage: ".concat(usageInfo.flag), {
                              flag: usageInfo.flag,
                              path: componentPath,
                              observers: usageInfo.observers,
                          });
                      }
                  }
                  // tslint:disable no-bitwise
                  if (usageInfo.flag & 8 /* EComponentNewFeatureUsage.SelfLifetimes */ || usageInfo.flag & 16 /* EComponentNewFeatureUsage.MixinLifetimes */) {
                      // tslint:enable no-bitwise
                      debug$1$1(function () { return "[APPX] Component:".concat(componentPath, " Lifetime Usage: ").concat(JSON.stringify({
                          flag: usageInfo.flag,
                          lifetimes: usageInfo.lifetimes,
                      })); });
                      if (behavior4Lifetimes.report) {
                          // 采集线上自定义组件构造器以及mixin 内是否已定义lifetime配置
                          behavior4Lifetimes.report("Component lifetimes usage: ".concat(usageInfo.flag), {
                              flag: usageInfo.flag,
                              path: componentPath,
                              lifetimes: usageInfo.lifetimes,
                          });
                      }
                  }
                  // tslint:disable no-bitwise
                  if (usageInfo.flag & 64 /* EComponentNewFeatureUsage.SelfRelations */) {
                      // tslint:enable no-bitwise
                      debug$1$1(function () { return "[APPX] Component:".concat(componentPath, " Lifetime Usage: ").concat(JSON.stringify({
                          flag: usageInfo.flag,
                          relations: usageInfo.relations,
                      })); });
                      if (behavior4Lifetimes.report) {
                          // 采集线上自定义组件构造器以及mixin 内是否已定义lifetime配置
                          behavior4Lifetimes.report("Component relations usage: ".concat(usageInfo.flag), {
                              flag: usageInfo.flag,
                              path: componentPath,
                              relations: usageInfo.relations,
                          });
                      }
                  }
              }
          }
          // 为此自定义组件提供内部方法
          var innerMethods = Object.create(Object.prototype, this.ensureComponentDescriptorMap());
          // 后续被作为自定义组件实例原型使用
          mixingOption.methods = mixingOption.methods
              ? // 如果用户有自定义方法，则允许其覆盖内部方法
                  __assign(Object.create(innerMethods), mixingOption.methods)
              : innerMethods;
          return mixingOption;
      };
      return OptionRegistry;
  }());
  // 暂时没的实现
  setOptionRegistryImpl(OptionRegistry);
  function getRegistryByRuntimeId(appInstanceId) {
      return getRuntimeById(appInstanceId).getRegistry();
  }

  function createPageLogicPublicInstance(pageInstace) {
      var options = getRegistryByRuntimeId(pageInstace.page.appInstanceId).getPageLogicOption(pageInstace.pagePath);
      var publicInstance = Object.create(options);
      publicInstance.setData = function (data, callback) {
          return pageInstace.setData(1 /* EAppxCoreHelperSetDataType.SetData */, data, callback);
      };
      publicInstance.$spliceData = function (data, callback) {
          return pageInstace.setData(2 /* EAppxCoreHelperSetDataType.SpliceData */, data, callback);
      };
      publicInstance.$batchedUpdates = function (callback) {
          return pageInstace.batchedUpdates(callback);
      };
      if (typeof publicInstance.data === 'function') {
          publicInstance.data = publicInstance.data() || {};
      }
      else {
          publicInstance.data = publicInstance.data || {};
      }
      publicInstance.$viewId = pageInstace.pageId;
      publicInstance.$id = getRuntimeById(pageInstace.page.appInstanceId).getPageManager().getNextPageId() + 1;
      return publicInstance;
  }

  var kAppxLoggerSharedParam4SDKVersion = "SDKVersion=".concat(kAppxVersion$1);
  function getAutoTrackerConfig(appId, pagePath) {
      return {
          bizType: "TinyAppBiz-".concat(appId),
          spmId: "MiniApp_".concat(appId, ".").concat(pagePath.replace(/\./g, '_DOT_')),
      };
  }
  var SharedAppxLogger = /** @class */ /*#__PURE__*/ (function () {
      function SharedAppxLogger(appInstanceId) {
          this.callLogLevel = 'digest';
          this.exceptionLogLevel = 'all';
          this.apiPendData = {};
          this.titleClickCount = 0;
          this.titleClickLastTime = 0;
          this.appResumeCount = 0;
          this.appResumeStartTime = 0;
          this.isHideDebugVersion = false;
          this.versionMessageCount = 0;
          this.appInstanceId = appInstanceId;
          this.onAppResume = this.onAppResume.bind(this);
          this.onTitleClick = this.onTitleClick.bind(this);
          this.onBridgeInvoke = this.onBridgeInvoke.bind(this);
      }
      SharedAppxLogger.prototype.bootstrap = function () {
          var runtime = getRuntimeById(this.appInstanceId);
          var eventManager = runtime.getEventManager();
          eventManager.addEventListener("appResume" /* ESharedAppxEvent.Native.AppResume */, this.onAppResume);
          eventManager.addEventListener("titleClick" /* ESharedAppxEvent.Native.TitleClick */, this.onTitleClick);
          var typedEventManager = runtime.getTypedEventManager();
          typedEventManager.addEventListener(8 /* ESharedAppxInternalEvent.BridgeInvoke */, this.onBridgeInvoke, false);
      };
      SharedAppxLogger.prototype.inited = function () { };
      SharedAppxLogger.prototype.dispose = function () {
          var runtime = getRuntimeById(this.appInstanceId);
          var eventManager = runtime.getEventManager();
          eventManager.removeEventListener("titleClick" /* ESharedAppxEvent.Native.TitleClick */, this.onTitleClick);
          var typedEventManager = runtime.getTypedEventManager();
          typedEventManager.addEventListener(8 /* ESharedAppxInternalEvent.BridgeInvoke */, this.onBridgeInvoke, false);
      };
      SharedAppxLogger.prototype.remoteLog = function (params) {
          // 打点专用
          var bridge = getRuntimeById(this.appInstanceId).getBridge();
          bridge.callBridge('remoteLog', params);
      };
      SharedAppxLogger.prototype.updatePerformance = function (page, payload) {
          // not implement
      };
      SharedAppxLogger.prototype.reportPerformance = function (page, payload) {
          // not implement
      };
      SharedAppxLogger.prototype.reportPrefetch = function () {
          // not implement
      };
      SharedAppxLogger.prototype.reportPV = function (page) {
          // not implement
      };
      SharedAppxLogger.prototype.reportExtensionUsageInComponent = function (page, miniExtensionId) {
          // not implement
      };
      SharedAppxLogger.prototype.logAppLaunch = function () {
          var _this = this;
          var runtime = getRuntimeById(this.appInstanceId);
          var bridge = runtime.getBridge();
          bridge.callInternalAPI('setAppxVersion', {
              appxVersion: runtime.getEnv().appxVersion,
          });
          bridge.callInternalAPI('getConfig4Appx', {
              key: 'tinyApLogLevel',
          }, function (res) {
              if (res && res.configKey) {
                  var config = void 0;
                  try {
                      config = JSON.parse(res.configKey);
                  }
                  catch (e) { }
                  if (config) {
                      _this.callLogLevel = config.apicall || _this.callLogLevel;
                      _this.exceptionLogLevel = config.exception || _this.exceptionLogLevel;
                  }
              }
          });
          var _a = runtime.getEnv().originalStartupParams, _b = _a.chInfo, chInfo = _b === void 0 ? '' : _b, _c = _a.cdpchinfo, cdpchinfo = _c === void 0 ? '' : _c;
          this.remoteLog({
              actionId: 'event',
              bizType: 'TAC',
              param4: escapeLogParams({
                  SDKVersion: kAppxVersion$1,
                  cdpchinfo: cdpchinfo,
                  chInfo: chInfo,
              }),
              seedId: 'app.launch',
              type: 'behavior',
          });
      };
      SharedAppxLogger.prototype.reportError = function (code, error, originalErrorPayload) { };
      SharedAppxLogger.prototype.hideDebugVersion = function (hide) {
          this.isHideDebugVersion = hide;
      };
      SharedAppxLogger.prototype.logBridgeCall = function () {
          var runtime = getRuntimeById(this.appInstanceId);
          this.logBridgeCall = throttle(this.logBridgeCallImpl.bind(this), 500, runtime.getKernel().setTimeout, runtime.getKernel().clearTimeout);
          this.logBridgeCall();
      };
      SharedAppxLogger.prototype.logBridgeCallImpl = function () {
          var _this = this;
          var param2 = objectKeys(this.apiPendData)
              .map(function (key) {
              var _a = _this.apiPendData[key], call = _a.call, success = _a.success;
              return "".concat(key, "(").concat(call, "$").concat(success, ")");
          })
              .join('|');
          this.apiPendData = {};
          this.remoteLog({
              actionId: 'event',
              bizType: 'TAC',
              param2: param2,
              param4: kAppxLoggerSharedParam4SDKVersion,
              seedId: 'jsapi_call_result',
              type: 'behavior',
          });
      };
      SharedAppxLogger.prototype.getAppxVersionMessage = function () {
          var runtime = getRuntimeById(this.appInstanceId);
          var startupParams = runtime.getEnv().startupParams;
          var originalStartupParams = runtime.getEnv().originalStartupParams;
          var alertTitle = "".concat(kAppxVersion$1, " | ").concat(kCubeProjectCommitHash);
          var version = "".concat(startupParams.version);
          if (originalStartupParams.package_nick) {
              version = "".concat(version, " (").concat(originalStartupParams.package_nick, ")");
          }
          this.versionMessageCount += 1;
          if (this.versionMessageCount > 1) {
              // 首次不展示
              var extensionManager = runtime.getMiniExtensionManager();
              var infos = extensionManager.getInitedMiniExtensionInfo();
              if (infos.length) {
                  version += " P(".concat(infos
                      .map(function (info) { return "".concat(info.id).concat(info.version ? ":".concat(info.version) : '').concat(info.static ? ':s' : ':d'); })
                      .join('|'), ")");
              }
          }
          var nav = runtime.getNav();
          var platform = '';
          if (nav) {
              var page = nav.getTopInstance();
              if (page.proxy) {
                  // flexible page
                  platform = "R(".concat(getFlexibleRendererShortType(page.rType), ",").concat(getFlexibleRendererProxyShortType(page.pType), ")");
              }
              else {
                  // legacy Page
                  platform = 'R(L)';
              }
          }
          else {
              platform = '';
          }
          return {
              platform: platform,
              title: alertTitle,
              version: version,
          };
      };
      SharedAppxLogger.prototype.onAppResume = function () {
          // 来个开关，开关拿不到默认关
          var runtime = getRuntimeById(this.appInstanceId);
          var switchManager = runtime && runtime.getSwitchManager();
          if (!switchManager || !switchManager.get("appxngResumeVersion" /* ESharedAppxSwitchManagerName.ResumeVersion */)) {
              return;
          }
          var count = this.appResumeCount;
          var now = Date.now();
          if (count) {
              if (now - this.appResumeStartTime <= 10000) {
                  // 符合时间差内
                  count = this.appResumeCount = this.appResumeCount + 1;
              }
              if (count === 5) {
                  this.appResumeCount = 0;
                  this.alertVersionDetail();
              }
          }
          else {
              this.appResumeCount = 1;
              this.appResumeStartTime = now;
          }
      };
      SharedAppxLogger.prototype.alertVersionDetail = function () {
          var versionDetail = this.getAppxVersionMessage();
          getRuntimeById(this.appInstanceId)
              .getBridge()
              .callBridge('alert', {
              message: "".concat(versionDetail.version, "\n").concat(versionDetail.platform),
              title: versionDetail.title,
          });
      };
      SharedAppxLogger.prototype.onTitleClick = function () {
          if (this.isHideDebugVersion) {
              return;
          }
          var now = Date.now();
          if (now - this.titleClickLastTime < 250) {
              this.titleClickCount++;
              if (this.titleClickCount === 5) {
                  this.titleClickCount = 0;
                  this.alertVersionDetail();
              }
          }
          else {
              this.titleClickCount = 0;
          }
          this.titleClickLastTime = now;
      };
      SharedAppxLogger.prototype.onBridgeInvoke = function (event) {
          switch (event.type) {
              case 'invoke':
                  this.pushBridgeInvokeOrSuccess(event.key, 'call');
                  this.logBridgeCall();
                  break;
              case 'success':
                  this.pushBridgeInvokeOrSuccess(event.key, 'success');
                  this.logBridgeCall();
                  break;
              case 'fail': {
                  debug$1$1(function () { return "[APPX][JSAPI] fail ".concat(event.key, "/").concat(JSON.stringify(event.option), "/").concat(JSON.stringify(event.result)); });
                  var remoteRequest = {
                      actionId: 'event',
                      bizType: 'TAC',
                      param4: kAppxLoggerSharedParam4SDKVersion,
                      seedId: "my.".concat(event.key, ".fail"),
                      type: 'behavior',
                  };
                  switch (this.exceptionLogLevel) {
                      case 'digest':
                          this.remoteLog(remoteRequest);
                          break;
                      case 'all':
                          remoteRequest.param2 = escapeLogParams(event.option);
                          if (event.key === 'request') {
                              // 针对 request profile 打印对象
                              remoteRequest.param3 = escapeLogParamsWithNested(event.result, ['profile']);
                          }
                          else {
                              remoteRequest.param3 = escapeLogParams(event.result);
                          }
                          this.remoteLog(remoteRequest);
                          break;
                  }
              }
          }
      };
      SharedAppxLogger.prototype.pushBridgeInvokeOrSuccess = function (key, type) {
          var modifiedKey = "my.".concat(key, ".call");
          var apiPendData = (this.apiPendData[modifiedKey] = this.apiPendData[modifiedKey] || {
              call: 0,
              success: 0,
          });
          apiPendData[type] += 1;
      };
      return SharedAppxLogger;
  }());

  function getPerformanceTagMap(clientPerformance, hostPerformance) {
      var _a;
      return _a = {},
          _a["ts5" /* PerfTag.RenderFrameworkLoadedStart */] = clientPerformance[0 /* ClientIndex.RenderFrameworkLoadedStart */],
          _a["ts6" /* PerfTag.RenderFrameworkLoadedEnd */] = clientPerformance[1 /* ClientIndex.RenderFrameworkLoadedEnd */],
          _a["ts7" /* PerfTag.JSBridgeReady */] = clientPerformance[2 /* ClientIndex.JSBridgeReady */],
          _a["ts8" /* PerfTag.RegisterSW */] = clientPerformance[3 /* ClientIndex.RegisterSW */],
          _a["ts11" /* PerfTag.RegisterWorkerReady */] = clientPerformance[4 /* ClientIndex.RegisterWorkerReady */],
          _a["ts12" /* PerfTag.NotifyReadyToSW */] = clientPerformance[5 /* ClientIndex.NotifyReadyToSW */],
          _a["ts16" /* PerfTag.InitialDataFromSW */] = clientPerformance[6 /* ClientIndex.InitialDataFromSW */],
          _a["ts17" /* PerfTag.FirstRenderStart */] = clientPerformance[7 /* ClientIndex.FirstRenderStart */]
              ? clientPerformance[7 /* ClientIndex.FirstRenderStart */]
              : undefined,
          _a["ts18" /* PerfTag.FirstRenderEnd */] = clientPerformance[8 /* ClientIndex.FirstRenderEnd */]
              ? clientPerformance[8 /* ClientIndex.FirstRenderEnd */]
              : undefined,
          _a["ts19" /* PerfTag.PageLoaded */] = clientPerformance[9 /* ClientIndex.PageLoaded */],
          _a["ts20" /* PerfTag.SendReadyToPage */] = clientPerformance[10 /* ClientIndex.SendReadyToPage */],
          _a["ts9" /* PerfTag.WorkerFrameworkLoadedStart */] = hostPerformance[0 /* HostIndex.WorkerFrameworkLoadedStart */],
          _a["ts10" /* PerfTag.WorkerFrameworkLoadedEnd */] = hostPerformance[1 /* HostIndex.WorkerFrameworkLoadedEnd */],
          _a["ts13" /* PerfTag.AppLoaded */] = hostPerformance[2 /* HostIndex.AppLoaded */],
          _a["ts14" /* PerfTag.AppOnLaunch */] = hostPerformance[3 /* HostIndex.AppOnLaunch */],
          _a["ts15" /* PerfTag.PageOnLoad */] = hostPerformance[4 /* HostIndex.PageOnLoad */],
          _a["ts21" /* PerfTag.PageOnReady */] = hostPerformance[5 /* HostIndex.PageOnReady */],
          _a["ts22" /* PerfTag.PageHydrateStart */] = clientPerformance[11 /* ClientIndex.PageHydrateStart */]
              ? clientPerformance[11 /* ClientIndex.PageHydrateStart */]
              : undefined,
          _a["ts23" /* PerfTag.PageHydrateEnd */] = clientPerformance[12 /* ClientIndex.PageHydrateEnd */]
              ? clientPerformance[12 /* ClientIndex.PageHydrateEnd */]
              : undefined,
          _a["ts24" /* PerfTag.PageFirstInteractionBeforeHydrateFinish */] = clientPerformance[13 /* ClientIndex.PageFirstInteractionBeforeHydrateFinish */]
              ? clientPerformance[13 /* ClientIndex.PageFirstInteractionBeforeHydrateFinish */]
              : undefined,
          _a;
  }
  var WebDefaultLogger = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(WebDefaultLogger, _super);
      function WebDefaultLogger() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.isTraced = false;
          _this.isChinfoCached = false;
          // 记录一个页面已经使用的插件id，防止一个插件id重复上报
          _this.reportExtensionUsageByPageId = {};
          // 缓存需要上报的数据，等待批量上报
          _this.reportExtensionQueueByPagePath = {};
          // 上一次上报的时间戳
          _this.reportExtensionTimer = null;
          _this.shouleReportExtensionUsageInComponent = undefined;
          _this.errorToSource = createWeakMap();
          return _this;
      }
      WebDefaultLogger.prototype.reportExtensionUsageInComponent = function (page, extensionIds) {
          var _this = this;
          var shouleReportExtensionUsageInComponent = this.shouleReportExtensionUsageInComponent;
          if (shouleReportExtensionUsageInComponent === undefined) {
              shouleReportExtensionUsageInComponent = this.shouleReportExtensionUsageInComponent = !!getRuntimeById(this.appInstanceId)
                  .getSwitchManager()
                  .get("enablePluginComponentExpo" /* ESharedAppxSwitchManagerName.EnablePluginComponentExpo */);
          }
          if (!shouleReportExtensionUsageInComponent) {
              return;
          }
          var runtime = getRuntimeById(this.appInstanceId);
          var pageId = page.pageId, pagePath = page.pagePath;
          var _a = this, pagePluginUsageMap = _a.reportExtensionUsageByPageId, waitingReportData = _a.reportExtensionQueueByPagePath;
          if (!pagePluginUsageMap[pageId]) {
              pagePluginUsageMap[pageId] = {};
          }
          for (var _i = 0, extensionIds_1 = extensionIds; _i < extensionIds_1.length; _i++) {
              var miniExtensionId = extensionIds_1[_i];
              var usageMap = pagePluginUsageMap[pageId];
              // 如果已经上报过了就不再上报
              if (usageMap[miniExtensionId]) {
                  continue;
              }
              else {
                  usageMap[miniExtensionId] = true;
                  if (!waitingReportData[pagePath]) {
                      waitingReportData[pagePath] = [];
                  }
                  waitingReportData[pagePath].push(miniExtensionId);
              }
          }
          if (!this.reportExtensionTimer) {
              this.reportExtensionTimer = runtime.getKernel().setTimeout(function () {
                  _this.reportExtensionTimer = null;
                  _this.flushDataMiniExtensionComponentExpo();
              }, 500);
          }
      };
      WebDefaultLogger.prototype.attachErrorSource = function (errorPayload, sourceCtx) {
          if (typeof errorPayload === 'object' && errorPayload) {
              this.errorToSource.set(errorPayload, sourceCtx);
          }
      };
      WebDefaultLogger.prototype.reportError = function (code, error, originalErrorPayload) {
          _super.prototype.reportError.call(this, code, error, originalErrorPayload);
          this.appendErrorSource(error, originalErrorPayload);
          var runtime = getRuntimeById(this.appInstanceId);
          var nav = runtime.getNav();
          var page = nav ? nav.getTopInstance() : null;
          var miniExtensionId = '';
          if (typeof error.sourceURL === 'string') {
              var kMiniExtensionSourceURLErrorRegExp = /\/__plugins__\/(.*?)\//;
              var pluginIdMatch = error.sourceURL.match(kMiniExtensionSourceURLErrorRegExp);
              if (pluginIdMatch && pluginIdMatch[1]) {
                  miniExtensionId = pluginIdMatch[1];
              }
          }
          var pluginVersion;
          if (miniExtensionId) {
              if (runtime.getSwitchManager().get("enablePluginVersion" /* ESharedAppxSwitchManagerName.EnablePluginVersion */)) {
                  var extensionExtraInfo = runtime.getMiniExtensionManager().getExtraInfoByExtensionId(miniExtensionId);
                  pluginVersion = extensionExtraInfo && extensionExtraInfo.version;
              }
          }
          // tslint:disable object-literal-sort-keys
          var logParams = {
              errorMsg: error.message,
              errorUrl: error.sourceURL,
              pluginId: miniExtensionId,
              pluginVersion: pluginVersion,
              errorPage: page ? page.pagePath : '',
              SDKVersion: kAppxVersion,
              stack: error.stack,
              OS: this.getPlatformOS(), // getPlatformString(runtime.getKernel().userAgent, getStartupParams()),
          };
          var errorType = getErrorInfoType(error.type);
          if (errorType) {
              logParams.errorType = errorType;
          }
          if (error.detail) {
              logParams.errorDetail = error.detail;
          }
          // tslint:enable object-literal-sort-keys
          // if (!!getExtraAPIsUrlMap()[originalUrl]) {
          //   logParams['extraAppId'] = getExtraAPIsUrlMap()[originalUrl];
          // }
          this.remoteLog({
              param1: getGroupedErrorCodeFromSpecificErrorCode4Lego(code),
              param3: escapeLogParams(logParams),
              seedId: 'H5_CUSTOM_ERROR',
              type: 'error',
          });
          // 然后发送到 Render 进行 Clue 埋点
          if (page) {
              page.reportHostErrorToClient(code, error);
          }
      };
      WebDefaultLogger.prototype.reportPrefetch = function () {
          var runtime = getRuntimeById(this.appInstanceId);
          if (runtime) {
              runtime.getKernel().setTimeout(function () {
                  var bridge = runtime.getBridge();
                  if (bridge) {
                      var kRpcPrefetchLog = bridge.extraInfo.kRpcPrefetchLog;
                      if (kRpcPrefetchLog) {
                          var prefetch_1 = kRpcPrefetchLog.join(';');
                          debug$1$1(function () { return '[APPX][JSAPI] rpc prefetch perf: ' + prefetch_1; });
                          bridge.callInternalAPI('onAppPerfEvent', {
                              data: {
                                  prefetch: prefetch_1,
                              },
                              state: 'prefetchPerf',
                              time: Date.now(),
                          });
                      }
                  }
              }, 2000);
          }
      };
      WebDefaultLogger.prototype.updatePerformance = function (page, clientPerformance) {
          var isFirstPage = page.getIsFirstPage();
          var pageBootPerfPayload = this.firstPageBootPerf;
          if (isFirstPage && pageBootPerfPayload && page.pagePath === pageBootPerfPayload.pagePath) {
              var changed = false;
              var data = pageBootPerfPayload.data;
              if (clientPerformance[11 /* ClientIndex.PageHydrateStart */] &&
                  clientPerformance[11 /* ClientIndex.PageHydrateStart */] !== data["ts22" /* PerfTag.PageHydrateStart */]) {
                  changed = true;
                  data["ts22" /* PerfTag.PageHydrateStart */] = clientPerformance[11 /* ClientIndex.PageHydrateStart */];
              }
              if (clientPerformance[12 /* ClientIndex.PageHydrateEnd */] &&
                  clientPerformance[12 /* ClientIndex.PageHydrateEnd */] !== data["ts23" /* PerfTag.PageHydrateEnd */]) {
                  changed = true;
                  data["ts23" /* PerfTag.PageHydrateEnd */] = clientPerformance[12 /* ClientIndex.PageHydrateEnd */];
              }
              if (clientPerformance[7 /* ClientIndex.FirstRenderStart */] &&
                  clientPerformance[7 /* ClientIndex.FirstRenderStart */] !== data["ts17" /* PerfTag.FirstRenderStart */]) {
                  changed = true;
                  data["ts17" /* PerfTag.FirstRenderStart */] = clientPerformance[7 /* ClientIndex.FirstRenderStart */];
              }
              if (clientPerformance[8 /* ClientIndex.FirstRenderEnd */] &&
                  clientPerformance[8 /* ClientIndex.FirstRenderEnd */] !== data["ts18" /* PerfTag.FirstRenderEnd */]) {
                  changed = true;
                  data["ts18" /* PerfTag.FirstRenderEnd */] = clientPerformance[8 /* ClientIndex.FirstRenderEnd */];
              }
              if (clientPerformance[13 /* ClientIndex.PageFirstInteractionBeforeHydrateFinish */] &&
                  clientPerformance[13 /* ClientIndex.PageFirstInteractionBeforeHydrateFinish */] !==
                      data["ts24" /* PerfTag.PageFirstInteractionBeforeHydrateFinish */]) {
                  changed = true;
                  data["ts24" /* PerfTag.PageFirstInteractionBeforeHydrateFinish */] =
                      clientPerformance[13 /* ClientIndex.PageFirstInteractionBeforeHydrateFinish */];
              }
              if (changed) {
                  var runtime = getRuntimeById(page.appInstanceId);
                  if (runtime && runtime.getBridge()) {
                      runtime.getBridge().callInternalAPI('onAppPerfEvent', this.firstPageBootPerf);
                  }
              }
          }
      };
      WebDefaultLogger.prototype.reportPerformance = function (page, clientPerformance) {
          var runtime = getRuntimeById(page.appInstanceId);
          var bridge = runtime.getBridge();
          var isFirstPage = page.getIsFirstPage();
          var now = Date.now();
          if (isFirstPage) {
              var app = runtime.getApp();
              var payload4AppLoaded = {
                  state: "appLoaded" /* IAppxLoggerPerfEventState.AppLoaded */,
                  time: app.launchTime,
              };
              var frameworkEnd = typeof __script4CubeWeb2TimeEnd === 'number' ? __script4CubeWeb2TimeEnd : 0;
              var frameworkBegin = typeof __script4CubeWeb2TimeBegin === 'number' ? __script4CubeWeb2TimeBegin : 0;
              var payload4WorkerFrameworkLoaded = {
                  loadTime: frameworkEnd - frameworkBegin,
                  state: "workerFrameworkLoaded" /* IAppxLoggerPerfEventState.WorkerFrameworkLoaded */,
                  time: frameworkEnd,
              };
              bridge.callInternalAPI('onAppPerfEvent', payload4AppLoaded);
              bridge.callInternalAPI('onAppPerfEvent', payload4WorkerFrameworkLoaded);
              this.firstPageBootPerf = {
                  data: getPerformanceTagMap(clientPerformance, [
                      frameworkBegin,
                      frameworkEnd,
                      app.launchTime,
                      app.launchedTime,
                      page.loadTime,
                      now ]),
                  pagePath: page.pagePath,
                  state: "pageBootPerf" /* IAppxLoggerPerfEventState.PageBootPerf */,
                  time: now,
              };
              bridge.callInternalAPI('onAppPerfEvent', this.firstPageBootPerf);
          }
          // TODO: PV 上报提前到 pageLoad 阶段。
          // 目前仅跟着 UEP 需求依赖该功能更，因此使用 UEP 的开关验证。待线上稳定后，需将开关去掉
          var getSwitchManager = runtime.getSwitchManager();
          if (!getSwitchManager || !getSwitchManager.get("uepSupportSPMSwitch" /* ESharedAppxSwitchManagerName.UepSupportSPMSwitch */)) {
              this.reportPageMonitor(runtime, page);
          }
      };
      WebDefaultLogger.prototype.reportPV = function (page) {
          // 每个页面报一下 reportTinyData:pageMonitor
          var runtime = getRuntimeById(page.appInstanceId);
          var getSwitchManager = runtime.getSwitchManager();
          if (getSwitchManager && getSwitchManager.get("uepSupportSPMSwitch" /* ESharedAppxSwitchManagerName.UepSupportSPMSwitch */)) {
              this.reportPageMonitor(runtime, page);
          }
      };
      WebDefaultLogger.prototype.getAppxVersionMessage = function () {
          var versionInfo = _super.prototype.getAppxVersionMessage.call(this);
          if (versionInfo) {
              var runtime = getRuntimeById(this.appInstanceId);
              var startupPamras = runtime.getEnv().originalStartupParams;
              var prerunWorker = startupPamras.prerunWorker ? ',P' : '';
              var snapshotInfo = runtime.getNav().getTopInstance().getSnapshotDebugInfo();
              versionInfo.platform += "".concat(prerunWorker);
              if (snapshotInfo) {
                  versionInfo.platform += ",S(".concat(snapshotInfo, ")");
              }
          }
          return versionInfo;
      };
      WebDefaultLogger.prototype.reportPageMonitor = function (runtime, page) {
          var startupParams = runtime.getEnv().originalStartupParams;
          var chInfo = startupParams.chInfo, app_startup_type = startupParams.app_startup_type, appId = startupParams.appId, _a = startupParams.appVersion, appVersion = _a === void 0 ? '' : _a, _b = startupParams.version, version = _b === void 0 ? '' : _b, _c = startupParams.cdpchinfo, cdpchinfo = _c === void 0 ? '' : _c, _d = startupParams.scm, scm = _d === void 0 ? '' : _d, _e = startupParams.appx_scm_data, appx_scm_data = _e === void 0 ? '' : _e, _f = startupParams.bizScenario, bizScenario = _f === void 0 ? '' : _f, _g = startupParams.publicId, publicId = _g === void 0 ? '' : _g, trace = startupParams.trace, cdptrace = startupParams.cdptrace, ap_scan_codec_link_token = startupParams.ap_scan_codec_link_token, ap_framework_scheme = startupParams.ap_framework_scheme, queryStartup = startupParams.query, enableTracker = startupParams.enableTracker;
          // 页面所属的插件 Id
          var pluginId = '';
          var providerInfo = page.getProviderInfo();
          if (isProviderInfo4MiniExtension(providerInfo)) {
              pluginId = providerInfo.miniExtensionId;
          }
          var param = {
              isAppX: 1,
              spm: __assign({ chInfo: chInfo }, getAutoTrackerConfig(appId, page.pagePath)),
              spmDetail: {
                  ap_scan_codec_link_token: ap_scan_codec_link_token,
                  appId: appId,
                  app_startup_type: app_startup_type,
                  appx_page_token: page.loadTime,
                  appx_scm_data: appx_scm_data,
                  bizScenario: bizScenario,
                  cdpchinfo: cdpchinfo,
                  pluginID: pluginId,
                  pluginVersion: undefined,
                  publicId: publicId,
                  query: '',
                  scm: scm,
                  sdkVersion: kAppxVersion,
                  timestamp: Date.now(),
              },
              viewId: page.pageId,
          };
          var bridge = runtime.getBridge();
          var query = page.getQuery();
          if (query) {
              param.spmDetail.query = query;
          }
          if (pluginId && runtime.getSwitchManager().get("enablePluginVersion" /* ESharedAppxSwitchManagerName.EnablePluginVersion */)) {
              var extensionExtraInfo = runtime.getMiniExtensionManager().getExtraInfoByExtensionId(pluginId);
              param.spmDetail.pluginVersion = extensionExtraInfo && extensionExtraInfo.version;
          }
          var switchManager = runtime.getSwitchManager();
          if (switchManager.get("uepReportDataSwitch" /* ESharedAppxSwitchManagerName.Uep */) === true) {
              // 参考 #1291 上报UEP的PV埋点
              param.uep = {
                  appId: appId,
                  appVersion: version || appVersion || '',
                  sdkParams: {
                      query: queryStartup,
                      scheme: ap_framework_scheme,
                      sdkVersion: kAppxVersion,
                  },
                  sdkVersion: kAppxVersion,
                  timestamp: Date.now(),
                  url: page.pagePath + (param.spmDetail.query ? "?".concat(param.spmDetail.query) : ''),
              };
              param.type = 'tiny';
              if (switchManager.get("enableUepPvDefaultValue" /* ESharedAppxSwitchManagerName.EnableUepPvDefaultValue */)) {
                  // reportUEPData 的 update 字段在支付宝客户端 10.2.0 改了默认值。这里强制设置 update，避免 10.2.0 客户端与线上不一致
                  param.uep.update = true;
              }
              if (enableTracker) {
                  param.uep.params = { enableTracker: enableTracker };
              }
              bridge.callInternalAPI('reportUEPData', param);
          }
          else {
              bridge.callInternalAPI('reportTinyData', param);
          }
          var promoData = JSON.stringify({
              chinfo: cdpchinfo || chInfo || '',
              scm: scm,
          });
          // 营销全引导
          if ((trace || cdptrace) && !this.isTraced) {
              // 1.20.0: remove cdptrace
              this.isTraced = true;
              bridge.callInternalAPI('handleLoggingAction', {
                  actionType: 'setPageParams',
                  data: promoData,
              });
          }
          // 渠道链缓存
          if (!this.isChinfoCached) {
              this.isChinfoCached = true;
              bridge.callInternalAPI('handleLoggingAction', {
                  actionType: 'appendChinfo',
                  data: promoData,
              });
          }
      };
      WebDefaultLogger.prototype.appendErrorSource = function (error, originalErrorPayload) {
          if (error) {
              try {
                  if (hasProxyTarget(originalErrorPayload)) {
                      originalErrorPayload = getProxyTarget(originalErrorPayload);
                  }
                  var foundSource = this.errorToSource.get(originalErrorPayload);
                  if (foundSource) {
                      if (!error.detail) {
                          error.detail = '';
                      }
                      error.detail += "".concat(JSON.stringify({
                          from: foundSource.from,
                          method: foundSource.method,
                          payload: JSON.stringify(foundSource.payload).slice(0, 500),
                      }));
                  }
              }
              catch (_) {
                  // ignore
              }
          }
      };
      WebDefaultLogger.prototype.flushDataMiniExtensionComponentExpo = function () {
          var waitingReportData = this.reportExtensionQueueByPagePath;
          var runtime = getRuntimeById(this.appInstanceId);
          var enablePluginVersion = runtime.getSwitchManager().get("enablePluginVersion" /* ESharedAppxSwitchManagerName.EnablePluginVersion */);
          var miniExtensionManager = runtime.getMiniExtensionManager();
          for (var _i = 0, _a = objectKeys(waitingReportData); _i < _a.length; _i++) {
              var pagePath = _a[_i];
              var plugins = waitingReportData[pagePath];
              if (plugins.length > 0) {
                  var appId = runtime.getEnv().startupParams.appId || '';
                  var pluginVersions = void 0;
                  if (enablePluginVersion) {
                      // 获取 plugins 的版本
                      if (miniExtensionManager) {
                          pluginVersions = plugins.map(function (pluginId) {
                              var extensionExtraInfo = miniExtensionManager.getExtraInfoByExtensionId(pluginId);
                              return (extensionExtraInfo && extensionExtraInfo.version) || '';
                          });
                      }
                  }
                  runtime.getBridge().callBridge('remoteLog', {
                      actionId: 'event',
                      bizType: "TinyAppBiz-".concat(appId),
                      logLevel: 1,
                      param4: escapeLogParams({
                          appID: appId,
                          pagePath: pagePath,
                          // 增加版本号，用于区分新老数据，便于清洗
                          pluginTrackerVersion: 1,
                          pluginVersions: pluginVersions ? pluginVersions.join('|') : undefined,
                          plugins: plugins.join('|'),
                          sdkVersion: kAppxVersion,
                      }),
                      seedId: 'plugin.usage',
                      type: 'monitor',
                  });
              }
          }
          this.reportExtensionQueueByPagePath = {};
      };
      return WebDefaultLogger;
  }(SharedAppxLogger));

  var TapMarkManager = /** @class */ /*#__PURE__*/ (function () {
      function TapMarkManager() {
          this.tapTime = 0;
      }
      TapMarkManager.prototype.beginTapMark = function () {
          this.tapTime = Date.now() + Math.random();
          return this.tapTime;
      };
      TapMarkManager.prototype.checkTapMark = function () {
          return !!this.tapTime;
      };
      TapMarkManager.prototype.endTapMark = function (timestamp) {
          if (timestamp === this.tapTime) {
              this.tapTime = 0;
          }
      };
      TapMarkManager.prototype.wrapTapMark = function (callback) {
          var _this = this;
          var timestamp = this.beginTapMark();
          var result;
          try {
              result = callback(timestamp);
          }
          catch (e) {
              setTimeout(function () {
                  _this.endTapMark(timestamp);
              }, 0);
              throw e;
          }
          setTimeout(function () {
              _this.endTapMark(timestamp);
          }, 0);
          return result;
      };
      return TapMarkManager;
  }());

  var BackEventManager = /** @class */ /*#__PURE__*/ (function () {
      function BackEventManager(page) {
          this.page = page;
          this.state = 0;
      }
      BackEventManager.prototype.enableAlertBeforeUnload = function (message, callback) {
          if (this.isPageLoaded()) {
              var state = this.state;
              this.alertBeforeUnloadMsg = message || '离开此页面?';
              if (bitwiseHasState(state, 1 /* EBackEventManagerState.AlertBeforeUnload */)) {
                  callback(true);
              }
              else {
                  this.state = bitwiseAddState(state, 1 /* EBackEventManagerState.AlertBeforeUnload */);
                  this.setBackPrevented(callback);
              }
          }
          else {
              callback(false);
          }
      };
      BackEventManager.prototype.disableAlertBeforeUnload = function (callback) {
          if (this.isPageLoaded()) {
              var state = this.state;
              if (bitwiseHasState(state, 1 /* EBackEventManagerState.AlertBeforeUnload */)) {
                  this.state = bitwiseRemoveState(state, 1 /* EBackEventManagerState.AlertBeforeUnload */);
                  this.alertBeforeUnloadMsg = '';
                  this.setBackPrevented(callback);
              }
              else if (callback) {
                  callback(true);
              }
          }
          else if (callback) {
              callback(false);
          }
      };
      BackEventManager.prototype.setPageContainer = function (enable, callback) {
          if (this.isPageLoaded()) {
              var state = this.state;
              if (!!enable === !bitwiseHasState(state, 2 /* EBackEventManagerState.PageContainer */)) {
                  this.state = (enable ? bitwiseAddState : bitwiseRemoveState)(state, 2 /* EBackEventManagerState.PageContainer */);
                  this.setBackPrevented(callback);
              }
              else if (callback) {
                  callback(true);
              }
          }
          else if (callback) {
              callback(false);
          }
      };
      BackEventManager.prototype.performBackActionByClientInteraction = function () {
          var _this = this;
          if (this.isPageLoaded()) {
              var _a = this, state = _a.state, page = _a.page;
              if (bitwiseHasState(state, 2 /* EBackEventManagerState.PageContainer */)) {
                  this.setPageContainer(false);
                  this.invokeRenderPageContainerBack();
              }
              else if (bitwiseHasState(state, 1 /* EBackEventManagerState.AlertBeforeUnload */)) {
                  var alertBeforeUnloadMsg = this.alertBeforeUnloadMsg;
                  if (alertBeforeUnloadMsg) {
                      var bridge_1 = getRuntimeById(page.appInstanceId).getBridge();
                      bridge_1.callBridge("confirm" /* NativeAPI.confirm */, {
                          message: alertBeforeUnloadMsg,
                      }, function (res) {
                          if (res.ok && _this.isPageLoaded()) {
                              _this.disableAlertBeforeUnload();
                              bridge_1.defaultScope.call("navigateBack" /* MiniAPI.navigateBack */);
                          }
                      });
                  }
              }
          }
      };
      BackEventManager.prototype.performBackActionByHostAPI = function () {
          if (bitwiseHasState(this.state, 2 /* EBackEventManagerState.PageContainer */)) {
              this.setPageContainer(false);
              this.invokeRenderPageContainerBack();
              return true;
          }
      };
      BackEventManager.prototype.dispose = function () {
          this.page = null;
      };
      BackEventManager.prototype.invokeRenderPageContainerBack = function () {
          this.page.invokeRenderMethod("pageContainerBack" /* ESharedAppxPageRenderMethod.PageContainerBack */, []);
      };
      BackEventManager.prototype.setBackPrevented = function (callback) {
          var state = this.state;
          var page = this.page;
          var prevented = !!bitwiseRemoveState(state, 4 /* EBackEventManagerState.DefaultPrevented */);
          this.state = prevented ? bitwiseAddState(state, 4 /* EBackEventManagerState.DefaultPrevented */) : 0;
          getRuntimeById(page.appInstanceId)
              .getBridge()
              .callInternalAPI("setBackPrevented" /* NativeAPI.setBackPrevented */, {
              prevented: prevented,
              viewId: page.pageId,
          }, callback &&
              (function (res) {
                  callback(!!res.success);
              }));
      };
      BackEventManager.prototype.isPageLoaded = function () {
          var page = this.page;
          return !!page && !page.hasPageUnloaded();
      };
      return BackEventManager;
  }());

  function getPageOnShareEventDataSource(event) {
      var eventData = event.data;
      if (eventData) {
          if (eventData.source) {
              return eventData.source;
          }
          else {
              return eventData;
          }
      }
  }
  var sharedPagePluginShareImpl;
  function setPagePluginShareImpl(v) {
      sharedPagePluginShareImpl = v;
  }
  function createPagePluginShare(appInstanceId, pageId) {
      if (sharedPagePluginShareImpl) {
          return new sharedPagePluginShareImpl(appInstanceId, pageId);
      }
  }
  var SharedPagePluginShare = /** @class */ /*#__PURE__*/ (function () {
      function SharedPagePluginShare(appInstanceId, pageId) {
          this.appInstanceId = appInstanceId;
          this.pageId = pageId;
          this.startPageShare4Listener = this.startPageShare4Listener.bind(this);
          this.startShareToAlipayContact4Listener = this.startShareToAlipayContact4Listener.bind(this);
      }
      SharedPagePluginShare.prototype.bootstrap = function () {
          // TODO: 还要区分是全局事件还是页面级事件，不能绑定太多
          getRuntimeById(this.appInstanceId)
              .getEventManager()
              .addEventListener("onShare" /* ESharedAppxEvent.Native.PageShare */, this.startPageShare4Listener);
      };
      SharedPagePluginShare.prototype.dispose = function () {
          getRuntimeById(this.appInstanceId)
              .getEventManager()
              .removeEventListener("onShare" /* ESharedAppxEvent.Native.PageShare */, this.startPageShare4Listener);
      };
      SharedPagePluginShare.prototype.startPageShare = function (source, callback) {
          this.startPageShare4Listener({
              data: {
                  instanceId: this.pageId,
                  source: source,
              },
          }, callback);
      };
      SharedPagePluginShare.prototype.startShareToAlipayContact = function (source, callback) {
          this.startShareToAlipayContact4Listener({
              data: {
                  instanceId: this.pageId,
                  source: source,
              },
          }, callback);
      };
      SharedPagePluginShare.prototype.performShareTinyAppMsg = function (param, callback) {
          return this.performShare('shareTinyAppMsg', param, callback);
      };
      SharedPagePluginShare.prototype.performShareToAlipayContact = function (param, callback) {
          return this.performShare('shareToAlipayContact', param, callback);
      };
      SharedPagePluginShare.prototype.performShare = function (internalAPIName, param, callback) {
          var _this = this;
          var runtime = getRuntimeById(this.appInstanceId);
          var page = runtime.getPageManager().getInstanceById(this.pageId);
          var bridge = runtime.getBridge();
          var pageToken = page.loadTime;
          var pagePath = page.pagePath;
          var appId = runtime.getEnv().startupParams.appId;
          var path = param.path, fail = param.fail, success = param.success, complete = param.complete, userShareInfo = __rest(param, ["path", "fail", "success", "complete"]);
          var requestParam = __assign(__assign({}, userShareInfo), { 
              // 用户传入 path, native接受 page
              page: path || pagePath, 
              // 淘系客户端识别path参数 参照1.0兼容之
              path: path || pagePath });
          bridge.callInternalAPI(internalAPIName, requestParam, function (e) {
              if (typeof callback === 'function') {
                  callback(e);
              }
              if (!e.shareResult && fail) {
                  fail(e);
              }
              if (e.shareResult && success) {
                  success(e);
              }
              if (complete) {
                  complete(e);
              }
              logShare(_this.appInstanceId, appId, pagePath, pageToken, e.channelName, e.shareResult);
          });
      };
      SharedPagePluginShare.prototype.startPageShare4Listener = function (event, callback) {
          var _this = this;
          debug$1$1(function () { return "[APPX] CubePagePluginShare::startPageShare instance(".concat(JSON.stringify(event), ")"); });
          var instanceId = event.data && event.data.instanceId;
          if (instanceId !== this.pageId) {
              debug$1$1(function () { return "[APPX] CubePagePluginShare::startPageShare page not match ".concat(instanceId, ", ").concat(_this.pageId); });
          }
          else {
              var runtime_1 = getRuntimeById(this.appInstanceId);
              var page_1 = runtime_1.getPageManager().getInstanceById(this.pageId);
              var switchManager = runtime_1.getSwitchManager();
              if (page_1) {
                  debug$1$1(function () { return '[APPX] CubePagePluginShare::startPageShare page found'; });
                  var pageShareAppMessage_1 = page_1.getPageLogicInstance().publicInstance.onShareAppMessage;
                  var globalShareAppMessage = runtime_1.getApp().publicInstance.onShareAppMessage;
                  try {
                      var shareInfo_1;
                      var extParams_1 = {};
                      var useCustomShare = false;
                      var options_1 = {
                          from: 'menu',
                      };
                      var dataSource_1 = getPageOnShareEventDataSource(event);
                      if (dataSource_1) {
                          var from = dataSource_1.from, webViewUrl = dataSource_1.webViewUrl, target = dataSource_1.target;
                          if (target) {
                              options_1.target = target;
                              // FIXME
                              // 其实 Appx 是要验证 target.tagName === 'button'
                              // 但由于历史原因老用例 (Vue) 都跑不过
                              options_1.from = 'button';
                          }
                          else if (from) {
                              options_1.from = from;
                          }
                          if (webViewUrl) {
                              options_1.webViewUrl = webViewUrl;
                          }
                          if (dataSource_1.extParams) {
                              extParams_1 = dataSource_1.extParams;
                          }
                      }
                      var packageAndRunSceneType = runtime_1.getEnv().packageAndRunSceneType;
                      var consolePrefix_1;
                      if (isConsoleAvaliableToDeveloper(packageAndRunSceneType)) {
                          consolePrefix_1 = '.onShareAppMessage';
                      }
                      if (typeof pageShareAppMessage_1 === 'function' || typeof globalShareAppMessage === 'function') {
                          useCustomShare = true;
                          if (typeof pageShareAppMessage_1 === 'function') {
                              debug$1$1(function () { return '[APPX] CubePagePluginShare::startPageShare Use Page.onShareAppMessage'; });
                              if (consolePrefix_1) {
                                  consolePrefix_1 = "Page[".concat(page_1.pagePath, "]").concat(consolePrefix_1);
                              }
                              shareInfo_1 = pageShareAppMessage_1.call(page_1.getPageLogicInstance().publicInstance, options_1);
                          }
                          else if (typeof globalShareAppMessage === 'function') {
                              debug$1$1(function () { return '[APPX] CubePagePluginShare::startPageShare Use App.onShareAppMessage'; });
                              if (consolePrefix_1) {
                                  consolePrefix_1 = "App".concat(consolePrefix_1);
                              }
                              shareInfo_1 = globalShareAppMessage.call(runtime_1.getApp().publicInstance, options_1);
                          }
                      }
                      else {
                          var shareAppMessageBehavior = void 0;
                          var providerInfo = page_1.getProviderInfo();
                          if (providerInfo.providerType === 0 /* EZRuntimeLinkedInstanceOption4ProviderType.MainApp */) {
                              // 如果当前页面属于小程序，则取app.json => behavior: { shareAppMessage: 'appendQuery' }
                              var appBehavior = runtime_1.getMeta().getAppBehavior();
                              shareAppMessageBehavior = appBehavior && appBehavior["shareAppMessage" /* ESharedAppMetaBehaviorMapValue.ShareAppMessage */];
                          }
                          else if (providerInfo.providerType === 1 /* EZRuntimeLinkedInstanceOption4ProviderType.MiniExtension */ &&
                              providerInfo.miniExtensionId) {
                              var metaByExtensionId = runtime_1.getMiniExtensionManager().getMetaByExtensionId({
                                  type: 4 /* EMiniExtensionStringType._$_extension_id_$_ */,
                                  value: providerInfo.miniExtensionId,
                              });
                              if (metaByExtensionId && metaByExtensionId.config && metaByExtensionId.config.behavior) {
                                  // 如果当前页面属于插件，来取特定插件的plugin.json => behavior: { shareAppMessage: 'appendQuery' }
                                  shareAppMessageBehavior =
                                      metaByExtensionId.config.behavior["shareAppMessage" /* ESharedMiniExtensionMetaBehaviorMapValue.ShareAppMessage */];
                              }
                          }
                          if (shareAppMessageBehavior === "appendQuery" /* ESharedShareAppMessageBehaviorType.AppendQuery */) {
                              var pageQuery = page_1.getQuery();
                              if (pageQuery !== '') {
                                  shareInfo_1 = {
                                      path: "".concat(page_1.pagePath, "?").concat(pageQuery),
                                  };
                              }
                              else {
                                  shareInfo_1 = {};
                              }
                          }
                          else {
                              // 用户未设置时，默认分享提交
                              shareInfo_1 = {};
                          }
                      }
                      if (shareInfo_1 && typeof shareInfo_1 === 'object') {
                          /**
                           * 五福需求
                           * 如果用户自定义了分享参数且返回值正常，就清除扩展参数
                           */
                          var useCustomShareInfoWith5FU = switchManager.get("useCustomShareConfigWith5FU" /* ESharedAppxSwitchManagerName.UseCustomShareConfigWith5FU */) !== false;
                          if (useCustomShare && useCustomShareInfoWith5FU) {
                              extParams_1 = {};
                          }
                          if ('then' in shareInfo_1 && typeof shareInfo_1.then === 'function') {
                              shareInfo_1
                                  .then(function (res) {
                                  shareInfo_1 = res;
                                  if (shareInfo_1 && typeof shareInfo_1 === 'object') {
                                      var shareTarget = dataSource_1 && dataSource_1.detail && dataSource_1.detail.shareTarget;
                                      if (shareTarget && !('then' in shareInfo_1)) {
                                          shareInfo_1.shareTarget = shareTarget;
                                      }
                                      _this.performShareTinyAppMsg(__assign(__assign(__assign({}, shareInfo_1), { from: options_1.from }), extParams_1), function (e) {
                                          if (typeof callback === 'function') {
                                              callback();
                                          }
                                      });
                                  }
                                  else {
                                      // todo appx 1.0 会console.error
                                      var behavior = runtime_1.getBehaviorManager().get("ReportUnexpectShare" /* ESharedAppxSwitchManagerName.ReportUnexpectShare */);
                                      if (behavior.report) {
                                          behavior.report("The method onShareAppMessage in ".concat(typeof pageShareAppMessage_1 === 'function' ? page_1.pagePath : 'app', ".js return an unexpected result: ").concat(JSON.stringify(shareInfo_1)));
                                      }
                                      if (runtime_1.getSwitchManager().get("EnableDefaultShare" /* ESharedAppxSwitchManagerName.EnableDefaultShare */)) {
                                          _this.performShareTinyAppMsg(__assign({ from: options_1.from }, extParams_1), function (e) {
                                              if (typeof callback === 'function') {
                                                  callback();
                                              }
                                          });
                                      }
                                  }
                              })
                                  .catch(function (e) {
                                  if (consolePrefix_1) {
                                      console.warn("".concat(consolePrefix_1, " \u53D1\u751F Promise \u5F02\u5E38"), e); // tslint:disable-line
                                  }
                              });
                          }
                          else {
                              var shareTarget = dataSource_1 && dataSource_1.detail && dataSource_1.detail.shareTarget;
                              if (shareTarget && !('then' in shareInfo_1)) {
                                  shareInfo_1.shareTarget = shareTarget;
                              }
                              this.performShareTinyAppMsg(__assign(__assign(__assign({}, shareInfo_1), { from: options_1.from }), extParams_1), function (e) {
                                  if (typeof callback === 'function') {
                                      callback();
                                  }
                              });
                          }
                          // 只有这里一个 return
                          return;
                      }
                      else {
                          // todo appx 1.0 会console.error 用户指定了函数，但是又没返回，不做分享行为
                          var defaultShareStrategyWith5FU = switchManager.get("useFallbackShareWith5FU" /* ESharedAppxSwitchManagerName.UseFallbackShareWith5FU */) !== false &&
                              Object.keys(extParams_1).length !== 0;
                          var behavior = runtime_1.getBehaviorManager().get("ReportUnexpectShare" /* ESharedAppxSwitchManagerName.ReportUnexpectShare */);
                          if (behavior.report) {
                              behavior.report("The method onShareAppMessage in ".concat(typeof pageShareAppMessage_1 === 'function' ? page_1.pagePath : 'app', ".js return an unexpected result: ").concat(JSON.stringify(shareInfo_1), ", ").concat(defaultShareStrategyWith5FU));
                          }
                          if (runtime_1.getSwitchManager().get("EnableDefaultShare" /* ESharedAppxSwitchManagerName.EnableDefaultShare */) ||
                              defaultShareStrategyWith5FU) {
                              this.performShareTinyAppMsg(__assign({ from: options_1.from }, extParams_1), function (e) {
                                  if (typeof callback === 'function') {
                                      callback();
                                  }
                              });
                          }
                          if (consolePrefix_1) {
                              console.warn("".concat(consolePrefix_1, " \u65E0\u6709\u6548\u8FD4\u56DE\u65F6\u4E0D\u4F1A\u53D1\u8D77\u5206\u4EAB\u884C\u4E3A")); // tslint:disable-line
                          }
                      }
                  }
                  catch (ex) {
                      debug$1$1(function () { return "[APPX] CubePagePluginShare::startPageShare error(".concat(ex && ex.message, ")"); });
                  }
              }
          }
          // 没进bridge调用的都到这里来
          if (typeof callback === 'function') {
              callback();
          }
      };
      SharedPagePluginShare.prototype.startShareToAlipayContact4Listener = function (event, callback) {
          var _this = this;
          debug$1$1(function () { return "[APPX] CubePagePluginShare::startShareToAlipayContact instance(".concat(JSON.stringify(event), ")"); });
          var instanceId = event.data && event.data.instanceId;
          if (instanceId !== this.pageId) {
              debug$1$1(function () { return "[APPX] CubePagePluginShare::startShareToAlipayContact page not match ".concat(instanceId, ", ").concat(_this.pageId); });
          }
          else {
              var runtime = getRuntimeById(this.appInstanceId);
              var page_2 = runtime.getPageManager().getInstanceById(this.pageId);
              var validate4ShareInfo_1 = function (shareInfo, pagePath) {
                  if (shareInfo && typeof shareInfo === 'object') {
                      return true;
                  }
                  else {
                      // tslint:disable-next-line: no-console
                      console.error("\u8BF7\u68C0\u67E5".concat(pagePath, ".js \u5185\u7684 onShareAppMessag \u51FD\u6570\uFF0C\u5176\u8FD4\u56DE\u503C\u4E0D\u662F\u4E00\u4E2A\u5408\u6CD5\u5BF9\u8C61"));
                      return false;
                  }
              };
              if (page_2) {
                  debug$1$1(function () { return '[APPX] CubePagePluginShare::startShareToAlipayContact page found'; });
                  var pageShareAppMessage = page_2.getPageLogicInstance().publicInstance.onShareAppMessage;
                  // const globalShareAppMessage = runtime.getApp().publicInstance.onShareAppMessage;
                  try {
                      var shareInfo_2;
                      var options = {
                          from: '',
                      };
                      var dataSource = getPageOnShareEventDataSource(event);
                      if (dataSource) {
                          var from = dataSource.from, target = dataSource.target;
                          if (target && target.tagName === 'button') {
                              options.target = target;
                              options.from = 'button';
                          }
                          else if (from) {
                              options.from = from;
                          }
                          // todo: webviewUrl?
                      }
                      // todo: onShareAppMessage 若在 page 上未定义，则需要尝试从 app 上取 onShareAppMessage
                      var pageShareAppMessageIsFunction = typeof pageShareAppMessage === 'function';
                      if (pageShareAppMessageIsFunction) {
                          debug$1$1(function () { return '[APPX] CubePagePluginShare::startShareToAlipayContact Use Page.onShareAppMessage'; });
                          shareInfo_2 = pageShareAppMessage.call(page_2.getPageLogicInstance().publicInstance, options);
                      }
                      else {
                          // 用户未设置时，默认分享提交
                          shareInfo_2 = {};
                      }
                      if (validate4ShareInfo_1(shareInfo_2, page_2.pagePath)) {
                          if ('then' in shareInfo_2 && typeof shareInfo_2.then === 'function') {
                              shareInfo_2
                                  .then(function (res) {
                                  shareInfo_2 = res;
                                  if (validate4ShareInfo_1(shareInfo_2, page_2.pagePath)) {
                                      _this.performShareToAlipayContact(shareInfo_2, callback);
                                  }
                              })
                                  .catch(function (err) {
                                  console.warn('onShareAppMessage error', err); // tslint:disable-line
                              });
                          }
                          else {
                              this.performShareToAlipayContact(shareInfo_2, callback);
                          }
                      }
                  }
                  catch (err) {
                      debug$1$1(function () { return "[APPX] CubePagePluginShare::startShareToAlipayContact error(".concat(err && err.message, ")"); });
                  }
              }
          }
          // 没进bridge调用的都到这里来
          if (typeof callback === 'function') {
              callback();
          }
      };
      return SharedPagePluginShare;
  }());
  function logShare(appInstanceId, appId, pagePath, pageToken, channelName, shareResult) {
      var runtime = getRuntimeById(appInstanceId);
      var bridge = runtime.getBridge();
      if (bridge) {
          var param4 = escapeLogParams({
              SDKVersion: kAppxVersion,
              appx_page_token: pageToken,
              channel: channelName,
              shareResult: shareResult,
          });
          bridge.callBridge('remoteLog', __assign(__assign({}, getAutoTrackerConfig(appId, pagePath)), { actionId: 'auto_share', param4: param4 }));
      }
  }

  function isRouterAccessible(thisProviderInfo, base) {
      if (thisProviderInfo.providerType !== base.providerType) {
          return false;
      }
      if (thisProviderInfo.providerType === 1 /* EZRuntimeLinkedInstanceOption4ProviderType.MiniExtension */ &&
          base.providerType === 1 /* EZRuntimeLinkedInstanceOption4ProviderType.MiniExtension */ &&
          thisProviderInfo.miniExtensionId !== base.miniExtensionId) {
          return false;
      }
      return true;
  }
  /**
   *
   * @param pageProviderInfo 所在页面
   * @param thisProviderInfo 所有权：当前this是自定义组件还是页面的
   * @param base 跳转基准
   */
  function createRouter(page, thisProviderInfo, base) {
      /**
       * | usage                      | pageProviderInfo | thisProviderInfo   | base               | avaliable                              | bridgeScope |
       * | ---                        | ---              | ---                | ---                | ok                                     | ---         |
       * | pageThis.router            | app              | app-page           | app-page           | ok                                     | app         |
       * | pageThis.pageRouter        | app              | app-page           | app-page           | ok                                     | app         |
       * | pageThis.router            | pluginA          | pluginA-page       | pluginA-page       | ok                                     | pluginA     |
       * | pageThis.pageRouter        | pluginA          | pluginA-page       | pluginA-page       | ok                                     | pluginA     |
       * | componentThis.router       | app              | app-component      | app-component      | ok                                     | app         |
       * | componentThis.pageRouter   | app              | app-component      | app-page           | ok                                     | app         |
       * | componentThis.router       | app              | pluginA-component  | pluginA-component  | ok                                     | pluginA     |
       * | componentThis.pageRrouter  | app              | pluginA-component  | app-page           | deny(base.domain !== this.domain)      | ×           |
       * | componentThis.router       | pluginA          | app-component      | app-component      | ok                                     | app         |
       * | componentThis.pageRrouter  | pluginA          | app-component      | pluginA-page       | deny(base.domain !== this.domain)      | ×           |
       * | componentThis.router       | pluginA          | pluginA-component  | pluginA-component  | ok                                     | pluginA     |
       * | componentThis.pageRrouter  | pluginA          | pluginA-component  | pluginA-page       | ok                                     | pluginA     |
       * | componentThis.router       | pluginA          | pluginB-component  | pluginB-component  | ok                                     | pluginB     |
       * | componentThis.pageRrouter  | pluginA          | pluginB-component  | pluginA-page       | deny(base.domain !== this.domain)      | ×           |
       */
      var resolvedPath = base.resolvedPath;
      var bridgeScope = getRuntimeById(page.appInstanceId)
          .getBridge()
          .getScopeByProviderInfo(thisProviderInfo);
      if (!isRouterAccessible(thisProviderInfo, base)) {
          return null;
      }
      return {
          navigateBack: function (opt) {
              bridgeScope.call4PublicNamed('navigateBack', opt, undefined, page.pageId);
          },
          navigateTo: function (opt) {
              bridgeScope.call4PublicNamed('navigateTo', __assign(__assign({}, opt), { resolvedPath: resolvedPath }), undefined, page.pageId);
          },
          reLaunch: function (opt) {
              bridgeScope.call4PublicNamed('reLaunch', __assign(__assign({}, opt), { resolvedPath: resolvedPath }), undefined, page.pageId);
          },
          redirectTo: function (opt) {
              bridgeScope.call4PublicNamed('redirectTo', __assign(__assign({}, opt), { resolvedPath: resolvedPath }), undefined, page.pageId);
          },
          switchTab: function (opt) {
              bridgeScope.call4PublicNamed('switchTab', __assign(__assign({}, opt), { resolvedPath: resolvedPath }), undefined, page.pageId);
          },
      };
  }

  function noop$1() { }
  var PageFlexibleLogicInstance = /** @class */ /*#__PURE__*/ (function () {
      function PageFlexibleLogicInstance(page) {
          this.readyTaskList = [];
          this.page = page;
          this.pagePath = page.pagePath;
          this.pageId = page.pageId;
          this.publicInstance = createPageLogicPublicInstance(this);
          this.isReady = false;
      }
      PageFlexibleLogicInstance.prototype.router = function () {
          if (this._router === undefined) {
              this._router = createRouter(this.page, this.page.getProviderInfo(), this.page.getProviderInfo());
          }
          return this._router;
      };
      PageFlexibleLogicInstance.prototype.pageRouter = function () {
          return this.router();
      };
      PageFlexibleLogicInstance.prototype.getProviderInfo = function () {
          return this.page.getProviderInfo();
      };
      PageFlexibleLogicInstance.prototype.bootstrap = function (tabProps) {
          debug$1$1(function () { return '[APPX] PageLogicBaseInstance bootstrap'; });
          // 1. 通知 coordinator 可以进行实例初始化，但是别进行 data 渲染
          var page = this.page;
          var renderer = page.renderer;
          renderer.onInit();
          var runtime = getRuntimeById(this.page.appInstanceId);
          // onShow 之前创建 customize-tab-bar logics，确保 onShow 里 getTabBar() 可以拿到
          var hostRender = renderer;
          if (hostRender.initTabBarLogicInstance) {
              hostRender.initTabBarLogicInstance();
          }
          var appBehavior = runtime.getMeta().getAppBehavior();
          var decodeQuery = true;
          if (appBehavior &&
              appBehavior["decodeQuery" /* ESharedAppMetaBehaviorMapValue.DecodeQuery */] === "disable" /* ESharedDecodeQueryBehaviorType.Disable */) {
              decodeQuery = false;
          }
          var query = {};
          var pageQueryString = page.getQuery();
          if (pageQueryString) {
              query = parse(pageQueryString, {
                  decode: decodeQuery,
              });
          }
          page.setState("Loaded" /* EPageLifecycleState.LOADED */, {
              query: query,
              tabProps: tabProps,
          });
          // 2. onLoad/onShow 期间的 setData 不响应 flush
          // 2. data 更新完毕，通知 coordinator 可以进行首屏完整数据渲染, 指令发送完成后，清空 initing 回调队列
          renderer.onMount(this.publicInstance.data);
          // 页面渲准备完成，开始触发占位组件相关的逻辑
          this.ready();
      };
      PageFlexibleLogicInstance.prototype.dispose = function () {
          this.disposed = true;
          this.setData = noop$1;
      };
      /* EAppxCoreHelperSetDataType 编译错误 */
      PageFlexibleLogicInstance.prototype.setData = function (type, diff, callback, hidden4User) {
          var publicInstance = this.publicInstance;
          var renderer = this.page.renderer;
          var newData = setDataByType(type, publicInstance.data, diff);
          if (!hidden4User) {
              publicInstance.data = newData;
          }
          // // 2. 由 coordinator 决定异步更新策略
          renderer.pushData(0, type, diff, callback);
      };
      PageFlexibleLogicInstance.prototype.batchedUpdates = function (callback) {
          this.page.renderer.batchedUpdates(callback);
      };
      PageFlexibleLogicInstance.prototype.invokeLifeCycle = function (method, arg) {
          this.invokePublicMethod(method, arg);
      };
      PageFlexibleLogicInstance.prototype.invokeEventMethod = function (name, payload) {
          var events = this.publicInstance.events;
          var method = events && events[name];
          if (
              name !== 'onLoad' &&
              name !== 'onShow' &&
              name !== 'onHide' &&
              name !== 'onReady') {
              debug$1$1(function () { return "[APPX] PageLogicBaseInstance::invokeEventsMethod ".concat(name, ":").concat(typeof method === 'function'); });
          }
          if (typeof method === 'function') {
              var renderer = this.page.renderer;
              renderer.enterBatching();
              try {
                  method.call(this.publicInstance, payload);
              }
              catch (ex) {
                  reportHostError(this.page.appInstanceId, 13 /* ESharedAppxSpecificErrorCode.HostUserError */, ex, "[APPX][Page] ".concat(this.pagePath, "/").concat(this.pageId, " CallMethod error"));
              }
              renderer.exitBatching();
          }
      };
      PageFlexibleLogicInstance.prototype.invokePublicMethod = function (name, payload) {
          var method = this.publicInstance[name];
          debug$1$1(function () { return "[APPX] PageLogicBaseInstance::invokePublicMethod ".concat(name, ":").concat(typeof method === 'function'); });
          if (typeof method === 'function') {
              var renderer = this.page.renderer;
              renderer.enterBatching();
              var result = void 0;
              try {
                  result = method.call(this.publicInstance, payload);
              }
              catch (ex) {
                  reportHostError(this.page.appInstanceId, 13 /* ESharedAppxSpecificErrorCode.HostUserError */, ex, "[APPX][Page] ".concat(this.pagePath, "/").concat(this.pageId, " CallMethod error"));
              }
              renderer.exitBatching();
              return result;
          }
      };
      PageFlexibleLogicInstance.prototype.invokeMethod = function (name, args) {
          var method = this.publicInstance[name];
          debug$1$1(function () { return "[APPX] PageLogicBaseInstance::invokeMethod ".concat(name, ":").concat(typeof method === 'function'); });
          if (typeof method === 'function') {
              var renderer = this.page.renderer;
              renderer.enterBatching();
              var result = void 0;
              try {
                  result = method.apply(this.publicInstance, args);
              }
              catch (ex) {
                  reportHostError(this.page.appInstanceId, 13 /* ESharedAppxSpecificErrorCode.HostUserError */, ex, "[APPX][Page] ".concat(this.pagePath, "/").concat(this.pageId, " CallMethod error"));
              }
              renderer.exitBatching();
              return result;
          }
      };
      /**
       * 懒加载插件，加载成功之后出发的回掉
       * @param diff
       * @param callback
       */
      PageFlexibleLogicInstance.prototype.setPlaceholderComponentReady = function (data, callback) {
          this.setData(1 /* EAppxCoreHelperSetDataType.SetData */, data, callback, true);
      };
      PageFlexibleLogicInstance.prototype.onReady = function (callback) {
          if (this.isReady) {
              callback();
          }
          else {
              this.readyTaskList.push(callback);
          }
      };
      PageFlexibleLogicInstance.prototype.ready = function () {
          this.isReady = true;
          var tasks = this.readyTaskList.slice();
          tasks.map(function (task) { return task(); });
          this.readyTaskList.length = 0;
      };
      return PageFlexibleLogicInstance;
  }());
  var pageFlexibleLogicImpl = PageFlexibleLogicInstance;
  function createPageFlexibleLogicInstance(page) {
      var instance = new pageFlexibleLogicImpl(page);
      return instance;
  }
  var PageFlexibleLogicInstanceMethodInteceptor;
  function getPageFlexibleLogicInstanceMethodInteceptor() {
      if (!PageFlexibleLogicInstanceMethodInteceptor) {
          PageFlexibleLogicInstanceMethodInteceptor = createClassMethodInteceptor(PageFlexibleLogicInstance);
      }
      return PageFlexibleLogicInstanceMethodInteceptor;
  }

  function getComponentInitialConfig(registry, pagePath, needDefaultData, needSyncLifecycle) {
      var _a;
      var componentDep = registry.getPageLogicComponentDep(pagePath);
      var componentDef = {};
      if (componentDep) {
          // 这里 useDeepFirstKeyForPage = true/false 不影响
          var keys = getAllComponentKeys4PagePath(registry, pagePath, false);
          for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
              var componentIs = keys_1[_i];
              var componentLogicOption = registry.getComponentLogicOptionMergedMixin(componentIs);
              var optionVirtualHost = (_a = componentLogicOption.options) === null || _a === void 0 ? void 0 : _a.virtualHost;
              componentDef[componentIs] = [
                  getComponentLifecycleHookRequirement(componentLogicOption.onInit && needSyncLifecycle, componentLogicOption.deriveDataFromProps && needSyncLifecycle, componentLogicOption.didMount, componentLogicOption.didUpdate, componentLogicOption.didUnmount, needSyncLifecycle, typeof optionVirtualHost === 'boolean', !optionVirtualHost),
                  getProtectedProperty(componentLogicOption.props, false, registry.getAppInstanceId(), componentIs),
                  /**
                   * FIXME: 已知问题
                   * component1 simple 模式下，initData 的触发顺序是按照 Dep Object.keys
                   * component1 RA 模式下，initData 是按照 HostTree 创建顺序
                   * 如果是函数，则会有问题
                   */
                  needDefaultData
                      ? getProtectedProperty(componentLogicOption.data, false, registry.getAppInstanceId(), componentIs)
                      : null ];
          }
      }
      return componentDef;
  }
  /**
   * 动态插件加载之后更新 all-components
   *
   * ${pagePath} 已经加载了 ${keys} 需要继续加载 ${miniExtensionId}
   */
  function getComponentInitialConfigFromMiniExtension(registry, miniExtensionId, needDefaultData, needSyncLifecycle) {
      var _a;
      var keys = getAllComponentKeys4DynamicMiniExtension(registry, miniExtensionId) || [];
      var length = keys.length;
      var miniExtensionComponentDef = {};
      for (var i = 0; i < length; i++) {
          var componentIs = keys[i];
          var componentLogicOption = registry.getComponentLogicOptionMergedMixin(componentIs);
          var optionVirtualHost = (_a = componentLogicOption.options) === null || _a === void 0 ? void 0 : _a.virtualHost;
          miniExtensionComponentDef[componentIs] = [
              getComponentLifecycleHookRequirement(componentLogicOption.onInit && needSyncLifecycle, componentLogicOption.deriveDataFromProps && needSyncLifecycle, componentLogicOption.didMount, componentLogicOption.didUpdate, componentLogicOption.didUnmount, needSyncLifecycle, typeof optionVirtualHost === 'boolean', !optionVirtualHost),
              componentLogicOption.props,
              needDefaultData ? componentLogicOption.data : null ];
      }
      return { keys: keys, miniExtensionComponentDef: miniExtensionComponentDef };
  }
  function getAllComponentKeys4DynamicMiniExtension(registry, miniExtensionId) {
      var resultKeys = [];
      var miniExtensionConfig = registry.getConfig4MiniExtensionById(miniExtensionId.value);
      if (!miniExtensionConfig) {
          // 插件信息没加载到，但是依赖了插件
          return resultKeys;
      }
      var allComponentsInfo = miniExtensionConfig.allComponentsInfo;
      var publicConfig = miniExtensionConfig.publicConfig;
      if (!publicConfig) {
          // 插件编译的产物要有的，但是不存在
          return resultKeys;
      }
      var publicName2Config = publicConfig.publicName2Config;
      if (!publicName2Config) {
          // 插件编译的产物要有的，但是不存在
          return resultKeys;
      }
      var componentNames = publicName2Config.componentNames, components = publicName2Config.components;
      if (componentNames && components) {
          var visitedKeys = createSet();
          var _loop_1 = function (componentName) {
              var componentConfig = components[componentName];
              if (!componentConfig) {
                  debug$1$1(function () { return "[APPX][Component] plugin ".concat(miniExtensionId.value, " does not have public component ").concat(componentName); });
                  return "continue";
              }
              var privatePath = componentConfig.pluginPrivatePath;
              if (privatePath) {
                  var allInfo = allComponentsInfo && allComponentsInfo[privatePath];
                  if (allInfo) {
                      var keys = allInfo.deepFirstKeys || allInfo.keys;
                      if (keys) {
                          for (var _a = 0, keys_2 = keys; _a < keys_2.length; _a++) {
                              var key = keys_2[_a];
                              if (!visitedKeys.has(key)) {
                                  visitedKeys.add(key);
                                  resultKeys.push(key);
                              }
                          }
                      }
                  }
                  if (!visitedKeys.has(privatePath)) {
                      visitedKeys.add(privatePath);
                      resultKeys.push(privatePath);
                  }
              }
          };
          for (var _i = 0, componentNames_1 = componentNames; _i < componentNames_1.length; _i++) {
              var componentName = componentNames_1[_i];
              _loop_1(componentName);
          }
      }
      return resultKeys;
  }
  function getAllComponentKeys4PagePath(registry, pagePath, useDeepFirstKeyForPage) {
      var componentDep = registry.getPageLogicComponentDep(pagePath);
      var keys = useDeepFirstKeyForPage ? componentDep.deepFirstKeys || componentDep.keys : componentDep.keys;
      var miniExtensionIdList = componentDep.miniExtensionIdList, miniExtensionId2ComponentList = componentDep.miniExtensionId2ComponentList;
      if (miniExtensionIdList && miniExtensionId2ComponentList) {
          var keysSet = createSet();
          for (var _i = 0, keys_3 = keys; _i < keys_3.length; _i++) {
              var key = keys_3[_i];
              keysSet.add(key);
          }
          var _loop_2 = function (miniExtensionId) {
              // 所有用过的静态插件合并信息
              var miniExtensionConfig = registry.getConfig4MiniExtensionById(miniExtensionId);
              if (!miniExtensionConfig) {
                  return "continue";
              }
              var publicConfig = miniExtensionConfig.publicConfig;
              if (!publicConfig) {
                  return "continue";
              }
              var publicName2Config = publicConfig.publicName2Config;
              if (!publicName2Config) {
                  return "continue";
              }
              var miniExtensionPublicComponents = publicName2Config.components;
              var miniExtensionAllComponents = miniExtensionConfig.allComponentsInfo;
              var usedMiniExtensionPublicComponents = miniExtensionId2ComponentList[miniExtensionId];
              if (usedMiniExtensionPublicComponents) {
                  var _loop_3 = function (publicComponent) {
                      var componentConfig = miniExtensionPublicComponents[publicComponent];
                      if (!componentConfig) {
                          debug$1$1(function () { return "[APPX][Component] plugin ".concat(miniExtensionId, " does not have public component ").concat(publicComponent); });
                          return "continue";
                      }
                      // 所有用过的静态插件的组件合并信息
                      var pluginPrivatePath = componentConfig.pluginPrivatePath;
                      keysSet.add(pluginPrivatePath);
                      // 要递归去查这个组件依赖了谁，继续合并
                      if (miniExtensionAllComponents) {
                          var currentComponentsDep = miniExtensionAllComponents[pluginPrivatePath];
                          if (currentComponentsDep) {
                              var currentComponentsDepKeys = currentComponentsDep.deepFirstKeys || currentComponentsDep.keys;
                              if (currentComponentsDepKeys) {
                                  for (var _c = 0, currentComponentsDepKeys_1 = currentComponentsDepKeys; _c < currentComponentsDepKeys_1.length; _c++) {
                                      var currentComponentsDepKey = currentComponentsDepKeys_1[_c];
                                      keysSet.add(currentComponentsDepKey);
                                  }
                              }
                          }
                      }
                  };
                  for (var _b = 0, usedMiniExtensionPublicComponents_1 = usedMiniExtensionPublicComponents; _b < usedMiniExtensionPublicComponents_1.length; _b++) {
                      var publicComponent = usedMiniExtensionPublicComponents_1[_b];
                      _loop_3(publicComponent);
                  }
              }
          };
          // 合并静态插件内的 allComponents
          for (var _a = 0, miniExtensionIdList_1 = miniExtensionIdList; _a < miniExtensionIdList_1.length; _a++) {
              var miniExtensionId = miniExtensionIdList_1[_a];
              _loop_2(miniExtensionId);
          }
          // 赋值给 keys
          keys = [];
          keysSet.forEach(function (i) { return keys.push(i); });
      }
      return keys;
  }
  function getComponentLifecycleHookRequirement(onInit, deriveDataFromProps, didMount, didUpdate, didUnmount, saveRef, optionsVirtualHost, nonVirtual) {
      // tslint:disable no-bitwise
      return ((onInit ? 1 /* EComponentHostSideRequirement.onInit */ : 0) |
          (deriveDataFromProps ? 2 /* EComponentHostSideRequirement.deriveDataFromProps */ : 0) |
          (didMount ? 4 /* EComponentHostSideRequirement.didMount */ : 0) |
          (didUpdate ? 8 /* EComponentHostSideRequirement.didUpdate */ : 0) |
          (didUnmount ? 16 /* EComponentHostSideRequirement.didUnmount */ : 0) |
          (saveRef ? 32 /* EComponentHostSideRequirement.saveRef */ : 0) |
          (optionsVirtualHost ? 64 /* EComponentHostSideRequirement.optionsVirtualHost */ : 0) |
          (nonVirtual ? 128 /* EComponentHostSideRequirement.nonVirtual */ : 0) |
          0);
      // tslint:enable no-bitwise
  }

  function setDataWhenDisposed(type) {
      var packageAndRunSceneType = getRuntimeById(this.page.appInstanceId).getEnv().packageAndRunSceneType;
      if (isConsoleAvaliableToDeveloper(packageAndRunSceneType)) {
          var setDataType = type === 1 /* EAppxCoreHelperSetDataType.SetData */ ? 'setData(...)' : '$spliceData(...)';
          // tslint:disable-next-line
          console.warn("".concat(setDataType, " can only update a mounted component. This usually means you called ").concat(setDataType, " on a unmounted component. Please check the code for the \"").concat(this.componentPath, "\" component of \"").concat(this.page.pagePath, "\" page."));
      }
  }
  function addComponentFlexibleLogicInstanceState(current, next) {
      // tslint:disable-next-line no-bitwise
      return current | next;
  }
  function hasComponentFlexibleLogicInstanceState(current, expect) {
      // tslint:disable-next-line no-bitwise
      return current & expect;
  }
  var ComponentFlexibleLogicInstance = /** @class */ /*#__PURE__*/ (function () {
      function ComponentFlexibleLogicInstance(componentPath, page, uid, parentComponentId, initProps, fixedPropKeys, needMessageClone, fixedNonEventSize) {
          if (fixedNonEventSize === void 0) { fixedNonEventSize = fixedPropKeys.length; }
          this.step = 1 /* ESharedAppxFlexibleComplexComponentStep.Normal */;
          this.componentPath = componentPath;
          this.page = page;
          this.id = uid;
          this.state = 0;
          this.parentComponentId = parentComponentId;
          this.publicOptions = getRegistryByRuntimeId(this.page.appInstanceId).getComponentLogicOptionMergedMixin(this.componentPath);
          if (isPluginPrivateProtocolPath(componentPath)) {
              var res = get_extensionId_resolvedPath({
                  type: 0 /* EMiniExtensionStringType.plugin_private_$_id_$_resolved_path */,
                  value: componentPath,
              });
              if (res) {
                  this.providerInfo = createProviderInfo4MiniExtension(res.extensionId.value, res.resolvedPath.value);
              }
              else {
                  this.providerInfo = createProviderInfo4MainApp(componentPath);
              }
          }
          else {
              this.providerInfo = createProviderInfo4MainApp(componentPath);
          }
          this.pagePublicInstance = this.page.getPagePublicInstanceForComponent(this.providerInfo);
          var publicInstance = (this.publicInstance = createComponentLogicPublicInstance(this, false, !needMessageClone, this.providerInfo));
          publicInstance.data = __assign({}, publicInstance.data);
          this.prevData = publicInstance.data;
          this.needMessageClone = needMessageClone;
          this.fixedPropKeys = fixedPropKeys;
          this.fixedNonEventSize = fixedNonEventSize;
          this.initPublicInstanceProps(initProps, this.publicInstance.props, fixedPropKeys, fixedNonEventSize, needMessageClone);
      }
      ComponentFlexibleLogicInstance.prototype.router = function () {
          if (this._router === undefined) {
              this._router = createRouter(this.page, this.providerInfo, this.providerInfo);
          }
          return this._router;
      };
      ComponentFlexibleLogicInstance.prototype.pageRouter = function () {
          if (isRouterAccessible(this.providerInfo, this.page.getProviderInfo())) {
              return this.page.getPageLogicInstance().pageRouter();
          }
          else {
              return null;
          }
      };
      ComponentFlexibleLogicInstance.prototype.getProviderInfo = function () {
          return this.providerInfo;
      };
      ComponentFlexibleLogicInstance.prototype.onComponentInit = function (initLifeHook, deriveDataFromPropsLifeHook) {
          this.nextProps = this.publicInstance.props;
          if (initLifeHook || deriveDataFromPropsLifeHook) {
              this.step = 0 /* ESharedAppxFlexibleComplexComponentStep.Initing */;
              if (initLifeHook) {
                  this.invokeLifecycle('onInit');
              }
              if (deriveDataFromPropsLifeHook) {
                  this.invokeLifecycle('deriveDataFromProps', [this.nextProps]);
              }
              this.step = 1 /* ESharedAppxFlexibleComplexComponentStep.Normal */;
          }
          this.prevData = this.publicInstance.data;
      };
      ComponentFlexibleLogicInstance.prototype.onComponentDeriveData = function (partialProps, propsDiffMap, deriveDataFromPropsLifeHook) {
          // 计算出 nextProps 后，在 onComponentUpdated 时便可直接复用
          if (partialProps && propsDiffMap) {
              var nextProps = (this.nextProps = __assign({}, this.publicInstance.props));
              var fixedPropKeys = this.fixedPropKeys;
              var fixedNonEventSize = this.fixedNonEventSize;
              var propIndex = 0;
              var propWithEventSize = fixedPropKeys.length;
              for (; propIndex < fixedNonEventSize; propIndex += 1) {
                  var nonEventPropKey = fixedPropKeys[propIndex];
                  if (propsDiffMap[nonEventPropKey]) {
                      nextProps[nonEventPropKey] = partialProps[nonEventPropKey];
                  }
              }
              if (propIndex < propWithEventSize) {
                  var eventProxy = this.eventProxy;
                  for (; propIndex < propWithEventSize; propIndex += 1) {
                      var eventPropKey = fixedPropKeys[propIndex];
                      if (propsDiffMap[eventPropKey]) {
                          eventProxy[eventPropKey] = partialProps[eventPropKey];
                      }
                  }
              }
          }
          if (deriveDataFromPropsLifeHook) {
              this.step = 2 /* ESharedAppxFlexibleComplexComponentStep.Deriving */;
              this.invokeLifecycle('deriveDataFromProps', [this.nextProps]);
              this.step = 1 /* ESharedAppxFlexibleComplexComponentStep.Normal */;
          }
      };
      ComponentFlexibleLogicInstance.prototype.onComponentRefBind = function (refMethod) {
          var parentComponent = this.page.logics[this.parentComponentId];
          if (parentComponent) {
              parentComponent.invokePublicMethod(refMethod, this.getPublicRef(parentComponent.getProviderInfo()));
          }
      };
      ComponentFlexibleLogicInstance.prototype.onComponentMounted = function () {
          this.invokeLifecycle('didMount');
      };
      ComponentFlexibleLogicInstance.prototype.onComponentLink = function (initProps, fixedPropKeys, fixedNonEventSize) {
          var needMessageClone = this.needMessageClone;
          var nextProps = getProtectedProperty(this.publicOptions.props, true, this.page.appInstanceId, this.componentPath);
          this.fixedPropKeys = fixedPropKeys;
          this.fixedNonEventSize = fixedNonEventSize;
          this.publicInstance.props = nextProps;
          this.initPublicInstanceProps(initProps, nextProps, fixedPropKeys, fixedNonEventSize, needMessageClone);
      };
      ComponentFlexibleLogicInstance.prototype.onComponentUpdated = function (partialProps) {
          var prevProps = this.publicInstance.props;
          var nextProps = this.nextProps;
          if (!nextProps) {
              if (partialProps) {
                  nextProps = __assign({}, prevProps);
                  if (partialProps) {
                      var fixedPropKeys = this.fixedPropKeys;
                      var fixedNonEventSize = this.fixedNonEventSize;
                      var propIndex = 0;
                      var propWithEventSize = fixedPropKeys.length;
                      for (; propIndex < fixedNonEventSize; propIndex += 1) {
                          var nonEventPropKey = fixedPropKeys[propIndex];
                          var value = partialProps[nonEventPropKey];
                          if (value !== undefined) {
                              nextProps[nonEventPropKey] = value;
                          }
                      }
                      if (propIndex < propWithEventSize) {
                          var eventProxy = this.eventProxy;
                          for (; propIndex < propWithEventSize; propIndex += 1) {
                              var eventPropKey = fixedPropKeys[propIndex];
                              var value = partialProps[eventPropKey];
                              if (value !== undefined) {
                                  eventProxy[eventPropKey] = value;
                              }
                          }
                      }
                  }
              }
              else {
                  nextProps = this.publicInstance.props;
              }
          }
          var dataBeforeDidUpdate = this.publicInstance.data;
          var prevDataBeforeDidUpdate = this.prevData;
          var dataChangedBeforeDidUpdate = prevDataBeforeDidUpdate !== dataBeforeDidUpdate;
          var propsChanged = nextProps !== prevProps;
          if (propsChanged) {
              this.publicInstance.props = nextProps;
          }
          if (propsChanged || dataChangedBeforeDidUpdate) {
              this.invokeLifecycle('didUpdate', [prevProps, prevDataBeforeDidUpdate]);
          }
          var dataAfterDidUpdate = this.publicInstance.data;
          this.prevData = this.page.renderer.getPrevComponentData(prevDataBeforeDidUpdate, dataBeforeDidUpdate, dataAfterDidUpdate);
      };
      ComponentFlexibleLogicInstance.prototype.onComponentBeforeDestroy = function (noDidUnmount) {
          var state = this.state;
          if (!hasComponentFlexibleLogicInstanceState(state, 1 /* EComponentFlexibleLogicInstanceState.Destroy */)) {
              this.state = addComponentFlexibleLogicInstanceState(state, 1 /* EComponentFlexibleLogicInstanceState.Destroy */);
              this.dispose();
              if (!noDidUnmount) {
                  this.invokeLifecycle('didUnmount');
              }
          }
      };
      ComponentFlexibleLogicInstance.prototype.getPublicRef = function (targetProviderInfo) {
          var customRef;
          if (this.publicOptions.ref) {
              var state = this.state;
              if (!hasComponentFlexibleLogicInstanceState(state, 2 /* EComponentFlexibleLogicInstanceState.Ref */)) {
                  this.state = addComponentFlexibleLogicInstanceState(state, 2 /* EComponentFlexibleLogicInstanceState.Ref */);
                  this.customRef = this.invokeLifecycle('ref');
              }
              customRef = this.customRef;
          }
          else {
              customRef = isProviderInfoSameOrigin(targetProviderInfo, this.providerInfo) ? this.publicInstance : null;
          }
          return customRef;
      };
      ComponentFlexibleLogicInstance.prototype.invokePublicMethod = function (method, arg) {
          return this.invokeMethod(method, [arg]);
      };
      ComponentFlexibleLogicInstance.prototype.invokePageEventToComponent = function (event, payload) {
          var _this = this;
          debug$1$1(function () {
              return "[APPX] ComponentLogicBaseInstance::invokePageEventToComponent ".concat(event, ":").concat(_this.publicOptions.pageEvents && typeof _this.publicOptions.pageEvents[event] === 'function');
          });
          var pageEvents = this.publicOptions.pageEvents;
          var fn = pageEvents && pageEvents[event];
          if (typeof fn === 'function') {
              var renderer = this.page.renderer;
              renderer.enterBatching();
              try {
                  fn.call(this.publicInstance, payload);
              }
              catch (ex) {
                  reportHostError(this.page.appInstanceId, 13 /* ESharedAppxSpecificErrorCode.HostUserError */, ex, "[APPX][Component] ".concat(this.componentPath, "/").concat(this.id, " CallPageEvent error"));
              }
              renderer.exitBatching();
          }
      };
      ComponentFlexibleLogicInstance.prototype.invokeMethod = function (method, args) {
          var fn = this.publicInstance[method];
          debug$1$1(function () { return "[APPX] ComponentLogicBaseInstance::invokeMethod ".concat(method, ":").concat(typeof fn === 'function'); });
          if (typeof fn === 'function') {
              var renderer = this.page.renderer;
              renderer.enterBatching();
              var result = void 0;
              try {
                  result = fn.apply(this.publicInstance, args);
              }
              catch (ex) {
                  var onError = this.publicOptions.onError;
                  if (onError && typeof onError === 'function') {
                      try {
                          onError.call(this.publicInstance, ex, method);
                      }
                      catch (ee) { }
                  }
                  invokeComponentError(this.page.appInstanceId, ex, method, this.publicInstance);
                  reportHostError(this.page.appInstanceId, 13 /* ESharedAppxSpecificErrorCode.HostUserError */, ex, "[APPX][Component] ".concat(this.componentPath, "/").concat(this.id, " CallMethod error"));
              }
              renderer.exitBatching();
              return result;
          }
      };
      ComponentFlexibleLogicInstance.prototype.invokeLifecycle = function (method, args) {
          var _this = this;
          debug$1$1(function () {
              return "[APPX] ComponentLogicBaseInstance::invokeLifecycle ".concat(method, ":").concat(typeof _this.publicOptions[method] === 'function');
          });
          var fn = this.publicOptions[method];
          var result;
          if (typeof fn === 'function') {
              var renderer = this.page.renderer;
              renderer.enterBatching();
              try {
                  if (args) {
                      result = fn.apply(this.publicInstance, args);
                  }
                  else {
                      result = fn.call(this.publicInstance);
                  }
              }
              catch (ex) {
                  var onError = this.publicOptions.onError;
                  if (onError && typeof onError === 'function') {
                      try {
                          onError.call(this.publicInstance, ex, method);
                      }
                      catch (ee) { }
                  }
                  invokeComponentError(this.page.appInstanceId, ex, method, this.publicInstance);
                  reportHostError(this.page.appInstanceId, 13 /* ESharedAppxSpecificErrorCode.HostUserError */, ex, "[APPX][Component] ".concat(this.componentPath, "/").concat(this.id, " CallMethod error"));
              }
              renderer.exitBatching();
          }
          return result;
      };
      ComponentFlexibleLogicInstance.prototype.setData = function (type, diff, callback, hidden4User) {
          var publicInstance = this.publicInstance;
          var renderer = this.page.renderer;
          if (!renderer.component2) {
              this.prevData = publicInstance.data;
          }
          var newData = setDataByType(type, publicInstance.data, diff);
          if (!hidden4User) {
              publicInstance.data = newData;
          }
          renderer.pushData(this.id, type, diff, callback);
      };
      ComponentFlexibleLogicInstance.prototype.onReady = function (callback) {
          var pageLogic = this.page.logics[0];
          if (pageLogic) {
              pageLogic.onReady(callback);
          }
      };
      /**
       * 懒加载插件，加载成功之后出发的回掉
       * @param diff
       * @param callback
       */
      ComponentFlexibleLogicInstance.prototype.setPlaceholderComponentReady = function (data, callback) {
          this.setData(1 /* EAppxCoreHelperSetDataType.SetData */, data, callback, true);
      };
      ComponentFlexibleLogicInstance.prototype.dispose = function () {
          this.setData = setDataWhenDisposed;
      };
      ComponentFlexibleLogicInstance.prototype.onEventProxy = function (userEventPropKey) {
          var arguments$1 = arguments;

          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments$1[_i];
          }
          var mappedMethod = this.eventProxy[userEventPropKey];
          if (mappedMethod) {
              var page = this.page;
              var parentComponentId = this.parentComponentId;
              if (parentComponentId === 0) {
                  var parentComponent = page.logics[0];
                  if (parentComponent) {
                      return parentComponent.invokeMethod(mappedMethod, args);
                  }
              }
              else {
                  var parentComponent = page.logics[parentComponentId];
                  if (parentComponent) {
                      return parentComponent.invokeMethod(mappedMethod, args);
                  }
              }
          }
      };
      ComponentFlexibleLogicInstance.prototype.initPublicInstanceProps = function (initProps, publicInstanceProps, fixedPropKeys, fixedNonEventSize, needMessageClone) {
          var this$1 = this;

          var propIndex = 0;
          var propWithEventSize = fixedPropKeys.length;
          if (needMessageClone) {
              while (propIndex < fixedNonEventSize) {
                  var nonEventPropKey = fixedPropKeys[propIndex++];
                  var value = initProps[nonEventPropKey];
                  if (value === undefined) ;
                  else {
                      publicInstanceProps[nonEventPropKey] = value && typeof value === 'object' ? simpleDeepCopy(value) : value;
                  }
              }
          }
          else {
              while (propIndex < fixedNonEventSize) {
                  var nonEventPropKey = fixedPropKeys[propIndex++];
                  var value = initProps[nonEventPropKey];
                  publicInstanceProps[nonEventPropKey] =
                      value === undefined
                          ? publicInstanceProps[nonEventPropKey] // component2 时要使得对象一定有此键
                          : value;
              }
          }
          // 之前绑定过或者有新绑定都要刷新下
          if (propIndex < propWithEventSize || this.eventProxy) {
              var eventProxy = (this.eventProxy = Object.create(null));
              for (; propIndex < propWithEventSize; propIndex++) {
                  var eventPropKey = fixedPropKeys[propIndex];
                  // 做一次本地映射
                  eventProxy[eventPropKey] = initProps[eventPropKey];
                  // 只做一次赋值的函数 proxy
                  publicInstanceProps[eventPropKey] = this$1.onEventProxy.bind(this$1, eventPropKey);
              }
          }
      };
      return ComponentFlexibleLogicInstance;
  }());
  var ComponentFlexibleLogicInstanceMethodInteceptor;
  function getComponentFlexibleLogicInstanceMethodInteceptor() {
      if (!ComponentFlexibleLogicInstanceMethodInteceptor) {
          ComponentFlexibleLogicInstanceMethodInteceptor = createClassMethodInteceptor(ComponentFlexibleLogicInstance);
      }
      return ComponentFlexibleLogicInstanceMethodInteceptor;
  }

  function getComponentFlexibleLogicInstance(componentPath, page, uid, parentComponentId, initProps, fixedPropKeys, needMessageClone, fixedNonEventSize) {
      if (fixedNonEventSize === void 0) { fixedNonEventSize = fixedPropKeys.length; }
      return new ComponentFlexibleLogicInstance(componentPath, page, uid, parentComponentId, initProps, fixedPropKeys, needMessageClone, fixedNonEventSize);
  }

  /**
   * 外部接收 PagePause/PageResume/PageUnload 事件，在 PageBaseInstance 级别统筹该状态的变更
   */
  var PageLifecycleManager = /** @class */ /*#__PURE__*/ (function () {
      function PageLifecycleManager(page) {
          this.state = "Inited" /* EPageLifecycleState.INITED */;
          this.readyTime = 0;
          this.state4RenderRefresh = false;
          this.page = page;
      }
      PageLifecycleManager.prototype.dispose = function () {
          this.page = null;
      };
      PageLifecycleManager.prototype.refresh = function () {
          this.state = "Inited" /* EPageLifecycleState.INITED */;
      };
      PageLifecycleManager.prototype.onPageNeedRenderRefresh = function () {
          // 原则上来讲，应该把 _NeedReRender 作为子状态来维护，先开一个 boolean 单独维护（以防临时需求变更）
          var currentState = this.state;
          if (currentState === "Readied" /* EPageLifecycleState.READIED */) {
              // 立即刷新
              this.state4RenderRefresh = true;
              this.hookOnRenderRefresh();
          }
          else if (currentState === "Loaded" /* EPageLifecycleState.LOADED */ ||
              currentState === "Hidden" /* EPageLifecycleState.HIDDEN */ ||
              currentState === "Hidden_NotReadied" /* EPageLifecycleState.HIDDEN_NOTREADIED */) {
              // 打标，等待达到 Readied 触发刷新
              this.state4RenderRefresh = true;
          }
      };
      PageLifecycleManager.prototype.onPageWillUnlaod = function () {
          switch (this.state) {
              case "Inited" /* EPageLifecycleState.INITED */:
              case "Loaded" /* EPageLifecycleState.LOADED */:
              case "Readied" /* EPageLifecycleState.READIED */:
              case "Hidden" /* EPageLifecycleState.HIDDEN */:
              case "Hidden_NotReadied" /* EPageLifecycleState.HIDDEN_NOTREADIED */:
                  this.setState("WILL_UNLOAD" /* EPageLifecycleState.WILL_UNLOAD */);
                  break;
          }
      };
      PageLifecycleManager.prototype.onPagePause = function () {
          switch (this.state) {
              case "Loaded" /* EPageLifecycleState.LOADED */:
                  this.setState("Hidden_NotReadied" /* EPageLifecycleState.HIDDEN_NOTREADIED */);
                  break;
              case "Readied" /* EPageLifecycleState.READIED */:
                  this.setState("Hidden" /* EPageLifecycleState.HIDDEN */);
                  break;
              case "Hidden" /* EPageLifecycleState.HIDDEN */:
              case "Hidden_NotReadied" /* EPageLifecycleState.HIDDEN_NOTREADIED */:
              case "Unloaded" /* EPageLifecycleState.UNLOADED */:
              case "Inited" /* EPageLifecycleState.INITED */:
              case "WILL_UNLOAD" /* EPageLifecycleState.WILL_UNLOAD */:
                  break;
              default:
                  throw getError4UnsupportedState(this.state, 'PagePause');
          }
      };
      PageLifecycleManager.prototype.onPageResume = function () {
          switch (this.state) {
              case "Hidden" /* EPageLifecycleState.HIDDEN */:
                  this.setState("Readied" /* EPageLifecycleState.READIED */);
                  break;
              case "Hidden_NotReadied" /* EPageLifecycleState.HIDDEN_NOTREADIED */:
                  this.setState("Loaded" /* EPageLifecycleState.LOADED */);
                  break;
              // 即便已经卸载也不能抛错
              // 考虑如下场景：
              // A redirectTo B
              // A 被卸载但 B 还没有被创建
              // 此时 onAppResume -> onPageResume
              // A 处于已卸载状态
          }
      };
      PageLifecycleManager.prototype.onPageUnload = function () {
          switch (this.state) {
              case "Inited" /* EPageLifecycleState.INITED */:
              case "Loaded" /* EPageLifecycleState.LOADED */:
              case "Readied" /* EPageLifecycleState.READIED */:
              case "Hidden" /* EPageLifecycleState.HIDDEN */:
              case "Hidden_NotReadied" /* EPageLifecycleState.HIDDEN_NOTREADIED */:
              case "WILL_UNLOAD" /* EPageLifecycleState.WILL_UNLOAD */:
                  this.setState("Unloaded" /* EPageLifecycleState.UNLOADED */);
                  return true;
              case "Unloaded" /* EPageLifecycleState.UNLOADED */:
                  return false;
              default:
                  throw getError4UnsupportedState(this.state, 'PageUnload');
          }
      };
      PageLifecycleManager.prototype.setState = function (nextState, payload) {
          this.setStateFromState(nextState, this.state, payload);
      };
      PageLifecycleManager.prototype.performLifeHook = function (lifecycleIndex, payload) {
          var _this = this;
          debug$1$1(function () {
              return "[APPX] PageLifecycleManager:perform ".concat(_this.page.pagePath, ": ").concat(getSharedAppxEventPageLifeCycleMethod(lifecycleIndex));
          });
          switch (lifecycleIndex) {
              case 0 /* ESharedAppxEvent.PageLifeCycleIndex.onLoad */:
                  this.hookBeforeOnLoad();
                  break;
              case 1 /* ESharedAppxEvent.PageLifeCycleIndex.onShow */:
                  this.hookBeforeOnShow();
                  break;
          }
          // 触发一下 onUnload
          // 做一下销毁的事情
          switch (lifecycleIndex) {
              case 0 /* ESharedAppxEvent.PageLifeCycleIndex.onLoad */:
              case 2 /* ESharedAppxEvent.PageLifeCycleIndex.onReady */:
              case 1 /* ESharedAppxEvent.PageLifeCycleIndex.onShow */:
              case 3 /* ESharedAppxEvent.PageLifeCycleIndex.onHide */:
                  this.page.invokePageEvent(getSharedAppxEventPageLifeCycleMethod(lifecycleIndex), 3 /* ISharedAppxPageBaseInstanceEventInvokeType.LegacyAndEvents */, payload);
                  break;
              default:
                  this.page
                      .getPageLogicInstance()
                      .invokeLifeCycle(getSharedAppxEventPageLifeCycleMethod(lifecycleIndex), payload);
                  break;
          }
          switch (lifecycleIndex) {
              case 0 /* ESharedAppxEvent.PageLifeCycleIndex.onLoad */:
                  this.hookAfterOnLoad();
                  break;
              case 3 /* ESharedAppxEvent.PageLifeCycleIndex.onHide */:
                  this.hookOnHide();
                  break;
              case 1 /* ESharedAppxEvent.PageLifeCycleIndex.onShow */:
                  this.hookAfterOnShow();
                  break;
              case 2 /* ESharedAppxEvent.PageLifeCycleIndex.onReady */:
                  this.hookOnReady();
                  break;
              case 4 /* ESharedAppxEvent.PageLifeCycleIndex.onUnload */:
                  this.hookOnUnload();
                  break;
          }
      };
      PageLifecycleManager.prototype.hookOnRenderRefresh = function () {
          if (this.state4RenderRefresh) {
              this.state4RenderRefresh = false;
              // 开始重渲染
              this.page.onPageRefresh();
          }
      };
      PageLifecycleManager.prototype.hookBeforeOnLoad = function () {
          var appInstanceId = this.page.appInstanceId;
          var runtime = getRuntimeById(appInstanceId);
          if (runtime) {
              runtime.getLogger().reportPV(this.page);
          }
      };
      PageLifecycleManager.prototype.hookAfterOnLoad = function () {
          var _a = this.page, appInstanceId = _a.appInstanceId, pageId = _a.pageId, pagePath = _a.pagePath;
          // 从启动参数中获得
          var runtime = getRuntimeById(appInstanceId);
          if (runtime.getNav().needBackHome()) {
              runtime.getBridge().callInternalAPI('showBackHome', undefined, undefined, pageId);
          }
          // setOptionMenu
          var meta = runtime.getMeta();
          var pageOptionMenu = meta.getPageConfig(pagePath, 'optionMenu');
          if (pageOptionMenu && typeof pageOptionMenu === 'object') {
              runtime.getBridge().defaultScope.call('setOptionMenu', __assign(__assign({}, pageOptionMenu), { viewId: pageId }));
          }
          var preloadRule = runtime.getMeta().getPreloadRuleByPage(pagePath);
          if (preloadRule) {
              // 分包预加载
              if (preloadRule.packages) {
                  runtime.getSubPackageManager().preloadPage(pagePath);
              }
              // 懒加载插件预加载
              if (preloadRule.plugins) {
                  runtime.getMiniExtensionManager().preloadPlugins(preloadRule);
              }
          }
          // if (preloadRule) {
          //   debug(() => `[APPX] loadSubPackage:hookAfterOnLoad ${pagePath}: ${JSON.stringify(preloadRule)}`);
          //   runtime.getBridge().callBridge('loadSubPackage', preloadRule, res => {
          //     debug(
          //       () => `[APPX] loadSubPackage:hookAfterOnLoad ${pagePath}: ${JSON.stringify(preloadRule)}, res is: ${res}`
          //     );
          //   });
          // }
      };
      PageLifecycleManager.prototype.hookOnHide = function () { };
      PageLifecycleManager.prototype.hookBeforeOnShow = function () {
          if (this.state === "Inited" /* EPageLifecycleState.INITED */) ;
      };
      PageLifecycleManager.prototype.hookAfterOnShow = function () {
          this.hookOnRenderRefresh();
      };
      PageLifecycleManager.prototype.hookOnReady = function () {
          info$1$1("[APPX][Page][Ready] path(".concat(this.page && this.page.pagePath, ")"));
          this.readyTime = Date.now();
          this.hookOnRenderRefresh();
          if (this.page.getIsFirstPage()) {
              var runtime = getRuntimeById(this.page.appInstanceId);
              var enablePrefetchAPI = runtime.getEnv().originalStartupParams.enablePrefetchAPI;
              if (enablePrefetchAPI === 'YES' || enablePrefetchAPI === 'yes') {
                  runtime.getLogger().reportPrefetch();
              }
          }
      };
      PageLifecycleManager.prototype.hookAfterOnLoadShow = function (tabProps) {
          if (tabProps) {
              this.page.onTabItemTap(tabProps);
          }
      };
      PageLifecycleManager.prototype.hookOnUnload = function () {
          info$1$1("[APPX][Page][Unload] path(".concat(this.page && this.page.pagePath, ")"));
          // 新的 state 还没更新，这里获取的就是 previousState
          if (this.state === "Hidden" /* EPageLifecycleState.HIDDEN */ || this.state === "Hidden_NotReadied" /* EPageLifecycleState.HIDDEN_NOTREADIED */) ;
      };
      PageLifecycleManager.prototype.setStateFromState = function (nextState, previousState, payload) {
          var _this = this;
          debug$1$1(function () { return "[APPX] PageLifecycleManager:setStateFromState ".concat(_this.page.pagePath, ": ").concat(previousState, "=>").concat(nextState); });
          // 状态变迁
          // 进行各种判断...
          if (nextState === "Unloaded" /* EPageLifecycleState.UNLOADED */) {
              this.performLifeHook(4 /* ESharedAppxEvent.PageLifeCycleIndex.onUnload */);
          }
          else if (previousState === "WILL_UNLOAD" /* EPageLifecycleState.WILL_UNLOAD */) {
              // 理论上走不到这里来的
              // 页面即将销毁，什么都不要再做了
              // 下面的 this.state 也不要重新赋值
              return;
          }
          else if (nextState === "Hidden" /* EPageLifecycleState.HIDDEN */ || nextState === "Hidden_NotReadied" /* EPageLifecycleState.HIDDEN_NOTREADIED */) {
              this.performLifeHook(3 /* ESharedAppxEvent.PageLifeCycleIndex.onHide */);
          }
          else if (nextState === "Readied" /* EPageLifecycleState.READIED */) {
              var isHiddenNotReadied = previousState === "Hidden_NotReadied" /* EPageLifecycleState.HIDDEN_NOTREADIED */;
              if (
              // 正常链路 A.onLoad(LOADED) -> onRenderMount.callback
              previousState === "Loaded" /* EPageLifecycleState.LOADED */ ||
                  // 边界场景 A.onLoad(LOADED) -> my.navigateTo -> pagePause -> A.onHide(HIDDEN_NOTREADIED) -> onRenderMount.callback
                  isHiddenNotReadied) {
                  // 触发 onReady
                  this.performLifeHook(2 /* ESharedAppxEvent.PageLifeCycleIndex.onReady */);
                  // 等下次 pageResume 过来时，确保能触发 onShow
                  if (isHiddenNotReadied) {
                      nextState = "Hidden" /* EPageLifecycleState.HIDDEN */;
                  }
              }
              else {
                  // 触发 onShow
                  this.performLifeHook(1 /* ESharedAppxEvent.PageLifeCycleIndex.onShow */);
              }
          }
          else if (nextState === "Loaded" /* EPageLifecycleState.LOADED */) {
              if (previousState === "Inited" /* EPageLifecycleState.INITED */) {
                  // 触发 onLoad, onShow
                  this.performLifeHook(0 /* ESharedAppxEvent.PageLifeCycleIndex.onLoad */, payload.query);
                  this.performLifeHook(1 /* ESharedAppxEvent.PageLifeCycleIndex.onShow */);
                  this.hookAfterOnLoadShow(payload.tabProps);
              }
              else {
                  // 触发 onShow
                  this.performLifeHook(1 /* ESharedAppxEvent.PageLifeCycleIndex.onShow */);
              }
          }
          this.state = nextState;
      };
      return PageLifecycleManager;
  }());
  function getPageLifecycleManagerInterceptor() {
      var klass = PageLifecycleManager;
      var methodInterceptor = /* PURE */ createClassMethodInteceptor(klass);
      return methodInterceptor;
  }

  var frameworkRuntimeFeature = [
      /** AlipaySpecialExposureDataset */ false,
      /** forceIterationUpdate */ false,
      /** forceTemplateUpdate */ false,
      /** disableExternalElementDestroy */ false,
      /** countOfAddPkgResCall */ 5,
      /** timeoutOfAddPkgResRetry */ 1000,
      /** levelOfAddPkgResRetry */ 0 /* EZephyrFrameworkRuntimeFeatureValue4LevelOfAddPkgResRetry.NoLimit */,
      /** defaultCloudServiceRouterToChat */ false,
      /** fixRotatedWidthFixModeImage */ false,
      /** elementLinkTree */ false,
      /** uepReportDataSwitch */ false,
      /** useSlotLazyConstructor */ false,
      /** useSlotProviderCreator */ false,
      /** UepSupportSPMSwitch */ false,
      /** uepCombineMode */ false,
      /** displayErrorForUnknownElement */ false,
      /** enableExternalElement4XreplayApp */ false,
      /** enableExternalElement4XreplayExtension */ [],
      /** enableExternalElement4AddToFavorite */ false,
      /** enableAutomator */ false,
      /** enableHMR */ false,
      /** fixButtonDisabled */ false,
      /** enableReportElementUsage */ true,
      /** limitExternalElement4CommonExtra */ false,
      /** enableExternalElement4CommonExtraApp */ [],
      /** FixButtonOpenTypeContactShare */ false,
      /** DisableErrorViewDefaultReload */ false,
      /** UCRenderMode4WebView */ 2,
      /** EnableNativeCanvas */ false,
      /** FixIconAutoSize */ false,
      /** enableCanvasRelativeTouchPointPosition */ false,
      /** ForceWebViewOverlay */ false,
      /** EnableTextareaMaxLengthAttribute */ true,
      /** CompositeElementDynamicConfig */ null,
      /** FixEventTargetId */ 0,
      /** EnableUepPvCombineTypeMixToManual */ false,
      /** EnableReportSpmWhenNotUep */ false,
      /** UepSupportVisualConfig */ true,
      /** stringifyInputValue */ false,
      /** FixMapImagePathInMiniExtension */ 0,
      /** EnableDomainCheck */ false,
      /** WebviewErrorBaseURL */ undefined,
      /** IgnoreCheckWildcard */ false,
      /** FixExternalElementProps */ true,
      /** FixStyleValue4Display */ false,
      /** DisableFixImageHeightFix */ false,
      /** EnableEventTracker */ false,
      /** enablePlaceholderBypass */ false,
      /** PickerStartEndEvent */ 0,
      /** enableCaptureEvent */ false ];
  function enableZephyrRuntimeFeature(k, v) {
      frameworkRuntimeFeature[k] = v;
  }
  function getZephyrRuntimeFeature(k) {
      if ( typeof __zephyr_feature__ !== 'undefined') {
          return __zephyr_feature__[k] === undefined ? frameworkRuntimeFeature[k] : __zephyr_feature__[k];
      }
      return frameworkRuntimeFeature[k];
  }

  function dynamicScopedAndUnscopedFactory(scopedFactory, unscopedFactory, componentInstance, context) {
      return new ZComponentDynamicSlotContainer(scopedFactory, unscopedFactory, componentInstance, context);
  }
  var ZComponentDynamicSlotContainer = /** @class */ /*#__PURE__*/ (function () {
      function ZComponentDynamicSlotContainer(scopedFactory, unscopedFactory, componentInstance, context) {
          this._scopedFactory = scopedFactory;
          this._unscopedFactory = unscopedFactory;
          this._component = componentInstance;
          this._data = context;
      }
      /* #__PRIVATE_HYDRATE__ */
      ZComponentDynamicSlotContainer.prototype["l" /* EZRuntimeBlockMethod.Link */] = function (nodes) {
          // 先不看选
          var componentInstance = this._component;
          this._anchor4Head = helperHydrateBlockAnchor(nodes, componentInstance);
          var nextStopReverseIndex4Inject = helperHydrateBlockAnchorTryMatchReverseIndex(nodes, this._anchor4Head);
          helperHydratePushStopReverseIndex(nodes, nextStopReverseIndex4Inject);
          var block4Scoped = (this._block4Scoped = this._scopedFactory(this._component, this._data));
          var hasNoChildrenFlag = block4Scoped["l" /* EZRuntimeBlockMethod.Link */](nodes);
          var returnFlag = 0;
          var matchType;
          helperHydratePopStopReverseIndex(nodes);
          this._anchor4Between = helperHydrateBlockAnchor(nodes, componentInstance, this._anchor4Head);
          var nextStopReverseIndex4Fallback = helperHydrateBlockAnchorTryMatchReverseIndex(nodes, this._anchor4Head);
          helperHydratePushStopReverseIndex(nodes, nextStopReverseIndex4Fallback);
          // tslint:disable no-bitwise
          if (hasNoChildrenFlag & 2) {
              // tslint:enable no-bitwise
              // 如果没有 scopeName 匹配，降级使用 unscoped 部分
              var block4Unscoped = (this._block4Unscoped = this._unscopedFactory(this._component, this._data));
              hasNoChildrenFlag = block4Unscoped["l" /* EZRuntimeBlockMethod.Link */](nodes);
              if (hasNoChildrenFlag) {
                  // name 不匹配一定没有children
                  // 只要非0，就不存在children，降级使用外部 fallback 部分
                  returnFlag = 1;
                  matchType = 2 /* EZComponentDynamicSlotContainerSelectedType.Fallback */;
              }
              else {
                  matchType = 1 /* EZComponentDynamicSlotContainerSelectedType.Unscoped */;
              }
              // tslint:disable no-bitwise
          }
          else if (hasNoChildrenFlag & 1) {
              // tslint:enable no-bitwise
              // 如果 scopeName 匹配了，但是没有 children，降级使用外部 fallback 部分
              returnFlag = 1;
              matchType = 2 /* EZComponentDynamicSlotContainerSelectedType.Fallback */;
          }
          else {
              matchType = 0 /* EZComponentDynamicSlotContainerSelectedType.Scoped */;
          }
          this._blockMatchType = matchType;
          helperHydratePopStopReverseIndex(nodes);
          this._anchor4Tail = helperHydrateBlockAnchorState(nodes, componentInstance, this._anchor4Head);
          this._target = nodes.target;
          return returnFlag;
      };
      ZComponentDynamicSlotContainer.prototype["c" /* EZRuntimeBlockMethod.Create */] = function () {
          var componentInstance = this._component;
          var block4Scoped = (this._block4Scoped = this._scopedFactory(this._component, this._data));
          var hasNoChildrenFlag = block4Scoped["c" /* EZRuntimeBlockMethod.Create */]();
          var returnFlag = 0;
          var matchType;
          // tslint:disable no-bitwise
          if (hasNoChildrenFlag & 2) {
              // tslint:enable no-bitwise
              // 如果没有 scopeName 匹配，降级使用 unscoped 部分
              var block4Unscoped = (this._block4Unscoped = this._unscopedFactory(this._component, this._data));
              hasNoChildrenFlag = block4Unscoped["c" /* EZRuntimeBlockMethod.Create */]();
              if (hasNoChildrenFlag) {
                  // name 不匹配一定没有children
                  // 只要非0，就不存在children，降级使用外部 fallback 部分
                  returnFlag = 1;
                  matchType = 2 /* EZComponentDynamicSlotContainerSelectedType.Fallback */;
              }
              else {
                  matchType = 1 /* EZComponentDynamicSlotContainerSelectedType.Unscoped */;
              }
              // tslint:disable no-bitwise
          }
          else if (hasNoChildrenFlag & 1) {
              // tslint:enable no-bitwise
              // 如果 scopeName 匹配了，但是没有 children，降级使用外部 fallback 部分
              returnFlag = 1;
              matchType = 2 /* EZComponentDynamicSlotContainerSelectedType.Fallback */;
          }
          else {
              matchType = 0 /* EZComponentDynamicSlotContainerSelectedType.Scoped */;
          }
          this._blockMatchType = matchType;
          this._anchor4Head = componentInstance.document.createComment();
          this._anchor4Between = componentInstance.document.cloneComment(this._anchor4Head);
          this._anchor4Tail = helperCreateBlockAnchorState(componentInstance, this._anchor4Head);
          return returnFlag;
      };
      ZComponentDynamicSlotContainer.prototype["m" /* EZRuntimeBlockMethod.Mount */] = function (target, anchor) {
          this._target = target;
          if (this._anchor4Head) {
              this._target.insertBefore(this._anchor4Head, anchor || null);
          }
          this._block4Scoped["m" /* EZRuntimeBlockMethod.Mount */](target, anchor);
          if (this._anchor4Between) {
              this._target.insertBefore(this._anchor4Between, anchor || null);
          }
          var block4Unscoped = this._block4Unscoped;
          if (block4Unscoped) {
              block4Unscoped["m" /* EZRuntimeBlockMethod.Mount */](target, anchor);
          }
          if (this._anchor4Tail) {
              helperDocumentInsertAnchorState(this._target, this._anchor4Tail, anchor);
          }
      };
      ZComponentDynamicSlotContainer.prototype["u" /* EZRuntimeBlockMethod.Update */] = function (diff, data) {
          this._data = data;
          // 先更新一次 block4Scoped 再更新一次 block4Unscoped
          var currentMatchType = this._blockMatchType;
          var hasNoChildrenFlag = this._block4Scoped["u" /* EZRuntimeBlockMethod.Update */](diff, data);
          var returnFlag = 0;
          var matchType;
          // tslint:disable no-bitwise
          if (hasNoChildrenFlag & 2) {
              // tslint:enable no-bitwise
              // 这次 Scoped 名称没有匹配上了，而且没有 children，需要降级 Fallback
              // Scoped 已经更新没了，直接创建或更新 Unscoped
              var block4Unscoped = this._block4Unscoped;
              if (block4Unscoped) {
                  hasNoChildrenFlag = block4Unscoped["u" /* EZRuntimeBlockMethod.Update */](diff, data);
              }
              else {
                  block4Unscoped = this._block4Unscoped = this._unscopedFactory(this._component, data);
                  hasNoChildrenFlag = block4Unscoped["c" /* EZRuntimeBlockMethod.Create */]();
                  block4Unscoped["m" /* EZRuntimeBlockMethod.Mount */](this._target, helperAnchor(this._anchor4Tail));
              }
              if (hasNoChildrenFlag) {
                  // name 不匹配一定没有children
                  // 只要非0，就不存在children，降级使用外部 fallback 部分
                  returnFlag = 1;
                  matchType = 2 /* EZComponentDynamicSlotContainerSelectedType.Fallback */;
              }
              else {
                  matchType = 1 /* EZComponentDynamicSlotContainerSelectedType.Unscoped */;
              }
              // tslint:disable no-bitwise
          }
          else if (hasNoChildrenFlag & 1) {
              // tslint:enable no-bitwise
              // 这次 Scoped 名称匹配上了，但是没有 children，需要降级 Fallback
              returnFlag = 1;
              matchType = 2 /* EZComponentDynamicSlotContainerSelectedType.Fallback */;
              switch (currentMatchType) {
                  case 0 /* EZComponentDynamicSlotContainerSelectedType.Scoped */:
                      // 之前是 Scoped 但是已经更新没了，这里不用修改 _block4Scoped
                      break;
                  case 1 /* EZComponentDynamicSlotContainerSelectedType.Unscoped */:
                      // 如果存在 Unscoped 万一匹配上了就呵呵了，需要销毁
                      if (this._block4Unscoped) {
                          this._block4Unscoped["d" /* EZRuntimeBlockMethod.Destroy */](true);
                          this._block4Unscoped = null;
                      }
                      break;
              }
          }
          else {
              matchType = 0 /* EZComponentDynamicSlotContainerSelectedType.Scoped */;
              switch (currentMatchType) {
                  case 0 /* EZComponentDynamicSlotContainerSelectedType.Scoped */:
                      // 啥都不管，已经更新过了
                      break;
                  case 1 /* EZComponentDynamicSlotContainerSelectedType.Unscoped */:
                      // 如果存在 Unscoped 万一匹配上了就呵呵了，需要销毁
                      // 没有的话就不处理了
                      if (this._block4Unscoped) {
                          this._block4Unscoped["d" /* EZRuntimeBlockMethod.Destroy */](true);
                          this._block4Unscoped = null;
                      }
                      break;
              }
          }
          this._blockMatchType = matchType;
          return returnFlag;
      };
      ZComponentDynamicSlotContainer.prototype["d" /* EZRuntimeBlockMethod.Destroy */] = function (isDestroyRoot) {
          var block4Scoped = this._block4Scoped;
          if (block4Scoped) {
              block4Scoped["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
              this._block4Scoped = null;
          }
          var block4Unscoped = this._block4Unscoped;
          if (block4Unscoped) {
              block4Unscoped["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
              this._block4Unscoped = null;
          }
          if (isDestroyRoot) {
              helperDestroyBlockAnchor(this._anchor4Head);
              helperDestroyBlockAnchor(this._anchor4Between);
              helperDestroyBlockAnchorState(this._anchor4Tail);
              this._anchor4Head = null;
              this._anchor4Between = null;
              this._anchor4Tail = null;
          }
      };
      return ZComponentDynamicSlotContainer;
  }());

  function helperGetEachIterateListTypeLengthKeys(listExp) {
      if (listExp && !Array.isArray(listExp)) {
          var valueType = typeof listExp;
          if (valueType === 'object') {
              var keys = Object.keys(listExp);
              return [2 /* EZRuntimeEachIterateListType.Object */, keys.length, keys];
          }
          if (valueType === 'number') {
              // 小心 浮点数/ NaN/负数 不能赋值给数组的 length
              var numberLength = listExp > 0 ? Math.floor(listExp) : 0;
              return [3 /* EZRuntimeEachIterateListType.Number */, numberLength, null];
          }
      }
      return [
          1 /* EZRuntimeEachIterateListType.Array */,
          // 除了 Object 和 Number 以外的都当做 Array
          // 小心别的类型没有 length 属性
          (listExp && listExp.length) || 0,
          null ];
  }
  function helperEachContainerFactoryGetContext4Object(sValue, sIndex, context, list, index, listKeys) {
      var childContext = Object.create(context);
      var aIndex = (childContext[sIndex] = listKeys[index]);
      childContext[sValue] = list[aIndex];
      return childContext;
  }
  function helperEachContainerFactoryGetContext4Number(sValue, sIndex, context, list, index, listKeys) {
      var childContext = Object.create(context);
      childContext[sIndex] = index;
      childContext[sValue] = index + 1;
      return childContext;
  }
  function helperEachContainerFactoryGetContext4Array(sValue, sIndex, context, list, index, listKeys) {
      var childContext = Object.create(context);
      childContext[sIndex] = index;
      childContext[sValue] = list && list[index];
      return childContext;
  }
  function helperUpdateBlocks4EachContainerWithItemDiff4MixedType(eachDiff, data, eachBlocks, createEachIteratorBlock, componentInstance, currentTarget, currentAnchorState, newEachExpLength, eachContextGetter, itemKey, newEachExp, oldEachExp, indexKey, newEachExpKeys, oldEachExpKeys, oldEachExpType) {
      var isOldEachExpObjectType = oldEachExpType === 2 /* EZRuntimeEachIterateListType.Object */;
      var isOldEachExpNumberType = oldEachExpType === 3 /* EZRuntimeEachIterateListType.Number */;
      if (newEachExpLength) {
          var flag4ForceIterationUpdate = !!getZephyrRuntimeFeature(1 /* EZephyrFrameworkRuntimeFeature.forceIterationUpdate */);
          for (var eachBlockIndex = 0; eachBlockIndex < newEachExpLength; eachBlockIndex += 1) {
              var eachBlockContext = eachContextGetter(data, newEachExp, eachBlockIndex, newEachExpKeys);
              if (eachBlocks[eachBlockIndex]) {
                  var oldIndex = isOldEachExpObjectType
                      ? oldEachExpKeys[eachBlockIndex]
                      : eachBlockIndex;
                  var oldValue = isOldEachExpNumberType
                      ? eachBlockIndex + 1
                      : oldEachExp
                          ? oldEachExp[oldIndex]
                          : undefined;
                  eachDiff[indexKey] = eachBlockContext[indexKey] !== oldIndex;
                  eachDiff[itemKey] = eachBlockContext[itemKey] !== oldValue || flag4ForceIterationUpdate;
                  eachBlocks[eachBlockIndex]["u" /* EZRuntimeBlockMethod.Update */](eachDiff, eachBlockContext);
              }
              else {
                  eachBlocks[eachBlockIndex] = createEachIteratorBlock(componentInstance, eachBlockContext);
                  eachBlocks[eachBlockIndex]["c" /* EZRuntimeBlockMethod.Create */]();
                  eachBlocks[eachBlockIndex]["m" /* EZRuntimeBlockMethod.Mount */](currentTarget, helperAnchor(currentAnchorState));
              }
          }
      }
  }
  function helperUpdateBlocks4EachContainerWithKeyDiff(eachDiffGetter, diff, eachContextGetter, data, newEachExp, oldEachBlocks, createEachIteratorBlock, componentInstance, currentTarget, currentAnchorState, oldEachExp, itemKey, indexKey, newEachExpType, newEachExpKeys, newEachExpLength, oldEachExpType, oldEachExpKeys, oldKeyToIndexMap, oldIndexToKeyAnchorList, eachKeyGetter) {
      var flag4ForceIterationUpdate = !!getZephyrRuntimeFeature(1 /* EZephyrFrameworkRuntimeFeature.forceIterationUpdate */);
      var newBlocks = [];
      var newKeyToIndexMap = createMap();
      var newIndexToKeyAnchorList = [];
      var oldEachExpLength = oldEachBlocks.length;
      var remainOldBlocksLength = oldEachExpLength;
      var remainNewBlocksLength = newEachExpLength;
      // 没有新节点，把老节点全部干掉
      if (remainNewBlocksLength < 1) {
          while (remainOldBlocksLength--) {
              helperDestroyBlockAnchorState(oldIndexToKeyAnchorList[remainOldBlocksLength][1]);
              oldEachBlocks[remainOldBlocksLength]["d" /* EZRuntimeBlockMethod.Destroy */](true);
          }
      }
      // 没有老节点，新节点全部建立
      else if (remainOldBlocksLength < 1) {
          for (var eachBlockIndex = 0; eachBlockIndex < remainNewBlocksLength; eachBlockIndex += 1) {
              var eachBlockContext = eachContextGetter(data, newEachExp, eachBlockIndex, newEachExpKeys);
              var key = eachKeyGetter(componentInstance, eachBlockContext);
              var eachBlockAnchorState = helperCreateBlockAnchorState(componentInstance);
              helperDocumentInsertAnchorStateBeforeState(currentTarget, eachBlockAnchorState, currentAnchorState);
              newBlocks[eachBlockIndex] = createEachIteratorBlock(componentInstance, eachBlockContext);
              newBlocks[eachBlockIndex]["c" /* EZRuntimeBlockMethod.Create */]();
              newBlocks[eachBlockIndex]["m" /* EZRuntimeBlockMethod.Mount */](currentTarget, helperAnchor(currentAnchorState));
              newKeyToIndexMap.set(key, eachBlockIndex);
              newIndexToKeyAnchorList[eachBlockIndex] = [key, eachBlockAnchorState];
          }
      }
      // 新老节点都有
      else {
          var eachDiff = eachDiffGetter(diff);
          var isOldEachExpObjectType = oldEachExpType === 2 /* EZRuntimeEachIterateListType.Object */;
          var isOldEachExpNumberType = oldEachExpType === 3 /* EZRuntimeEachIterateListType.Number */;
          var newBlockIndex = 0;
          for (; newBlockIndex < newEachExpLength; newBlockIndex += 1) {
              var context_1 = eachContextGetter(data, newEachExp, newBlockIndex, newEachExpKeys);
              var key = eachKeyGetter(componentInstance, context_1);
              var block = void 0;
              // 找同下标上以前的老块
              if (oldIndexToKeyAnchorList[newBlockIndex]) {
                  // 老块的 key 是一样的，复用之
                  var oldKey = oldIndexToKeyAnchorList[newBlockIndex][0];
                  if (oldKey === key || (key !== key && oldKey !== oldKey)) {
                      var oldItemIndex = isOldEachExpObjectType
                          ? oldEachExpKeys[newBlockIndex]
                          : newBlockIndex;
                      var oldItemValue = isOldEachExpNumberType
                          ? newBlockIndex + 1
                          : oldEachExp
                              ? oldEachExp[oldItemIndex]
                              : undefined;
                      eachDiff[indexKey] = context_1[indexKey] !== oldItemIndex;
                      // 强制更新相同顺序 key 的块
                      eachDiff[itemKey] = context_1[itemKey] !== oldItemValue || flag4ForceIterationUpdate;
                      block = oldEachBlocks[newBlockIndex];
                      block["u" /* EZRuntimeBlockMethod.Update */](eachDiff, context_1);
                      newIndexToKeyAnchorList[newBlockIndex] = oldIndexToKeyAnchorList[newBlockIndex];
                  }
                  // 老块在，但 key 不一样
                  // 开启最复杂的 KeyDiff 逻辑
                  else {
                      break;
                  }
              }
              else {
                  // 如果没找到同下标的老块
                  // 说明是纯增量，在下面直接新建插入就好啦
                  var anchorState = helperCreateBlockAnchorState(componentInstance);
                  helperDocumentInsertAnchorStateBeforeState(currentTarget, anchorState, currentAnchorState);
                  block = createEachIteratorBlock(componentInstance, context_1);
                  block["c" /* EZRuntimeBlockMethod.Create */]();
                  block["m" /* EZRuntimeBlockMethod.Mount */](currentTarget, helperAnchor(currentAnchorState));
                  newIndexToKeyAnchorList[newBlockIndex] = [key, anchorState];
              }
              newBlocks[newBlockIndex] = block;
              newKeyToIndexMap.set(key, newBlockIndex);
          }
          if (newBlockIndex < newEachExpLength) {
              // 复用的节点的下标不能小于这个
              var keyDiffStartIndex = newBlockIndex;
              var reusableBlockDelta = createMap();
              var reusableBlockSet = createSet();
              for (; newBlockIndex < newEachExpLength; newBlockIndex += 1) {
                  var context_2 = eachContextGetter(data, newEachExp, newBlockIndex, newEachExpKeys);
                  var key = eachKeyGetter(componentInstance, context_2);
                  var oldBlockIndex = oldKeyToIndexMap.get(key);
                  var block = void 0;
                  if (
                  // 不可以复用已经被更新过的块
                  // 这里的条件还隐式确认了老下标存在
                  oldBlockIndex >= keyDiffStartIndex &&
                      // 也不可以复用已经被标记过要复用的块
                      // 即每个块只能被复用一次
                      !reusableBlockDelta.has(key)) {
                      var oldItemIndex = isOldEachExpObjectType
                          ? oldEachExpKeys[oldBlockIndex]
                          : oldBlockIndex;
                      var oldItemValue = isOldEachExpNumberType
                          ? oldBlockIndex + 1
                          : oldEachExp
                              ? oldEachExp[oldItemIndex]
                              : undefined;
                      eachDiff[indexKey] = context_2[indexKey] !== oldItemIndex;
                      // 强制更新 Key 复用块
                      eachDiff[itemKey] = context_2[itemKey] !== oldItemValue || flag4ForceIterationUpdate;
                      block = oldEachBlocks[oldBlockIndex];
                      block["u" /* EZRuntimeBlockMethod.Update */](eachDiff, context_2);
                      newIndexToKeyAnchorList[newBlockIndex] = oldIndexToKeyAnchorList[oldBlockIndex];
                      // 记录下这个块即将被复用，以及它发生的位置偏移量
                      reusableBlockDelta.set(key, Math.abs(newBlockIndex - oldBlockIndex));
                      reusableBlockSet.add(oldEachBlocks[oldBlockIndex]);
                  }
                  // 否则新建一个
                  else {
                      block = createEachIteratorBlock(componentInstance, context_2);
                      block["c" /* EZRuntimeBlockMethod.Create */]();
                      newIndexToKeyAnchorList[newBlockIndex] = [key, helperCreateBlockAnchorState(componentInstance)];
                  }
                  newBlocks[newBlockIndex] = block;
                  newKeyToIndexMap.set(key, newBlockIndex);
              }
              var willMoveEachBlockSet = createSet();
              var didMoveEachBlockSet = createSet();
              var insertBlock = function (block, anchorState) {
                  helperDocumentInsertAnchorStateBeforeState(currentTarget, anchorState, currentAnchorState);
                  block["m" /* EZRuntimeBlockMethod.Mount */](currentTarget, helperAnchor(currentAnchorState));
                  currentAnchorState = anchorState;
                  remainNewBlocksLength -= 1;
              };
              // 举个栗子
              // [1,2,3,4,5] -> [1,5,4,3,2]
              // 第一步 n:2 o:5 5的偏移量较大，视为5发生偏移，处于老序列，位置待定(G)
              // 第二步 n:2 o:4 2的偏移量较大，视为2发生偏移，处于新序列，直接插入(F)
              // 第三步 n:3 o:4 二者偏移量一致，视为4发生偏移，处于老序列，位置待定(G)
              // 第四步 n:3 o:3 一致，不改动(A)
              // 第五步 n:4 o:2 待定列表中有4，直接插入(D)
              // 第六步 n:5 o:2 待定列表中有4，直接插入(D)
              // 第七步 n:1 o:2 2已经重排过，跳过(E)
              // 第八步 n:1 o:1 一致，不改动(A)
              while (remainOldBlocksLength && remainNewBlocksLength) {
                  var newIndex = remainNewBlocksLength - 1;
                  var oldIndex = remainOldBlocksLength - 1;
                  // 不能超过已经更新好了的块的下标
                  if (newIndex < keyDiffStartIndex || oldIndex < keyDiffStartIndex) {
                      break;
                  }
                  var newBlock = newBlocks[newIndex];
                  var oldBlock = oldEachBlocks[oldIndex];
                  var _a = oldIndexToKeyAnchorList[oldIndex], oldKey = _a[0], oldAnchorState = _a[1];
                  var _b = newIndexToKeyAnchorList[newIndex], newKey = _b[0], newAnchorState = _b[1];
                  // A. 一致，不进行任何操作
                  if (newBlock === oldBlock) {
                      currentAnchorState = newAnchorState;
                      remainOldBlocksLength -= 1;
                      remainNewBlocksLength -= 1;
                  }
                  // B. 删除废弃节点
                  else if (!reusableBlockSet.has(oldBlock)) {
                      helperDestroyBlockAnchorState(oldAnchorState);
                      oldBlock["d" /* EZRuntimeBlockMethod.Destroy */](true);
                      remainOldBlocksLength -= 1;
                  }
                  // C. 新建节点插入，或
                  // D. 已有节点移动位置
                  else if (!reusableBlockSet.has(newBlock) || willMoveEachBlockSet.has(newBlock)) {
                      insertBlock(newBlock, newAnchorState);
                  }
                  // E. 已有节点已经重排过了
                  else if (didMoveEachBlockSet.has(oldBlock)) {
                      remainOldBlocksLength -= 1;
                  }
                  // 下面进行偏移比较
                  // 谁的偏移较多就视为谁发生了移动
                  // F. 新节点偏移到后面来了，立即插入
                  else if (reusableBlockDelta.get(newKey) > reusableBlockDelta.get(oldKey)) {
                      didMoveEachBlockSet.add(newBlock);
                      insertBlock(newBlock, newAnchorState);
                  }
                  // G. 老节点偏移走了，位置待定
                  else {
                      willMoveEachBlockSet.add(oldBlock);
                      remainOldBlocksLength -= 1;
                  }
              }
              // 丢掉所有的废弃节点
              while (remainOldBlocksLength--) {
                  if (remainOldBlocksLength < keyDiffStartIndex) {
                      break;
                  }
                  var oldBlock = oldEachBlocks[remainOldBlocksLength];
                  if (!reusableBlockSet.has(oldBlock)) {
                      helperDestroyBlockAnchorState(oldIndexToKeyAnchorList[remainOldBlocksLength][1]);
                      oldBlock["d" /* EZRuntimeBlockMethod.Destroy */](true);
                  }
              }
              // 补充所有的新建节点
              // 注意 insertBlock() 里面会递减
              // 就不要 while 里还减了
              while (remainNewBlocksLength) {
                  var newIndex = remainNewBlocksLength - 1;
                  if (newIndex < keyDiffStartIndex) {
                      break;
                  }
                  insertBlock(newBlocks[newIndex], newIndexToKeyAnchorList[newIndex][1]);
              }
          }
          // 不需要 KeyDiff 的话
          // 还要检查老的是不是删完了
          else {
              while (newBlockIndex < oldEachExpLength) {
                  helperDestroyBlockAnchorState(oldIndexToKeyAnchorList[newBlockIndex][1]);
                  oldEachBlocks[newBlockIndex]["d" /* EZRuntimeBlockMethod.Destroy */](true);
                  newBlockIndex += 1;
              }
          }
      }
      return {
          eachBlocks: newBlocks,
          hasNoChildren: newBlocks.length ? 0 : 1 /* EZephyrCompilerHasNoChildrenFlag.NoChildren */,
          indexToKeyAnchorList: newIndexToKeyAnchorList,
          keyToIndexMap: newKeyToIndexMap,
      };
  }
  function helperUpdateBlocks4EachContainerWithItemDiff4Array(eachDiff, data, eachBlocks, createEachIteratorBlock, componentInstance, currentTarget, currentAnchorState, newEachExpLength, eachContextGetter, itemKey, newEachExp, oldEachExp, indexKey, newEachExpKeys, oldEachExpKeys, oldEachExpType) {
      if (newEachExpLength) {
          var flag4ForceIterationUpdate = !!getZephyrRuntimeFeature(1 /* EZephyrFrameworkRuntimeFeature.forceIterationUpdate */);
          for (var eachBlockIndex = 0; eachBlockIndex < newEachExpLength; eachBlockIndex += 1) {
              var eachBlockContext = eachContextGetter(data, newEachExp, eachBlockIndex, null);
              if (eachBlocks[eachBlockIndex]) {
                  eachDiff[itemKey] =
                      eachBlockContext[itemKey] !== (oldEachExp ? oldEachExp[eachBlockIndex] : undefined) ||
                          flag4ForceIterationUpdate;
                  eachBlocks[eachBlockIndex]["u" /* EZRuntimeBlockMethod.Update */](eachDiff, eachBlockContext);
              }
              else {
                  eachBlocks[eachBlockIndex] = createEachIteratorBlock(componentInstance, eachBlockContext);
                  eachBlocks[eachBlockIndex]["c" /* EZRuntimeBlockMethod.Create */]();
                  eachBlocks[eachBlockIndex]["m" /* EZRuntimeBlockMethod.Mount */](currentTarget, helperAnchor(currentAnchorState));
              }
          }
      }
  }
  function helperUpdateBlocks4EachContainerWithListExpUnchanged(eachDiff, eachContextGetter, data, eachBlocks, eachBlockLength, eachExp, eachExpKeys) {
      for (var eachBlockIndex = 0; eachBlockIndex < eachBlockLength; eachBlockIndex += 1) {
          var eachBlockContext = eachContextGetter(data, eachExp, eachBlockIndex, eachExpKeys);
          eachBlocks[eachBlockIndex]["u" /* EZRuntimeBlockMethod.Update */](eachDiff, eachBlockContext);
      }
  }

  /**
   * 对自定义组件内部，使用 <slot> 的地方，提供 create* 方法进行 block 实例创建以及维护
   * 对使用自定义组件，添加 <view slot="x"> 的地方，表现成一个 ProviderBlock，对外暴露 update/destroy，内部维护所有 block 的更新和销毁
   */
  var ZComponentSlotProvider4Shared = /** @class */ /*#__PURE__*/ (function () {
      function ZComponentSlotProvider4Shared(blockFactory, initData, slotProviderParentContextInstance, scopeId, bindLinkNode) {
          this.bindLinkNode = bindLinkNode;
          this.updatingDiff = null;
          /**
           * blocks is unordered for fast deleting
           */
          this.scopedBlocks = [];
          /**
           * blocks is unordered for fast deleting
           */
          this.unscopedBlocks = [];
          this.disposing = false;
          this.detaching = false;
          this.factory = blockFactory;
          this.currentData = initData;
          this.slotProviderParentContextInstance = slotProviderParentContextInstance;
          this.scopeId = scopeId;
      }
      ZComponentSlotProvider4Shared.prototype.createBlockWithScope = function (scopeContext, slotContentTargetInstance) {
          var context;
          var scopeId = this.scopeId;
          var block;
          if (scopeContext && scopeId) {
              context = assignScopeContextToData(scopeContext, this.currentData, scopeId);
              block = this.createBlock(this.slotProviderParentContextInstance, slotContentTargetInstance, context, true);
              block.__scopeContext__ = scopeContext;
          }
          else {
              context = this.currentData;
              block = this.createBlock(this.slotProviderParentContextInstance, slotContentTargetInstance, context, false);
          }
          block.bType = 1 /* IZRuntimeBlockType.SlotProviderItemWithoutFallbackSwtich */;
          return block;
      };
      ZComponentSlotProvider4Shared.prototype.createBlockWithoutScope = function (slotContentTargetInstance) {
          // 没法直接复用，复用的 block 可能是由内部自定义组件创建的
          // 不是一层关系，如果对应自定义组件触发销毁，那对应 应该全面销毁？
          // 还是说，只要把 provider 关联的所有 block 都保存住，其他可以不管
          // 到时候注意一下双层 slot 套娃绑定关系
          // 返回一个
          // if (this.blockCreateTypeIsReuse) {
          //   // 这个问题在于，其实应该是从
          //   // 从现有的 blocks 里面复用，先尝试从中找一个 -1 出来
          //   // 后面看是怎么保证 LinkNode 查找序？
          //   this.unscopedBlocks
          // }
          var block = this.createBlock(this.slotProviderParentContextInstance, slotContentTargetInstance, this.currentData, false);
          block.bType = 1 /* IZRuntimeBlockType.SlotProviderItemWithoutFallbackSwtich */;
          return block;
      };
      ZComponentSlotProvider4Shared.prototype.updateBlockWithDynamicNameScopeAndFallback = function (slotName, block, scopeContext, fallbackDiff, fallbackContext, slotContentTargetInstance) {
          if (block._name === slotName) {
              // 原地修改
              var scopeId = this.scopeId;
              if (scopeContext && scopeId) {
                  // 更新 scope Or fallback
                  var outterContextWithScopeInject = assignScopeContextToData(scopeContext, this.currentData, scopeId);
                  var scopeDiff = Object.create(this.updatingDiff);
                  scopeDiff[scopeId] = true;
                  block.updateScopeContext(scopeContext);
                  block.updateScopeAndFallbackContext(scopeDiff, outterContextWithScopeInject, fallbackDiff, fallbackContext);
              }
              else {
                  // 只更新 fallback
                  block.updateFallbackContext(fallbackDiff, fallbackContext);
              }
          }
          else {
              var inject4Block = void 0;
              if (scopeContext) {
                  inject4Block = this.createBlockWithScope(scopeContext, slotContentTargetInstance);
              }
              else {
                  inject4Block = this.createBlockWithoutScope(slotContentTargetInstance);
              }
              block.updateDynamicNameAndFallbackContext(slotName, inject4Block, fallbackDiff, fallbackContext);
          }
          return null;
      };
      ZComponentSlotProvider4Shared.prototype.updateBlockWithScopeAndFallback = function (block, scopeContext, fallbackDiff, fallbackContext) {
          // 判断一下有没有 scopeContext 需要更新
          var scopeId = this.scopeId;
          if (scopeContext && scopeId) {
              // 更新 scope Or fallback
              var outterContextWithScopeInject = assignScopeContextToData(scopeContext, this.currentData, scopeId);
              var scopeDiff = Object.create(this.updatingDiff);
              scopeDiff[scopeId] = true;
              block.updateScopeContext(scopeContext);
              block.updateScopeAndFallbackContext(scopeDiff, outterContextWithScopeInject, fallbackDiff, fallbackContext);
          }
          else {
              // 只更新 fallback
              block.updateFallbackContext(fallbackDiff, fallbackContext);
          }
      };
      /**
       * 用于内部传入 scope 更新特定 block 实例
       */
      ZComponentSlotProvider4Shared.prototype.updateBlockWithScope = function (block, scopeContext) {
          var scopeId = this.scopeId;
          if (scopeContext && scopeId) {
              var context_1 = assignScopeContextToData(scopeContext, this.currentData, scopeId);
              var diff = Object.create(this.updatingDiff);
              diff[scopeId] = true;
              block.__scopeContext__ = scopeContext;
              block["u" /* EZRuntimeBlockMethod.Update */](diff, context_1);
          }
      };
      ZComponentSlotProvider4Shared.prototype.enterProviderDetaching = function () {
          this.detaching = true;
      };
      ZComponentSlotProvider4Shared.prototype.exitProviderDetaching = function () {
          var this$1 = this;

          this.detaching = false;
          // 如果 detachedBlocks 没用完，需要执行销毁
          var detachedBlocks = this.detachedBlocks;
          if (detachedBlocks) {
              this.detachedBlocks = null;
              for (var _i = 0, detachedBlocks_1 = detachedBlocks; _i < detachedBlocks_1.length; _i++) {
                  var block = detachedBlocks_1[_i];
                  // 放回 scoped/unscoped 末尾，然后再删
                  var blocks = block.__slotType__ === 1 /* EZRuntimeBlockInstance4SlotProviderItemType.Scoped */
                      ? this$1.scopedBlocks
                      : this$1.unscopedBlocks;
                  block.__slotIndex__ = blocks.push(block) - 1;
                  block["d" /* EZRuntimeBlockMethod.Destroy */](true);
              }
          }
      };
      ZComponentSlotProvider4Shared.prototype.createBlock = function (slotProviderParentContextInstance, slotContentTargetInstance, data, isScoped) {
          var blockIndex;
          var blockType;
          var blocks;
          if (isScoped) {
              blockType = 1 /* EZRuntimeBlockInstance4SlotProviderItemType.Scoped */;
              blockIndex = this.scopedBlocks.length;
              blocks = this.scopedBlocks;
          }
          else {
              blockType = 0 /* EZRuntimeBlockInstance4SlotProviderItemType.Unscoped */;
              blockIndex = this.unscopedBlocks.length;
              blocks = this.unscopedBlocks;
          }
          if (this.detaching) {
              var detachedBlocks = this.detachedBlocks;
              if (detachedBlocks) {
                  var block_1 = detachedBlocks.shift();
                  if (block_1) {
                      blocks.push(block_1);
                      block_1.__slotIndex__ = blockIndex;
                      block_1.__slotType__ = blockType;
                      return block_1;
                  }
              }
          }
          var block = this.factory(slotProviderParentContextInstance, data);
          if (this.bindLinkNode) {
              block = this.bindLinkNode(block, this);
          }
          block["d" /* EZRuntimeBlockMethod.Destroy */] = this.destroyBlock.bind(this, block, block["d" /* EZRuntimeBlockMethod.Destroy */]);
          blocks.push(block);
          block.__slotIndex__ = blockIndex;
          block.__slotType__ = blockType;
          return block;
      };
      ZComponentSlotProvider4Shared.prototype.destroyBlock = function (block, originalDestroy, isDestroyRoot) {
          // clean blocks
          var index = block.__slotIndex__;
          if (index >= 0) {
              if (!this.disposing) {
                  var blocks = block.__slotType__ === 1 /* EZRuntimeBlockInstance4SlotProviderItemType.Scoped */
                      ? this.scopedBlocks
                      : this.unscopedBlocks;
                  var lastBlockIndex = blocks.length - 1;
                  // if (lastBlockIndex > 0) {
                  var lastBlock = blocks[lastBlockIndex];
                  lastBlock.__slotIndex__ = index;
                  blocks[index] = lastBlock;
                  blocks.length = lastBlockIndex;
              }
              if (this.detaching) {
                  var detachedBlocks = this.detachedBlocks;
                  if (!detachedBlocks) {
                      detachedBlocks = this.detachedBlocks = [];
                  }
                  detachedBlocks.push(block);
              }
              else {
                  // perform original destroy
                  originalDestroy.call(block, isDestroyRoot);
              }
              block.__slotIndex__ = -1;
          }
      };
      return ZComponentSlotProvider4Shared;
  }());
  function assignScopeContextToData(scopeContext, data, scopeId) {
      var assignedData = Object.create(data);
      assignedData[scopeId] = scopeContext[0];
      if (scopeContext.length > 1) {
          assignedData[scopeId + 'd'] = scopeContext[1];
          assignedData[scopeId + 'n'] = scopeContext[2];
      }
      return assignedData;
  }

  var ZComponentSlotProvider4Immediate = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZComponentSlotProvider4Immediate, _super);
      function ZComponentSlotProvider4Immediate() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ZComponentSlotProvider4Immediate.prototype.exitProviderUpdating = function () {
          // should not invoke
      };
      ZComponentSlotProvider4Immediate.prototype.enterProviderUpdating = function (diff, data) {
          this.currentData = data;
          var scopeId = this.scopeId;
          for (var _i = 0, _a = this.unscopedBlocks; _i < _a.length; _i++) {
              var block = _a[_i];
              block["u" /* EZRuntimeBlockMethod.Update */](diff, data);
          }
          if (scopeId && this.scopedBlocks.length) {
              // 需要保证 diff 和 context 对应 scopeId 的正确性
              var scopeOverridedDiff = Object.create(diff);
              scopeOverridedDiff[scopeId] = false;
              for (var _b = 0, _c = this.scopedBlocks; _b < _c.length; _b++) {
                  var block = _c[_b];
                  var scopeOverridedData = assignScopeContextToData(block.__scopeContext__, data, scopeId);
                  block["u" /* EZRuntimeBlockMethod.Update */](scopeOverridedDiff, scopeOverridedData);
              }
          }
      };
      ZComponentSlotProvider4Immediate.prototype.destroyBlocks = function (isDestroyRoot) {
          this.disposing = true;
          if (this.scopeId) {
              for (var _i = 0, _a = this.scopedBlocks; _i < _a.length; _i++) {
                  var block = _a[_i];
                  block["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
              }
              this.scopedBlocks = [];
          }
          for (var _b = 0, _c = this.unscopedBlocks; _b < _c.length; _b++) {
              var block = _c[_b];
              block["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
          }
          this.unscopedBlocks = [];
      };
      return ZComponentSlotProvider4Immediate;
  }(ZComponentSlotProvider4Shared));

  var ZComponentSlotProvider4Lazy = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZComponentSlotProvider4Lazy, _super);
      function ZComponentSlotProvider4Lazy() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ZComponentSlotProvider4Lazy.prototype.enterProviderUpdating = function (diff, data) {
          // 首先，得知道它的 slot容器自定义组件是谁
          this.updatingDiff = diff;
          this.currentData = data;
          var scopeId = this.scopeId;
          for (var _i = 0, _a = this.unscopedBlocks; _i < _a.length; _i++) {
              var block = _a[_i];
              block.__slotUpdating__ = true;
          }
          if (scopeId && this.scopedBlocks.length) {
              for (var _b = 0, _c = this.scopedBlocks; _b < _c.length; _b++) {
                  var block = _c[_b];
                  block.__slotUpdating__ = true;
              }
          }
      };
      ZComponentSlotProvider4Lazy.prototype.destroyBlocks = function (isDestroyRoot) {
          this.disposing = true;
          if (this.scopeId) {
              this.scopedBlocks = [];
          }
          this.unscopedBlocks = [];
      };
      ZComponentSlotProvider4Lazy.prototype.exitProviderUpdating = function () {
          var _a = this, updatingDiff = _a.updatingDiff, currentData = _a.currentData;
          var scopeId = this.scopeId;
          for (var _i = 0, _b = this.unscopedBlocks; _i < _b.length; _i++) {
              var block = _b[_i];
              if (block.__slotUpdating__) {
                  block.__slotUpdating__ = false;
                  block["u" /* EZRuntimeBlockMethod.Update */](updatingDiff, currentData);
              }
          }
          if (scopeId && this.scopedBlocks.length) {
              // 需要保证 diff 和 context 对应 scopeId 的正确性
              var scopeOverridedDiff = Object.create(updatingDiff);
              scopeOverridedDiff[scopeId] = false;
              for (var _c = 0, _d = this.scopedBlocks; _c < _d.length; _c++) {
                  var block = _d[_c];
                  if (block.__slotUpdating__) {
                      block.__slotUpdating__ = false;
                      var scopeOverridedData = assignScopeContextToData(block.__scopeContext__, currentData, scopeId);
                      block["u" /* EZRuntimeBlockMethod.Update */](scopeOverridedDiff, scopeOverridedData);
                  }
              }
          }
          this.updatingDiff = null;
      };
      return ZComponentSlotProvider4Lazy;
  }(ZComponentSlotProvider4Shared));

  /**
   * 需要有三种 createSlotProvider
   * 1. createSlotProvider4UpdatingLinkNode
   * 2. createSlotProvider4LinkNode
   * 3. createSlotProvider4Legacy
   * 4. createSlotProvider4Updating
   *
   * Lazy ==> Tree
   * Immediate ==> Legacy
   * WithLinkNode 只看是否挂载 Blocks
   */
  /**/
  function createSlotProvider4Lazy(bindLinkNode, blockFactory, initData, componentInstance, scopeId) {
      return new ZComponentSlotProvider4Lazy(blockFactory, initData, componentInstance, scopeId, bindLinkNode);
  }
  function createSlotProvider4Immediate(bindLinkNode, blockFactory, initData, componentInstance, scopeId) {
      return new ZComponentSlotProvider4Immediate(blockFactory, initData, componentInstance, scopeId, bindLinkNode);
  }
  var createSlotProvider = createSlotProviderImpl4Default;
  function createSlotProviderImpl4Default(blockFactory, initData, componentInstance, scopeId) {
      return new ZComponentSlotProvider4Immediate(blockFactory, initData, componentInstance, scopeId, null);
  }
  function setCreateSlotProviderImplToSwitchable() {
      createSlotProvider = createSlotProviderImpl4Switchable;
  }
  function createSlotProviderImpl4Switchable(blockFactory, initData, componentInstance, scopeId) {
      return componentInstance.root.option.createSlotProvider(blockFactory, initData, componentInstance, scopeId);
  }

  var SlotDynamicNameFallbackContainer = /** @class */ /*#__PURE__*/ (function () {
      function SlotDynamicNameFallbackContainer(slotName, componentInstance, fallbackContext, injectBlock, fallbackFactory) {
          this.bType = 4 /* IZRuntimeBlockType.SlotProviderItemWithDynamicNameFallbackSwitch */;
          this._name = slotName;
          this._block4Inject = injectBlock;
          this._factory4Fallback = fallbackFactory;
          this._component = componentInstance;
          this._fallbackContext = fallbackContext;
          if (injectBlock) {
              this._update4Inject = injectBlock["u" /* EZRuntimeBlockMethod.Update */].bind(injectBlock);
              injectBlock["u" /* EZRuntimeBlockMethod.Update */] = this.update4InjectBinding.bind(this);
          }
      }
      SlotDynamicNameFallbackContainer.prototype["c" /* EZRuntimeBlockMethod.Create */] = function () {
          var injectBlock = this._block4Inject;
          var componentInstance = this._component;
          if (injectBlock && !injectBlock["c" /* EZRuntimeBlockMethod.Create */]()) {
              this._isFallback = false;
          }
          else {
              this._isFallback = true;
              this._block4Fallback = this._factory4Fallback(componentInstance, this._fallbackContext);
              this._block4Fallback["c" /* EZRuntimeBlockMethod.Create */]();
          }
          this._anchor4Head = componentInstance.document.createComment();
          this._anchor4Name = componentInstance.document.createComment(getSlotDynamicNameAnchorContent(this._name));
          this._anchor4Between = helperCreateBlockAnchorState(this._component, this._anchor4Head);
          this._anchor4Tail = helperCreateBlockAnchorState(this._component, this._anchor4Head);
          return 0;
      };
      /* #__PRIVATE_HYDRATE__ */
      SlotDynamicNameFallbackContainer.prototype["l" /* EZRuntimeBlockMethod.Link */] = function (nodes) {
          // TODO 混合匹配性只看是不是 fallback
          var componentInstance = this._component;
          this._anchor4Head = helperHydrateBlockAnchor(nodes, componentInstance);
          var nextStopReverseIndex4Inject = helperHydrateBlockAnchorTryMatchReverseIndex(nodes, this._anchor4Head);
          helperHydratePushStopReverseIndex(nodes, nextStopReverseIndex4Inject);
          var matchResult = helperHydrateBlockAnchor4CommentTagMatch(nodes, componentInstance, "s" /* EZRuntimeBlockAnchorCommentTag.SlotDynamicName */, getSlotDynamicNameAnchorContent(this._name));
          this._anchor4Name = matchResult[0];
          nodes.treatErrorAsWarning += matchResult[1];
          // 内部节点混合
          var injectBlock = this._block4Inject;
          var injectHasChildren;
          if (injectBlock) {
              injectHasChildren = !injectBlock["l" /* EZRuntimeBlockMethod.Link */](nodes);
          }
          else {
              injectHasChildren = false;
          }
          nodes.treatErrorAsWarning -= matchResult[1];
          helperHydratePopStopReverseIndex(nodes);
          this._anchor4Between = helperHydrateBlockAnchorState(nodes, componentInstance, this._anchor4Head);
          var nextStopReverseIndex4Fallback = helperHydrateBlockAnchorTryMatchReverseIndex(nodes, this._anchor4Head);
          helperHydratePushStopReverseIndex(nodes, nextStopReverseIndex4Fallback);
          if (injectHasChildren) {
              this._isFallback = false;
          }
          else {
              this._isFallback = true;
              this._block4Fallback = this._factory4Fallback(componentInstance, this._fallbackContext);
              this._block4Fallback["l" /* EZRuntimeBlockMethod.Link */](nodes);
          }
          helperHydratePopStopReverseIndex(nodes);
          this._anchor4Tail = helperHydrateBlockAnchorState(nodes, componentInstance, this._anchor4Head);
          this._target = nodes.target;
          return 0;
      };
      SlotDynamicNameFallbackContainer.prototype.updateScopeContext = function (scopeContext) {
          if (this._block4Inject) {
              this._block4Inject.__scopeContext__ = scopeContext;
          }
      };
      SlotDynamicNameFallbackContainer.prototype["m" /* EZRuntimeBlockMethod.Mount */] = function (target, anchor) {
          this._target = target;
          if (this._anchor4Head) {
              this._target.insertBefore(this._anchor4Head, anchor || null);
          }
          if (this._anchor4Name) {
              this._target.insertBefore(this._anchor4Name, anchor || null);
          }
          if (this._block4Inject) {
              this._block4Inject["m" /* EZRuntimeBlockMethod.Mount */](target, anchor);
          }
          if (this._anchor4Between) {
              helperDocumentInsertAnchorState(this._target, this._anchor4Between, anchor);
          }
          if (this._isFallback) {
              this._block4Fallback["m" /* EZRuntimeBlockMethod.Mount */](target, anchor);
          }
          if (this._anchor4Tail) {
              helperDocumentInsertAnchorState(this._target, this._anchor4Tail, anchor);
          }
      };
      SlotDynamicNameFallbackContainer.prototype.updateScopeAndFallbackContext = function (scopeDiff, scopeContext, fallbackDiff, fallbackContext) {
          this._fallbackContext = fallbackContext;
          if (this._update4Inject) {
              var hasNoChildren = this._update4Inject(scopeDiff, scopeContext);
              if (!hasNoChildren) {
                  if (this._isFallback) {
                      this._isFallback = false;
                      // 移除 fallback
                      this._block4Fallback["d" /* EZRuntimeBlockMethod.Destroy */](true);
                      this._block4Fallback = null;
                  }
              }
              else {
                  if (this._isFallback) {
                      this._block4Fallback["u" /* EZRuntimeBlockMethod.Update */](fallbackDiff, fallbackContext);
                  }
                  else {
                      this._isFallback = true;
                      // 这里 data 不对
                      this._block4Fallback = this._factory4Fallback(this._component, this._fallbackContext);
                      this._block4Fallback["c" /* EZRuntimeBlockMethod.Create */]();
                      this._block4Fallback["m" /* EZRuntimeBlockMethod.Mount */](this._target, helperAnchor(this._anchor4Tail));
                  }
              }
          }
          else {
              // 当前没有 Slot 结构，只检查 Fallback
              if (this._isFallback) {
                  this._block4Fallback["u" /* EZRuntimeBlockMethod.Update */](fallbackDiff, fallbackContext);
              }
          }
          return 0;
      };
      SlotDynamicNameFallbackContainer.prototype.updateFallbackContext = function (fallbackDiff, fallbackContext) {
          this._fallbackContext = fallbackContext;
          if (this._isFallback) {
              this._block4Fallback["u" /* EZRuntimeBlockMethod.Update */](fallbackDiff, fallbackContext);
          }
          return 0;
      };
      SlotDynamicNameFallbackContainer.prototype["u" /* EZRuntimeBlockMethod.Update */] = function (diff, data) {
          // empty;
          return 0;
      };
      SlotDynamicNameFallbackContainer.prototype["d" /* EZRuntimeBlockMethod.Destroy */] = function (isDestroyRoot) {
          if (this._isFallback) {
              this._isFallback = false;
              this._block4Fallback["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
              this._block4Fallback = null;
          }
          else {
              if (this._block4Inject) {
                  this._block4Inject["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
                  this._block4Inject = null;
              }
          }
          if (isDestroyRoot) {
              helperDestroyBlockAnchor(this._anchor4Head);
              helperDestroyBlockAnchor(this._anchor4Name);
              helperDestroyBlockAnchorState(this._anchor4Between);
              helperDestroyBlockAnchorState(this._anchor4Tail);
              this._anchor4Head = null;
              this._anchor4Name = null;
              this._anchor4Between = null;
              this._anchor4Tail = null;
          }
      };
      SlotDynamicNameFallbackContainer.prototype.updateDynamicNameAndFallbackContext = function (slotName, injectBlock, fallbackDiff, fallbackContext) {
          this._name = slotName;
          var anchorNameRoot = this._anchor4Name.root;
          if (anchorNameRoot) {
              anchorNameRoot.textContent = getSlotDynamicNameAnchorContent(slotName);
          }
          this._fallbackContext = fallbackContext;
          // 之前是不是 fallback
          // 新的是不是存在
          if (injectBlock) {
              // staticProvider 一定会进来
              // 不一样 slotName
              var hasNoChildren = injectBlock["c" /* EZRuntimeBlockMethod.Create */]();
              injectBlock["m" /* EZRuntimeBlockMethod.Mount */](this._target, helperAnchor(this._anchor4Between));
              /**
               * 只有当确定要替换 injectBlock 必须 Destroy
               *   - hasNoChildren === 1 得创建 fallback
               *   - hasNoChildren === 0 得销毁 fallback
               */
              if (this._block4Inject) {
                  this._block4Inject["d" /* EZRuntimeBlockMethod.Destroy */](true);
                  this._block4Inject = null;
              }
              if (hasNoChildren) {
                  // 要求之前是 fallback
                  if (!this._isFallback) {
                      this._isFallback = true;
                      this._block4Fallback = this._factory4Fallback(this._component, fallbackContext);
                      this._block4Fallback["c" /* EZRuntimeBlockMethod.Create */]();
                      this._block4Fallback["m" /* EZRuntimeBlockMethod.Mount */](this._target, helperAnchor(this._anchor4Tail));
                  }
              }
              else {
                  // 之前全废掉
                  if (this._isFallback) {
                      this._isFallback = false;
                      this._block4Fallback["d" /* EZRuntimeBlockMethod.Destroy */](true);
                      this._block4Fallback = null;
                  }
              }
              this._block4Inject = injectBlock;
              this._update4Inject = injectBlock["u" /* EZRuntimeBlockMethod.Update */].bind(injectBlock);
              injectBlock["u" /* EZRuntimeBlockMethod.Update */] = this.update4InjectBinding.bind(this);
          }
          else {
              // 可能一样，只能说这次一定找不到
              // 找不到对应名称的 provider，必须降级到 fallback
              if (this._isFallback) {
                  this._block4Fallback["u" /* EZRuntimeBlockMethod.Update */](fallbackDiff, fallbackContext);
              }
              else {
                  if (this._block4Inject) {
                      this._block4Inject["d" /* EZRuntimeBlockMethod.Destroy */](true);
                      this._block4Inject = null;
                  }
                  this._isFallback = true;
                  this._block4Fallback = this._factory4Fallback(this._component, fallbackContext);
                  this._block4Fallback["c" /* EZRuntimeBlockMethod.Create */]();
                  this._block4Fallback["m" /* EZRuntimeBlockMethod.Mount */](this._target, helperAnchor(this._anchor4Tail));
              }
          }
          return 0;
      };
      SlotDynamicNameFallbackContainer.prototype.update4InjectBinding = function (diff, data) {
          if (this._update4Inject) {
              var hasNoChildren = this._update4Inject(diff, data);
              if (!hasNoChildren) {
                  if (this._isFallback) {
                      this._isFallback = false;
                      // 移除 fallback
                      this._block4Fallback["d" /* EZRuntimeBlockMethod.Destroy */](true);
                      this._block4Fallback = null;
                  }
              }
              else {
                  if (this._isFallback) ;
                  else {
                      this._isFallback = true;
                      // 这里 data 不对
                      this._block4Fallback = this._factory4Fallback(this._component, this._fallbackContext);
                      this._block4Fallback["c" /* EZRuntimeBlockMethod.Create */]();
                      this._block4Fallback["m" /* EZRuntimeBlockMethod.Mount */](this._target, helperAnchor(this._anchor4Tail));
                  }
              }
          }
          return 0;
      };
      return SlotDynamicNameFallbackContainer;
  }());

  var SlotEmptyContainer = /** @class */ /*#__PURE__*/ (function () {
      function SlotEmptyContainer(componentInstance) {
          this._component = componentInstance;
      }
      SlotEmptyContainer.prototype["c" /* EZRuntimeBlockMethod.Create */] = function () {
          this._anchor = this._component.document.createComment();
          return 0;
      };
      /* #__PRIVATE_HYDRATE__ */
      SlotEmptyContainer.prototype["l" /* EZRuntimeBlockMethod.Link */] = function (nodes) {
          this._anchor = helperHydrateBlockAnchor(nodes, this._component);
          return 0;
      };
      SlotEmptyContainer.prototype["m" /* EZRuntimeBlockMethod.Mount */] = function (target, anchor) {
          if (this._anchor) {
              helperDocumentInsertAnchor(target, this._anchor, anchor || null);
          }
      };
      SlotEmptyContainer.prototype["u" /* EZRuntimeBlockMethod.Update */] = function () {
          return 0;
      };
      SlotEmptyContainer.prototype["d" /* EZRuntimeBlockMethod.Destroy */] = function (isDestroyRoot) {
          if (isDestroyRoot && this._anchor) {
              helperDestroyBlockAnchor(this._anchor);
              this._anchor = null;
          }
      };
      return SlotEmptyContainer;
  }());

  var SlotFallbackContainer = /** @class */ /*#__PURE__*/ (function () {
      function SlotFallbackContainer(slotName, componentInstance, fallbackContext, injectBlock, fallbackFactory) {
          this.bType = 2 /* IZRuntimeBlockType.SlotProviderItemWithFallbackSwitch */;
          this._name = slotName;
          this._block4Inject = injectBlock;
          this._factory4Fallback = fallbackFactory;
          this._component = componentInstance;
          this._fallbackContext = fallbackContext;
          this._update4Inject = injectBlock["u" /* EZRuntimeBlockMethod.Update */].bind(injectBlock);
          injectBlock["u" /* EZRuntimeBlockMethod.Update */] = this.update4InjectBinding.bind(this);
      }
      SlotFallbackContainer.prototype["c" /* EZRuntimeBlockMethod.Create */] = function () {
          // 创建一个注释，标记 name
          var componentInstance = this._component;
          var hasNoChildren = this._block4Inject["c" /* EZRuntimeBlockMethod.Create */]();
          if (!hasNoChildren) {
              this._isFallback = false;
          }
          else {
              this._isFallback = true;
              this._block4Fallback = this._factory4Fallback(componentInstance, this._fallbackContext);
              this._block4Fallback["c" /* EZRuntimeBlockMethod.Create */]();
          }
          this._anchor4Head = componentInstance.document.createComment();
          this._anchor4Between = componentInstance.document.cloneComment(this._anchor4Head);
          return 0;
      };
      /* #__PRIVATE_HYDRATE__ */
      SlotFallbackContainer.prototype["l" /* EZRuntimeBlockMethod.Link */] = function (nodes) {
          var componentInstance = this._component;
          this._anchor4Head = helperHydrateBlockAnchor(nodes, componentInstance);
          var nextStopReverseIndex4Inject = helperHydrateBlockAnchorTryMatchReverseIndex(nodes, this._anchor4Head);
          helperHydratePushStopReverseIndex(nodes, nextStopReverseIndex4Inject);
          var hasNoChildren = this._block4Inject["l" /* EZRuntimeBlockMethod.Link */](nodes);
          helperHydratePopStopReverseIndex(nodes);
          this._anchor4Between = helperHydrateBlockAnchor(nodes, componentInstance, this._anchor4Head);
          var nextStopReverseIndex4Fallback = helperHydrateBlockAnchorTryMatchReverseIndex(nodes, this._anchor4Head);
          helperHydratePushStopReverseIndex(nodes, nextStopReverseIndex4Fallback);
          if (!hasNoChildren) {
              this._isFallback = false;
          }
          else {
              this._isFallback = true;
              this._block4Fallback = this._factory4Fallback(componentInstance, this._fallbackContext);
              this._block4Fallback["l" /* EZRuntimeBlockMethod.Link */](nodes);
          }
          helperHydratePopStopReverseIndex(nodes);
          this._anchor4Tail = helperHydrateBlockAnchorState(nodes, componentInstance, this._anchor4Head);
          this._target = nodes.target;
          return 0;
      };
      SlotFallbackContainer.prototype.updateScopeContext = function (scopeContext) {
          this._block4Inject.__scopeContext__ = scopeContext;
      };
      SlotFallbackContainer.prototype["m" /* EZRuntimeBlockMethod.Mount */] = function (target, anchor) {
          this._target = target;
          if (this._anchor4Head) {
              this._target.insertBefore(this._anchor4Head, anchor || null);
          }
          this._block4Inject["m" /* EZRuntimeBlockMethod.Mount */](target, anchor);
          if (this._anchor4Between) {
              this._target.insertBefore(this._anchor4Between, anchor || null);
          }
          if (this._isFallback) {
              this._block4Fallback["m" /* EZRuntimeBlockMethod.Mount */](target, anchor);
          }
          this._anchor4Tail = helperCreateBlockAnchorState(this._component, this._anchor4Head);
          if (this._anchor4Tail) {
              helperDocumentInsertAnchorState(this._target, this._anchor4Tail, anchor);
          }
      };
      SlotFallbackContainer.prototype.updateScopeAndFallbackContext = function (scopeDiff, scopeContext, fallbackDiff, fallbackContext) {
          this._fallbackContext = fallbackContext;
          var hasNoChildren = this._update4Inject(scopeDiff, scopeContext);
          if (!hasNoChildren) {
              if (this._isFallback) {
                  this._isFallback = false;
                  // 移除 fallback
                  this._block4Fallback["d" /* EZRuntimeBlockMethod.Destroy */](true);
                  this._block4Fallback = null;
              }
          }
          else {
              if (this._isFallback) {
                  this._block4Fallback["u" /* EZRuntimeBlockMethod.Update */](fallbackDiff, fallbackContext);
              }
              else {
                  this._isFallback = true;
                  // 这里 data 不对
                  this._block4Fallback = this._factory4Fallback(this._component, this._fallbackContext);
                  this._block4Fallback["c" /* EZRuntimeBlockMethod.Create */]();
                  this._block4Fallback["m" /* EZRuntimeBlockMethod.Mount */](this._target, helperAnchor(this._anchor4Tail));
              }
          }
          return 0;
      };
      SlotFallbackContainer.prototype.updateFallbackContext = function (fallbackDiff, fallbackContext) {
          this._fallbackContext = fallbackContext;
          if (this._isFallback) {
              this._block4Fallback["u" /* EZRuntimeBlockMethod.Update */](fallbackDiff, fallbackContext);
          }
          return 0;
      };
      SlotFallbackContainer.prototype["u" /* EZRuntimeBlockMethod.Update */] = function (diff, data) {
          // empty;
          return 0;
      };
      SlotFallbackContainer.prototype["d" /* EZRuntimeBlockMethod.Destroy */] = function (isDestroyRoot) {
          // 防重入
          if (this._isFallback) {
              this._isFallback = false;
              this._block4Fallback["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
              this._block4Fallback = null;
          }
          // 由于 _block4Inject 一定存在，不销毁会导致 内部 unscopedBlocks 没被移除
          if (this._block4Inject) {
              this._block4Inject["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
              this._block4Inject = null;
          }
          if (isDestroyRoot) {
              helperDestroyBlockAnchor(this._anchor4Head);
              helperDestroyBlockAnchor(this._anchor4Between);
              helperDestroyBlockAnchorState(this._anchor4Tail);
              this._anchor4Head = null;
              this._anchor4Between = null;
              this._anchor4Tail = null;
          }
      };
      SlotFallbackContainer.prototype.update4InjectBinding = function (diff, data) {
          var hasNoChildren = this._update4Inject(diff, data);
          if (!hasNoChildren) {
              if (this._isFallback) {
                  this._isFallback = false;
                  // 移除 fallback
                  this._block4Fallback["d" /* EZRuntimeBlockMethod.Destroy */](true);
                  this._block4Fallback = null;
              }
          }
          else {
              if (this._isFallback) ;
              else {
                  this._isFallback = true;
                  // 这里 data 不对
                  this._block4Fallback = this._factory4Fallback(this._component, this._fallbackContext);
                  this._block4Fallback["c" /* EZRuntimeBlockMethod.Create */]();
                  this._block4Fallback["m" /* EZRuntimeBlockMethod.Mount */](this._target, helperAnchor(this._anchor4Tail));
              }
          }
          return 0;
      };
      return SlotFallbackContainer;
  }());

  var TemplateUseContainerBlock = /** @class */ /*#__PURE__*/ (function () {
      function TemplateUseContainerBlock(_bc, _component, _data) {
          this._bc = _bc;
          this._component = _component;
          this._currentName = this._bc[2 /* ETemplateUseContainerBlockContextIndex.GetTemplateName */](_component, _data);
          var templateFragment = helperGetBlock4TemplateUseContainer(this._bc[0 /* ETemplateUseContainerBlockContextIndex.RenderContext */]["t" /* ECompilerRenderContextSymbol.UsedTemplates */], this._currentName, this._bc[1 /* ETemplateUseContainerBlockContextIndex.RuntimeContext */]);
          this._currentContext = this._bc[4 /* ETemplateUseContainerBlockContextIndex.GetTemplateContext */](_component, _data);
          // 重置空对象
          if (!this._currentContext) {
              this._currentContext = this._emptyContext = {};
          }
          this._currentBlock = helperInitBlock(templateFragment, _component, this._currentContext);
      }
      TemplateUseContainerBlock.prototype.a = function () {
          return this._currentAnchorHead;
      };
      TemplateUseContainerBlock.prototype.c = function () {
          var componentInstance = this._component;
          this._currentAnchorHead = helperCreateBlockAnchor(componentInstance);
          this._currentAnchor4Name = helperCreateBlockAnchor(componentInstance, null, getTemplateNameAnchorContent(this._currentName));
          if (this._currentBlock) {
              // tslint:disable-next-line no-bitwise
              this._currentBlock["c" /* EZRuntimeBlockMethod.Create */]();
          }
          this._currentAnchor = helperCreateBlockAnchorState(componentInstance, this._currentAnchorHead);
          return 0;
      };
      /* #__PRIVATE_HYDRATE__ */
      TemplateUseContainerBlock.prototype.l = function (nodes) {
          var componentInstance = this._component;
          this._currentAnchorHead = helperHydrateBlockAnchor(nodes, componentInstance);
          // 判断一次
          var nextStopReverseIndex = helperHydrateBlockAnchorTryMatchReverseIndex(nodes, this._currentAnchorHead);
          helperHydratePushStopReverseIndex(nodes, nextStopReverseIndex);
          // 先要求一个 `t:templateName`，stopReverseIndex 按照已有要求执行
          var matchResult = helperHydrateBlockAnchor4CommentTagMatch(nodes, componentInstance, "t" /* EZRuntimeBlockAnchorCommentTag.Template */, getTemplateNameAnchorContent(this._currentName));
          this._currentAnchor4Name = matchResult[0];
          nodes.treatErrorAsWarning += matchResult[1];
          if (this._currentBlock) {
              // tslint:disable-next-line no-bitwise
              this._currentBlock["l" /* EZRuntimeBlockMethod.Link */](nodes);
          }
          nodes.treatErrorAsWarning -= matchResult[1];
          helperHydratePopStopReverseIndex(nodes);
          this._currentAnchor = helperHydrateBlockAnchorState(nodes, componentInstance, this._currentAnchorHead);
          this._currentTarget = nodes.target;
          return 0;
      };
      TemplateUseContainerBlock.prototype.m = function (target, anchor) {
          this._currentTarget = target;
          helperDocumentInsertAnchor(target, this._currentAnchorHead, anchor);
          helperDocumentInsertAnchor(target, this._currentAnchor4Name, anchor);
          if (this._currentBlock) {
              this._currentBlock["m" /* EZRuntimeBlockMethod.Mount */](target, anchor);
          }
          helperDocumentInsertAnchorState(target, this._currentAnchor, anchor);
      };
      TemplateUseContainerBlock.prototype.u = function (diff, data) {
          var this$1 = this;

          var componentInstance = this._component;
          // 需要考虑 name 变化和 context 变化
          var newContext = this._currentContext;
          var newName = this._currentName;
          var templateContextDepList = this._bc[5 /* ETemplateUseContainerBlockContextIndex.TemplateContextDepList */];
          if (templateContextDepList.length) {
              for (var _i = 0, templateContextDepList_1 = templateContextDepList; _i < templateContextDepList_1.length; _i++) {
                  var depSymbol = templateContextDepList_1[_i];
                  if (diff[depSymbol]) {
                      newContext = this$1._bc[4 /* ETemplateUseContainerBlockContextIndex.GetTemplateContext */](componentInstance, data);
                      break;
                  }
              }
          }
          var templateNameDepList = this._bc[3 /* ETemplateUseContainerBlockContextIndex.TemplateNameDepList */];
          if (templateNameDepList.length) {
              for (var _a = 0, templateNameDepList_1 = templateNameDepList; _a < templateNameDepList_1.length; _a++) {
                  var depSymbol = templateNameDepList_1[_a];
                  if (diff[depSymbol]) {
                      newName = this$1._bc[2 /* ETemplateUseContainerBlockContextIndex.GetTemplateName */](componentInstance, data);
                      break;
                  }
              }
          }
          if (!newContext) {
              // 保持同一个 emptyContext 对象
              newContext = this._emptyContext ? this._emptyContext : (this._emptyContext = {});
          }
          var isNameChanged = newName !== this._currentName;
          var isContextChanged = newContext !== this._currentContext;
          if (isNameChanged) {
              // 直接重建即可
              if (this._currentBlock) {
                  this._currentBlock["d" /* EZRuntimeBlockMethod.Destroy */](true);
              }
              // Web 模式进入
              var anchorNameRoot = this._currentAnchor4Name.root;
              if (anchorNameRoot) {
                  anchorNameRoot.textContent = getTemplateNameAnchorContent(newName);
              }
              var newFragment = helperGetBlock4TemplateUseContainer(this._bc[0 /* ETemplateUseContainerBlockContextIndex.RenderContext */]["t" /* ECompilerRenderContextSymbol.UsedTemplates */], newName, this._bc[1 /* ETemplateUseContainerBlockContextIndex.RuntimeContext */]);
              this._currentBlock = helperInitBlock(newFragment, componentInstance, newContext);
              if (this._currentBlock) {
                  this._currentBlock["c" /* EZRuntimeBlockMethod.Create */]();
                  this._currentBlock["m" /* EZRuntimeBlockMethod.Mount */](this._currentTarget, helperAnchor(this._currentAnchor));
              }
          }
          else if (isContextChanged) {
              if (this._currentBlock) {
                  helperUpdateBlock4TemplateUseContainer(this._currentBlock, this._currentContext, newContext);
              }
          }
          // 更新数据
          this._currentName = newName;
          this._currentContext = newContext;
          return 0;
      };
      TemplateUseContainerBlock.prototype.d = function (isDestroyRoot) {
          if (this._currentBlock) {
              this._currentBlock["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
              this._currentBlock = null;
          }
          if (isDestroyRoot) {
              helperDestroyBlockAnchor(this._currentAnchorHead);
              helperDestroyBlockAnchor(this._currentAnchor4Name);
              helperDestroyBlockAnchorState(this._currentAnchor);
              this._currentAnchorHead = null;
              this._currentAnchor4Name = null;
              this._currentAnchor = null;
          }
      };
      return TemplateUseContainerBlock;
  }());
  function createBlock(blockContext, componentInstance, context) {
      return new TemplateUseContainerBlock(blockContext, componentInstance, context);
  }
  function helperTemplateUseContainerFactoryCreate(renderContext, runtimeContext, getTemplateName, templateNameDepList, getTemplateContext, templateContextDepList) {
      return createBlock.bind(null, [
          renderContext,
          runtimeContext,
          getTemplateName,
          templateNameDepList,
          getTemplateContext,
          templateContextDepList ]);
  }

  var NonVirtualFragment = /** @class */ /*#__PURE__*/ (function () {
      function NonVirtualFragment(renderContext, componentIs, componentInstance, context, baseFragment) {
          this.renderContext = renderContext;
          this.componentIs = componentIs;
          this.componentInstance = componentInstance;
          this.helper = renderContext["h" /* ECompilerRuntimeContextSymbol.Helper */];
          this._fragment = baseFragment.fragment(componentInstance, context);
      }
      NonVirtualFragment.prototype["c" /* EZRuntimeBlockMethod.Create */] = function () {
          var _a = this, renderContext = _a.renderContext, helper = _a.helper, component = _a.componentInstance, _fragment = _a._fragment;
          var factory4NonVirtual = renderContext["g" /* ECompilerRuntimeContextSymbol.GetElementByStringTag */]('non-virtual');
          this.zInstance = helper["e" /* ECompilerRuntimeHelperSymbol.CreateElement */](component, factory4NonVirtual, 0, 0);
          this.updateDomAttrs();
          return _fragment["c" /* EZRuntimeBlockMethod.Create */]();
      };
      NonVirtualFragment.prototype["l" /* EZRuntimeBlockMethod.Link */] = function (nodes) {
          var _a = this, renderContext = _a.renderContext, helper = _a.helper, component = _a.componentInstance, _fragment = _a._fragment;
          var factory4NonVirtual = renderContext["g" /* ECompilerRuntimeContextSymbol.GetElementByStringTag */]('non-virtual');
          this.zInstance = helper["E" /* ECompilerRuntimeHelperSymbol.HydrateClaimElement */](nodes, component, factory4NonVirtual, 0, 0);
          var node = helper["L" /* ECompilerRuntimeHelperSymbol.HydrateClaimChildren */](this.zInstance);
          var returnFlag = _fragment["l" /* EZRuntimeBlockMethod.Link */](node);
          helper["J" /* ECompilerRuntimeHelperSymbol.HydrateClearChildren */](node);
          return returnFlag;
      };
      NonVirtualFragment.prototype["m" /* EZRuntimeBlockMethod.Mount */] = function (target, anchor) {
          var _a = this, helper = _a.helper, _fragment = _a._fragment, ZElementInstance = _a.zInstance;
          helper["i" /* ECompilerRuntimeHelperSymbol.DocumentInsert */](target, ZElementInstance, anchor);
          _fragment["m" /* EZRuntimeBlockMethod.Mount */](ZElementInstance);
      };
      NonVirtualFragment.prototype["u" /* EZRuntimeBlockMethod.Update */] = function (diff, data) {
          var _fragment = this._fragment;
          this.updateDomAttrs();
          return _fragment["u" /* EZRuntimeBlockMethod.Update */](diff, data);
      };
      NonVirtualFragment.prototype["d" /* EZRuntimeBlockMethod.Destroy */] = function (isDestroyRoot) {
          var _a = this, helper = _a.helper, _fragment = _a._fragment, ZElementInstance = _a.zInstance;
          if (isDestroyRoot) {
              helper["r" /* ECompilerRuntimeHelperSymbol.ElementRemove */](ZElementInstance);
          }
          else {
              helper["d" /* ECompilerRuntimeHelperSymbol.ElementDestroyButNotRemove */](ZElementInstance);
          }
          _fragment["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
      };
      NonVirtualFragment.prototype.updateDomAttrs = function () {
          var _a = this, component = _a.componentInstance, zInstance = _a.zInstance, componentIs = _a.componentIs;
          var zInstance4VirtualHost = zInstance;
          var com = component;
          zInstance4VirtualHost.setAttrs({ is: componentIs }, { is: true });
          if (!com._receivedProps) {
              return;
          }
          var _b = com._receivedProps, id = _b.id, className = _b.className, style = _b.style;
          if (typeof id !== 'undefined') {
              zInstance4VirtualHost.setAttrs({ id: id }, { id: true });
          }
          else {
              zInstance4VirtualHost.removeAttribute('id');
          }
          if (typeof className !== 'undefined') {
              zInstance4VirtualHost.setClassName(className);
          }
          else {
              zInstance4VirtualHost.removeAttribute('class');
          }
          if (typeof style !== 'undefined') {
              zInstance4VirtualHost.setStyleInline(style);
          }
          else {
              zInstance4VirtualHost.removeAttribute('style');
          }
      };
      return NonVirtualFragment;
  }());

  var Fragment4NonVirtual = /** @class */ /*#__PURE__*/ (function () {
      function Fragment4NonVirtual(fragment, renderContext, componentIs) {
          this.baseFragment = fragment;
          this.renderContext = renderContext;
          this.componentIs = componentIs;
      }
      Fragment4NonVirtual.prototype.fragment = function (component, context) {
          var _a = this, renderContext = _a.renderContext, baseFragment = _a.baseFragment, componentIs = _a.componentIs;
          return new NonVirtualFragment(renderContext, componentIs, component, context, baseFragment);
      };
      return Fragment4NonVirtual;
  }());

  var ConditionContainerBlock = /** @class */ /*#__PURE__*/ (function () {
      function ConditionContainerBlock(_bc, _component, _data) {
          this._bc = _bc;
          this._component = _component;
          var conditionIndexFactory = _bc[3 /* EConditionContainerBlockContextIndex.ConditionIndexFactory */];
          var conditionBlockFactory = _bc[4 /* EConditionContainerBlockContextIndex.ConditionBlockFactory */];
          var conditionFactory = _bc[0 /* EConditionContainerBlockContextIndex.ConditionFactory */];
          this._selectedBlockIndex = conditionIndexFactory ? conditionIndexFactory(_component, _data) : 1;
          this._selectedBlockType = conditionBlockFactory
              ? conditionBlockFactory(this._selectedBlockIndex)
              : conditionFactory(_component, _data);
          this._currentBlock = helperInitBlock(this._selectedBlockType, _component, _data);
      }
      ConditionContainerBlock.prototype.a = function () {
          return this._currentAnchorHead;
      };
      ConditionContainerBlock.prototype.c = function () {
          var hasNoChildren = this._bc[5 /* EConditionContainerBlockContextIndex.kDefaultHasNoChildren */];
          this._currentAnchorHead = helperCreateBlockAnchor(this._component);
          this._currentAnchor4Index = helperCreateBlockAnchor(this._component, null, getConditionIndexAnchorContent(this._selectedBlockIndex));
          if (this._currentBlock) {
              // tslint:disable-next-line no-bitwise
              hasNoChildren &= this._currentBlock["c" /* EZRuntimeBlockMethod.Create */]();
          }
          this._currentAnchor = helperCreateBlockAnchor(this._component, this._currentAnchorHead);
          return hasNoChildren;
      };
      /* #__PRIVATE_HYDRATE__ */
      ConditionContainerBlock.prototype.l = function (nodes) {
          var hasNoChildren = this._bc[5 /* EConditionContainerBlockContextIndex.kDefaultHasNoChildren */];
          this._currentAnchorHead = helperHydrateBlockAnchor(nodes, this._component);
          var nextStopReverseIndex = helperHydrateBlockAnchorTryMatchReverseIndex(nodes, this._currentAnchorHead);
          helperHydratePushStopReverseIndex(nodes, nextStopReverseIndex);
          // 要求一个 c 开头的 comment，返回结果
          // 给了一定正确的，然后可以直接 hydrate 下去
          var matchResult = helperHydrateBlockAnchor4CommentTagMatch(nodes, this._component, "c" /* EZRuntimeBlockAnchorCommentTag.Condition */, getConditionIndexAnchorContent(this._selectedBlockIndex));
          this._currentAnchor4Index = matchResult[0];
          nodes.treatErrorAsWarning += matchResult[1];
          if (this._currentBlock) {
              // tslint:disable-next-line no-bitwise
              hasNoChildren &= this._currentBlock["l" /* EZRuntimeBlockMethod.Link */](nodes);
          }
          nodes.treatErrorAsWarning -= matchResult[1];
          helperHydratePopStopReverseIndex(nodes);
          this._currentAnchor = helperHydrateBlockAnchor(nodes, this._component, this._currentAnchorHead);
          this._currentTarget = nodes.target;
          return hasNoChildren;
      };
      ConditionContainerBlock.prototype.m = function (target, anchor) {
          this._currentTarget = target;
          helperDocumentInsertAnchor(target, this._currentAnchorHead, anchor);
          helperDocumentInsertAnchor(target, this._currentAnchor4Index, anchor);
          if (this._currentBlock) {
              this._currentBlock["m" /* EZRuntimeBlockMethod.Mount */](target, anchor);
          }
          helperDocumentInsertAnchor(target, this._currentAnchor, anchor);
      };
      ConditionContainerBlock.prototype.u = function (diff, data) {
          var hasNoChildren = this._bc[5 /* EConditionContainerBlockContextIndex.kDefaultHasNoChildren */];
          var conditionIndexFactory = this._bc[3 /* EConditionContainerBlockContextIndex.ConditionIndexFactory */];
          var conditionBlockFactory = this._bc[4 /* EConditionContainerBlockContextIndex.ConditionBlockFactory */];
          var conditionFactory = this._bc[0 /* EConditionContainerBlockContextIndex.ConditionFactory */];
          // tslint:disable-next-line no-conditional-assignment
          var newSelectedBlockIndex = conditionIndexFactory ? conditionIndexFactory(this._component, data) : 1;
          var newSelectedBlockType = conditionBlockFactory
              ? conditionBlockFactory(newSelectedBlockIndex)
              : conditionFactory(this._component, data);
          if (this._selectedBlockType !== newSelectedBlockType) {
              this._selectedBlockIndex = newSelectedBlockIndex;
              this._selectedBlockType = newSelectedBlockType;
              // 修改 comment
              // Web 模式进入
              var anchorNameRoot = this._currentAnchor4Index.root;
              if (anchorNameRoot) {
                  anchorNameRoot.textContent = getConditionIndexAnchorContent(this._selectedBlockIndex);
              }
              if (this._currentBlock) {
                  this._currentBlock["d" /* EZRuntimeBlockMethod.Destroy */](true);
              }
              this._currentBlock = helperInitBlock(this._selectedBlockType, this._component, data);
              if (this._currentBlock) {
                  // tslint:disable-next-line no-bitwise
                  hasNoChildren &= this._currentBlock["c" /* EZRuntimeBlockMethod.Create */]();
                  this._currentBlock["m" /* EZRuntimeBlockMethod.Mount */](this._currentTarget, this._currentAnchor);
              }
          }
          else {
              if (this._currentBlock) {
                  // tslint:disable-next-line no-bitwise
                  hasNoChildren &= this._currentBlock["u" /* EZRuntimeBlockMethod.Update */](diff, data);
              }
          }
          return hasNoChildren;
      };
      ConditionContainerBlock.prototype.d = function (isDestroyRoot) {
          if (this._currentBlock) {
              this._currentBlock["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
              this._currentBlock = null;
          }
          if (isDestroyRoot) {
              helperDestroyBlockAnchor(this._currentAnchorHead);
              helperDestroyBlockAnchor(this._currentAnchor4Index);
              helperDestroyBlockAnchor(this._currentAnchor);
              this._currentAnchorHead = null;
              this._currentAnchor4Index = null;
              this._currentAnchor = null;
          }
      };
      return ConditionContainerBlock;
  }());

  var FragmentConditionContainerBlock = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(FragmentConditionContainerBlock, _super);
      function FragmentConditionContainerBlock() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.detaching = false;
          return _this;
      }
      FragmentConditionContainerBlock.prototype.detach = function () {
          this.detaching = true;
      };
      FragmentConditionContainerBlock.prototype.attach = function () {
          this.detaching = false;
      };
      FragmentConditionContainerBlock.prototype.c = function () {
          if (this.detaching) {
              var hasNoChildren = this._bc[5 /* EConditionContainerBlockContextIndex.kDefaultHasNoChildren */];
              if (this._currentBlock) {
                  // tslint:disable-next-line no-bitwise
                  hasNoChildren &= this._currentBlock["c" /* EZRuntimeBlockMethod.Create */]();
              }
              return hasNoChildren;
          }
          else {
              return _super.prototype["c" /* EZRuntimeBlockMethod.Create */].call(this);
          }
      };
      FragmentConditionContainerBlock.prototype.m = function (target, anchor) {
          if (this.detaching) {
              if (this._currentBlock) {
                  this._currentBlock["m" /* EZRuntimeBlockMethod.Mount */](this._currentTarget, this._currentAnchor);
              }
          }
          else {
              return _super.prototype["m" /* EZRuntimeBlockMethod.Mount */].call(this, target, anchor);
          }
      };
      /**
       * 把原先的 u 拆分成 3 段，这是 switch block 阶段
       * - destroy old block
       * - switch block
       * - create new block
       */
      FragmentConditionContainerBlock.prototype.resetCurrentBranch = function (newComponentInstance, newContext) {
          // 某种意义上是一个 Update 指令的前序
          this._component = newComponentInstance;
          var conditionIndexFactory = this._bc[3 /* EConditionContainerBlockContextIndex.ConditionIndexFactory */];
          var conditionBlockFactory = this._bc[4 /* EConditionContainerBlockContextIndex.ConditionBlockFactory */];
          var conditionFactory = this._bc[0 /* EConditionContainerBlockContextIndex.ConditionFactory */];
          this._selectedBlockIndex = conditionIndexFactory ? conditionIndexFactory(this._component, newContext) : 1;
          this._selectedBlockType = conditionBlockFactory
              ? conditionBlockFactory(this._selectedBlockIndex)
              : conditionFactory(this._component, newContext);
          this._currentBlock = helperInitBlock(this._selectedBlockType, this._component, newContext);
      };
      FragmentConditionContainerBlock.prototype.d = function (isDestroyRoot) {
          if (this.detaching) {
              if (this._currentBlock) {
                  this._currentBlock["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
                  this._currentBlock = null;
              }
          }
          else {
              return _super.prototype["d" /* EZRuntimeBlockMethod.Destroy */].call(this, isDestroyRoot);
          }
      };
      return FragmentConditionContainerBlock;
  }(ConditionContainerBlock));

  var ReplaceableFragment = /** @class */ /*#__PURE__*/ (function () {
      // TODO: 需要考虑，如果拿这个对象来承载部分 platform 实现，如何存储自定义数据？
      function ReplaceableFragment(fragment) {
          this.currentFragmentIndex = 0;
          this.fragments = [];
          this.currentFragmentIndex = this.setNextFragment(fragment);
      }
      ReplaceableFragment.prototype.enterDetaching = function () {
          this.block.detach();
      };
      ReplaceableFragment.prototype.exitDetaching = function () {
          this.block.attach();
      };
      ReplaceableFragment.prototype.fragment = function (component, context) {
          if (!this.block) {
              this.block = new FragmentConditionContainerBlock([
                  null,
                  0,
                  2,
                  this.conditionIndex.bind(this),
                  this.conditionBranch.bind(this),
                  1 ], component, context);
              return this.block;
          }
          else {
              this.block.resetCurrentBranch(component, context);
          }
          return this.block;
      };
      ReplaceableFragment.prototype.setNextFragment = function (newFragment) {
          this.fragments.push(newFragment);
          this.currentFragmentIndex = this.fragments.length - 1;
          return this.currentFragmentIndex;
      };
      ReplaceableFragment.prototype.conditionIndex = function (component, context) {
          return this.currentFragmentIndex;
      };
      ReplaceableFragment.prototype.conditionBranch = function (index) {
          return this.fragments[this.currentFragmentIndex].fragment;
      };
      return ReplaceableFragment;
  }());

  function helperInitDynamicSlotProvider(data, componentInstance, scopedFactory, unscopedFactory, scopeIdentifier) {
      var blockFactory;
      if (scopedFactory && unscopedFactory) {
          blockFactory = dynamicScopedAndUnscopedFactory.bind(null, scopedFactory, unscopedFactory);
      }
      else {
          blockFactory = scopedFactory || unscopedFactory;
      }
      var provider = createSlotProvider(blockFactory, data, componentInstance, scopeIdentifier);
      return provider;
  }
  function helperInitSlotProvider(blockFactory, data, componentInstance, scopeIdentifier) {
      // 提供一个 provider 绑定一个 factory
      var provider = createSlotProvider(blockFactory, data, componentInstance, scopeIdentifier);
      return provider;
  }
  function noop$2() { }
  function noopWithReturnNumber() {
      return 0;
  }
  function helperCreateSlotContent(slotContentContextInstance, slotName, fallbackFactory, fallbackContext, scopeContext, slotNameDynamic) {
      var slotContentTargetInstance = (slotContentContextInstance.type < 2 /* EZRuntimeLinkedInstanceType.Component */
          ? slotContentContextInstance.option.parentTarget
          : slotContentContextInstance);
      var componentOption = slotContentTargetInstance.option;
      var dynamicSlotProvider = componentOption.dynamicSlot;
      var staticSlots = componentOption.slots;
      var staticSlotProvider = staticSlots && staticSlots[slotName];
      if (dynamicSlotProvider) {
          // 这里构造新的 scopeContext
          var injectBlock = void 0;
          var scopeContextWithDynamicSymbol = [
              scopeContext,
              slotName === '$default',
              slotName ];
          injectBlock = dynamicSlotProvider.createBlockWithScope(scopeContextWithDynamicSymbol, slotContentTargetInstance);
          if (fallbackFactory) {
              var slotOrFallbackBlock = new SlotFallbackContainer('$$dynamic$$fallback$$', slotContentTargetInstance, fallbackContext, injectBlock, fallbackFactory);
              slotOrFallbackBlock["c" /* EZRuntimeBlockMethod.Create */]();
              return slotOrFallbackBlock;
          }
          else {
              injectBlock["c" /* EZRuntimeBlockMethod.Create */]();
              return injectBlock;
          }
      }
      else {
          return createOrHydrateStaticSlotContentInternal(slotContentTargetInstance, staticSlotProvider, slotName, fallbackContext, scopeContext, fallbackFactory, slotNameDynamic, null);
      }
  }
  function createOrHydrateStaticSlotContentInternal(slotContentTargetInstance, staticSlotProvider, slotName, fallbackContext, scopeContext, fallbackFactory, slotNameDynamic, parentNodesContext) {
      var returnBlock;
      if (staticSlotProvider) {
          var injectBlock = void 0;
          if (scopeContext) {
              // 创建 slotScope
              injectBlock = staticSlotProvider.createBlockWithScope([scopeContext], slotContentTargetInstance);
          }
          else {
              injectBlock = staticSlotProvider.createBlockWithoutScope(slotContentTargetInstance);
          }
          if (slotNameDynamic) {
              returnBlock = new SlotDynamicNameFallbackContainer(slotName, slotContentTargetInstance, fallbackContext, injectBlock, fallbackFactory || createEmptyblockFactory);
          }
          else if (fallbackFactory) {
              returnBlock = new SlotFallbackContainer(slotName, slotContentTargetInstance, fallbackContext, injectBlock, fallbackFactory);
          }
          else {
              returnBlock = injectBlock;
          }
      }
      else {
          if (slotNameDynamic) {
              returnBlock = new SlotDynamicNameFallbackContainer(slotName, slotContentTargetInstance, fallbackContext, null, fallbackFactory || createEmptyblockFactory);
          }
          else {
              if (fallbackFactory) {
                  returnBlock = fallbackFactory(slotContentTargetInstance, fallbackContext);
              }
              else {
                  returnBlock = new SlotEmptyContainer(slotContentTargetInstance);
              }
          }
      }
      if (parentNodesContext) {
          returnBlock["l" /* EZRuntimeBlockMethod.Link */](parentNodesContext);
      }
      else {
          returnBlock["c" /* EZRuntimeBlockMethod.Create */]();
      }
      return returnBlock;
  }
  var sharedEmptyBlock;
  /**
   * Alert 如果要改这个东西要看一下前后兼容性，就是新的 empty block 塞给老的产物会不会有问题
   */
  function createEmptyblockFactory() {
      var _a;
      if (!sharedEmptyBlock) {
          sharedEmptyBlock = (_a = {},
              _a["c" /* EZRuntimeBlockMethod.Create */] = noopWithReturnNumber,
              _a["l" /* EZRuntimeBlockMethod.Link */] = noopWithReturnNumber,
              _a["d" /* EZRuntimeBlockMethod.Destroy */] = noop$2,
              _a["m" /* EZRuntimeBlockMethod.Mount */] = noop$2,
              _a["u" /* EZRuntimeBlockMethod.Update */] = noopWithReturnNumber,
              _a);
      }
      return sharedEmptyBlock;
  }
  function helperUpdateSlotContent(block, slotContentContextInstance, slotName, fallbackDiff, fallbackContext, scopeContext) {
      var slotContentTargetInstance = (slotContentContextInstance.type < 2 /* EZRuntimeLinkedInstanceType.Component */
          ? slotContentContextInstance.option.parentTarget
          : slotContentContextInstance);
      var componentOption = slotContentTargetInstance.option;
      var dynamicSlotProvider = componentOption.dynamicSlot;
      var staticSlots = componentOption.slots;
      if (dynamicSlotProvider) {
          var assignedScopeContext = [
              scopeContext,
              slotName === '$default',
              slotName ];
          // tslint:disable no-bitwise
          if (block.bType & 2 /* IZRuntimeBlockType.SlotProviderItemWithFallbackSwitch */) {
              // tslint:enable no-bitwise
              dynamicSlotProvider.updateBlockWithScopeAndFallback(block, assignedScopeContext, fallbackDiff, fallbackContext);
          }
          else {
              dynamicSlotProvider.updateBlockWithScope(block, assignedScopeContext);
          }
      }
      else {
          var newStaticSlotProvider = staticSlots && staticSlots[slotName];
          // tslint:disable no-bitwise
          if (block.bType & 4 /* IZRuntimeBlockType.SlotProviderItemWithDynamicNameFallbackSwitch */) {
              // tslint:enable no-bitwise
              if (newStaticSlotProvider) {
                  // 控制一次 name 变更
                  newStaticSlotProvider.updateBlockWithDynamicNameScopeAndFallback(slotName, block, [scopeContext], fallbackDiff, fallbackContext, slotContentTargetInstance);
              }
              else {
                  // TODO 消除
                  // 需要做一次探测，尝试降级 fallback
                  // 这个 name 更新要放进去更新，用来通知注释变更
                  block.updateDynamicNameAndFallbackContext(slotName, null, fallbackDiff, fallbackContext);
              }
              // tslint:disable no-bitwise
          }
          else if (block.bType & 2 /* IZRuntimeBlockType.SlotProviderItemWithFallbackSwitch */) {
              // tslint:enable no-bitwise
              // 名字不变，只更新 scope/fallback 两个 context
              newStaticSlotProvider.updateBlockWithScopeAndFallback(block, [scopeContext], fallbackDiff, fallbackContext);
              // tslint:disable no-bitwise
          }
          else if (block.bType & 1 /* IZRuntimeBlockType.SlotProviderItemWithoutFallbackSwtich */) {
              // tslint:enable no-bitwise
              // 名字不变，只看 scope 是否需要变化
              newStaticSlotProvider.updateBlockWithScope(block, [
                  scopeContext ]);
          }
          else {
              block["u" /* EZRuntimeBlockMethod.Update */](fallbackDiff, fallbackContext);
          }
      }
  }
  function helperUpdateSlotProvider(provider, diff, data) {
      provider.enterProviderUpdating(diff, data);
  }
  function helperDestroySlotProvider(provider, isDestroyRoot) {
      provider.destroyBlocks(isDestroyRoot);
  }
  function helperInitializeComponent(componentConstructor, parentComponent, initData, staticSlotMap, dynamicSlotProvider, slotProviders) {
      var parentTarget = parentComponent.type >= 2 /* EZRuntimeLinkedInstanceType.Component */
          ? parentComponent
          : parentComponent.option.parentTarget;
      return new componentConstructor({
          data: initData,
          dynamicSlot: dynamicSlotProvider,
          parent: parentComponent,
          parentTarget: parentTarget,
          root: parentComponent.root,
          slotProviders: slotProviders,
          slots: staticSlotMap,
          styleScope: null,
          targetMeta: null, // 实例化时覆盖之
      });
  }
  function helperCreateComponent(componentInstance, props, propKeys, nonEventSize, refMethod) {
      componentInstance.beforeCreate(props, propKeys, nonEventSize);
      componentInstance._fragment["c" /* EZRuntimeBlockMethod.Create */]();
      if (componentInstance.afterCreate) {
          componentInstance.afterCreate(props, propKeys, nonEventSize, refMethod);
      }
  }
  function helperComponentSetProps(componentInstance, props, diffMap) {
      componentInstance.receiveProps(props, diffMap);
  }
  function helperComponentReceiveOnlySlot(componentInstance) {
      componentInstance.receiveOnlySlot();
  }
  function helperDestroyComponent4Client(componentInstance, isDestroyRoot) {
      componentInstance.beforeDestroy();
      componentInstance.destroy(isDestroyRoot);
  }
  function helperDestroyComponent4Host(componentInstance, isDestroyRoot) {
      componentInstance.beforeDestroy();
      componentInstance.destroy(isDestroyRoot);
      if (componentInstance.node.parent) {
          componentInstance.node.parent.removeChild(componentInstance.node);
      }
  }
  function helperDetachComponent4Host(componentInstance, isDestroyRoot) {
      componentInstance.beforeDestroy();
      componentInstance.destroy(isDestroyRoot);
      var linkNode = componentInstance.node;
      // 在 removeChild 中会清理 nextSibling 需要恢复以便 Attach 能够正确处理锚点位
      var parent = linkNode.parent, nextSibling = linkNode.nextSibling, previousSibling = linkNode.previousSibling;
      parent.removeChild(linkNode);
      linkNode.parent = parent;
      linkNode.nextSibling = nextSibling;
      linkNode.previousSibling = previousSibling;
  }
  function helperMountComponent4Client(componentInstance, target, anchor) {
      componentInstance._fragment["m" /* EZRuntimeBlockMethod.Mount */](target, anchor);
  }
  function helperMountComponent4Host(componentInstance, target, anchor) {
      target.insertBefore(componentInstance.node, anchor);
      // 需要保证以下 args[0], args[1] 为父子关系，当首次创建时，等效于内部没有任何节点的 appendChild
      componentInstance._fragment["m" /* EZRuntimeBlockMethod.Mount */](componentInstance.node, null);
  }
  function helperAttachComponent4Host(componentInstance) {
      var linkNode = componentInstance.node;
      var target = linkNode.parent;
      var anchor = linkNode.nextSibling;
      linkNode.reset();
      target.insertBefore(linkNode, anchor);
      // 内部是一个 ConditionContainer 已经暂存了 target/anchor 这里传递的数据不会拿来使用
      componentInstance._fragment["m" /* EZRuntimeBlockMethod.Mount */](linkNode, null);
  }
  function helperInitBlock(fn, component, context) {
      if (fn) {
          return fn(component, context);
      }
  }
  function helperCallEvent(componentInstance, method, args) {
      if (componentInstance.type >= 2 /* EZRuntimeLinkedInstanceType.Component */) {
          return componentInstance.callEvent(method, args);
      }
      else {
          return componentInstance.option.parentTarget.callEvent(method, args);
      }
  }
  function helperDestroyBlocks4EachContainer(eachBlocks, isDestroyRoot) {
      for (var _i = 0, eachBlocks_1 = eachBlocks; _i < eachBlocks_1.length; _i++) {
          var block = eachBlocks_1[_i];
          block["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
      }
  }
  function helperUpdateBlocks4EachContainerWithItemDiff(eachDiffGetter, diff, eachContextGetter, data, newEachExp, eachBlocks, createEachIteratorBlock, componentInstance, currentTarget, currentAnchorState, oldEachExp, itemKey, indexKey, newEachExpType, newEachExpKeys, newEachExpLength, oldEachExpType, oldEachExpKeys) {
      // 老版本的产物会单独生成 helperUpdateBlocks4EachContainerWithItemDiff 语句
      // 不会传入 eachExpType 等，当做数组处理
      if (newEachExpType === undefined) {
          newEachExpType = oldEachExpType = 1 /* EZRuntimeEachIterateListType.Array */;
          newEachExpLength =
              (newEachExp && newEachExp.length) || 0;
      }
      var eachDiff = eachDiffGetter(diff);
      var helperUpdateBlocks4EachContainerWithItemDiffFn = (newEachExpType === oldEachExpType &&
          newEachExpType === 1 /* EZRuntimeEachIterateListType.Array */
          ? helperUpdateBlocks4EachContainerWithItemDiff4Array
          : helperUpdateBlocks4EachContainerWithItemDiff4MixedType);
      helperUpdateBlocks4EachContainerWithItemDiffFn(eachDiff, data, eachBlocks, createEachIteratorBlock, componentInstance, currentTarget, currentAnchorState, newEachExpLength, eachContextGetter, itemKey, newEachExp, oldEachExp, indexKey, newEachExpKeys, oldEachExpKeys, oldEachExpType);
      for (var eachBlockIndex = newEachExpLength; eachBlockIndex < eachBlocks.length; eachBlockIndex += 1) {
          eachBlocks[eachBlockIndex]["d" /* EZRuntimeBlockMethod.Destroy */](true);
      }
      eachBlocks.length = newEachExpLength;
      var hasNoChildren = newEachExpLength ? 0 : 1 /* EZephyrCompilerHasNoChildrenFlag.NoChildren */;
      return hasNoChildren;
  }
  function helperUpdateBlocks4EachContainer(eachDiffGetter, diff, eachContextGetter, data, eachExp, eachBlocks, createEachIteratorBlock, componentInstance, currentTarget, currentAnchor) {
      var eachDiff = eachDiffGetter(diff);
      var eachBlockIndex = 0;
      if (eachExp) {
          var eachExpNewLen = eachExp.length;
          for (; eachBlockIndex < eachExpNewLen; eachBlockIndex += 1) {
              var eachBlockContext = eachContextGetter(data, eachExp, eachBlockIndex);
              if (eachBlocks[eachBlockIndex]) {
                  eachBlocks[eachBlockIndex]["u" /* EZRuntimeBlockMethod.Update */](eachDiff, eachBlockContext);
              }
              else {
                  eachBlocks[eachBlockIndex] = createEachIteratorBlock(componentInstance, eachBlockContext);
                  eachBlocks[eachBlockIndex]["c" /* EZRuntimeBlockMethod.Create */]();
                  eachBlocks[eachBlockIndex]["m" /* EZRuntimeBlockMethod.Mount */](currentTarget, currentAnchor);
              }
          }
      }
      for (; eachBlockIndex < eachBlocks.length; eachBlockIndex += 1) {
          eachBlocks[eachBlockIndex]["d" /* EZRuntimeBlockMethod.Destroy */](true);
      }
      var newLength = eachExp ? eachExp.length : 0;
      eachBlocks.length = newLength;
      var hasNoChildren = newLength ? 0 : 1 /* EZephyrCompilerHasNoChildrenFlag.NoChildren */;
      return hasNoChildren;
  }
  function helperUpdateBlock4TemplateUseContainer(blockInstance, oldData, newData) {
      // 先计算一下 oldData => newData 的 diff
      var newDiff = Object.create(null);
      var flag4ForceTemplateUpdate = getZephyrRuntimeFeature(2 /* EZephyrFrameworkRuntimeFeature.forceTemplateUpdate */);
      if (oldData) {
          for (var _i = 0, _a = Object.keys(oldData); _i < _a.length; _i++) {
              var oldKey = _a[_i];
              if (oldData[oldKey] !== newData[oldKey] || flag4ForceTemplateUpdate) {
                  newDiff[oldKey] = true;
              }
          }
      }
      if (newData) {
          for (var _b = 0, _c = Object.keys(newData); _b < _c.length; _b++) {
              var newKey = _c[_b];
              if (!newDiff[newKey] && (oldData[newKey] !== newData[newKey] || flag4ForceTemplateUpdate)) {
                  newDiff[newKey] = true;
              }
          }
      }
      blockInstance["u" /* EZRuntimeBlockMethod.Update */](newDiff, newData);
  }
  function helperGetBlock4TemplateUseContainer(useTemplate, templateName, runtimeContext) {
      if (useTemplate[templateName]) {
          return useTemplate[templateName].zcomponent(runtimeContext).fragment;
      }
  }
  function helperGetBlock4IncludeContainer(useIncludes, stackName, includePath, runtimeContext) {
      return useIncludes[stackName][includePath].zcomponent(runtimeContext).fragment;
  }
  function helperContextRequiredInitBlock(blockFactory, parentComponent, data) {
      var parentTarget = parentComponent.type >= 2 /* EZRuntimeLinkedInstanceType.Component */
          ? parentComponent
          : parentComponent.option.parentTarget;
      var instance = createZRuntimeLinkedInstance4Context({
          parent: parentComponent,
          parentTarget: parentTarget,
          root: parentComponent.root,
      });
      instance._fragment = blockFactory(instance, data);
      return instance;
  }
  function helperContextRequiredCreateBlock4Compatible(blockFactory, parentComponent, data) {
      var parentTarget = parentComponent.type >= 2 /* EZRuntimeLinkedInstanceType.Component */
          ? parentComponent
          : parentComponent.option.parentTarget;
      var instance = createZRuntimeLinkedInstance4Context({
          parent: parentComponent,
          parentTarget: parentTarget,
          root: parentComponent.root,
      });
      instance._fragment = blockFactory(instance, data);
      instance._fragment["c" /* EZRuntimeBlockMethod.Create */]();
      return instance;
  }
  function helperContextRequiredCreateBlock(contextInstance) {
      return contextInstance._fragment["c" /* EZRuntimeBlockMethod.Create */]();
  }
  function helperContextRequiredMountBlock(contextRequiredInstance, target, anchor) {
      contextRequiredInstance._fragment["m" /* EZRuntimeBlockMethod.Mount */](target, anchor);
  }
  function helperContextRequiredUpdateBlock(contextRequiredInstance, diff, data) {
      contextRequiredInstance._fragment["u" /* EZRuntimeBlockMethod.Update */](diff, data);
  }
  function helperContextRequiredDestroyBlock(contextRequiredInstance, isDestroyRoot) {
      contextRequiredInstance._fragment["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
  }
  function helperHydrateClearChildren(parentNodesContext) {
      var nodes = parentNodesContext.nodes;
      var index = parentNodesContext.index;
      while (index < nodes.length) {
          var node = nodes.item(index);
          if (node && node.parentNode) {
              node.parentNode.removeChild(node);
              helperHydrateReportError(1 /* EZRuntimeHydrateErrorType.RedundantNode */, parentNodesContext, node, null);
          }
      }
  }
  function helperHydrateClearChildren4HostWeb(nodesContext) {
      var childNodes = nodesContext.nodes;
      var childIndex = nodesContext.index;
      while (childIndex < childNodes.length) {
          var node = childNodes.item(childIndex);
          if (node && node.parent) {
              node.parent.removeChild(node);
          }
      }
  }
  function helperDestroyBlockAnchor(target) {
      if (!target) {
          return;
      }
      var parent = target.parent;
      if (parent) {
          parent.removeChild(target);
      }
  }
  var helperDestroyBlockAnchorState = helperDestroyBlockAnchor;
  function helperCreateBlockAnchor(componentInstance, matchAnchor, matchContent) {
      if (matchAnchor) {
          return componentInstance.document.cloneComment(matchAnchor);
      }
      else {
          return componentInstance.document.createComment(matchContent);
      }
  }
  var helperCreateBlockAnchorState = helperCreateBlockAnchor;
  function helperClientInsertBeforeLink(target, child, anchor) {
      if (!anchor) {
          helperClientAppendChildLink(target, child);
      }
      else {
          // 不知道 anchor 是不是
          var childLegacyParent = child.parent;
          if (childLegacyParent) {
              helperClientRemoveChildLink(childLegacyParent, child);
          }
          child.parent = target;
          var originalPreviousSibling = anchor.previousSibling;
          anchor.previousSibling = child;
          if (originalPreviousSibling) {
              originalPreviousSibling.nextSibling = child;
          }
          else {
              target.firstChild = child;
          }
          child.previousSibling = originalPreviousSibling;
          child.nextSibling = anchor;
      }
  }
  function helperClientInsertBefore(target, node, anchor) {
      target.insertBefore(node, anchor || null);
  }
  function helperClientRemoveChildLink(childParent, child) {
      var nextSibling = child.nextSibling;
      var previousSibling = child.previousSibling;
      if (nextSibling) {
          nextSibling.previousSibling = previousSibling;
          child.nextSibling = null;
      }
      else {
          childParent.lastChild = previousSibling;
      }
      if (previousSibling) {
          previousSibling.nextSibling = nextSibling;
          child.previousSibling = null;
      }
      else {
          childParent.firstChild = nextSibling;
      }
      child.parent = null;
  }
  function helperClientRemoveChild(target) {
      var parent = target.parent;
      if (parent) {
          parent.removeChild(target);
      }
  }
  function helperClientAppendChildLink(target, child) {
      var childLegacyParent = child.parent;
      if (childLegacyParent) {
          helperClientRemoveChildLink(childLegacyParent, child);
      }
      child.parent = target;
      var currentLastChild = target.lastChild;
      if (currentLastChild) {
          // 如果找得到，在后面跟一个
          child.previousSibling = currentLastChild;
          currentLastChild.nextSibling = child;
      }
      else {
          // 如果当前不存在 lastChild，即无child
          target.firstChild = child;
      }
      target.lastChild = child;
  }
  function helperClientAppendChild(target, node) {
      target.appendChild(node);
  }
  function helperDocumentInsertAnchor(target, node, anchor) {
      target.insertBefore(node, anchor || null);
      if (!node.parent) {
          node.parent = target;
      }
  }
  var helperDocumentInsertAnchorState = helperDocumentInsertAnchor;
  var helperDocumentInsertAnchorStateBeforeState = helperDocumentInsertAnchor;
  function helperInitDataset(componentInstance, dataset) {
      componentInstance.initDataset(dataset);
  }
  function helperUpdateDatasetPartial(componentInstance, dataset) {
      componentInstance.updateDatasetPartial(dataset);
  }
  function helperUpdateDatasetAll(componentInstance, dataset) {
      componentInstance.updateDatasetAll(dataset);
  }
  function helperEachContainerFactoryGetDiffWithoutIndex(sValue, sIndex, diff) {
      var childDiff = Object.create(diff);
      childDiff[sIndex] = false;
      childDiff[sValue] = true;
      return childDiff;
  }
  function helperBypassContainerFactoryCreate(getBypassFactory) {
      return function (componentInstance, initContext) {
          var bypassFactory = getBypassFactory();
          return bypassFactory(componentInstance, initContext);
      };
  }
  function helperEachContainerFactoryCreate(getEachIteratorFactory, iterateValue, iterateIndex, getIterateContext, iterateContextDepList, iterateContextAndChildrenDepList, isVirtualDynamicSlot, getIterateKey) {
      return function (componentInstance, initContext) {
          var currentTarget;
          var currentAnchorHead;
          var currentAnchorState;
          var currentHasNoChildren;
          var eachBlockIndex;
          var eachBlockContext;
          var currentEachListExp = getIterateContext(componentInstance, initContext);
          var keyToIndexMap;
          var indexToKeyAnchorList;
          var _a = helperGetEachIterateListTypeLengthKeys(currentEachListExp), currentEachListType = _a[0], eachBlockLength = _a[1], currentEachListKeys = _a[2];
          var previousEachListExp = currentEachListExp;
          var previousEachListType = currentEachListType;
          var previousEachListKeys = currentEachListKeys;
          var eachGetDiff = helperEachContainerFactoryGetDiffWithoutIndex.bind(null, iterateValue, iterateIndex);
          var eachGetContext = (currentEachListType === 2 /* EZRuntimeEachIterateListType.Object */
              ? helperEachContainerFactoryGetContext4Object
              : currentEachListType === 3 /* EZRuntimeEachIterateListType.Number */
                  ? helperEachContainerFactoryGetContext4Number
                  : helperEachContainerFactoryGetContext4Array).bind(null, iterateValue, iterateIndex);
          var eachBlocks = [];
          var eachIteratorFactory = getEachIteratorFactory();
          if (getIterateKey) {
              keyToIndexMap = createMap();
              indexToKeyAnchorList = [];
          }
          if (eachBlockLength) {
              for (eachBlockIndex = 0; eachBlockIndex < eachBlockLength; eachBlockIndex += 1) {
                  eachBlockContext = eachGetContext(initContext, currentEachListExp, eachBlockIndex, currentEachListKeys);
                  eachBlocks[eachBlockIndex] = helperInitBlock(eachIteratorFactory, componentInstance, eachBlockContext);
                  if (getIterateKey) {
                      var key = getIterateKey(componentInstance, eachBlockContext);
                      keyToIndexMap.set(key, eachBlockIndex);
                      indexToKeyAnchorList[eachBlockIndex] = [key, null];
                  }
              }
          }
          return {
              a: function () {
                  return currentAnchorHead;
              },
              c: function () {
                  var localHasNoChildren = isVirtualDynamicSlot
                      ? 3 /* EZephyrCompilerHasNoChildrenFlag.NoChildrenAndNoMatchedSlot */
                      : 1 /* EZephyrCompilerHasNoChildrenFlag.NoChildren */;
                  currentAnchorHead = helperCreateBlockAnchor(componentInstance);
                  if (eachBlockLength) {
                      for (eachBlockIndex = 0; eachBlockIndex < eachBlockLength; eachBlockIndex += 1) {
                          // tslint:disable no-bitwise
                          localHasNoChildren &= eachBlocks[eachBlockIndex]["c" /* EZRuntimeBlockMethod.Create */]();
                          // tslint:enable no-bitwise
                      }
                  }
                  currentHasNoChildren = localHasNoChildren;
                  currentAnchorState = helperCreateBlockAnchorState(componentInstance, currentAnchorHead);
                  return localHasNoChildren;
              },
              /* #__PRIVATE_HYDRATE__ */
              l: function (nodes) {
                  var localHasNoChildren = isVirtualDynamicSlot
                      ? 3 /* EZephyrCompilerHasNoChildrenFlag.NoChildrenAndNoMatchedSlot */
                      : 1 /* EZephyrCompilerHasNoChildrenFlag.NoChildren */;
                  currentAnchorHead = helperHydrateBlockAnchor(nodes, componentInstance);
                  var nextStopReverseIndex = helperHydrateBlockAnchorTryMatchReverseIndex(nodes, currentAnchorHead);
                  helperHydratePushStopReverseIndex(nodes, nextStopReverseIndex);
                  if (eachBlockLength) {
                      for (eachBlockIndex = 0; eachBlockIndex < eachBlockLength; eachBlockIndex += 1) {
                          if (getIterateKey) {
                              indexToKeyAnchorList[eachBlockIndex][1] = helperHydrateBlockAnchorState(nodes, componentInstance);
                          }
                          // tslint:disable no-bitwise
                          localHasNoChildren &= eachBlocks[eachBlockIndex]["l" /* EZRuntimeBlockMethod.Link */](nodes);
                          // tslint:enable no-bitwise
                      }
                  }
                  currentHasNoChildren = localHasNoChildren;
                  helperHydratePopStopReverseIndex(nodes);
                  currentAnchorState = helperHydrateBlockAnchorState(nodes, componentInstance, currentAnchorHead);
                  currentTarget = nodes.target;
                  return localHasNoChildren;
              },
              m: function (target, anchor) {
                  currentTarget = target;
                  helperDocumentInsertAnchor(target, currentAnchorHead, anchor);
                  if (eachBlockLength) {
                      for (eachBlockIndex = 0; eachBlockIndex < eachBlockLength; eachBlockIndex += 1) {
                          if (getIterateKey) {
                              var iterateAnchorState = helperCreateBlockAnchorState(componentInstance);
                              indexToKeyAnchorList[eachBlockIndex][1] = iterateAnchorState;
                              helperDocumentInsertAnchorState(target, iterateAnchorState, anchor);
                          }
                          eachBlocks[eachBlockIndex]["m" /* EZRuntimeBlockMethod.Mount */](target, anchor);
                      }
                  }
                  helperDocumentInsertAnchorState(target, currentAnchorState, anchor);
              },
              u: function (diff, data) {
                  var _a, _b;
                  var localHasNoChildren = currentHasNoChildren;
                  var newEachListExp = currentEachListExp;
                  if (iterateContextDepList.length) {
                      for (var _i = 0, iterateContextDepList_1 = iterateContextDepList; _i < iterateContextDepList_1.length; _i++) {
                          var depSymbol = iterateContextDepList_1[_i];
                          if (diff[depSymbol]) {
                              newEachListExp = getIterateContext(componentInstance, data);
                              break;
                          }
                      }
                  }
                  var flag4ForceIterationUpdate = !!getZephyrRuntimeFeature(1 /* EZephyrFrameworkRuntimeFeature.forceIterationUpdate */);
                  // 强制更新模式不能 unchanged
                  var isEachListExpUnchanged = newEachListExp === currentEachListExp && !flag4ForceIterationUpdate;
                  if (!isEachListExpUnchanged) {
                      previousEachListExp = currentEachListExp;
                      previousEachListType = currentEachListType;
                      previousEachListKeys = currentEachListKeys;
                      currentEachListExp = newEachListExp;
                      _a = helperGetEachIterateListTypeLengthKeys(currentEachListExp), currentEachListType = _a[0], eachBlockLength = _a[1], currentEachListKeys = _a[2];
                      if (currentEachListType !== previousEachListType) {
                          eachGetContext = (currentEachListType === 2 /* EZRuntimeEachIterateListType.Object */
                              ? helperEachContainerFactoryGetContext4Object
                              : currentEachListType === 3 /* EZRuntimeEachIterateListType.Number */
                                  ? helperEachContainerFactoryGetContext4Number
                                  : helperEachContainerFactoryGetContext4Array).bind(null, iterateValue, iterateIndex);
                      }
                  }
                  // 强制更新模式强开
                  var hasChangedChildrenDep = flag4ForceIterationUpdate;
                  if (iterateContextAndChildrenDepList.length) {
                      for (var _c = 0, iterateContextAndChildrenDepList_1 = iterateContextAndChildrenDepList; _c < iterateContextAndChildrenDepList_1.length; _c++) {
                          var depSymbol = iterateContextAndChildrenDepList_1[_c];
                          if (diff[depSymbol]) {
                              hasChangedChildrenDep = true;
                              break;
                          }
                      }
                  }
                  if (hasChangedChildrenDep) {
                      if (isEachListExpUnchanged) {
                          if (eachBlockLength) {
                              var eachDiff = eachGetDiff(diff);
                              // 强制更新模式 item 必须重算
                              eachDiff[iterateValue] =  flag4ForceIterationUpdate;
                              // TODO: List 未改变，内部其他依赖改变
                              helperUpdateBlocks4EachContainerWithListExpUnchanged(eachDiff, eachGetContext, data, eachBlocks, eachBlockLength, currentEachListExp, currentEachListKeys);
                          }
                      }
                      else if (getIterateKey) {
                          // TODO: KeyDiff
                          (_b = helperUpdateBlocks4EachContainerWithKeyDiff(eachGetDiff, diff, eachGetContext, data, currentEachListExp, eachBlocks, eachIteratorFactory, componentInstance, currentTarget, currentAnchorState, previousEachListExp, iterateValue, iterateIndex, currentEachListType, currentEachListKeys, eachBlockLength, previousEachListType, previousEachListKeys, keyToIndexMap, indexToKeyAnchorList, getIterateKey), eachBlocks = _b.eachBlocks, localHasNoChildren = _b.hasNoChildren, indexToKeyAnchorList = _b.indexToKeyAnchorList, keyToIndexMap = _b.keyToIndexMap);
                      }
                      else {
                          // 普通 Diff 相等判定
                          localHasNoChildren = helperUpdateBlocks4EachContainerWithItemDiff(eachGetDiff, diff, eachGetContext, data, currentEachListExp, eachBlocks, eachIteratorFactory, componentInstance, currentTarget, currentAnchorState, previousEachListExp, iterateValue, iterateIndex, currentEachListType, currentEachListKeys, eachBlockLength, previousEachListType, previousEachListKeys);
                      }
                  }
                  currentHasNoChildren = localHasNoChildren;
                  return localHasNoChildren;
              },
              d: function (isDestroyRoot) {
                  if (eachBlocks) {
                      helperDestroyBlocks4EachContainer(eachBlocks, isDestroyRoot);
                  }
                  if (isDestroyRoot) {
                      helperDestroyBlockAnchorState(currentAnchorState);
                  }
                  eachBlocks = null;
                  currentEachListExp = null;
                  currentAnchorState = null;
              },
          };
      };
  }
  var helperAnchor = function (target) { return target; };
  var helperPlaceholderSwitchDefine = null;
  var helperConditionContainerFactoryCreate4PlaceholderComponent = null;
  function helperConditionContainerFactoryCreate(conditionFactory, virtualDynamicSlotType, branchSizeOrNull, conditionIndexFactory, conditionBlockFactory) {
      var kDefaultHasNoChildren = virtualDynamicSlotType
          ? 3 /* EZephyrCompilerHasNoChildrenFlag.NoChildrenAndNoMatchedSlot */
          : 1 /* EZephyrCompilerHasNoChildrenFlag.NoChildren */;
      return function (componentInstance, initContext) {
          var currentTarget;
          var currentBlock;
          var currentAnchorHead;
          var currentAnchor4Index;
          var currentAnchorState;
          // 老模式注释有头尾，等价于强制识别为 1 模式
          var selectedBlockIndex = conditionIndexFactory ? conditionIndexFactory(componentInstance, initContext) : 1;
          var selectedBlockType = conditionBlockFactory
              ? conditionBlockFactory(selectedBlockIndex)
              : conditionFactory(componentInstance, initContext);
          currentBlock = helperInitBlock(selectedBlockType, componentInstance, initContext);
          return {
              a: function () {
                  return currentAnchorHead;
              },
              c: function () {
                  var hasNoChildren = kDefaultHasNoChildren;
                  currentAnchorHead = helperCreateBlockAnchor(componentInstance);
                  currentAnchor4Index = helperCreateBlockAnchor(componentInstance, null, getConditionIndexAnchorContent(selectedBlockIndex));
                  if (currentBlock) {
                      // tslint:disable-next-line no-bitwise
                      hasNoChildren &= currentBlock["c" /* EZRuntimeBlockMethod.Create */]();
                  }
                  currentAnchorState = helperCreateBlockAnchorState(componentInstance, currentAnchorHead);
                  return hasNoChildren;
              },
              /* #__PRIVATE_HYDRATE__ */
              l: function (nodes) {
                  var hasNoChildren = kDefaultHasNoChildren;
                  currentAnchorHead = helperHydrateBlockAnchor(nodes, componentInstance);
                  var nextStopReverseIndex = helperHydrateBlockAnchorTryMatchReverseIndex(nodes, currentAnchorHead);
                  helperHydratePushStopReverseIndex(nodes, nextStopReverseIndex);
                  // 要求一个 c 开头的 comment，返回结果
                  // 给了一定正确的，然后可以直接 hydrate 下去
                  var matchResult = helperHydrateBlockAnchor4CommentTagMatch(nodes, componentInstance, "c" /* EZRuntimeBlockAnchorCommentTag.Condition */, getConditionIndexAnchorContent(selectedBlockIndex));
                  currentAnchor4Index = matchResult[0];
                  nodes.treatErrorAsWarning += matchResult[1];
                  if (currentBlock) {
                      // tslint:disable-next-line no-bitwise
                      hasNoChildren &= currentBlock["l" /* EZRuntimeBlockMethod.Link */](nodes);
                  }
                  nodes.treatErrorAsWarning -= matchResult[1];
                  helperHydratePopStopReverseIndex(nodes);
                  currentAnchorState = helperHydrateBlockAnchorState(nodes, componentInstance, currentAnchorHead);
                  currentTarget = nodes.target;
                  return hasNoChildren;
              },
              m: function (target, anchor) {
                  currentTarget = target;
                  helperDocumentInsertAnchor(target, currentAnchorHead, anchor);
                  helperDocumentInsertAnchor(target, currentAnchor4Index, anchor);
                  if (currentBlock) {
                      currentBlock["m" /* EZRuntimeBlockMethod.Mount */](target, anchor);
                  }
                  helperDocumentInsertAnchorState(target, currentAnchorState, anchor);
              },
              u: function (diff, data) {
                  var hasNoChildren = kDefaultHasNoChildren;
                  // tslint:disable-next-line no-conditional-assignment
                  var newSelectedBlockIndex = conditionIndexFactory ? conditionIndexFactory(componentInstance, data) : 1;
                  var newSelectedBlockType = conditionBlockFactory
                      ? conditionBlockFactory(newSelectedBlockIndex)
                      : conditionFactory(componentInstance, data);
                  if (selectedBlockType !== newSelectedBlockType) {
                      selectedBlockIndex = newSelectedBlockIndex;
                      selectedBlockType = newSelectedBlockType;
                      // 修改 comment
                      // Web 模式进入
                      var anchorNameRoot = currentAnchor4Index.root;
                      if (anchorNameRoot) {
                          anchorNameRoot.textContent = getConditionIndexAnchorContent(selectedBlockIndex);
                      }
                      if (currentBlock) {
                          currentBlock["d" /* EZRuntimeBlockMethod.Destroy */](true);
                      }
                      currentBlock = helperInitBlock(selectedBlockType, componentInstance, data);
                      if (currentBlock) {
                          // tslint:disable-next-line no-bitwise
                          hasNoChildren &= currentBlock["c" /* EZRuntimeBlockMethod.Create */]();
                          currentBlock["m" /* EZRuntimeBlockMethod.Mount */](currentTarget, helperAnchor(currentAnchorState));
                      }
                  }
                  else {
                      if (currentBlock) {
                          // tslint:disable-next-line no-bitwise
                          hasNoChildren &= currentBlock["u" /* EZRuntimeBlockMethod.Update */](diff, data);
                      }
                  }
                  return hasNoChildren;
              },
              d: function (isDestroyRoot) {
                  if (currentBlock) {
                      currentBlock["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
                      currentBlock = null;
                  }
                  if (isDestroyRoot) {
                      helperDestroyBlockAnchor(currentAnchorHead);
                      helperDestroyBlockAnchor(currentAnchor4Index);
                      helperDestroyBlockAnchorState(currentAnchorState);
                      currentAnchorHead = null;
                      currentAnchor4Index = null;
                      currentAnchorState = null;
                  }
              },
          };
      };
  }
  function helperHydratePushStopReverseIndex(parentNodesContext, nextStopReverseIndex) {
      parentNodesContext.stopReverseIndex = nextStopReverseIndex;
      parentNodesContext.stopReverseIndexStack.push(nextStopReverseIndex);
  }
  function helperHydratePopStopReverseIndex(parentNodesContext) {
      parentNodesContext.stopReverseIndexStack.pop();
      parentNodesContext.stopReverseIndex =
          parentNodesContext.stopReverseIndexStack[parentNodesContext.stopReverseIndexStack.length - 1] || 0;
  }
  var helperHydrateBlockAnchorTryMatchReverseIndex = helperHydrateBlockAnchorTryMatchReverseIndex4ClientWeb;
  function setImplHelperHydrateBlockAnchorTryMatchReverseIndex(impl) {
      helperHydrateBlockAnchorTryMatchReverseIndex = impl;
  }
  function helperHydrateBlockAnchorTryMatchReverseIndex4HostWeb(parentNodesContext, matchAnchor) {
      var expectData = matchAnchor.textContent;
      var candidate;
      var index = parentNodesContext.index;
      var nodeSize = parentNodesContext.nodes.length;
      while (index < nodeSize) {
          candidate = parentNodesContext.nodes.item(index);
          if (!candidate) {
              break;
          }
          if (candidate.hType === 0 /* EZRuntimeHostSideElementType.Comment */ && candidate.textContent === expectData) {
              // found
              break;
          }
          else {
              index++;
          }
      }
      return nodeSize - index;
  }
  function helperHydrateBlockAnchorTryMatchReverseIndex4ClientWeb(parentNodesContext, matchAnchor) {
      var expectData = matchAnchor.root.textContent;
      var candidate;
      var index = parentNodesContext.index;
      var nodeSize = parentNodesContext.nodes.length;
      while (index < nodeSize) {
          candidate = parentNodesContext.nodes.item(index);
          if (!candidate) {
              break;
          }
          if (candidate.nodeType === 8 /* IZRuntimeDOMElementNodeType4Web.Comment */ && candidate.textContent === expectData) {
              // found
              break;
          }
          else {
              index++;
          }
      }
      return nodeSize - index;
  }
  var sharedZephyrAnchorIdBase = 0;
  function helperGetNextZephyrAnchorIdByOnlyCreate() {
      return "z:".concat(++sharedZephyrAnchorIdBase);
  }
  var helperGetNextZephyrAnchorId = helperGetNextZephyrAnchorIdByOnlyCreate;
  function resetHelperGetNextZephyrAnchorIdToHydration() {
      helperGetNextZephyrAnchorId = helperGetNextZephyrAnchorId4Hydration;
  }
  /**
   * 该Id需要保证在一个 Render 树内唯一
   * 当进行 Hydrate 时，由于潜在的节点不匹配，并且不知道之前的 Id 基数，目前采取随机数方式
   */
  function helperGetNextZephyrAnchorId4Hydration() {
      return "z:".concat(Math.random());
  }
  var sharedHydrateError;
  var sharedHydrateWarning;
  function helperHydrateGetError() {
      return sharedHydrateError;
  }
  function helperHydrateGetWarning() {
      return sharedHydrateWarning;
  }
  function helperHydrateResetErrorAndWarning() {
      sharedHydrateError = undefined;
      sharedHydrateWarning = undefined;
  }
  function getZRuntimeHydrateErrorCode(type) {
      switch (type) {
          case 1 /* EZRuntimeHydrateErrorType.RedundantNode */:
              return 'RedundantNode';
          case 2 /* EZRuntimeHydrateErrorType.AnchorMatchRemoveAndNext */:
              return 'AnchorMatchRemoveAndNext';
          case 3 /* EZRuntimeHydrateErrorType.AnchorMatchStopCreate */:
              return 'AnchorMatchStop';
          case 4 /* EZRuntimeHydrateErrorType.AnchorMatchNotFoundCreate */:
              return 'AnchorMatchNotFound';
          case 5 /* EZRuntimeHydrateErrorType.AnchorHeadRemoveCreate */:
              return 'AnchorCreateRemove';
          case 6 /* EZRuntimeHydrateErrorType.AnchorHeadStopCreate */:
              return 'AnchorCreateStop';
          case 7 /* EZRuntimeHydrateErrorType.AnchorHeadNotFoundCreate */:
              return 'AnchorCreateNotFound';
          case 8 /* EZRuntimeHydrateErrorType.ElementClaimRemoveReplace */:
              return 'ElementClaimRemoveReplace';
          case 9 /* EZRuntimeHydrateErrorType.ElementClaimStopCreate */:
              return 'ElementClaimStopCreate';
          case 10 /* EZRuntimeHydrateErrorType.ElementClaimNotFoundCreate */:
              return 'ElementClaimNotFoundCreate';
          // case EZRuntimeHydrateErrorType.TextClaimRemoveCreate:
          //   return 'TextClaimCreateRemove';
          // case EZRuntimeHydrateErrorType.TextClaimStopCreate:
          //   return 'TextClaimCreateStop';
          // case EZRuntimeHydrateErrorType.TextClaimNotFoundCreate:
          //   return 'TextClaimNotFoundCreate';
          default:
              return '';
      }
  }
  function getNodeIndex(node) {
      if (node && node.parentNode) {
          return Array.prototype.indexOf.call(node.parentNode.childNodes, node);
      }
      else {
          return -1;
      }
  }
  function helperHydrateReportError(type, parentNodesContext, previousNode, nextNode) {
      {
          if (!sharedHydrateError || !sharedHydrateWarning) {
              sharedHydrateError = sharedHydrateError || [];
              sharedHydrateWarning = sharedHydrateWarning || [];
          }
          var queue = parentNodesContext.treatErrorAsWarning ? sharedHydrateWarning : sharedHydrateError;
          queue.push("".concat(getZRuntimeHydrateErrorCode(type), ": previous:").concat(previousNode
              ? "".concat(previousNode.nodeName).concat(previousNode.className ? ".".concat(previousNode.className) : '', "@").concat(getNodeIndex(previousNode), ":").concat(previousNode.textContent || '')
              : 'null', ", next:").concat(nextNode
              ? "".concat(nextNode.nodeName).concat(nextNode.className ? ".".concat(nextNode.className) : '', "@").concat(getNodeIndex(nextNode), ":").concat(nextNode.textContent || '')
              : 'null'));
      }
  }
  var helperHydrateBlockAnchor4CommentTagMatch = helperHydrateBlockAnchor4CommentTagMatch4ClientWeb;
  function setImplHelperHydrateBlockAnchor4CommentTagMatch(impl) {
      helperHydrateBlockAnchor4CommentTagMatch = impl;
  }
  function helperHydrateBlockAnchor4CommentTagMatch4HostWeb(parentNodesContext, componentInstance, matchAnchorType, matchAnchorContent) {
      var parent = parentNodesContext.target;
      var candidate = parentNodesContext.nodes.item(parentNodesContext.index);
      var matchedComment;
      var shouldRemoveUntilStop = 0;
      var shouldTreatErrorAsWarning = 0;
      if (candidate &&
          candidate.hType === 0 /* EZRuntimeHostSideElementType.Comment */ &&
          candidate.textContent &&
          candidate.textContent[0] === matchAnchorType) {
          if (candidate.textContent === matchAnchorContent) {
              // 符合 condition/template 分段匹配
              matchedComment = candidate;
          }
          else {
              // 符合 type，但是内容不符合，需要 warning 移除到 stop
              candidate.textContent = matchAnchorContent;
              matchedComment = candidate;
              shouldRemoveUntilStop = 1;
              shouldTreatErrorAsWarning = 1;
          }
      }
      else {
          // 先插入，再一路移除 candidate 移除，
          var newComment = componentInstance.document.createComment(matchAnchorContent);
          matchedComment = newComment;
          if (candidate) {
              var ref = candidate;
              parent.insertBefore(matchedComment, ref);
          }
          else {
              parent.appendChild(matchedComment);
          }
          shouldRemoveUntilStop = 1;
      }
      parentNodesContext.index++;
      if (shouldRemoveUntilStop) {
          var index = parentNodesContext.index;
          var removeRef = void 0;
          while (true) {
              candidate = parentNodesContext.nodes.item(index);
              if (!candidate) {
                  break;
              }
              else {
                  if (parentNodesContext.stopReverseIndex === parentNodesContext.nodes.length - index) {
                      break;
                  }
                  else {
                      removeRef = candidate;
                      parent.removeChild(removeRef);
                  }
              }
          }
      }
      return [matchedComment, shouldTreatErrorAsWarning];
  }
  function helperHydrateBlockAnchor4CommentTagMatch4ClientWeb(parentNodesContext, componentInstance, matchAnchorType, matchAnchorContent) {
      var parent = parentNodesContext.target;
      // 如果下一个是 comment 看第一个字母是不是符合
      //    符合的话，就看完整 content 是否符合，符合就过 index +1
      //          完整内容不符合的话，改成对的内容，就一直删除到 stop （并且只报 warning） index +1
      //    不符合的话，一直删除到 stop，再插一个对的 comment，并且报 error 。然后删除到 stop，然后插入 注释
      // 如果下一个不是，当做不符合处理。删除到 stop 然后插入 注释
      var candidate = parentNodesContext.nodes.item(parentNodesContext.index);
      var matchedComment;
      var shouldRemoveUntilStop = 0;
      var shouldTreatRemoveAsError = 0;
      var shouldTreatErrorAsWarning = 0;
      if (candidate &&
          candidate.nodeType === 8 /* IZRuntimeDOMElementNodeType4Web.Comment */ &&
          candidate.textContent[0] === matchAnchorType) {
          if (candidate.textContent === matchAnchorContent) {
              // 符合 condition/template 分段匹配
              matchedComment = {
                  destroy: noop$2,
                  eType: 0 /* EZRuntimeClientSideElementType.Comment */,
                  nextSibling: null,
                  parent: parent,
                  previousSibling: null,
                  root: candidate,
              };
          }
          else {
              // 符合 type，但是内容不符合，需要 warning 移除到 stop
              candidate.textContent = matchAnchorContent;
              matchedComment = {
                  destroy: noop$2,
                  eType: 0 /* EZRuntimeClientSideElementType.Comment */,
                  nextSibling: null,
                  parent: parent,
                  previousSibling: null,
                  root: candidate,
              };
              shouldRemoveUntilStop = 1;
              shouldTreatErrorAsWarning = 1;
          }
      }
      else {
          // 先插入，再一路移除 candidate 移除，
          var newComment = componentInstance.document.document.createComment(matchAnchorContent);
          matchedComment = {
              destroy: noop$2,
              eType: 0 /* EZRuntimeClientSideElementType.Comment */,
              nextSibling: null,
              parent: parent,
              previousSibling: null,
              root: newComment,
          };
          if (candidate) {
              var ref = {
                  destroy: noop$2,
                  eType: 0 /* EZRuntimeClientSideElementType.Comment */,
                  nextSibling: null,
                  parent: parent,
                  previousSibling: null,
                  root: candidate,
              };
              parent.insertBefore(matchedComment, ref);
          }
          else {
              parent.appendChild(matchedComment);
          }
          shouldRemoveUntilStop = 1;
          shouldTreatRemoveAsError = 1;
      }
      parentNodesContext.index++;
      if (shouldRemoveUntilStop) {
          var index = parentNodesContext.index;
          var removeRef = {
              destroy: noop$2,
              eType: 0 /* EZRuntimeClientSideElementType.Comment */,
              nextSibling: null,
              parent: parent,
              previousSibling: null,
              root: null,
          };
          while (true) {
              candidate = parentNodesContext.nodes.item(index);
              if (!candidate) {
                  break;
              }
              else {
                  if (parentNodesContext.stopReverseIndex === parentNodesContext.nodes.length - index) {
                      break;
                  }
                  else {
                      removeRef.root = candidate;
                      parent.removeChild(removeRef);
                      if (shouldTreatRemoveAsError) {
                          helperHydrateReportError(2 /* EZRuntimeHydrateErrorType.AnchorMatchRemoveAndNext */, parentNodesContext, candidate, null);
                      }
                  }
              }
          }
      }
      return [matchedComment, shouldTreatErrorAsWarning];
  }
  var helperHydrateBlockAnchor = helperHydrateBlockAnchor4ClientWeb;
  function setImplHelperHydrateBlockAnchor(impl) {
      helperHydrateBlockAnchor = impl;
  }
  var helperHydrateBlockAnchorState = function (a, b, c) {
      return helperHydrateBlockAnchor(a, b, c);
  };
  function helperHydrateBlockAnchor4HostWeb(parentNodesContext, componentInstance, matchAnchor) {
      var parent = parentNodesContext.target;
      var newRefPlaceholder;
      var refPlaceholder;
      if (matchAnchor) {
          var expectData = matchAnchor.textContent;
          var index = parentNodesContext.index;
          var candidate = void 0;
          // 要求匹配
          // 终止状态的意义是不能 remove，不是不能 create
          // 读取 nodes[index]
          //    如果没有，新建 appendChild，index ++ 下一个 break
          //    如果有，如果是匹配 anchor，复用, index ++ 下一个 break
          //           如果是不匹配，index 终止状态到了，创建，insertBefore index ++。break
          //           如果是不匹配，index 终止状态没到，移除节点，保持 index 下一个
          while (true) {
              candidate = parentNodesContext.nodes.item(index);
              if (!candidate) {
                  var newComment = componentInstance.document.createComment(expectData);
                  refPlaceholder = newComment;
                  parent.appendChild(refPlaceholder);
                  break;
              }
              refPlaceholder = candidate;
              if (candidate.hType === 0 /* EZRuntimeHostSideElementType.Comment */ && candidate.textContent === expectData) {
                  // foundCandidate = candidate;
                  break;
              }
              else {
                  if (parentNodesContext.stopReverseIndex === parentNodesContext.nodes.length - index) {
                      // 要求匹配 anchor，但是当前不是，需要原地新建插入
                      var insertRef = candidate;
                      var newComment = componentInstance.document.createComment(expectData);
                      refPlaceholder = newComment;
                      parent.insertBefore(refPlaceholder, insertRef);
                      break;
                  }
                  else {
                      parent.removeChild(refPlaceholder);
                  }
              }
          }
          parentNodesContext.index++;
          return refPlaceholder;
      }
      else {
          // 找到一个 Comment 返回
          // 没找到，有候选
          // 没找到，index 终止状态到了，创建 insertBefore
          //        index 终止状态，创建 insertBefore 并移除
          // 没找到，没候选，插一个新的
          var candidate = parentNodesContext.nodes.item(parentNodesContext.index++);
          refPlaceholder = candidate;
          if (!candidate || candidate.hType !== 0 /* EZRuntimeHostSideElementType.Comment */) {
              var newRoot = componentInstance.document.createComment(helperGetNextZephyrAnchorId());
              newRefPlaceholder = newRoot;
              if (candidate) {
                  // 插入新的
                  parent.insertBefore(newRefPlaceholder, candidate);
                  if (parentNodesContext.stopReverseIndex === parentNodesContext.nodes.length - parentNodesContext.index) ;
                  else {
                      parent.removeChild(candidate);
                  }
              }
              else {
                  parent.appendChild(newRefPlaceholder);
              }
          }
      }
      return newRefPlaceholder || refPlaceholder;
  }
  function helperHydrateBlockAnchor4ClientWeb(parentNodesContext, componentInstance, matchAnchor) {
      var parent = parentNodesContext.target;
      var newRefPlaceholder;
      var refPlaceholder = {
          destroy: noop$2,
          eType: 0 /* EZRuntimeClientSideElementType.Comment */,
          nextSibling: null,
          parent: null,
          previousSibling: null,
          root: null,
      };
      if (matchAnchor) {
          var expectData = matchAnchor.root.textContent;
          var index = parentNodesContext.index;
          var candidate = void 0;
          // 要求匹配
          // 终止状态的意义是不能 remove，不是不能 create
          // 读取 nodes[index]
          //    如果没有，新建 appendChild，index ++ 下一个 break
          //    如果有，如果是匹配 anchor，复用, index ++ 下一个 break
          //           如果是不匹配，index 终止状态到了，创建，insertBefore index ++。break
          //           如果是不匹配，index 终止状态没到，移除节点，保持 index 下一个
          while (true) {
              candidate = parentNodesContext.nodes.item(index);
              if (!candidate) {
                  var newComment = componentInstance.document.document.createComment(expectData);
                  refPlaceholder.root = newComment;
                  parent.appendChild(refPlaceholder);
                  helperHydrateReportError(4 /* EZRuntimeHydrateErrorType.AnchorMatchNotFoundCreate */, parentNodesContext, null, newComment);
                  break;
              }
              refPlaceholder.root = candidate;
              if (candidate.nodeType === 8 /* IZRuntimeDOMElementNodeType4Web.Comment */ && candidate.textContent === expectData) {
                  // foundCandidate = candidate;
                  // 复用
                  helperClientAppendChildLink(parent, refPlaceholder);
                  break;
              }
              else {
                  if (parentNodesContext.stopReverseIndex === parentNodesContext.nodes.length - index) {
                      // 要求匹配 anchor，但是当前不是，需要原地新建插入
                      var insertRef = {
                          destroy: noop$2,
                          eType: 0 /* EZRuntimeClientSideElementType.Comment */,
                          nextSibling: null,
                          parent: null,
                          previousSibling: null,
                          root: candidate,
                      };
                      var newComment = componentInstance.document.document.createComment(expectData);
                      refPlaceholder.root = newComment;
                      helperClientAppendChildLink(parent, insertRef);
                      parent.insertBefore(refPlaceholder, insertRef);
                      helperClientRemoveChildLink(parent, insertRef);
                      helperHydrateReportError(3 /* EZRuntimeHydrateErrorType.AnchorMatchStopCreate */, parentNodesContext, candidate, newComment);
                      break;
                  }
                  else {
                      parent.removeChild(refPlaceholder);
                      // TODO
                      helperHydrateReportError(2 /* EZRuntimeHydrateErrorType.AnchorMatchRemoveAndNext */, parentNodesContext, candidate, null);
                  }
              }
          }
          parentNodesContext.index++;
          return refPlaceholder;
      }
      else {
          // 找到一个 Comment 返回
          // 没找到，有候选
          // 没找到，index 终止状态到了，创建 insertBefore
          //        index 终止状态，创建 insertBefore 并移除
          // 没找到，没候选，插一个新的
          var candidate = parentNodesContext.nodes.item(parentNodesContext.index++);
          refPlaceholder.root = candidate;
          if (!candidate || candidate.nodeType !== 8 /* IZRuntimeDOMElementNodeType4Web.Comment */) {
              var newRoot = componentInstance.document.document.createComment(helperGetNextZephyrAnchorId());
              newRefPlaceholder = {
                  destroy: noop$2,
                  eType: 0 /* EZRuntimeClientSideElementType.Comment */,
                  nextSibling: null,
                  parent: null,
                  previousSibling: null,
                  root: newRoot,
              };
              if (candidate) {
                  // 插入新的
                  helperClientAppendChildLink(parent, refPlaceholder);
                  parent.insertBefore(newRefPlaceholder, refPlaceholder);
                  if (parentNodesContext.stopReverseIndex === parentNodesContext.nodes.length - parentNodesContext.index) {
                      helperClientRemoveChildLink(parent, refPlaceholder);
                      helperHydrateReportError(6 /* EZRuntimeHydrateErrorType.AnchorHeadStopCreate */, parentNodesContext, candidate, newRoot);
                  }
                  else {
                      parent.removeChild(refPlaceholder);
                      // TODO
                      helperHydrateReportError(5 /* EZRuntimeHydrateErrorType.AnchorHeadRemoveCreate */, parentNodesContext, candidate, newRoot);
                  }
              }
              else {
                  parent.appendChild(newRefPlaceholder);
                  helperHydrateReportError(7 /* EZRuntimeHydrateErrorType.AnchorHeadNotFoundCreate */, parentNodesContext, null, newRoot);
              }
          }
          else {
              // 复用
              helperClientAppendChildLink(parent, refPlaceholder);
          }
      }
      return newRefPlaceholder || refPlaceholder;
  }
  function getConditionIndexAnchorContent(branchIndex) {
      return "".concat("c" /* EZRuntimeBlockAnchorCommentTag.Condition */, ":").concat(branchIndex || '');
  }
  function getTemplateNameAnchorContent(currentName) {
      return "".concat("t" /* EZRuntimeBlockAnchorCommentTag.Template */, ":").concat(currentName || '');
  }
  function getDynamicComponentAnchorContent(currentComponentName) {
      return "".concat("t" /* EZRuntimeBlockAnchorCommentTag.Template */, ":").concat(currentComponentName || '');
  }
  function getSlotDynamicNameAnchorContent(slotName) {
      return "".concat("s" /* EZRuntimeBlockAnchorCommentTag.SlotDynamicName */, ":").concat(slotName || '');
  }
  /**
   * 创建动态组件的使用
   * <component is/> 的创建
   */
  function helper4InitializeDynamicComponent(parentComponent, initData, staticSlotMap, dynamicSlotProvider) {
      var klassOfComponent;
      var getDynamicComponent = parentComponent.context.getDynamicComponent;
      if (getDynamicComponent) {
          // 为什么这里要 as ?
          // TS 推断出来是 xxx<SType.Client, PType> | xxx<SType.Host, PType>
          // TS 并不能帮助我们合并为 xxx< SType.Client | SType.Host , PType>
          // 所以自己转换成 xxx<SType>
          klassOfComponent = getDynamicComponent();
          if (!klassOfComponent) {
              klassOfComponent = getEmptyZRuntimeTargetConstructor4ContextConstructor();
          }
      }
      else {
          klassOfComponent = getEmptyZRuntimeTargetConstructor4ContextConstructor();
      }
      return helperInitializeComponent(klassOfComponent, parentComponent, initData, staticSlotMap, dynamicSlotProvider);
  }
  function helper4DynamicComponentBlockCreateFactory(dynamicComponentFactory, getComponent, dynamicComponentTagName) {
      return function (componentInstance, context) {
          var _a;
          var currentComponentName = '';
          // block 的开头
          var currentAnchorHead;
          // 写 block 名字的，用于后续 hydrate 比较
          var currentAnchor4Name;
          // block 的尾部
          var currentAnchorState;
          var currentBlock;
          var currentTarget;
          // 为什么要 as any？
          // componentInstance.context.getDynamicComponent 推断出来的结果是 ()=> <S.Client> | ()=><S.Host> | void
          // 我们给上去的是 ()=> <S.Client | S.Host> 并不能帮我们合并掉
          componentInstance.context.getDynamicComponent = function () {
              // 这个函数不能崩，如果不存在要返回 undefined，后续会有 empty 的兜底逻辑
              return getComponent(currentComponentName, 2 /* ERequireZComponentType.MainAppRequireDynamicExtensionComponent */);
          };
          return _a = {},
              _a["c" /* EZRuntimeBlockMethod.Create */] = function () {
                  // 创建第一个模块
                  currentComponentName = dynamicComponentTagName(componentInstance, context);
                  // 这时候这个名字是用户写的名字 eg. dynamic-component://${id}/${component}
                  // 如果用户 hydrate 的时候 dynamic-component version1 的 hydrate 结果与 dynamic-component version2 进行混合
                  // 会出现什么结果？
                  currentAnchorHead = helperCreateBlockAnchor(componentInstance);
                  currentAnchor4Name = helperCreateBlockAnchor(componentInstance, null, getDynamicComponentAnchorContent(currentComponentName));
                  currentBlock = dynamicComponentFactory(componentInstance, context);
                  currentBlock["c" /* EZRuntimeBlockMethod.Create */]();
                  currentAnchorState = helperCreateBlockAnchorState(componentInstance, currentAnchorHead);
                  return 0;
              },
              /* #__PRIVATE_HYDRATE__ */
              _a["l" /* EZRuntimeBlockMethod.Link */] = function (nodes) {
                  currentAnchorHead = helperHydrateBlockAnchor(nodes, componentInstance);
                  // 判断一次
                  var nextStopReverseIndex = helperHydrateBlockAnchorTryMatchReverseIndex(nodes, currentAnchorHead);
                  helperHydratePushStopReverseIndex(nodes, nextStopReverseIndex);
                  currentComponentName = dynamicComponentTagName(componentInstance, context);
                  // 先要求一个 `t:templateName`，stopReverseIndex 按照已有要求执行
                  var matchResult = helperHydrateBlockAnchor4CommentTagMatch(nodes, componentInstance, "p" /* EZRuntimeBlockAnchorCommentTag.DynamicComponent */, getDynamicComponentAnchorContent(currentComponentName));
                  currentAnchor4Name = matchResult[0];
                  nodes.treatErrorAsWarning += matchResult[1];
                  currentBlock = dynamicComponentFactory(componentInstance, context);
                  currentBlock["l" /* EZRuntimeBlockMethod.Link */](nodes);
                  nodes.treatErrorAsWarning -= matchResult[1];
                  helperHydratePopStopReverseIndex(nodes);
                  currentAnchorState = helperHydrateBlockAnchorState(nodes, componentInstance, currentAnchorHead);
                  currentTarget = nodes.target;
                  return 0;
              },
              _a["m" /* EZRuntimeBlockMethod.Mount */] = function (target, anchor) {
                  currentTarget = target;
                  helperDocumentInsertAnchor(target, currentAnchorHead, anchor);
                  helperDocumentInsertAnchor(target, currentAnchor4Name, anchor);
                  if (currentBlock) {
                      currentBlock["m" /* EZRuntimeBlockMethod.Mount */](target, anchor);
                  }
                  helperDocumentInsertAnchorState(target, currentAnchorState, anchor);
              },
              _a["u" /* EZRuntimeBlockMethod.Update */] = function (diff, data) {
                  // 先算 tag 是不是发生变化
                  var maybeNewName = dynamicComponentTagName(componentInstance, data);
                  // 如果没变化并且 currentBlock 存在，直接进行更新
                  if (maybeNewName === currentComponentName && currentBlock) {
                      return currentBlock["u" /* EZRuntimeBlockMethod.Update */](diff, data);
                  }
                  // 删掉原来的 block
                  if (currentBlock) {
                      // 名字发生变化了，删掉原来的节点
                      currentBlock["d" /* EZRuntimeBlockMethod.Destroy */](true); // true 会让节点自己处理 dom 删除
                  }
                  // 更新新的名字上去
                  currentComponentName = maybeNewName;
                  // init 一个新的 block 这时候他拿到的新 component
                  currentBlock = dynamicComponentFactory(componentInstance, context);
                  currentBlock["c" /* EZRuntimeBlockMethod.Create */]();
                  currentBlock["m" /* EZRuntimeBlockMethod.Mount */](currentTarget, helperAnchor(currentAnchorState));
              },
              _a["d" /* EZRuntimeBlockMethod.Destroy */] = function (isDestroyRoot) {
                  if (currentBlock) {
                      currentBlock["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
                  }
                  if (isDestroyRoot) {
                      helperDestroyBlockAnchor(currentAnchorHead);
                      helperDestroyBlockAnchor(currentAnchor4Name);
                      helperDestroyBlockAnchorState(currentAnchorState);
                      currentAnchorHead = null;
                      currentAnchor4Name = null;
                      currentAnchorState = null;
                  }
              },
              _a;
      };
  }
  function helperHydrateSlotContent(parentNodesContext, slotContentContextInstance, slotName, fallbackFactory, fallbackContext, scopeContext, slotNameDynamic) {
      var slotContentTargetInstance = (slotContentContextInstance.type < 2 /* EZRuntimeLinkedInstanceType.Component */
          ? slotContentContextInstance.option.parentTarget
          : slotContentContextInstance);
      var componentOption = slotContentTargetInstance.option;
      var dynamicSlotProvider = componentOption.dynamicSlot;
      var staticSlots = componentOption.slots;
      var staticSlotProvider = staticSlots && staticSlots[slotName];
      if (dynamicSlotProvider) {
          // 这里构造新的 scopeContext
          var injectBlock = void 0;
          var scopeContextWithDynamicSymbol = [
              scopeContext,
              slotName === '$default',
              slotName ];
          injectBlock = dynamicSlotProvider.createBlockWithScope(scopeContextWithDynamicSymbol, slotContentTargetInstance);
          if (fallbackFactory) {
              var slotOrFallbackBlock = new SlotFallbackContainer('$$dynamic$$fallback$$', slotContentTargetInstance, fallbackContext, injectBlock, fallbackFactory);
              slotOrFallbackBlock["l" /* EZRuntimeBlockMethod.Link */](parentNodesContext);
              return slotOrFallbackBlock;
          }
          else {
              injectBlock["l" /* EZRuntimeBlockMethod.Link */](parentNodesContext);
              return injectBlock;
          }
      }
      else {
          return createOrHydrateStaticSlotContentInternal(slotContentTargetInstance, staticSlotProvider, slotName, fallbackContext, scopeContext, fallbackFactory, slotNameDynamic, parentNodesContext);
      }
  }

  var hasNativeLog$3 = typeof nativeLog !== 'undefined';
  var debug$3 =  function (fn) { return info$3(fn()); } ;
  function info$3(str) {
      if (str) {
          if (hasNativeLog$3) {
              nativeLog(str, Date.now());
          }
          else {
              console.log(str, Date.now()); // tslint:disable-line
          }
      }
  }
  /**
   * 只有在调试的时候才生效，线上会 tree-shake 掉
   * @param func
   * @param message
   */
  function ASSERT_DEBUG(assertFunction, messageFunction) {
      {
          var assertPass = assertFunction();
          if (!assertPass) {
              throw new Error(messageFunction());
          }
      }
  }

  function getDefaultValue(value, defaultValue) {
      return value === undefined ? defaultValue : value;
  }
  function getDefaultValue4NumberInt(value, defaultValue) {
      var parsedValue = parseInt(value, 10);
      return parsedValue !== parsedValue ? defaultValue : parsedValue;
  }
  function getDefaultValue4NumberFloat(value, defaultValue) {
      var parsedValue = parseFloat(value);
      return parsedValue !== parsedValue ? defaultValue : parsedValue;
  }

  var lyraNativeComponentMap = {};
  // Lyra 模拟器是否支持 xxx Native 组件，如果不是 Lyra 模拟器返回 true
  function getLyraNativeComponentSupportStatus(startupParams, componentName) {
      if (startupParams) {
          if (lyraNativeComponentMap[componentName] === undefined) {
              var LyraNativeComponentList = startupParams.LyraNativeComponentList;
              if (Array.isArray(LyraNativeComponentList)) {
                  lyraNativeComponentMap[componentName] = LyraNativeComponentList.indexOf(componentName) > -1;
              }
              else {
                  lyraNativeComponentMap[componentName] = true;
              }
          }
          return lyraNativeComponentMap[componentName];
      }
      return true;
  }

  function isSpace(value) {
      var charCode = value.charCodeAt(0);
      return (charCode === /** 空格 */ 32 ||
          charCode === /** \t */ 9 ||
          charCode === /** \n */ 10 ||
          charCode === /** \f */ 12 ||
          charCode === /** \r */ 13);
  }
  function isLetter(value, allowNumberic) {
      var charCode = value.charCodeAt(0);
      return (charCode === /** _ */ 95 ||
          charCode === /** - */ 45 ||
          (charCode >= /** a */ 97 && charCode <= /** z */ 122) ||
          (charCode >= /** A */ 65 && charCode <= /** Z */ 90) ||
          (allowNumberic && charCode >= /** 0 */ 48 && charCode <= /** 9 */ 57));
  }
  /**
   * - 支持 ID 选择器、类选择器、后代关系、子代关系、跨组件深度后代关系、并关系
   * - 有效的 ID 和类选择器的字符集和微信不同
   *   - 支付宝: [#.][-_a-zA-Z][-\w]*
   *   - 微信: (?:#[_a-zA-Z]|.[-_a-zA-Z])[-\w]*
   *     - ID 不支持短横线开头
   *  - 空白字符的支持和微信不同
   *     - 支付宝: [ \t\n\f\r]。空白符中的 \v 不被 document.queryStrictSelector() 解析
   *     - 微信: [ \t]
   */
  function parseStrictSelectorString(input) {
      var inputString = input + '';
      var stringLen = inputString.length;
      var selectorGroup = [];
      var type;
      var value;
      var selector = [];
      var step = 0 /* ESharedStrictSelectorStringParserStep.BeforeSelector */;
      var index = 0;
      var isStrict = true;
      var isDeep = false;
      var isId = false;
      var isChild = false;
      while (index < stringLen) {
          var char = inputString[index];
          switch (step) {
              // 正在吃选择器
              case 1 /* ESharedStrictSelectorStringParserStep.InSelector */:
                  // 还是选择器字符
                  if (isLetter(char, true)) {
                      value += char;
                      index += 1;
                  }
                  // 选择器字符结束，那转到关系去
                  // 这里不吃，故 AfterSelector 必然发生
                  else {
                      selector.push({
                          type: type,
                          value: value,
                      });
                      value = '';
                      step = 4 /* ESharedStrictSelectorStringParserStep.AfterSelector */;
                  }
                  break;
              // 当前选择器组是无效的
              case 2 /* ESharedStrictSelectorStringParserStep.Invalid */:
                  isStrict = false;
                  // 清空之前的选择器，反正莫得用了
                  selector = [];
                  // 只能期待有逗号分割的其他组选择器
                  // 不要吃字符串
                  step = 3 /* ESharedStrictSelectorStringParserStep.UtilNewGroup */;
                  break;
              // 期待逗号分割
              case 3 /* ESharedStrictSelectorStringParserStep.UtilNewGroup */:
                  // 遇到逗号很好，准备开启新一组的识别
                  if (char === ',') {
                      step = 0 /* ESharedStrictSelectorStringParserStep.BeforeSelector */;
                  }
                  index += 1;
                  break;
              // 正常地吃字符
              case 0 /* ESharedStrictSelectorStringParserStep.BeforeSelector */:
                  var isIdSelector = char === '#';
                  if (isIdSelector) {
                      isId = true;
                  }
                  // 正确的选择器
                  if (isIdSelector || char === '.') {
                      var firstLetter = inputString[index + 1];
                      // 选择器首字符必须正确
                      if (firstLetter && isLetter(firstLetter)) {
                          // 好滴，记录下来
                          type = isIdSelector ? 1 /* ESharedStrictSelectorType.Id */ : 2 /* ESharedStrictSelectorType.Class */;
                          value = firstLetter;
                          // 后面继续吃起来
                          step = 1 /* ESharedStrictSelectorStringParserStep.InSelector */;
                          index += 2;
                      }
                      // 首字符错误
                      else {
                          step = 2 /* ESharedStrictSelectorStringParserStep.Invalid */;
                      }
                  }
                  // 空白，继续吃
                  else if (isSpace(char)) {
                      index += 1;
                  }
                  // 无效表达式
                  else {
                      step = 2 /* ESharedStrictSelectorStringParserStep.Invalid */;
                  }
                  break;
              case 5 /* ESharedStrictSelectorStringParserStep.AfterSelectorSpace */:
              case 4 /* ESharedStrictSelectorStringParserStep.AfterSelector */:
                  // 一组选择器结束叻
                  if (char === ',') {
                      selectorGroup.push(selector);
                      selector = [];
                      step = 0 /* ESharedStrictSelectorStringParserStep.BeforeSelector */;
                      index += 1;
                  }
                  // 将吃子代选择器，转到正常逻辑
                  else if (char === '>') {
                      step = 6 /* ESharedStrictSelectorStringParserStep.AfterArrow */;
                      index += 1;
                  }
                  // 空白，继续吃
                  else if (isSpace(char)) {
                      step = 5 /* ESharedStrictSelectorStringParserStep.AfterSelectorSpace */;
                      index += 1;
                  }
                  // 其他字符，则转入选择器去
                  else {
                      if (step === 4 /* ESharedStrictSelectorStringParserStep.AfterSelector */) {
                          selector.push(4 /* ESharedStrictSelectorCombination.And */);
                      }
                      else {
                          selector.push(2 /* ESharedStrictSelectorCombination.Descendant */);
                          isChild = true;
                      }
                      step = 0 /* ESharedStrictSelectorStringParserStep.BeforeSelector */;
                  }
                  break;
              case 6 /* ESharedStrictSelectorStringParserStep.AfterArrow */:
                  if (char === '>') {
                      // ">>>" 符号
                      if (inputString[index + 1] === '>') {
                          selector.push(3 /* ESharedStrictSelectorCombination.DeepDescendant */);
                          step = 0 /* ESharedStrictSelectorStringParserStep.BeforeSelector */;
                          index += 2;
                          isDeep = true;
                      }
                      // ">>?" 视为无效选择器
                      else {
                          step = 2 /* ESharedStrictSelectorStringParserStep.Invalid */;
                      }
                  }
                  // ">" 后接选择器
                  else {
                      selector.push(1 /* ESharedStrictSelectorCombination.Child */);
                      step = 0 /* ESharedStrictSelectorStringParserStep.BeforeSelector */;
                      isChild = true;
                  }
                  break;
          }
      }
      var inSelector = step === 1 /* ESharedStrictSelectorStringParserStep.InSelector */;
      // 跑完了，但还在吃选择器
      if (inSelector) {
          selector.push({
              type: type,
              value: value,
          });
          step = 5 /* ESharedStrictSelectorStringParserStep.AfterSelectorSpace */;
      }
      // 进入 AfterSelector 状态时必然有一个字符没吃完，所以结束时刻必不可能是 AfterSelector
      // 只有 AfterSelectorSpace 才可能突兀结束
      if (step === 5 /* ESharedStrictSelectorStringParserStep.AfterSelectorSpace */) {
          selectorGroup.push(selector);
      }
      // 其他情况说明有问题
      else if (!inSelector) {
          isStrict = false;
      }
      return {
          child: isChild,
          deep: isDeep,
          id: isId,
          strict: isStrict,
          value: selectorGroup,
      };
  }

  function getFirstComponentChild(target) {
      var linkNode = target.node && target.node.firstChild;
      while (true) {
          if (linkNode) {
              var component = linkNode.component;
              if (component && component.type === 2 /* EZRuntimeLinkedInstanceType.Component */) {
                  return component;
              }
              linkNode = linkNode.nextSibling;
          }
          else {
              return undefined;
          }
      }
  }
  function getNextComponentSibling(target) {
      if (!target || !target.node) {
          return undefined;
      }
      var nextSibling = target.node && target.node.nextSibling;
      while (true) {
          if (nextSibling) {
              var component = nextSibling.component;
              if (component && component.type === 2 /* EZRuntimeLinkedInstanceType.Component */) {
                  return component;
              }
              nextSibling = nextSibling.nextSibling;
          }
          else {
              return undefined;
          }
      }
  }
  function matchSelector(selector, component) {
      var props = component._receivedProps;
      if (!props) {
          return false;
      }
      var propsMatch = false;
      if (selector.type === 1 /* ESharedStrictSelectorType.Id */) {
          propsMatch = props.id === selector.value;
      }
      else if (selector.type === 2 /* ESharedStrictSelectorType.Class */ && props.className) {
          var cls = props.className.split(' ');
          propsMatch = cls.filter(function (cl) { return cl === selector.value; }).length > 0;
      }
      return propsMatch;
  }
  function getSlotProviderOwnerTargetId(slotProvider) {
      var slotProviderParentContextInstance = slotProvider.slotProviderParentContextInstance;
      var ownerComponentInstance = (slotProviderParentContextInstance.type < 2 /* EZRuntimeLinkedInstanceType.Component */
          ? slotProviderParentContextInstance.option.parentTarget
          : slotProviderParentContextInstance);
      return ownerComponentInstance.targetId;
  }
  function isCombination(selectorSection) {
      return !(typeof selectorSection === 'object' && selectorSection.type);
  }
  function formatSelector(selector) {
      var e_1, _a, e_2, _b;
      var selectorGroups = parseStrictSelectorString(selector).value;
      var restrictionGroups = [];
      try {
          for (var selectorGroups_1 = __values(selectorGroups), selectorGroups_1_1 = selectorGroups_1.next(); !selectorGroups_1_1.done; selectorGroups_1_1 = selectorGroups_1.next()) {
              var group = selectorGroups_1_1.value;
              var restrictions = [
                  {
                      combination: 5 /* ESharedStrictSelectorCombination._Default */,
                      values: [],
                  } ];
              try {
                  for (var group_1 = (e_2 = void 0, __values(group)), group_1_1 = group_1.next(); !group_1_1.done; group_1_1 = group_1.next()) {
                      var selector_1 = group_1_1.value;
                      if (isCombination(selector_1)) {
                          if (selector_1 === 4 /* ESharedStrictSelectorCombination.And */) {
                              // 合并下一个 SelecotorValue 到上一个 Restriction 里面去
                              continue;
                          }
                          restrictions.push({
                              combination: selector_1,
                              values: [],
                          });
                      }
                      else {
                          restrictions[restrictions.length - 1].values.push(selector_1);
                      }
                  }
              }
              catch (e_2_1) { e_2 = { error: e_2_1 }; }
              finally {
                  try {
                      if (group_1_1 && !group_1_1.done && (_b = group_1.return)) { _b.call(group_1); }
                  }
                  finally { if (e_2) { throw e_2.error; } }
              }
              restrictionGroups.push(restrictions);
          }
      }
      catch (e_1_1) { e_1 = { error: e_1_1 }; }
      finally {
          try {
              if (selectorGroups_1_1 && !selectorGroups_1_1.done && (_a = selectorGroups_1.return)) { _a.call(selectorGroups_1); }
          }
          finally { if (e_1) { throw e_1.error; } }
      }
      return restrictionGroups;
  }

  var LinkedTreeIterator = /** @class */ /*#__PURE__*/ (function () {
      function LinkedTreeIterator() {
      }
      LinkedTreeIterator.prototype.iterateTargetAXML = function (target, ownerTargetId) {
          var childComponent, child, childAsLink, childComponent_1;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      childComponent = getFirstComponentChild(target);
                      if (!childComponent) {
                          return [2 /*return*/, null];
                      }
                      child = childComponent.node;
                      _a.label = 1;
                  case 1:
                      if (!child) { return [3 /*break*/, 5]; }
                      childAsLink = child;
                      if (!(childAsLink.component && childAsLink.component.type === 2 /* EZRuntimeLinkedInstanceType.Component */)) { return [3 /*break*/, 4]; }
                      childComponent_1 = childAsLink.component;
                      return [4 /*yield*/, childComponent_1];
                  case 2:
                      _a.sent();
                      return [5 /*yield**/, __values(this.iterateChildTargetByOwnerId(childComponent_1, ownerTargetId))];
                  case 3:
                      _a.sent();
                      _a.label = 4;
                  case 4:
                      child = child.nextSibling;
                      return [3 /*break*/, 1];
                  case 5: return [2 /*return*/, null];
              }
          });
      };
      LinkedTreeIterator.prototype.iterateChildTargetByOwnerId = function (target, ownerTargetId, direct) {
          var expectedProviderOrders, expectedProviderOrders_1, expectedProviderOrders_1_1, expectProvider, iterator, result, slotBlock, child, childAsLink, component, e_1_1;
          var e_1, _a;
          return __generator(this, function (_b) {
              switch (_b.label) {
                  case 0:
                      if (!target.slotProviders) {
                          // 没有 Slot 剪枝退出
                          return [2 /*return*/, null];
                      }
                      expectedProviderOrders = target.slotProviders;
                      _b.label = 1;
                  case 1:
                      _b.trys.push([1, 13, 14, 15]);
                      expectedProviderOrders_1 = __values(expectedProviderOrders), expectedProviderOrders_1_1 = expectedProviderOrders_1.next();
                      _b.label = 2;
                  case 2:
                      if (!!expectedProviderOrders_1_1.done) { return [3 /*break*/, 12]; }
                      expectProvider = expectedProviderOrders_1_1.value;
                      iterator = this.iterateDeepSlotBlockByOwnerId(target, ownerTargetId);
                      _b.label = 3;
                  case 3:
                      result = iterator.next();
                      if (!(result.done === false)) { return [3 /*break*/, 9]; }
                      slotBlock = result.value;
                      if (!slotBlock.node) { return [3 /*break*/, 8]; }
                      if (!(slotBlock.provider === expectProvider)) { return [3 /*break*/, 8]; }
                      child = slotBlock.node.firstChild;
                      _b.label = 4;
                  case 4:
                      if (!child) { return [3 /*break*/, 8]; }
                      childAsLink = child;
                      if (!childAsLink.component) { return [3 /*break*/, 7]; }
                      if (!(childAsLink.component.type === 2 /* EZRuntimeLinkedInstanceType.Component */)) { return [3 /*break*/, 7]; }
                      component = childAsLink.component;
                      return [4 /*yield*/, component];
                  case 5:
                      _b.sent();
                      if (!!direct) { return [3 /*break*/, 7]; }
                      return [5 /*yield**/, __values(this.iterateChildTargetByOwnerId(component, ownerTargetId))];
                  case 6:
                      _b.sent();
                      _b.label = 7;
                  case 7:
                      child = child.nextSibling;
                      return [3 /*break*/, 4];
                  case 8: return [3 /*break*/, 10];
                  case 9: return [3 /*break*/, 11];
                  case 10: return [3 /*break*/, 3];
                  case 11:
                      expectedProviderOrders_1_1 = expectedProviderOrders_1.next();
                      return [3 /*break*/, 2];
                  case 12: return [3 /*break*/, 15];
                  case 13:
                      e_1_1 = _b.sent();
                      e_1 = { error: e_1_1 };
                      return [3 /*break*/, 15];
                  case 14:
                      try {
                          if (expectedProviderOrders_1_1 && !expectedProviderOrders_1_1.done && (_a = expectedProviderOrders_1.return)) { _a.call(expectedProviderOrders_1); }
                      }
                      finally { if (e_1) { throw e_1.error; } }
                      return [7 /*endfinally*/];
                  case 15: return [2 /*return*/, null];
              }
          });
      };
      LinkedTreeIterator.prototype.iterateDeepSlotBlockByOwnerId = function (target, ownerTargetId) {
          var child, childAsLink, slotBlock, component;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      if (!target.node) {
                          return [2 /*return*/, null];
                      }
                      child = target.node.firstChild;
                      _a.label = 1;
                  case 1:
                      if (!child) { return [3 /*break*/, 9]; }
                      childAsLink = child;
                      if (!(childAsLink.component && childAsLink.component.type === 1 /* EZRuntimeLinkedInstanceType.SlotBlock */)) { return [3 /*break*/, 6]; }
                      slotBlock = childAsLink.component;
                      if (!(getSlotProviderOwnerTargetId(slotBlock.provider) === ownerTargetId)) { return [3 /*break*/, 3]; }
                      return [4 /*yield*/, slotBlock];
                  case 2:
                      _a.sent();
                      return [3 /*break*/, 5];
                  case 3: return [5 /*yield**/, __values(this.iterateDeepSlotBlockByOwnerId(slotBlock, ownerTargetId))];
                  case 4:
                      _a.sent();
                      _a.label = 5;
                  case 5: return [3 /*break*/, 8];
                  case 6:
                      if (!(childAsLink.component && childAsLink.component.type === 2 /* EZRuntimeLinkedInstanceType.Component */)) { return [3 /*break*/, 8]; }
                      component = childAsLink.component;
                      if (!component.slotProviders) { return [3 /*break*/, 8]; }
                      return [5 /*yield**/, __values(this.iterateDeepSlotBlockByOwnerId(component, ownerTargetId))];
                  case 7:
                      _a.sent();
                      _a.label = 8;
                  case 8:
                      child = child.nextSibling;
                      return [3 /*break*/, 1];
                  case 9: return [2 /*return*/, null];
              }
          });
      };
      LinkedTreeIterator.prototype.iterateTargetDeep = function (target, ownerTargetId) {
          var iteratorChild, result;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0: return [5 /*yield**/, __values(this.iterateDeepXML(target))];
                  case 1:
                      _a.sent();
                      iteratorChild = this.iterateChildTargetByOwnerId(target, ownerTargetId);
                      _a.label = 2;
                  case 2:
                      result = iteratorChild.next();
                      if (!(result.done === false)) { return [3 /*break*/, 5]; }
                      return [4 /*yield*/, result.value];
                  case 3:
                      _a.sent();
                      return [5 /*yield**/, __values(this.iterateDeepXML(result.value))];
                  case 4:
                      _a.sent();
                      return [3 /*break*/, 6];
                  case 5: return [3 /*break*/, 7];
                  case 6: return [3 /*break*/, 2];
                  case 7: return [2 /*return*/, null];
              }
          });
      };
      LinkedTreeIterator.prototype.iterateDeepXML = function (target) {
          var child, childAsLink, component, siblingComponent;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      if (!target.slotProviders || !target.node) {
                          return [2 /*return*/, null];
                      }
                      child = target.node.firstChild;
                      _a.label = 1;
                  case 1:
                      if (!child) { return [3 /*break*/, 10]; }
                      childAsLink = child;
                      component = childAsLink.component;
                      if (!(component && component.type === 2 /* EZRuntimeLinkedInstanceType.Component */)) { return [3 /*break*/, 8]; }
                      return [4 /*yield*/, component];
                  case 2:
                      _a.sent();
                      return [5 /*yield**/, __values(this.iterateTargetDeep(component, target.targetId))];
                  case 3:
                      _a.sent();
                      siblingComponent = getNextComponentSibling(component);
                      _a.label = 4;
                  case 4:
                      if (!siblingComponent) { return [3 /*break*/, 7]; }
                      return [4 /*yield*/, siblingComponent];
                  case 5:
                      _a.sent();
                      return [5 /*yield**/, __values(this.iterateDeepXML(siblingComponent))];
                  case 6:
                      _a.sent();
                      siblingComponent = getNextComponentSibling(siblingComponent);
                      return [3 /*break*/, 4];
                  case 7: return [3 /*break*/, 10];
                  case 8:
                      child = child.nextSibling;
                      _a.label = 9;
                  case 9: return [3 /*break*/, 1];
                  case 10: return [2 /*return*/, null];
              }
          });
      };
      return LinkedTreeIterator;
  }());

  var CacheableGenerator = /** @class */ /*#__PURE__*/ (function () {
      function CacheableGenerator(provider) {
          this.provider = provider;
          this.index = 0;
      }
      CacheableGenerator.prototype[Symbol.iterator] = function () {
          return this;
      };
      CacheableGenerator.prototype.next = function (value) {
          return this.provider.item(this.index++);
      };
      CacheableGenerator.prototype.throw = function (value) {
          throw new Error("throw unimplemented");
      };
      CacheableGenerator.prototype.return = function (value) {
          throw new Error("return unimplemented");
      };
      return CacheableGenerator;
  }());
  var GeneratorProvider = /** @class */ /*#__PURE__*/ (function () {
      function GeneratorProvider(generator) {
          this.generator = generator;
          this.done = false;
          this.results = [];
      }
      GeneratorProvider.prototype.ref = function () {
          return new CacheableGenerator(this);
      };
      GeneratorProvider.prototype.item = function (index) {
          var this$1 = this;

          while (index > this.results.length - 1) {
              var result = this$1.generator.next();
              if (result.done === false) {
                  this$1.results.push(result.value);
              }
              else {
                  this$1.done = true;
                  break;
              }
          }
          return this.done
              ? {
                  done: true,
                  value: null,
              }
              : {
                  done: false,
                  value: this.results[index],
              };
      };
      return GeneratorProvider;
  }());
  var CachableLinkedTreeIterator = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(CachableLinkedTreeIterator, _super);
      function CachableLinkedTreeIterator() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.cache = createWeakMap();
          return _this;
      }
      CachableLinkedTreeIterator.prototype.createIterator = function (fn, args) {
          // 在当前 ctx 内，做一层缓存
          var cache = this.cache.get(fn);
          if (!cache) {
              cache = createMap();
              this.cache.set(fn, cache);
          }
          var key = args.map(function (s) { return (typeof s === 'object' && s ? "".concat(s.targetId) : "".concat(s)); }).join('_');
          var iteratorInfo = cache.get(key);
          if (!iteratorInfo) {
              iteratorInfo = new GeneratorProvider(fn.apply(this, args));
          }
          return iteratorInfo.ref();
      };
      CachableLinkedTreeIterator.prototype.iterateTargetAXML = function (target, ownerTargetId) {
          return this.createIterator(_super.prototype.iterateTargetAXML, [target, ownerTargetId]);
      };
      CachableLinkedTreeIterator.prototype.iterateChildTargetByOwnerId = function (target, ownerTargetId, direct) {
          return this.createIterator(_super.prototype.iterateChildTargetByOwnerId, [target, ownerTargetId, direct]);
      };
      CachableLinkedTreeIterator.prototype.iterateDeepSlotBlockByOwnerId = function (target, ownerTargetId) {
          return this.createIterator(_super.prototype.iterateDeepSlotBlockByOwnerId, [target, ownerTargetId]);
      };
      CachableLinkedTreeIterator.prototype.iterateTargetDeep = function (target, ownerTargetId) {
          return this.createIterator(_super.prototype.iterateTargetDeep, [target, ownerTargetId]);
      };
      CachableLinkedTreeIterator.prototype.iterateDeepXML = function (target) {
          return this.createIterator(_super.prototype.iterateDeepXML, [target]);
      };
      return CachableLinkedTreeIterator;
  }(LinkedTreeIterator));

  var QueryContext = /** @class */ /*#__PURE__*/ (function () {
      function QueryContext(selectors, rootTarget) {
          this.selectors = selectors;
          this.rootTarget = rootTarget;
      }
      QueryContext.prototype.querySelector = function () {
          var iterator = this.matchSelectorAt(0, this.rootTarget);
          var result = iterator.next();
          if (result.done === false) {
              return result.value;
          }
          else {
              return null;
          }
      };
      QueryContext.prototype.querySelectors = function () {
          var iterator = this.matchSelectorAt(0, this.rootTarget);
          var results = [];
          while (true) {
              var result = iterator.next();
              if (result.done === false) {
                  results.push(result.value);
              }
              else {
                  break;
              }
          }
          return results;
      };
      QueryContext.prototype.matchSelectorAt = function (index, target) {
          var selector, targetAsComponent, iterator, cachableIterator, _loop_1, this_1, state_1;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      if (index >= this.selectors.length) {
                          return [2 /*return*/, null];
                      }
                      selector = this.selectors[index];
                      targetAsComponent = target;
                      cachableIterator = new CachableLinkedTreeIterator();
                      switch (selector.combination) {
                          // 按照不同规则生成迭代器
                          // 对于相同入参，可以用数组缓存生成器，加速访问
                          case 5 /* ESharedStrictSelectorCombination._Default */:
                              iterator = cachableIterator.iterateTargetAXML(targetAsComponent, this.rootTarget.targetId);
                              break;
                          case 1 /* ESharedStrictSelectorCombination.Child */:
                              iterator = cachableIterator.iterateChildTargetByOwnerId(targetAsComponent, this.rootTarget.targetId, true);
                              break;
                          case 2 /* ESharedStrictSelectorCombination.Descendant */:
                              iterator = cachableIterator.iterateChildTargetByOwnerId(targetAsComponent, this.rootTarget.targetId);
                              break;
                          case 3 /* ESharedStrictSelectorCombination.DeepDescendant */:
                              iterator = cachableIterator.iterateTargetDeep(targetAsComponent, this.rootTarget.targetId);
                              break;
                      }
                      if (!iterator) {
                          return [2 /*return*/, null];
                      }
                      _loop_1 = function () {
                          var result, component, matched;
                          return __generator(this, function (_b) {
                              switch (_b.label) {
                                  case 0:
                                      result = iterator.next();
                                      if (result.done !== false) {
                                          return [2 /*return*/, { value: null }];
                                      }
                                      component = result.value;
                                      matched = this_1.selectors[index].values.every(function (selector) {
                                          return matchSelector(selector, component);
                                      });
                                      if (!matched) { return [3 /*break*/, 5]; }
                                      if (!(index >= this_1.selectors.length - 1)) { return [3 /*break*/, 2]; }
                                      // 匹配到最后一层，每次回送的都是最终结果
                                      return [4 /*yield*/, component];
                                  case 1:
                                      // 匹配到最后一层，每次回送的都是最终结果
                                      _b.sent();
                                      return [3 /*break*/, 4];
                                  case 2: 
                                  // 没到最后一层，还要看下几层的 Restriction 是否符合要求，可能返回多个
                                  return [5 /*yield**/, __values(this_1.matchSelectorAt(index + 1, component))];
                                  case 3:
                                      // 没到最后一层，还要看下几层的 Restriction 是否符合要求，可能返回多个
                                      _b.sent();
                                      _b.label = 4;
                                  case 4: return [3 /*break*/, 6];
                                  case 5: return [2 /*return*/, "continue"];
                                  case 6: return [2 /*return*/];
                              }
                          });
                      };
                      this_1 = this;
                      _a.label = 1;
                  case 1:
                      return [5 /*yield**/, _loop_1()];
                  case 2:
                      state_1 = _a.sent();
                      if (typeof state_1 === "object")
                          { return [2 /*return*/, state_1.value]; }
                      return [3 /*break*/, 1];
                  case 3: return [2 /*return*/];
              }
          });
      };
      return QueryContext;
  }());

  function hyphenate(str) {
      var result = str.replace(/\B([A-Z])/g, '-$1').toLowerCase();
      // webkit => -webkit
      if (result.length >= 6 &&
          result[0] === 'w' &&
          result[1] === 'e' &&
          result[2] === 'b' &&
          result[3] === 'k' &&
          result[4] === 'i' &&
          result[5] === 't') {
          return '-' + result;
      }
      return result;
  }
  function parseInlineStyle(inlineStyle) {
      var styleObj = {};
      var styleArray = parseStyleStringToArray(inlineStyle);
      for (var index = 0; index < styleArray.length; index += 2) {
          styleObj[camelize4CSS(styleArray[index])] = styleArray[index + 1];
      }
      return styleObj;
  }

  var patchZRuntimeElementInstanceEventTargetId = function (behavior, extra, payload) {
      var _a = payload, target = _a.target, currentTarget = _a.currentTarget;
      if (target && currentTarget) {
          var eventTargetId = extra[0 /* EZRuntimeLinkedInstanceCallMethodExtra.EventTargetId */];
          if (eventTargetId != null) {
              defineEventPayloadTargetIdProperty(behavior, target, target.id, eventTargetId);
          }
          var eventCurrentTargetId = extra[1 /* EZRuntimeLinkedInstanceCallMethodExtra.EventCurrentTargetId */];
          if (eventCurrentTargetId != null) {
              defineEventPayloadTargetIdProperty(behavior, currentTarget, currentTarget.id, eventCurrentTargetId);
          }
      }
  };
  function getZRuntimeElementEventEventExtraInfo(payload, targetUserDefinedId, currentTargetUserDefinedId, trackIndexGetter) {
      var extraInfo4TargetId;
      var extraInfo4CurrentTargetId;
      var extraInfo4Type;
      var extraInfo4TrackIndex;
      var createExtraInfo;
      var targetId = payload.target.id;
      var currentTargetId = payload.currentTarget.id;
      var type = payload.type;
      if (targetId !== targetUserDefinedId) {
          extraInfo4TargetId = targetUserDefinedId;
          createExtraInfo = true;
      }
      if (currentTargetId !== currentTargetUserDefinedId) {
          extraInfo4CurrentTargetId = currentTargetUserDefinedId;
          createExtraInfo = true;
      }
      if (type === 'tap') {
          extraInfo4Type = type;
          createExtraInfo = true;
          if (trackIndexGetter) {
              extraInfo4TrackIndex = trackIndexGetter();
          }
      }
      if (createExtraInfo) {
          return [extraInfo4TargetId, extraInfo4CurrentTargetId, extraInfo4Type, extraInfo4TrackIndex];
      }
  }
  function isEventTrusted(extra, expectedType) {
      return !!extra && extra[2 /* EZRuntimeLinkedInstanceCallMethodExtra.EventType */] === expectedType;
  }
  function defineEventPayloadTargetIdProperty(behavior, target, actual, expect) {
      if (actual !== expect) {
          var report_1 = behavior.report, standard_1 = behavior.standard;
          if (report_1) {
              Object.defineProperty(target, 'id', {
                  configurable: true,
                  enumerable: true,
                  get: function () {
                      report_1('event target id', {
                          a: actual,
                          e: expect,
                          o: 'e',
                      });
                      return standard_1 ? expect : actual;
                  },
                  set: function (v) {
                      Object.defineProperty(this, 'id', {
                          configurable: true,
                          enumerable: true,
                          value: v,
                          writable: true,
                      });
                  },
              });
          }
          else if (standard_1) {
              target.id = expect;
          }
      }
  }

  var kLinkedInstanceIdContext = {
      id: 0,
  };
  var kLinkedInstanceIdPage = 0;
  var kLinkedInstanceIdPages = [];
  /**
   *
   * 根据编译参数来看，如果
   */
  function createPageOwnerId(page) {
      {
          var id = ++kLinkedInstanceIdPage;
          kLinkedInstanceIdPages[id] = page;
          return id;
      }
  }
  function destroyPageOwnerId(id, page) {
      if ( kLinkedInstanceIdPages[id] === page) {
          kLinkedInstanceIdPages[id] = null;
      }
  }
  function getPageByOwnerId(ownerPageId) {
      {
          ASSERT_DEBUG(function () { return ownerPageId !== undefined; }, function () { return 'ownerPageId undefined'; });
          return kLinkedInstanceIdPages[ownerPageId];
      }
  }

  /**
   * 空组件创建
   */
  var EmptyTargetConstructor4UnknownSide = /** @class */ /*#__PURE__*/ (function () {
      function EmptyTargetConstructor4UnknownSide(option) {
          this.type = 0 /* EZRuntimeLinkedInstanceType.Context */;
          this.uid = kLinkedInstanceIdContext.id++;
          this.option = option;
          var root = (this.root = option.parent.root);
          this.document = root.document;
          // const parentContext = option.parent.context;
          // 当组件不存在的时候还要 context 么
          this.context = null;
          this._fragment = createEmptyblockFactory();
      }
      EmptyTargetConstructor4UnknownSide.prototype.requestPreviousSlotsUpdating = function () { };
      EmptyTargetConstructor4UnknownSide.prototype.receiveOnlySlot = function () { };
      EmptyTargetConstructor4UnknownSide.prototype.destroy = function (isDestroyRoot) {
          var self = this;
          if (self._fragment) {
              self._fragment["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
              self._fragment = null;
          }
          self.root = null;
          self.document = null;
          self.option = null;
          self.context = null;
      };
      EmptyTargetConstructor4UnknownSide.prototype.getTargetId = function () {
          return this.targetId;
      };
      EmptyTargetConstructor4UnknownSide.prototype.callMethod = function (method, arg0) { };
      EmptyTargetConstructor4UnknownSide.prototype.callEvent = function (method, args) { };
      EmptyTargetConstructor4UnknownSide.prototype.beforeCreate = function () { };
      EmptyTargetConstructor4UnknownSide.prototype.afterCreate = function () { };
      EmptyTargetConstructor4UnknownSide.prototype.receiveProps = function () { };
      EmptyTargetConstructor4UnknownSide.prototype.beforeDestroy = function () { };
      EmptyTargetConstructor4UnknownSide.prototype.updateData = function (diff, data) { };
      EmptyTargetConstructor4UnknownSide.prototype.updateData4Props = function (diff, data) { };
      return EmptyTargetConstructor4UnknownSide;
  }());

  var sharedContextConstructorImpl;
  function createZRuntimeLinkedInstance4Context(option) {
      return new sharedContextConstructorImpl(option);
  }
  function setZRuntimeLinkedInstance4ContextImpl(impl) {
      sharedContextConstructorImpl = impl;
  }
  function getEmptyZRuntimeTargetConstructor4ContextConstructor() {
      return EmptyTargetConstructor4UnknownSide;
  }

  var TargetConstructorSlotLazy4ClientSide = /** @class */ /*#__PURE__*/ (function () {
      function TargetConstructorSlotLazy4ClientSide(option) {
          this.node = null;
          this.uid = kLinkedInstanceIdContext.id++;
          this.option = option;
          var root = (this.root = option.parent.root);
          this.document = root.document;
          this._state = option.data;
          // 如果存在 parent.swiper ，传递到 children，不存在则透传 children
          var parentContext = option.parent.context;
          var targetMeta = option.targetMeta;
          this.slotProviders = option.slotProviders || null;
          var isolation = null;
          var providerInfo = null;
          if (targetMeta) {
              if (targetMeta.providerType === 0 /* EZRuntimeLinkedInstanceOption4ProviderType.MainApp */) {
                  providerInfo = {
                      providerType: targetMeta.providerType,
                      resolvedPath: targetMeta.resolvedPath,
                  };
              }
              else if (targetMeta.providerType === 1 /* EZRuntimeLinkedInstanceOption4ProviderType.MiniExtension */) {
                  providerInfo = {
                      miniExtensionId: targetMeta.miniExtensionId,
                      providerType: targetMeta.providerType,
                      resolvedPath: targetMeta.resolvedPath,
                  };
              }
              if (targetMeta.isolation) {
                  isolation = targetMeta.isolation;
              }
          }
          if (parentContext.swiper) {
              this.context = {
                  getDynamicComponent: null,
                  isolation: isolation,
                  providerInfo: providerInfo,
                  styleScope: option.styleScope,
                  swiper: null,
                  swiperChildren: parentContext.swiper,
              };
          }
          else {
              this.context = {
                  getDynamicComponent: null,
                  isolation: isolation,
                  providerInfo: providerInfo,
                  styleScope: option.styleScope,
                  swiper: null,
                  swiperChildren: parentContext.swiperChildren,
              };
          }
      }
      TargetConstructorSlotLazy4ClientSide.prototype.requestPreviousSlotsUpdating = function (linkNode) { };
      TargetConstructorSlotLazy4ClientSide.prototype.getTargetId = function () {
          return this.targetId;
      };
      TargetConstructorSlotLazy4ClientSide.prototype.callMethod = function (method, arg0, callback, extra) {
          var onCallMethod = this.root.option.onCallMethod;
          onCallMethod(this.targetId, method, arg0, callback, extra);
      };
      TargetConstructorSlotLazy4ClientSide.prototype.callEvent = function (method, args) {
          // empty
      };
      TargetConstructorSlotLazy4ClientSide.prototype.updateData = function (diff, data) {
          // 调用当前 _fragment 进行数据更新
          var swiperChildren = this.context.swiperChildren;
          if (swiperChildren) {
              swiperChildren.willUpdateChildren();
          }
          this._fragment["u" /* EZRuntimeBlockMethod.Update */](diff, data);
      };
      TargetConstructorSlotLazy4ClientSide.prototype.updateData4Props = function (diff, data) {
          // 调用当前 _fragment 进行数据更新
          var swiperChildren = this.context.swiperChildren;
          if (swiperChildren) {
              swiperChildren.willUpdateChildren();
          }
          this._fragment["u" /* EZRuntimeBlockMethod.Update */](diff, data);
          var slotProviders = this.slotProviders;
          if (slotProviders) {
              var targetNode = this.node;
              // 如果还没跑完，继续
              if (targetNode) {
                  // 检测是否已经走到 targetNode, 没走到的话先走到
                  // 理论上没走完，从当前阶段，一路走出
                  //
                  this.requestPreviousSlotsUpdating(targetNode);
              }
              for (var _i = 0, slotProviders_1 = slotProviders; _i < slotProviders_1.length; _i++) {
                  var slotProvider = slotProviders_1[_i];
                  // 告知 updaing 状态结束
                  slotProvider.exitProviderUpdating();
              }
          }
      };
      TargetConstructorSlotLazy4ClientSide.prototype.destroy = function (isDestroyRoot) {
          var self = this;
          if (self._fragment) {
              self._fragment["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
              self._fragment = null;
          }
          if (this.descriptor) {
              this.descriptor.destroy();
              this.descriptor = null;
          }
      };
      TargetConstructorSlotLazy4ClientSide.prototype.beforeCreate = function (initProps, fixedPropKeys, nonEventSize) { };
      TargetConstructorSlotLazy4ClientSide.prototype.receiveProps = function (receivingProps, diff) { };
      TargetConstructorSlotLazy4ClientSide.prototype.receiveOnlySlot = function () {
          var slotProviders = this.slotProviders;
          if (slotProviders) {
              var targetNode = this.node;
              // 如果还没跑完，继续
              if (targetNode) {
                  this.requestPreviousSlotsUpdating(targetNode);
              }
              for (var _i = 0, slotProviders_2 = slotProviders; _i < slotProviders_2.length; _i++) {
                  var slotProvider = slotProviders_2[_i];
                  // 告知 updaing 状态结束
                  slotProvider.exitProviderUpdating();
              }
          }
      };
      TargetConstructorSlotLazy4ClientSide.prototype.beforeDestroy = function () { };
      return TargetConstructorSlotLazy4ClientSide;
  }());

  function getHydrateEmptyChildNodes() {
      var nodes = [];
      nodes.item = returnNull;
      return nodes;
  }
  function returnNull() {
      return null;
  }

  var PageConstructor4ClientSide = /** @class */ /*#__PURE__*/ (function () {
      function PageConstructor4ClientSide(option) {
          this.targetId = 0;
          this.updateQueue = [];
          this.node = null;
          this.type = 3 /* EZRuntimeLinkedInstanceType.Page */;
          this.changePropQueue = [];
          this.reflowQueue = [];
          this.uid = kLinkedInstanceIdContext.id++;
          this.ownerId = createPageOwnerId(this);
          this.option = option;
          option.root = this;
          this.document = option.document;
          this.document.ownerPageId = this.ownerId;
          if (option.tabbar) {
              this.tabbar = option.tabbar;
          }
          this.renderContext = option.renderContext;
          this._state = option.data;
          var pageMeta = option.pageMeta;
          var isolation = null;
          var providerInfo;
          if (pageMeta) {
              if (pageMeta.providerType === 0 /* EZRuntimeLinkedInstanceOption4ProviderType.MainApp */) {
                  providerInfo = {
                      providerType: pageMeta.providerType,
                      resolvedPath: pageMeta.resolvedPath,
                  };
              }
              else if (pageMeta.providerType === 1 /* EZRuntimeLinkedInstanceOption4ProviderType.MiniExtension */) {
                  providerInfo = {
                      miniExtensionId: pageMeta.miniExtensionId,
                      providerType: pageMeta.providerType,
                      resolvedPath: pageMeta.resolvedPath,
                  };
              }
              if (pageMeta.isolation) {
                  isolation = pageMeta.isolation;
              }
          }
          this.context = {
              getDynamicComponent: null,
              isolation: isolation,
              providerInfo: providerInfo,
              styleScope: option.styleScope,
              swiper: null,
              swiperChildren: null,
          };
          if (this.document.createRendererTracker) {
              this.tracker = this.document.createRendererTracker(option.runtime.proxy);
              this.tracker.bootstrap();
          }
      }
      PageConstructor4ClientSide.prototype.getTracker = function () {
          // 实现找 document 去创建
          return this.tracker;
      };
      PageConstructor4ClientSide.prototype.create = function () {
          if (this.tabbar) {
              this.createTabBarLinkedInstance();
          }
          this._fragment = this.option.fragment.fragment(this, this._state);
          if (this.tabBarLinkedInstance && this.tabbar) {
              this.renderContext["h" /* ECompilerRuntimeContextSymbol.Helper */]["c" /* ECompilerRuntimeHelperSymbol.CreateComponent */](this.tabBarLinkedInstance, {}, [], 0);
          }
          this._fragment["c" /* EZRuntimeBlockMethod.Create */]();
      };
      PageConstructor4ClientSide.prototype.hydrate = function (documentInstance) {
          var _this = this;
          return ifIsMiniProgramEnv(function () {
              if (!getZephyrRuntimeFeature(20 /* EZephyrFrameworkRuntimeFeature.enableHMR */)) {
                  // hmr 模式时保持 id 自增
                  resetHelperGetNextZephyrAnchorIdToHydration();
              }
              var nodes = {
                  index: 0,
                  nodes: documentInstance.getChildNodes() ||
                      getHydrateEmptyChildNodes(),
                  stopReverseIndex: 0,
                  stopReverseIndexStack: [],
                  target: documentInstance,
                  treatErrorAsWarning: 0,
              };
              if (_this.tabbar) {
                  _this.createTabBarLinkedInstance();
              }
              _this._fragment = _this.option.fragment.fragment(_this, _this._state);
              if (_this.tabBarLinkedInstance && _this.tabbar) {
                  _this.renderContext["h" /* ECompilerRuntimeContextSymbol.Helper */]["q" /* ECompilerRuntimeHelperSymbol.LinkComponent */](nodes, _this.tabBarLinkedInstance, {}, [], 0);
              }
              _this._fragment["l" /* EZRuntimeBlockMethod.Link */](nodes);
              helperHydrateClearChildren(nodes);
              var response = {
                  error: helperHydrateGetError(),
                  warning: helperHydrateGetWarning(),
              };
              if (getZephyrRuntimeFeature(20 /* EZephyrFrameworkRuntimeFeature.enableHMR */)) {
                  helperHydrateResetErrorAndWarning();
              }
              return response;
          });
      };
      PageConstructor4ClientSide.prototype.mount = function (target) {
          if (this.tabBarLinkedInstance && this.tabbar) {
              this.renderContext["h" /* ECompilerRuntimeContextSymbol.Helper */]["m" /* ECompilerRuntimeHelperSymbol.MountComponent */](this.tabBarLinkedInstance, this.tabbar, null);
          }
          var styleScope = this.option.styleScope;
          var root = target.root;
          /*
          var childNodes = root.childNodes;
          if (childNodes && childNodes.length) {
              root.textContent = '';
          }
          */
          if (styleScope && styleScope.type === 1 /* EZRuntimeLinkedInstanceStyleScope.ApplyShared */) {
              root.setAttribute('data-sa', styleScope.id);
          }
          this._fragment["m" /* EZRuntimeBlockMethod.Mount */](target, null);
      };
      PageConstructor4ClientSide.prototype.error = function (ex, coordinator) {
          this.document.onError(ex, coordinator);
      };
      PageConstructor4ClientSide.prototype.pushChangePropQueue = function (element, changes) {
          this.changePropQueue.push([element, changes]);
      };
      PageConstructor4ClientSide.prototype.pushReflowQueue = function (element) {
          this.reflowQueue.push(element);
      };
      PageConstructor4ClientSide.prototype.popReflowQueue = function (element) {
          var reflowQueue = this.reflowQueue;
          var length = reflowQueue.length;
          for (var index = 0; index < length; index += 1) {
              if (reflowQueue[index] === element) {
                  // 从原位置删除而不改变顺序
                  // 确保执行的生命周期顺序不变
                  reflowQueue.splice(index, 1);
                  return;
              }
          }
      };
      PageConstructor4ClientSide.prototype.pushUpdatedQueue = function (element) {
          this.updateQueue.push(element);
      };
      PageConstructor4ClientSide.prototype.beforeUpdate = function () {
          if (this.tracker) {
              this.tracker.beforeLayoutChange();
          }
      };
      PageConstructor4ClientSide.prototype.flushUpdatedQueue = function () {
          var _a = this, reflowQueue = _a.reflowQueue, updateQueue = _a.updateQueue, changePropQueue = _a.changePropQueue;
          var updateQueueLen = updateQueue.length;
          var reflowQueueLen = reflowQueue.length;
          var changePropQueueLen = changePropQueue.length;
          if (updateQueueLen) {
              for (var index = 0; index < updateQueueLen; index += 1) {
                  updateQueue[index].afterUpdate();
              }
              updateQueue.length = 0;
          }
          if (reflowQueueLen) {
              for (var index = 0; index < reflowQueueLen; index += 1) {
                  reflowQueue[index].styleReflow();
              }
          }
          if (changePropQueueLen) {
              for (var index = 0; index < changePropQueueLen; index += 1) {
                  var _b = changePropQueue[index], target = _b[0], changeExp = _b[1];
                  target.invokePropertiesChange(changeExp);
              }
              changePropQueue.length = 0;
          }
      };
      PageConstructor4ClientSide.prototype.getTargetId = function () {
          return this.targetId;
      };
      PageConstructor4ClientSide.prototype.callMethod = function (method, arg0, callback, extra) {
          var onCallMethod = this.option.onCallMethod;
          if (typeof onCallMethod === 'function') {
              onCallMethod(this.targetId, method, arg0, callback, extra);
          }
      };
      PageConstructor4ClientSide.prototype.callEvent = function (method, args) {
          // empty
      };
      PageConstructor4ClientSide.prototype.updateData = function (diff, data) {
          // 调用当前 _fragment 进行数据更新
          this._fragment["u" /* EZRuntimeBlockMethod.Update */](diff, data);
      };
      PageConstructor4ClientSide.prototype.destroy = function () {
          if (this.tabBarLinkedInstance && this.tabbar) {
              this.renderContext["h" /* ECompilerRuntimeContextSymbol.Helper */]["o" /* ECompilerRuntimeHelperSymbol.DestroyComponent */](this.tabBarLinkedInstance, true);
          }
          var self = this;
          if (self._fragment) {
              self._fragment["d" /* EZRuntimeBlockMethod.Destroy */](true);
              self._fragment = null;
          }
          if (self.document) {
              self.document.destroy();
              self.document = null;
          }
          if (self.descriptor) {
              self.descriptor.destroy();
              self.descriptor = null;
          }
          self._state = {};
          self.root = null;
          self.option = null;
          destroyPageOwnerId(this.ownerId, this);
      };
      PageConstructor4ClientSide.prototype.createTabBarLinkedInstance = function () {
          var renderContext = this.renderContext;
          var helper = renderContext["h" /* ECompilerRuntimeContextSymbol.Helper */];
          var getComponent = renderContext["c" /* ECompilerRuntimeContextSymbol.GetComponent */];
          var constructor = getComponent("/customize-tab-bar/index" /* ECustomizeTabBar.TabBarPath */);
          this.tabBarLinkedInstance = helper["l" /* ECompilerRuntimeHelperSymbol.InitializeComponent */](constructor, this, null);
      };
      return PageConstructor4ClientSide;
  }());

  var ContextConstructor4ClientSide = /** @class */ /*#__PURE__*/ (function () {
      function ContextConstructor4ClientSide(option) {
          this.type = 0 /* EZRuntimeLinkedInstanceType.Context */;
          this.uid = kLinkedInstanceIdContext.id++;
          this.option = option;
          var root = (this.root = option.parent.root);
          this.document = root.document;
          var parentContext = option.parent.context;
          this.context = parentContext
              ? {
                  getDynamicComponent: null,
                  isolation: parentContext.isolation,
                  providerInfo: parentContext.providerInfo,
                  styleScope: parentContext.styleScope,
                  swiper: parentContext.swiper,
                  swiperChildren: parentContext.swiperChildren,
              }
              : {
                  getDynamicComponent: null,
                  isolation: null,
                  providerInfo: null,
                  styleScope: null,
                  swiper: null,
                  swiperChildren: null,
              };
      }
      ContextConstructor4ClientSide.prototype.destroy = function (isDestroyRoot) {
          var self = this;
          if (self._fragment) {
              self._fragment["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
              self._fragment = null;
          }
          self.root = null;
          self.document = null;
          self.option = null;
          self.context = null;
      };
      return ContextConstructor4ClientSide;
  }());

  var SlotBlockConstructor4ClientSide = /** @class */ /*#__PURE__*/ (function () {
      function SlotBlockConstructor4ClientSide(provider) {
          this.provider = provider;
          this.type = 1 /* EZRuntimeLinkedInstanceType.SlotBlock */;
          // tslint:disable-next-line
          this.__slotUpdating__ = false;
          this.created = false;
          this.uid = kLinkedInstanceIdContext.id++;
      }
      SlotBlockConstructor4ClientSide.prototype.getTargetId = function () {
          return this.targetId;
      };
      SlotBlockConstructor4ClientSide.prototype["c" /* EZRuntimeBlockMethod.Create */] = function () {
          var _a;
          if (!this.created) {
              this.created = true;
              return this._fragment["c" /* EZRuntimeBlockMethod.Create */]();
          }
          else {
              // 难道要刷新 targetId ?
              var provider = this.provider;
              var context_1 = provider.scopeId && this.__scopeContext__
                  ? assignScopeContextToData(this.__scopeContext__, provider.currentData, provider.scopeId)
                  : this.provider.currentData;
              return this["u" /* EZRuntimeBlockMethod.Update */]((_a = {},
                  _a[provider.scopeId] = true,
                  _a), context_1);
          }
      };
      SlotBlockConstructor4ClientSide.prototype["m" /* EZRuntimeBlockMethod.Mount */] = function (target, anchor) {
          return this._fragment["m" /* EZRuntimeBlockMethod.Mount */](target, anchor);
      };
      SlotBlockConstructor4ClientSide.prototype["u" /* EZRuntimeBlockMethod.Update */] = function (diff, data) {
          if (this.__slotUpdating__) {
              this.__slotUpdating__ = false;
          }
          return this._fragment["u" /* EZRuntimeBlockMethod.Update */](diff, data);
      };
      SlotBlockConstructor4ClientSide.prototype["d" /* EZRuntimeBlockMethod.Destroy */] = function (isDestroyRoot) {
          return this._fragment["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
      };
      SlotBlockConstructor4ClientSide.prototype.updateFromSlotProviderParentTarget = function () {
          // 如果 provider 已经通过 UpdateSlotContent 更新了的话
          if (this.__slotUpdating__) {
              this.__slotUpdating__ = false;
              var _a = this.provider, updatingDiff = _a.updatingDiff, currentData = _a.currentData;
              if (updatingDiff) {
                  var contextData = currentData;
                  if (this.__scopeContext__ && this.provider.scopeId) {
                      contextData = assignScopeContextToData(this.__scopeContext__, currentData, this.provider.scopeId);
                  }
                  this["u" /* EZRuntimeBlockMethod.Update */](updatingDiff, contextData);
              }
          }
      };
      SlotBlockConstructor4ClientSide.prototype.destroy = function () {
          var self = this;
          if (self._fragment) {
              self._fragment["d" /* EZRuntimeBlockMethod.Destroy */](true);
              self._fragment = null;
          }
      };
      return SlotBlockConstructor4ClientSide;
  }());

  var ZHostNode4LinkNode = /** @class */ /*#__PURE__*/ (function () {
      function ZHostNode4LinkNode(component) {
          this.previousSibling = null;
          this.nextSibling = null;
          this.firstChild = null;
          this.lastChild = null;
          this.hType = 1 /* EZRuntimeHostSideElementType.TargetOrSlot */;
          this.component = component;
          this.isDirty = true;
          this.isNew = true;
      }
      ZHostNode4LinkNode.prototype.reset = function () {
          this.isDirty = true;
          this.isNew = true;
      };
      ZHostNode4LinkNode.prototype.appendChild = function (child) {
          var childLegacyParent = child.parent;
          if (childLegacyParent) {
              removeChildWithoutOperation(childLegacyParent, child);
          }
          child.parent = this;
          if (child.isDirty) {
              // 把父链全设置为 dirty
              var next = this;
              while (next) {
                  if (next.isDirty) {
                      break;
                  }
                  else {
                      next.isDirty = true;
                      next = next.parent;
                  }
              }
          }
          var currentLastChild = this.lastChild;
          if (currentLastChild) {
              // 如果找得到，在后面跟一个
              child.previousSibling = currentLastChild;
              currentLastChild.nextSibling = child;
          }
          else {
              // 如果当前不存在 lastChild，即无child
              this.firstChild = child;
          }
          this.lastChild = child;
          if (child.hType === 1 /* EZRuntimeHostSideElementType.TargetOrSlot */) {
              child.root = this.root;
              this.root.addOperation(2 /* EZRuntimeHostSideElementOperationType.AppendChild */, [
                  this.component.targetId,
                  child.component.targetId ]);
          }
      };
      ZHostNode4LinkNode.prototype.insertBefore = function (child, anchor) {
          if (!anchor) {
              this.appendChild(child);
          }
          else {
              // 不知道 anchor 是不是
              var childLegacyParent = child.parent;
              if (childLegacyParent) {
                  removeChildWithoutOperation(childLegacyParent, child);
              }
              child.parent = this;
              if (child.isDirty) {
                  // 把父链全设置为 dirty
                  var next = this;
                  while (next) {
                      if (next.isDirty) {
                          break;
                      }
                      else {
                          next.isDirty = true;
                          next = next.parent;
                      }
                  }
              }
              var originalPreviousSibling = anchor.previousSibling;
              anchor.previousSibling = child;
              if (originalPreviousSibling) {
                  originalPreviousSibling.nextSibling = child;
              }
              else {
                  this.firstChild = child;
              }
              child.previousSibling = originalPreviousSibling;
              child.nextSibling = anchor;
              if (child.hType === 1 /* EZRuntimeHostSideElementType.TargetOrSlot */) {
                  child.root = this.root;
                  var anchorTarget = anchor;
                  while (anchorTarget) {
                      if (anchorTarget.hType === 1 /* EZRuntimeHostSideElementType.TargetOrSlot */) {
                          break;
                      }
                      else {
                          anchorTarget = anchorTarget.nextSibling;
                      }
                  }
                  if (anchorTarget) {
                      this.root.addOperation(0 /* EZRuntimeHostSideElementOperationType.InsertBefore */, [
                          this.component.targetId,
                          child.component.targetId,
                          anchorTarget.component.targetId ]);
                  }
                  else {
                      this.root.addOperation(2 /* EZRuntimeHostSideElementOperationType.AppendChild */, [
                          this.component.targetId,
                          child.component.targetId ]);
                  }
              }
          }
      };
      ZHostNode4LinkNode.prototype.removeChild = function (child) {
          var childParent = child.parent;
          var nextSibling = child.nextSibling;
          var previousSibling = child.previousSibling;
          if (nextSibling) {
              nextSibling.previousSibling = previousSibling;
              child.nextSibling = null;
          }
          else {
              childParent.lastChild = previousSibling;
          }
          if (previousSibling) {
              previousSibling.nextSibling = nextSibling;
              child.previousSibling = null;
          }
          else {
              childParent.firstChild = nextSibling;
          }
          child.parent = null;
          if (child.hType === 1 /* EZRuntimeHostSideElementType.TargetOrSlot */) {
              this.root.addOperation(1 /* EZRuntimeHostSideElementOperationType.RemoveChild */, [
                  childParent.component.targetId,
                  child.component.targetId ]);
          }
      };
      ZHostNode4LinkNode.prototype.destroy = function () {
          this.parent = null;
          this.previousSibling = null;
          this.nextSibling = null;
          this.firstChild = null;
          this.lastChild = null;
          this.component = null;
      };
      return ZHostNode4LinkNode;
  }());
  function removeChildWithoutOperation(childParent, child) {
      var nextSibling = child.nextSibling;
      var previousSibling = child.previousSibling;
      if (nextSibling) {
          nextSibling.previousSibling = previousSibling;
          child.nextSibling = null;
      }
      else {
          childParent.lastChild = previousSibling;
      }
      if (previousSibling) {
          previousSibling.nextSibling = nextSibling;
          child.previousSibling = null;
      }
      else {
          childParent.firstChild = nextSibling;
      }
      child.parent = null;
  }

  var ZHostNode4Comment = /** @class */ /*#__PURE__*/ (function () {
      function ZHostNode4Comment() {
          this.parent = null;
          this.previousSibling = null;
          this.nextSibling = null;
          this.hType = 0 /* EZRuntimeHostSideElementType.Comment */;
      }
      ZHostNode4Comment.prototype.destroy = function () {
          this.parent = null;
          this.previousSibling = null;
          this.nextSibling = null;
      };
      return ZHostNode4Comment;
  }());

  var ZHostNode4Document = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZHostNode4Document, _super);
      function ZHostNode4Document(component) {
          var _this = _super.call(this, component) || this;
          _this.root = _this;
          _this.operations = [];
          _this.lastOperation = null;
          if (getZephyrRuntimeFeature(20 /* EZephyrFrameworkRuntimeFeature.enableHMR */)) {
              // 支持 comment 文本
              _this.createComment = _this.createCommentWithText;
              _this.cloneComment = _this.cloneCommentWithText;
          }
          return _this;
      }
      ZHostNode4Document.prototype.createComment = function (text) {
          return new ZHostNode4Comment();
      };
      ZHostNode4Document.prototype.cloneComment = function (comment) {
          return new ZHostNode4Comment();
      };
      ZHostNode4Document.prototype.addOperation = function (type, args) {
          var previousOperation = this.lastOperation;
          if (previousOperation && previousOperation[0] === type) {
              previousOperation[1].push(args);
          }
          else {
              var operation = (this.lastOperation = [type, [args]]);
              this.operations.push(operation);
          }
      };
      ZHostNode4Document.prototype.getAllOperations = function () {
          this.operations = [];
          this.lastOperation = null;
          traverseAllOrderedTargetsAndGenerateOperations(this, this, this.operations);
          return this.operations;
      };
      ZHostNode4Document.prototype.getNewOperations = function () {
          var operations = this.operations;
          this.operations = [];
          this.lastOperation = null;
          return operations;
      };
      ZHostNode4Document.prototype.getNewOrderedTargets = function (keepDirty) {
          var returnList = [];
          if (!keepDirty) {
              this.isDirty = false;
          }
          traverseNewOrderedTargets(this, keepDirty, returnList);
          return returnList;
      };
      ZHostNode4Document.prototype.getAllOrderedTargets = function () {
          var returnList = [];
          traverseAllOrderedTargets(this, returnList);
          return returnList;
      };
      ZHostNode4Document.prototype.isDocumentDirty = function () {
          return this.isDirty;
      };
      ZHostNode4Document.prototype.createCommentWithText = function (text) {
          var comment = new ZHostNode4Comment();
          comment.textContent = text || helperGetNextZephyrAnchorId();
          return comment;
      };
      ZHostNode4Document.prototype.cloneCommentWithText = function (comment) {
          var created = new ZHostNode4Comment();
          created.textContent = comment.textContent;
          return created;
      };
      return ZHostNode4Document;
  }(ZHostNode4LinkNode));
  function traverseAllOrderedTargetsAndGenerateOperations(root, node, operations) {
      var currentChild = node.firstChild;
      while (currentChild) {
          var component = currentChild.component, isDirty = currentChild.isDirty, isNew = currentChild.isNew;
          if (component) {
              root.addOperation(2 /* EZRuntimeHostSideElementOperationType.AppendChild */, [
                  node.component.targetId,
                  component.targetId ]);
          }
          if (isDirty) {
              currentChild.isDirty = false;
          }
          if (isNew) {
              currentChild.isNew = false;
          }
          currentChild = currentChild.nextSibling;
      }
      currentChild = node.firstChild;
      while (currentChild) {
          var component = currentChild.component;
          if (component) {
              traverseAllOrderedTargetsAndGenerateOperations(root, currentChild);
          }
          currentChild = currentChild.nextSibling;
      }
  }
  function traverseAllOrderedTargets(node, returnList) {
      var currentChild = node.firstChild;
      while (currentChild) {
          var component = currentChild.component;
          if (component) {
              returnList.push(component);
              traverseAllOrderedTargets(currentChild, returnList);
          }
          currentChild = currentChild.nextSibling;
      }
  }
  function traverseNewOrderedTargets(node, keepDirty, returnList) {
      var currentChild = node.firstChild;
      var component;
      while (currentChild) {
          component = currentChild.component;
          if (component) {
              if (currentChild.isDirty) {
                  if (!keepDirty) {
                      currentChild.isDirty = false;
                  }
                  if (currentChild.isNew) {
                      if (!keepDirty) {
                          currentChild.isNew = false;
                      }
                      returnList.push(component);
                  }
                  traverseNewOrderedTargets(currentChild, keepDirty, returnList);
              }
          }
          currentChild = currentChild.nextSibling;
      }
  }

  /**
   * 当顺序访问并且没有做破坏性修改时，保持 O(1) 的访问性能
   * 拦截 this.node 的 insertBefore, removeChild, appendChild 并且在 Hydrate 模式期间对 item 随机访问开启线性缓存
   * 当正常渲染时，关闭拦截
   */
  var ZHostNode4Collection = /** @class */ /*#__PURE__*/ (function () {
      function ZHostNode4Collection(node) {
          this.node = node;
      }
      ZHostNode4Collection.prototype.item = function (expectIndex) {
          var currentIndex = 0;
          var child = this.node.firstChild;
          while (child) {
              if (currentIndex === expectIndex) {
                  return child;
              }
              currentIndex++;
              child = child.nextSibling;
          }
          return undefined;
      };
      Object.defineProperty(ZHostNode4Collection.prototype, "length", {
          get: function () {
              var currentSize = 0;
              var child = this.node.firstChild;
              while (child) {
                  currentSize++;
                  child = child.nextSibling;
              }
              return currentSize;
          },
          enumerable: false,
          configurable: true
      });
      return ZHostNode4Collection;
  }());

  var PageConstructor4HostSide = /** @class */ /*#__PURE__*/ (function () {
      function PageConstructor4HostSide(option) {
          this.targetId = 0;
          this.updateQueue = [];
          this.type = 3 /* EZRuntimeLinkedInstanceType.Page */;
          this.uid = kLinkedInstanceIdContext.id++;
          this.option = option;
          option.root = this;
          // 可以自己创建一个
          this.document = this.node = new ZHostNode4Document(this);
          this._state = option.data;
          // TODO host 侧不需要
          this.context = {
              // cIndex: null, // 这个是没用了 @一杉
              getDynamicComponent: null,
          };
          this.tabbar = option.tabbar;
          this.renderContext = option.renderContext;
      }
      PageConstructor4HostSide.prototype.create = function () {
          if (this.tabbar) {
              this.createTabBarLinkedInstance();
          }
          this._fragment = this.option.fragment.fragment(this, this._state);
          if (this.tabBarLinkedInstance && this.tabbar) {
              this.renderContext["h" /* ECompilerRuntimeContextSymbol.Helper */]["c" /* ECompilerRuntimeHelperSymbol.CreateComponent */](this.tabBarLinkedInstance, {}, [], 0);
          }
          this._fragment["c" /* EZRuntimeBlockMethod.Create */]();
      };
      PageConstructor4HostSide.prototype.hydrate = function () {
          var _this = this;
          return ifIsMiniProgramEnv(function () {
              var nodesContext = {
                  index: 0,
                  nodes: new ZHostNode4Collection(_this.document),
                  stopReverseIndex: 0,
                  stopReverseIndexStack: [],
                  target: _this.document,
                  treatErrorAsWarning: 0,
              };
              if (_this.tabbar) {
                  _this.createTabBarLinkedInstance();
              }
              _this._fragment = _this.option.fragment.fragment(_this, _this._state);
              if (_this.tabBarLinkedInstance && _this.tabbar) {
                  _this.renderContext["h" /* ECompilerRuntimeContextSymbol.Helper */]["q" /* ECompilerRuntimeHelperSymbol.LinkComponent */](nodesContext, _this.tabBarLinkedInstance, {}, [], 0);
              }
              _this._fragment["l" /* EZRuntimeBlockMethod.Link */](nodesContext);
              // ClearChildren
              helperHydrateClearChildren4HostWeb(nodesContext);
          });
      };
      PageConstructor4HostSide.prototype.mount = function () {
          if (this.tabBarLinkedInstance && this.tabbar) {
              this.renderContext["h" /* ECompilerRuntimeContextSymbol.Helper */]["m" /* ECompilerRuntimeHelperSymbol.MountComponent */](this.tabBarLinkedInstance, this.document, null);
          }
          this._fragment["m" /* EZRuntimeBlockMethod.Mount */](this.document, null);
      };
      PageConstructor4HostSide.prototype.error = function (ex, coordinator) { };
      PageConstructor4HostSide.prototype.pushUpdatedQueue = function (element) {
          this.updateQueue.push(element);
      };
      PageConstructor4HostSide.prototype.flushUpdatedQueue = function () {
          var queue = this.updateQueue;
          if (queue.length) {
              for (var _i = 0, queue_1 = queue; _i < queue_1.length; _i++) {
                  var element = queue_1[_i];
                  element.afterUpdate();
              }
              queue.length = 0;
          }
      };
      PageConstructor4HostSide.prototype.getTargetId = function () {
          return this.targetId;
      };
      PageConstructor4HostSide.prototype.updateData = function (diff, data) {
          // 调用当前 _fragment 进行数据更新
          this._fragment["u" /* EZRuntimeBlockMethod.Update */](diff, data);
      };
      PageConstructor4HostSide.prototype.callMethod = function () { };
      PageConstructor4HostSide.prototype.callEvent = function (method, args) {
          var onCallEvent = this.root.option.onCallEvent;
          if (typeof onCallEvent === 'function') {
              return onCallEvent(this.targetId, method, args);
          }
      };
      PageConstructor4HostSide.prototype.destroy = function () {
          if (this.tabBarLinkedInstance && this.tabbar) {
              this.renderContext["h" /* ECompilerRuntimeContextSymbol.Helper */]["o" /* ECompilerRuntimeHelperSymbol.DestroyComponent */](this.tabBarLinkedInstance, true);
          }
          var self = this;
          if (self._fragment) {
              self._fragment["d" /* EZRuntimeBlockMethod.Destroy */](true);
              self._fragment = null;
          }
          self._state = {};
          self.root = null;
          self.option = null;
      };
      PageConstructor4HostSide.prototype.createTabBarLinkedInstance = function () {
          var renderContext = this.renderContext;
          var helper = renderContext["h" /* ECompilerRuntimeContextSymbol.Helper */];
          var getComponent = renderContext["t" /* ECompilerRuntimeContextSymbol.GetTabBar */];
          var constructor = getComponent("/customize-tab-bar/index" /* ECustomizeTabBar.TabBarPath */);
          this.tabBarLinkedInstance = helper["l" /* ECompilerRuntimeHelperSymbol.InitializeComponent */](constructor, this, null);
      };
      return PageConstructor4HostSide;
  }());

  var TargetConstructorSlotLazy4HostSide = /** @class */ /*#__PURE__*/ (function () {
      function TargetConstructorSlotLazy4HostSide(option) {
          this.uid = kLinkedInstanceIdContext.id++;
          this.option = option;
          var root = (this.root = option.parent.root);
          this.document = root.document;
          this._state = option.data;
          this.context = option.parent.context;
          this.slotProviders = option.slotProviders || null;
          this.node = new ZHostNode4LinkNode(this);
      }
      TargetConstructorSlotLazy4HostSide.prototype.requestPreviousSlotsUpdating = function () { };
      TargetConstructorSlotLazy4HostSide.prototype.getTargetId = function () {
          return this.targetId;
      };
      TargetConstructorSlotLazy4HostSide.prototype.callMethod = function (method, arg0) { };
      TargetConstructorSlotLazy4HostSide.prototype.callEvent = function (method, args) {
          var onCallEvent = this.root.option.onCallEvent;
          return onCallEvent(this.targetId, method, args);
      };
      TargetConstructorSlotLazy4HostSide.prototype.updateData = function (diff, data) {
          // 调用当前 _fragment 进行数据更新
          this._fragment["u" /* EZRuntimeBlockMethod.Update */](diff, data);
      };
      TargetConstructorSlotLazy4HostSide.prototype.updateData4Props = function (diff, data) {
          this._fragment["u" /* EZRuntimeBlockMethod.Update */](diff, data);
          var slotProviders = this.slotProviders;
          if (slotProviders) {
              for (var _i = 0, slotProviders_1 = slotProviders; _i < slotProviders_1.length; _i++) {
                  var slotProvider = slotProviders_1[_i];
                  slotProvider.exitProviderUpdating();
              }
          }
      };
      TargetConstructorSlotLazy4HostSide.prototype.destroy = function (isDestroyRoot) {
          var self = this;
          if (self._fragment) {
              self._fragment["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
              self._fragment = null;
          }
      };
      TargetConstructorSlotLazy4HostSide.prototype.beforeCreate = function (initProps, fixedPropKeys, nonEventSize) { };
      TargetConstructorSlotLazy4HostSide.prototype.receiveProps = function (receivingProps, diff) { };
      TargetConstructorSlotLazy4HostSide.prototype.receiveOnlySlot = function () {
          var slotProviders = this.slotProviders;
          if (slotProviders) {
              for (var _i = 0, slotProviders_2 = slotProviders; _i < slotProviders_2.length; _i++) {
                  var slotProvider = slotProviders_2[_i];
                  // 告知 updaing 状态结束
                  slotProvider.exitProviderUpdating();
              }
          }
      };
      TargetConstructorSlotLazy4HostSide.prototype.beforeDestroy = function () { };
      return TargetConstructorSlotLazy4HostSide;
  }());

  var ContextConstructor4HostSide = /** @class */ /*#__PURE__*/ (function () {
      function ContextConstructor4HostSide(option) {
          this.type = 0 /* EZRuntimeLinkedInstanceType.Context */;
          this.uid = kLinkedInstanceIdContext.id++;
          this.option = option;
          var root = (this.root = option.parent.root);
          this.document = root.document;
          var parentContext = option.parent.context;
          this.context = parentContext;
      }
      ContextConstructor4HostSide.prototype.destroy = function (isDestroyRoot) {
          var self = this;
          if (self._fragment) {
              self._fragment["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
              self._fragment = null;
          }
          self.root = null;
          self.option = null;
          self.context = null;
      };
      return ContextConstructor4HostSide;
  }());

  var SlotBlockConstructor4HostSide = /** @class */ /*#__PURE__*/ (function () {
      function SlotBlockConstructor4HostSide(provider) {
          this.provider = provider;
          this.type = 1 /* EZRuntimeLinkedInstanceType.SlotBlock */;
          // tslint:disable-next-line
          this.__slotUpdating__ = false;
          this.created = false;
          this.uid = kLinkedInstanceIdContext.id++;
          this.node = new ZHostNode4LinkNode(this);
      }
      SlotBlockConstructor4HostSide.prototype.getTargetId = function () {
          return this.targetId;
      };
      SlotBlockConstructor4HostSide.prototype["c" /* EZRuntimeBlockMethod.Create */] = function () {
          var _a;
          if (!this.created) {
              this.created = true;
              return this._fragment["c" /* EZRuntimeBlockMethod.Create */]();
          }
          else {
              // 难道要刷新 targetId ?
              var provider = this.provider;
              var context_1 = provider.scopeId && this.__scopeContext__
                  ? assignScopeContextToData(this.__scopeContext__, provider.currentData, provider.scopeId)
                  : this.provider.currentData;
              return this["u" /* EZRuntimeBlockMethod.Update */]((_a = {},
                  _a[provider.scopeId] = true,
                  _a), context_1);
          }
      };
      SlotBlockConstructor4HostSide.prototype["l" /* EZRuntimeBlockMethod.Link */] = function (parentNodesContext) {
          var this$1 = this;

          // 当前节点
          var root = parentNodesContext.nodes.item(parentNodesContext.index++);
          var parent = parentNodesContext.target;
          var isLinkNode = root && root.hType === 1 /* EZRuntimeHostSideElementType.TargetOrSlot */;
          var created;
          if (isLinkNode) {
              var linkNode = root;
              var linkedInstance = linkNode.component;
              if (linkedInstance.type === 1 /* EZRuntimeLinkedInstanceType.SlotBlock */) {
                  created = false;
                  // 需要迁移 children
                  this.node.firstChild = linkNode.firstChild;
                  this.node.lastChild = linkNode.lastChild;
                  var previousChild = linkNode.firstChild;
                  while (previousChild) {
                      previousChild.parent = this$1.node;
                      previousChild = previousChild.nextSibling;
                  }
                  parent.insertBefore(this.node, root);
                  parent.removeChild(root);
              }
              else {
                  created = true;
              }
          }
          else {
              created = true;
          }
          if (created) {
              if (root) {
                  parent.insertBefore(this.node, root);
                  if (parentNodesContext.nodes.length - parentNodesContext.index === parentNodesContext.stopReverseIndex) ;
                  else {
                      parent.removeChild(root);
                  }
              }
              else {
                  parent.appendChild(this.node);
              }
          }
          this.node.parent = parent;
          this.node.root = parent.root;
          // GetTarget
          var childrenContext = {
              index: 0,
              nodes: new ZHostNode4Collection(this.node),
              stopReverseIndex: 0,
              stopReverseIndexStack: [],
              target: this.node,
              treatErrorAsWarning: 0,
          };
          var linkResponse = this._fragment["l" /* EZRuntimeBlockMethod.Link */](childrenContext);
          // ClearChildren
          helperHydrateClearChildren4HostWeb(childrenContext);
          return linkResponse;
      };
      SlotBlockConstructor4HostSide.prototype["u" /* EZRuntimeBlockMethod.Update */] = function (diff, data) {
          if (this.__slotUpdating__) {
              this.__slotUpdating__ = false;
          }
          return this._fragment["u" /* EZRuntimeBlockMethod.Update */](diff, data);
      };
      SlotBlockConstructor4HostSide.prototype.updateFromSlotProviderParentTarget = function () {
          // 如果 provider 已经通过 UpdateSlotContent 更新了的话
          if (this.__slotUpdating__) {
              this.__slotUpdating__ = false;
              var _a = this.provider, updatingDiff = _a.updatingDiff, currentData = _a.currentData;
              if (updatingDiff) {
                  var contextData = currentData;
                  if (this.__scopeContext__ && this.provider.scopeId) {
                      contextData = assignScopeContextToData(this.__scopeContext__, currentData, this.provider.scopeId);
                  }
                  this["u" /* EZRuntimeBlockMethod.Update */](updatingDiff, contextData);
              }
          }
      };
      SlotBlockConstructor4HostSide.prototype.destroy = function () {
          var self = this;
          if (self._fragment) {
              self._fragment["d" /* EZRuntimeBlockMethod.Destroy */](true);
              self._fragment = null;
          }
      };
      return SlotBlockConstructor4HostSide;
  }());

  var kElementTextDecodeRegExp = /(&nbsp;|&lt;|&gt;|&amp;|&apos;|&ensp;|&emsp;)/g;
  var kElementTextDecodeMapping = {
      '&amp;': '\u0026',
      '&apos;': '\u0027',
      '&emsp;': '\u2003',
      '&ensp;': '\u2002',
      '&gt;': '\u003E',
      '&lt;': '\u003C',
      '&nbsp;': '\u00A0',
  };
  var kElementTextSpaceRegExp = / /g;
  var kElementTextSpaceMapping = [' ', '\u00A0', '\u2002', '\u2003'];
  function getTextSpaceType(space) {
      if (space === 'nbsp') {
          return 1 /* EComponentTextAttributeSpaceType.nbsp */;
      }
      if (space === 'ensp') {
          return 2 /* EComponentTextAttributeSpaceType.ensp */;
      }
      if (space === 'emsp') {
          return 3 /* EComponentTextAttributeSpaceType.emsp */;
      }
      return 0;
  }
  function normalizeTextContent(text, space, decode) {
      if (decode) {
          text = text.replace(kElementTextDecodeRegExp, decodeTextReplacer);
      }
      if (space > 1 /* EComponentTextAttributeSpaceType.nbsp */) {
          text = text.replace(kElementTextSpaceRegExp, kElementTextSpaceMapping[space]);
      }
      if (text && text.indexOf && text.indexOf('\\n') >= 0) {
          text = text.replace(/\\n/g, '\n');
      }
      return text;
  }
  function decodeTextReplacer($0) {
      return kElementTextDecodeMapping[$0] || $0;
  }

  function getComponentButtonOpenType(openType) {
      switch (openType) {
          case "share" /* EComponentButtonOpenType4UserInput.Share */:
              return 1 /* EComponentButtonOpenType.Share */;
          case "launchApp" /* EComponentButtonOpenType4UserInput.LaunchApp */:
              return 2 /* EComponentButtonOpenType.LaunchApp */;
          case "getAuthorize" /* EComponentButtonOpenType4UserInput.GetAuthorize */:
              return 3 /* EComponentButtonOpenType.GetAuthorize */;
          case "contactShare" /* EComponentButtonOpenType4UserInput.ContactShare */:
              return 4 /* EComponentButtonOpenType.ContactShare */;
          case "lifestyle" /* EComponentButtonOpenType4UserInput.LifeStyle */:
              return 5 /* EComponentButtonOpenType.LifeStyle */;
      }
  }
  function getComponentButtonFormType(formType) {
      switch (formType) {
          case "submit" /* EComponentButtonFormType4UserInput.Submit */:
              return 1 /* EComponentButtonFormType.Submit */;
          case "reset" /* EComponentButtonFormType4UserInput.Reset */:
              return 2 /* EComponentButtonFormType.Reset */;
      }
  }

  function getComponentInputType(type) {
      switch (type) {
          case 'number':
              return "number" /* EComponentInputType.Number */;
          case 'idcard':
              return "idcard" /* EComponentInputType.IdCard */;
          case 'digit':
              return "digit" /* EComponentInputType.Digit */;
          case 'numberpad':
              return "numberpad" /* EComponentInputType.NumberPad */;
          case 'digitpad':
              return "digitpad" /* EComponentInputType.DigitPad */;
          case 'idcardpad':
              return "idcardpad" /* EComponentInputType.IdCardPad */;
          default:
              return "text" /* EComponentInputType.Text */;
      }
  }
  function getComponentInputConfirmType(type) {
      switch (type) {
          case 'go':
              return "go" /* EComponentInputConfirmType.Go */;
          case 'next':
              return "next" /* EComponentInputConfirmType.Next */;
          case 'send':
              return "send" /* EComponentInputConfirmType.Send */;
          case 'search':
              return "search" /* EComponentInputConfirmType.Search */;
          default:
              return "done" /* EComponentInputConfirmType.Done */;
      }
  }

  var kElementVideoDefaultValue4PosterSize = 'contain';

  function EventContext(mType, method, index) {
      // type
      this.mType = mType;
      // contextflag
      this.binded = false;
      this.created = false;
      // context
      this.method = method;
      this.index = index;
      this.targetId = 0;
      // eventflag
      this.stop = false;
      this.capture = false;
      this.bubbles = false;
      // eventname
      this.ename = null;
      this.nname = null;
  }
  function createEventContext4Internal(method, bubbles, nname) {
      var eventContext = new EventContext(3 /* EZRuntimeElementInstanceUserEventContextType.InternalFunction */, method, 0);
      eventContext.bubbles = bubbles;
      eventContext.nname = nname;
      return eventContext;
  }
  function createEventContext4Legacy(method, index, stop, ename, nname) {
      var eventContext = new EventContext(2 /* EZRuntimeElementInstanceUserEventContextType.LegacyFunction */, method, index);
      eventContext.stop = stop;
      eventContext.ename = ename;
      eventContext.nname = nname;
      return eventContext;
  }
  function createEventContext4StringOrSJSFunction(mType, method, index, targetId, stop, ename, nname, capture) {
      var eventContext = new EventContext(mType, method, index);
      eventContext.targetId = targetId;
      eventContext.stop = stop;
      eventContext.ename = ename;
      eventContext.nname = nname;
      eventContext.capture = !!capture;
      return eventContext;
  }

  var ZRuntimeDebugProxy = /** @class */ /*#__PURE__*/ (function () {
      function ZRuntimeDebugProxy(zruntime, option) {
          var this$1 = this;

          this.zruntime = zruntime;
          this.option = option;
          if (this.option.plugins) {
              for (var _i = 0, _a = this.option.plugins; _i < _a.length; _i++) {
                  var hook = _a[_i];
                  this$1.addPlugin(hook);
              }
          }
      }
      ZRuntimeDebugProxy.prototype.addPlugin = function (plugin) {
          if (plugin) {
              plugin(this);
          }
      };
      ZRuntimeDebugProxy.prototype.getZRuntime = function () {
          return this.zruntime;
      };
      ZRuntimeDebugProxy.prototype.getTagNameByPlatformElement = function (element) {
          return this.option.tagConverter(element.constructor);
      };
      return ZRuntimeDebugProxy;
  }());

  function getEventName4Video(platformEventName, data) {
      switch (platformEventName) {
          case "nbcomponent.video.onChangeState" /* ECompositeElementPlatformEventName.Video.ChangeState */:
              return getEventType4Video4StateChange(data.state);
          case "nbcomponent.video.onError" /* ECompositeElementPlatformEventName.Video.Error */:
              return "error" /* EVideoEventName.Error */;
          case "nbcomponent.video.onFullScreenChange" /* ECompositeElementPlatformEventName.Video.FullScreenChange */:
              return "fullScreenChange" /* EVideoEventName.FullScreenChange */;
          case "nbcomponent.video.onTap" /* ECompositeElementPlatformEventName.Video.Tap */:
              return "tap" /* EVideoEventName.Tap */;
          case "nbcomponent.video.onTimeUpdate" /* ECompositeElementPlatformEventName.Video.TimeUpdate */:
              return "timeUpdate" /* EVideoEventName.TimeUpdate */;
          case "nbcomponent.video.onUserAction" /* ECompositeElementPlatformEventName.Video.UserAction */:
              return "userAction" /* EVideoEventName.UserAction */;
          case "nbcomponent.video.onQualityList" /* ECompositeElementPlatformEventName.Video.QualityList */:
              return "qualityList" /* EVideoEventName.QualityList */;
          case "nbcomponent.video.onInfo" /* ECompositeElementPlatformEventName.Video.Info */:
              return "info" /* EVideoEventName.Info */;
      }
  }
  function getEventPayload4Video(eventType, meta, data) {
      var payload;
      switch (eventType) {
          case "ended" /* EVideoEventName.Ended */:
          case "stop" /* EVideoEventName.Stop */:
          case "play" /* EVideoEventName.Play */:
          case "pause" /* EVideoEventName.Pause */:
          case "loading" /* EVideoEventName.Loading */:
          case "renderStart" /* EVideoEventName.RenderStart */:
              payload = {};
              break;
          case "tap" /* EVideoEventName.Tap */:
              payload = normalizeEvent4VideoTap(data);
              break;
          case "error" /* EVideoEventName.Error */:
              payload = normalizeEvent4VideoError(data);
              break;
          case "fullScreenChange" /* EVideoEventName.FullScreenChange */:
              payload = normalizeEvent4VideoFullScreenChange(data);
              break;
          case "timeUpdate" /* EVideoEventName.TimeUpdate */:
              payload = normalizeEvent4VideoTimeUpdate(data);
              break;
          case "userAction" /* EVideoEventName.UserAction */:
              payload = normalizeEvent4VideoUserAction(data);
              break;
          case "qualityList" /* EVideoEventName.QualityList */:
              payload = normalizeEvent4VideoQualityList(data);
              break;
          case "info" /* EVideoEventName.Info */:
              payload = normalizeEvent4VideoInfo(data);
              break;
      }
      return payload;
  }
  function normalizeEvent4VideoQualityList(_a) {
      var qualityList = _a.qualityList, quality = _a.quality;
      var detail = {
          quality: quality,
          qualityList: qualityList,
      };
      return { detail: detail };
  }
  function normalizeEvent4VideoInfo(_a) {
      var key = _a.key, value = _a.value;
      var detail = {
          key: key,
          value: value,
      };
      return { detail: detail };
  }
  function normalizeEvent4VideoUserAction(_a) {
      var tag = _a.tag, value = _a.value;
      var detail = { tag: tag };
      if (value !== undefined) {
          detail.value = value;
      }
      return { detail: detail };
  }
  function normalizeEvent4VideoFullScreenChange(_a) {
      var fullScreen = _a.fullScreen, direction = _a.direction;
      var detail = {
          direction: direction,
          fullScreen: fullScreen,
      };
      return { detail: detail };
  }
  function normalizeEvent4VideoTap(_a) {
      var ptInView = _a.ptInView;
      var detail = {
          ptInView: ptInView,
      };
      return { detail: detail };
  }
  function normalizeEvent4VideoTimeUpdate(_a) {
      var currentTime = _a.currentTime, userPlayDuration = _a.userPlayDuration, videoDuration = _a.videoDuration;
      var detail = {
          currentTime: currentTime,
          userPlayDuration: userPlayDuration,
          videoDuration: videoDuration,
      };
      return { detail: detail };
  }
  function normalizeEvent4VideoError(_a) {
      var info = _a.info, errorMessage = _a.errorMessage, code = _a.code;
      var detail = {
          errMsg: info || errorMessage || code || '',
      };
      return { detail: detail };
  }
  function getEventType4Video4StateChange(state) {
      switch (state) {
          case 0 /* EEventPayload4Video4StateChange4State.Stop */:
              return "stop" /* EVideoEventName.Stop */;
          case 1 /* EEventPayload4Video4StateChange4State.Play */:
              return "play" /* EVideoEventName.Play */;
          case 2 /* EEventPayload4Video4StateChange4State.Pause */:
              return "pause" /* EVideoEventName.Pause */;
          case 3 /* EEventPayload4Video4StateChange4State.Loading */:
              return "loading" /* EVideoEventName.Loading */;
          case 4 /* EEventPayload4Video4StateChange4State.Ended */:
              return "ended" /* EVideoEventName.Ended */;
          case 5 /* EEventPayload4Video4StateChange4State.RenderStart */:
              return "renderStart" /* EVideoEventName.RenderStart */;
      }
  }

  function queryAllComponents(selector, componentInstance) {
      var selectRestrictionGroups = formatSelector(selector);
      if (!selectRestrictionGroups.length) {
          return [];
      }
      var result = [];
      var set = createSet();
      for (var _i = 0, selectRestrictionGroups_1 = selectRestrictionGroups; _i < selectRestrictionGroups_1.length; _i++) {
          var selectorRestrictions = selectRestrictionGroups_1[_i];
          var ctx = new QueryContext(selectorRestrictions, componentInstance);
          var queryList = ctx.querySelectors();
          if (queryList.length) {
              queryList.map(function (target) {
                  if (!set.has(target.targetId)) {
                      result.push(target.targetId);
                      set.add(target.targetId);
                  }
              });
          }
      }
      return result;
  }
  function queryComponent(selector, componentInstance) {
      var selectRestrictionGroups = formatSelector(selector);
      if (!selectRestrictionGroups.length) {
          return null;
      }
      for (var _i = 0, selectRestrictionGroups_2 = selectRestrictionGroups; _i < selectRestrictionGroups_2.length; _i++) {
          var selectorRestrictions = selectRestrictionGroups_2[_i];
          var ctx = new QueryContext(selectorRestrictions, componentInstance);
          var result = ctx.querySelector();
          if (result) {
              return result.targetId;
          }
      }
      return null;
  }

  function getHostStartupParams(page, option, callback) {
      callback(getRuntimeById(page.appInstanceId).getEnv().originalStartupParams);
  }

  function hostConsole(page, option) {
      var method = option[0], params = option[1];
      if (method in console && typeof console[method] === 'function') {
          console[method].apply(console, params);
      }
  }

  function updateElementUsage(page, option, callback) {
      page.elementUsage = deepmerge(page.elementUsage, option);
  }
  function deepmerge(obj1, obj2, cache) {
      if (cache === void 0) { cache = []; }
      var obj1IsObject = isObject(obj1);
      var obj2IsObject = isObject(obj2);
      if (!obj1IsObject || !obj2IsObject) {
          return obj2 !== undefined ? obj2 : obj1;
      }
      if (cache.indexOf(obj2) !== -1) {
          return obj2;
      }
      cache.push(obj2);
      var keys = __spreadArray$1(__spreadArray$1([], Object.keys(obj1), true), Object.keys(obj2), true);
      var keys4Set = createSet();
      keys.forEach(function (item) {
          keys4Set.add(item);
      });
      keys4Set.forEach(function (key) {
          obj1[key] = deepmerge(obj1[key], obj2[key], cache);
      });
      return obj1;
  }

  function updateClientPerformance(page, option, callback) {
      var runtime = getRuntimeById(page.appInstanceId);
      if (runtime && runtime.getLogger() && option) {
          runtime.getLogger().updatePerformance(page, option);
      }
  }

  function flushProfileT2(page, option, callback) {
      ifIsMiniProgramEnv(function () {
          var profiler = getHostProfiler();
          var isTrace = !!option.trace;
          var data;
          if (profiler.isActivePage(page.pageId)) {
              var beginTime = profiler.beginTime;
              data = mergeSerializedProfileInfo(profiler.getReporter().onClientReport(beginTime), profiler.serialize(beginTime, option.timeStamp || 0));
              if (isTrace) {
                  page.invokeRenderMethod("reportProfileT2" /* ESharedAppxPageRenderMethod.ReportProfileT2 */, [data]);
              }
          }
          if (callback && !isTrace) {
              callback(data);
          }
      });
  }

  function reloadPageImpl(previousPage, option, callback) {
      // dispose page, 抑制对 port 的使用
      previousPage.dispose();
      // create and replace page
      getRuntimeById(previousPage.appInstanceId).getPageManager().reloadPage(previousPage);
      // TODO 这里执行完之后，内存分析下该对象还被谁引用
  }

  var appxHostMethod4Share = function (page, finalOptions, resolve) {
      var sharePlugin = page.plugin.share;
      if (sharePlugin) {
          sharePlugin.startPageShare(finalOptions, resolve);
      }
      else {
          resolve();
      }
  };
  function appxHostMethod4ShareToAlipayContact(page, finalOptions, resolve) {
      var sharePlugin = page.plugin.share;
      if (sharePlugin) {
          sharePlugin.startShareToAlipayContact(finalOptions, resolve);
      }
      else {
          resolve();
      }
  }

  function pageContainerBack(page, option, callback) {
      page.getBackEventManager().setPageContainer(option.enable, callback);
  }

  var appxHostMethods = {
      flushProfileT2: flushProfileT2,
      getHostStartupParams: getHostStartupParams,
      hostConsole: hostConsole,
      pageContainerBack: pageContainerBack,
      pluginPrivateShareToAlipayContact: appxHostMethod4ShareToAlipayContact,
      pluginPrivateStartPageShare: appxHostMethod4Share,
      reloadPage: reloadPageImpl,
      updateClientPerformance: updateClientPerformance,
      updateElementUsage: updateElementUsage,
  };

  function isPageFlexibleInstanceProxyTypeRemote(page) {
      return page && page.pType === 2 /* ESharedAppxFlexibleProxyType.Remote */;
  }
  function isPageFlexibleInstanceProxyTypeLocal(page) {
      return page && page.pType === 1 /* ESharedAppxFlexibleProxyType.Local */;
  }

  var sharedZRuntime4ClientSide;
  var sharedZRuntime4HostSide;
  function getZRuntime4ClientSide() {
      return sharedZRuntime4ClientSide;
  }
  function setZRuntime4ClientSideImpl(zruntime) {
      sharedZRuntime4ClientSide = zruntime;
  }
  function getZRuntime4HostSide() {
      return sharedZRuntime4HostSide;
  }
  function setZRuntime4HostSideImpl(zruntime4host) {
      sharedZRuntime4HostSide = zruntime4host;
  }

  var SharedClientRenderer = /** @class */ /*#__PURE__*/ (function () {
      function SharedClientRenderer(clientProxy, rType, isUsingMiniExtension) {
          this.vm = [null];
          this.renderFinishMessage = getInitialRenderFinishMessage();
          this.compositeElementMessage = getInitialCompositeElementMessage();
          this.pendingDataMap = [];
          this.clientProxy = clientProxy;
          this.rType = rType;
          this.isUsingMiniExtension = !!isUsingMiniExtension;
      }
      SharedClientRenderer.prototype.bootstrap = function () { };
      SharedClientRenderer.prototype.dispose = function () {
          var vm = this.vm;
          if (vm && vm[0]) {
              vm[0].destroy();
              vm.length = 0;
          }
      };
      SharedClientRenderer.prototype.invokeClientElementMethod = function (attributeId, method, args, callback) {
          this.clientProxy.platform.invokeClientElementMethod(attributeId, method, args, callback);
      };
      SharedClientRenderer.prototype.invokeRenderMethod = function (method, args, callback) {
          this.clientProxy.platform.invokeRenderMethod(method, args, callback);
      };
      SharedClientRenderer.prototype.onHydrateReady = function (hydrateState, nextOrderedComponentOffset, targetIds, visualizer) {
          // override
      };
      SharedClientRenderer.prototype.updateHMR = function (hash, type, data, componentInstanceInfo) {
          try {
              this.pendingDataMap = [];
              if (type === "page" /* EHMRUpdateType.PAGE */) {
                  this.pageInstanceHMR(data, componentInstanceInfo);
                  this.vm[0].flushUpdatedQueue();
              }
              else {
                  // 目前仅支持整页重绘，未来支持局部 hydrate 了再实现组件重绘
                  throw new Error("Update type ".concat(type, " not support"));
              }
              this.clientProxy.onHMRUpdated(null, hash);
          }
          catch (e) {
              this.clientProxy.onHMRUpdated(e, hash);
          }
      };
      SharedClientRenderer.prototype.onInit = function (forceCreate) {
          if (this.clientProxy.pType === 1 /* ESharedAppxFlexibleProxyType.Local */) {
              debug$1$1(function () { return '[APPX] RenderLocalBaseInstance::onActionRenderInit'; });
          }
          if (forceCreate) {
              debug$1$1(function () { return '[APPX] RenderOnInit forceCreate: true'; });
          }
          var clientProxy = this.clientProxy;
          var pageOption;
          try {
              pageOption = clientProxy.getPageOptions(clientProxy.pagePath);
          }
          catch (ex) {
              // 当加载分包或者插件资源，Host 加载成功而 Client 失败时
              // Host 正常运行到此，该把错误页崩出来
              clientProxy.onPageNotFound(getAppxLoggerPerfError(clientProxy.pagePath, clientProxy.meta, clientProxy, false));
              return;
          }
          clientProxy.platform.beforeRenderInit(pageOption);
          this.initRenderContext();
          this.initInstanceContainer(pageOption, forceCreate);
          if (clientProxy.pType === 1 /* ESharedAppxFlexibleProxyType.Local */) {
              debug$1$1(function () { return '[APPX] RenderLocalBaseInstance::onActionRenderInit done'; });
          }
          clientProxy.platform.afterRenderInit();
      };
      SharedClientRenderer.prototype.getComponentStaticInfo = function (componentIs) {
          return this.componentStaticInfo[componentIs];
      };
      SharedClientRenderer.prototype.getComponentConstructor = function (componentIs) {
          var renderConfig = this.clientProxy.getComponentOptions(componentIs);
          var exportFactory = renderConfig.exportDefault.zcomponent;
          if (!exportFactory) {
              throw new Error('exportFactory');
          }
          return exportFactory(this.renderContext);
      };
      SharedClientRenderer.prototype.onMount = function (data, componentStaticInfo, publicMethod, componentInstanceInfo, clientHydrateConfig) {
          var _this = this;
          this.publicMethod = publicMethod;
          this.componentStaticInfo = componentStaticInfo;
          try {
              setPerformancePoint4Client(7 /* IAppxLoggerPerfEventPoint4PageBootPerf4Client.FirstRenderStart */);
              this.pageInstanceMount(data, componentInstanceInfo);
              this.vm[0].flushUpdatedQueue();
              setPerformancePoint4Client(8 /* IAppxLoggerPerfEventPoint4PageBootPerf4Client.FirstRenderEnd */);
              this.clientProxy.platform.afterRenderMountCommit();
              this.documentInstance.setPageDataGetter(function () { return _this.vm[0]._state; });
              this.documentInstance.notifyPageMount();
          }
          catch (ex) {
              try {
                  this.onRenderError(ex);
              }
              catch (_) { }
              throw ex;
          }
      };
      SharedClientRenderer.prototype.onCompositeElementCreate = function (compositeElementId, logicTargetId, // 如果 id 为 0 表示是 Page，如果 id 不为 0 表示是组件
      compositeElementTagName, events, dataset, userDefinedAttrId, tagOrder) {
          var payload = [
              compositeElementId,
              logicTargetId,
              compositeElementTagName,
              events,
              dataset,
              userDefinedAttrId,
              tagOrder ];
          // this.renderFinishMessage[3].push(payload);
          this.compositeElementMessage[0].push(payload);
      };
      SharedClientRenderer.prototype.onCompositeElementUpdate = function (compositeElementId, events, dataset, userDefinedAttrId) {
          var payload = [
              compositeElementId,
              events,
              dataset,
              userDefinedAttrId ];
          // this.renderFinishMessage[4].push(payload);
          this.compositeElementMessage[1].push(payload);
      };
      SharedClientRenderer.prototype.onCompositeElementDestroy = function (compositeElementId) {
          var payload = compositeElementId;
          // this.renderFinishMessage[5].push(payload);
          this.compositeElementMessage[2].push(payload);
      };
      SharedClientRenderer.prototype.onRenderError = function (ex) {
          this.vm[0].error(ex, this.clientProxy);
      };
      SharedClientRenderer.prototype.onUpdateData = function (dataQueue, componentInstanceInfo) {
          try {
              this.onUpdateDataInternal(dataQueue, componentInstanceInfo);
          }
          catch (ex) {
              try {
                  this.onRenderError(ex);
              }
              catch (error) { }
              throw ex;
          }
      };
      SharedClientRenderer.prototype.getOwnerPageId = function () {
          return this.vm[0].ownerId;
      };
      SharedClientRenderer.prototype.getPendingMessages = function () {
          var renderFinishMessage = this.renderFinishMessage;
          this.renderFinishMessage = getInitialRenderFinishMessage();
          return renderFinishMessage;
      };
      SharedClientRenderer.prototype.getCompositeElementMessages = function () {
          var compositeElementMessage = this.compositeElementMessage;
          if (compositeElementMessage[0].length || compositeElementMessage[1].length || compositeElementMessage[2].length) {
              this.compositeElementMessage = getInitialCompositeElementMessage();
              return compositeElementMessage;
          }
      };
      SharedClientRenderer.prototype.getPerformancePoint = function () {
          return getPerformancePoint4Client();
      };
      SharedClientRenderer.prototype.takePendingAction = function (targetId, keep) {
          var queue = this.pendingDataMap[targetId];
          if (!keep) {
              this.pendingDataMap[targetId] = null;
          }
          return queue;
      };
      SharedClientRenderer.prototype.applyPendingAction = function (queue, receivingDiff, currentState, dataKeys) {
          // shallow copy
          var diffMap = __assign({}, receivingDiff);
          for (var _i = 0, queue_1 = queue; _i < queue_1.length; _i++) {
              var payload = queue_1[_i];
              setDataByTypeForZephyr(payload[0], currentState, payload[1], diffMap, dataKeys);
          }
          return diffMap;
      };
      SharedClientRenderer.prototype.onComponentMount = function (targetId, parentComponentId, componentIs, receivedProps, propKeys, nonEventSize, refMethod) { };
      SharedClientRenderer.prototype.onComponentUpdate = function (componentId, receivedProps) {
          // override
      };
      SharedClientRenderer.prototype.onComponentDestroy = function (componentId) {
          // override
      };
      SharedClientRenderer.prototype.appendDynamicMiniExtensionComponentStaticInfo = function (staticInfo) {
          // 之前跑过 benchmark，通道性能是最差的，减少 payload 是最好的
          this.componentStaticInfo = __assign(__assign({}, this.componentStaticInfo), staticInfo);
      };
      SharedClientRenderer.prototype.onUpdateData4Target = function (vm, queue) {
          var diffMap = Object.create(null);
          var modifiedData = vm._state;
          var dataKeys = vm.dataKeys;
          var processed = 0;
          for (var _i = 0, queue_2 = queue; _i < queue_2.length; _i++) {
              var payload = queue_2[_i];
              processed += setDataByTypeForZephyr(payload[0], modifiedData, payload[1], diffMap, dataKeys);
          }
          // 没处理完，检测是否 switchFragment
          if (processed < queue.length) {
              var shouldStopCurrentTargetUpdate = false;
              for (var _a = 0, queue_3 = queue; _a < queue_3.length; _a++) {
                  var _b = queue_3[_a], type = _b[0], payload = _b[1];
                  if (type === 3 /* EAppxCoreHelperSetDataType.SwitchFragment */) {
                      var vmc = vm;
                      var diff = vmc.switchFragment(payload);
                      vmc.updateData(diff, vmc._state);
                      // 立即停止，后续数据不再处理
                      shouldStopCurrentTargetUpdate = true;
                      break;
                  }
              }
              if (shouldStopCurrentTargetUpdate) {
                  return;
              }
          }
          vm.updateData(diffMap, modifiedData);
      };
      SharedClientRenderer.prototype.getZDocumentRoot = function (forceCreate) { };
      SharedClientRenderer.prototype.initInstanceContainer = function (pageOption, forceCreate) {
          var _a = this, clientProxy = _a.clientProxy, renderContext = _a.renderContext;
          var platform = clientProxy.platform;
          var fragment = this.getPageConstructor(pageOption);
          if (clientProxy.meta &&
              isAppSupportCustomizeTabBar(clientProxy.meta.tabBar, clientProxy.getStartupParams()) &&
              renderContext.gettabbar &&
              clientProxy.isTabPage(clientProxy.pagePath)) {
              forceCreate = true;
              this.tabBarInstance = renderContext.gettabbar(platform.getDocument());
          }
          this.documentInstance = renderContext.getdocument(platform.getDocument(), pageOption.style, this.getZDocumentRoot(forceCreate));
          var pageInstance = new renderContext.PageConstructor({
              bridge: platform.bridge,
              createSlotProvider: this.getSlotProviderCreator(),
              data: {},
              document: this.documentInstance,
              extraInfo4H5Fragment: clientProxy.getExtraInfo4H5Fragment(),
              fragment: fragment,
              onCallEvent: undefined,
              onCallMethod: clientProxy.invokeHostTargetMethod.bind(clientProxy),
              pageMeta: this.isUsingMiniExtension
                  ? getPageMetaFromExtensionPageMeta(clientProxy.pagePath, clientProxy.extensionPageMeta)
                  : undefined,
              parent: null,
              parentTarget: null,
              renderContext: renderContext,
              root: null,
              runtime: {
                  appInstanceId: undefined,
                  pageInstanceId: clientProxy.pageId,
                  proxy: clientProxy,
              },
              styleScope: pageOption.styleScope,
              tabbar: this.tabBarInstance,
          });
          var vms = this.vm;
          pageInstance.root = pageInstance.option.root = vms[0] = pageInstance;
          vms.length = 1;
      };
      SharedClientRenderer.prototype.initRenderContext = function () {
          var _a;
          var ZRuntime = getZRuntime4ClientSide();
          this.renderContext = (_a = {
                  PageConstructor: ZRuntime.PageConstructor,
                  SlotBlockConstructor: ZRuntime.SlotBlockConstructor,
                  TargetConstructor: ZRuntime.TargetConstructor
              },
              _a["c" /* ECompilerRuntimeContextSymbol.GetComponent */] = this.getComponent4ZRuntime.bind(this),
              _a.createSlotProvider4Immediate = ZRuntime.createSlotProvider4Immediate,
              _a.createSlotProvider4Lazy = ZRuntime.createSlotProvider4Lazy,
              _a.disableElement = ZRuntime.disableElement,
              _a.dispatchEventTracker = ZRuntime.dispatchEventTracker,
              _a.enableFeature = ZRuntime.enableFeature,
              _a.enableScalableStyle = ZRuntime.enableScalableStyle,
              _a.getDebugProxy = ZRuntime.getDebugProxy,
              _a.getdocument = ZRuntime.getdocument,
              _a.gettabbar = ZRuntime.gettabbar,
              _a.normalizeStyleSheetText = ZRuntime.normalizeStyleSheetText,
              _a.prepareContextFreeEnvironment = ZRuntime.prepareContextFreeEnvironment,
              _a.registerElementExternalParams = ZRuntime.registerElementExternalParams,
              _a.registerPlatformElement = ZRuntime.registerPlatformElement,
              _a.setDeveloperConsole = ZRuntime.setDeveloperConsole,
              _a.setElementUsageReporter = ZRuntime.setElementUsageReporter,
              _a.setErrorReporter = ZRuntime.setErrorReporter,
              _a.setEventTracker = ZRuntime.setEventTracker,
              _a.setInsideRuntime = ZRuntime.setInsideRuntime,
              _a.setPlatformAnimationFrameImpl = ZRuntime.setPlatformAnimationFrameImpl,
              _a.setPlatformIntersectionObserverImpl = ZRuntime.setPlatformIntersectionObserverImpl,
              _a.setPlatformTimeoutImpl = ZRuntime.setPlatformTimeoutImpl,
              _a.setTracertErrorReporter = ZRuntime.setTracertErrorReporter,
              _a.setUnexpectedBehaviorReporter = ZRuntime.setUnexpectedBehaviorReporter,
              _a["g" /* ECompilerRuntimeContextSymbol.GetElementByStringTag */] = ZRuntime["g" /* ECompilerRuntimeContextSymbol.GetElementByStringTag */],
              _a["e" /* ECompilerRuntimeContextSymbol.GetElementByNumberTag */] = ZRuntime["e" /* ECompilerRuntimeContextSymbol.GetElementByNumberTag */],
              _a["b" /* ECompilerRuntimeContextSymbol.GetBizElementByNumberTag */] = ZRuntime["b" /* ECompilerRuntimeContextSymbol.GetBizElementByNumberTag */],
              _a["h" /* ECompilerRuntimeContextSymbol.Helper */] = ZRuntime["h" /* ECompilerRuntimeContextSymbol.Helper */],
              _a);
      };
      SharedClientRenderer.prototype.pageInstanceHMR = function (data, componentInstanceInfo) {
          this.pageInstanceMount(data, componentInstanceInfo);
      };
      SharedClientRenderer.prototype.pageInstanceMount = function (data, componentInstanceInfo) {
          var pageInstance = this.vm[0];
          pageInstance._state = data;
          var mountError;
          try {
              pageInstance.create();
          }
          catch (ex) {
              mountError = ex;
          }
          finally {
              // 即便 create 挂了，也要 mount 上去，并
              this.beforeRenderMount();
              try {
                  pageInstance.mount(this.documentInstance);
              }
              catch (ex) {
                  if (mountError) ;
                  else {
                      mountError = ex;
                  }
              }
          }
          if (mountError) {
              throw mountError;
          }
      };
      SharedClientRenderer.prototype.onUpdateDataInternal = function (targetDataQueue, _) {
          var pendingDataMap = (this.pendingDataMap = []);
          var vms = this.vm;
          var targetIds = [];
          for (var _i = 0, targetDataQueue_1 = targetDataQueue; _i < targetDataQueue_1.length; _i++) {
              var targetInfo = targetDataQueue_1[_i];
              if (vms[targetInfo.t]) {
                  pendingDataMap[targetInfo.t] = targetInfo.q;
                  targetIds.push(targetInfo.t);
              }
          }
          targetIds.sort(compareByDecimal);
          var shouldUpdatePage = targetIds[0] === 0;
          var page = vms[0];
          page.beforeUpdate();
          if (shouldUpdatePage) {
              if (this.clientProxy.pType === 1 /* ESharedAppxFlexibleProxyType.Local */) {
                  debug$1$1(function () { return '[APPX] RenderLocalBaseInstance::onActionUpdateData target: page'; });
              }
              var queue = pendingDataMap[0];
              pendingDataMap[0] = null;
              if (queue) {
                  this.onUpdateData4Target(page, queue);
              }
          }
          var _loop_1 = function (targetIndex) {
              var targetId = targetIds[targetIndex];
              if (this_1.clientProxy.pType === 1 /* ESharedAppxFlexibleProxyType.Local */) {
                  debug$1$1(function () { return "[APPX] RenderLocalBaseInstance::onActionUpdateData target: ".concat(targetId); });
              }
              var queue = pendingDataMap[targetId];
              pendingDataMap[targetId] = null;
              if (queue) {
                  var vm = vms[targetId];
                  if (vm) {
                      this_1.onUpdateData4Target(vm, queue);
                  }
              }
          };
          var this_1 = this;
          for (var targetIndex = shouldUpdatePage ? 1 : 0; targetIndex < targetIds.length; targetIndex++) {
              _loop_1(targetIndex);
          }
          page.flushUpdatedQueue();
          this.documentInstance.notifyPageChange();
          this.pendingDataMap = [];
      };
      SharedClientRenderer.prototype.beforeRenderMount = function () {
          // 挂载 a-page dom
          this.documentInstance.mountDocument(this.clientProxy.platform.getMountBody());
          if (this.tabBarInstance) {
              this.documentInstance.mountTabBar(this.tabBarInstance);
          }
      };
      SharedClientRenderer.prototype.getPageConstructor = function (pageOption) {
          var exportFactory = pageOption.zcomponent;
          if (!exportFactory) {
              throw new Error('exportFactory');
          }
          var mainFragmentExport = exportFactory(this.renderContext);
          return mainFragmentExport;
      };
      return SharedClientRenderer;
  }());
  function getPageMetaFromExtensionPageMeta(pagePath, extensionPageMeta) {
      if (!extensionPageMeta) {
          // app
          return {
              isolation: undefined,
              providerType: 0 /* EZRuntimeLinkedInstanceOption4ProviderType.MainApp */,
              resolvedPath: pagePath,
          };
      }
      else {
          return {
              isolation: {
                  id: kAppxMiniExtensionPluginIsolationKey,
                  value: extensionPageMeta.extensionId.value,
              },
              miniExtensionId: extensionPageMeta.extensionId.value,
              providerType: 1 /* EZRuntimeLinkedInstanceOption4ProviderType.MiniExtension */,
              resolvedPath: extensionPageMeta.resolvedPath.value,
          };
      }
  }

  function getComponentNonVirtualConfig(componentHookRequirement, virtualHostInJSON) {
      /**
       * | options.virtualHost | json.virtualHost | nonVirtual                                 |
       * | -----               | -----            | -----                                      |
       * | undefined           | undefined        | false, by default                          |
       * | undefined           | true             | false, determined by json                  |
       * | undefined           | false            | true,  determined by json                  |
       * | true                | undefined        | false, determined by "options.virtualHost" |
       * | true                | true             | false, determined by "options.virtualHost" |
       * | true                | false            | false, determined by "options.virtualHost" |
       * | false               | undefined        | true, determined by "options.virtualHost"  |
       * | false               | true             | true, determined by "options.virtualHost"  |
       * | false               | false            | true, determined by "options.virtualHost"  |
       */
      var nonVirtual = false;
      // tslint:disable no-bitwise
      var optionsVirtualHost = componentHookRequirement & 64 /* EComponentHostSideRequirement.optionsVirtualHost */;
      // tslint:enable no-bitwise
      if (optionsVirtualHost) {
          // tslint:disable no-bitwise
          nonVirtual = !!(componentHookRequirement & 128 /* EComponentHostSideRequirement.nonVirtual */);
          // tslint:enable no-bitwise
      }
      else {
          nonVirtual = virtualHostInJSON === false;
      }
      return nonVirtual;
  }

  function getTargetMetaFromComponentIs(componentIs) {
      if (isPluginPrivateProtocolPath(componentIs)) {
          var res = get_extensionId_resolvedPath({
              type: 0 /* EMiniExtensionStringType.plugin_private_$_id_$_resolved_path */,
              value: componentIs,
          });
          if (res) {
              return {
                  isolation: {
                      id: kAppxMiniExtensionPluginIsolationKey,
                      value: res.extensionId.value,
                  },
                  miniExtensionId: res.extensionId.value,
                  providerType: 1 /* EZRuntimeLinkedInstanceOption4ProviderType.MiniExtension */,
                  resolvedPath: res.resolvedPath.value,
              };
          }
      }
      return {
          isolation: undefined,
          providerType: 0 /* EZRuntimeLinkedInstanceOption4ProviderType.MainApp */,
          resolvedPath: componentIs,
      };
  }

  var getEmptyComponent4ZRuntime = getEmptyComponent4ZRuntime4Default;
  function getEmptyComponent4ZRuntime4Default(unknownName) {
      return {
          render: null,
          staticRenderFns: null,
          style: null,
          zcomponent: function () {
              return { fragment: createEmptyblockFactory };
          },
      };
  }
  var kEmptyComponentPath = '_$_appx_polyfill_empty_component_path_$_';

  var createRunloopClientRenderer;

  var SimpleRendererComponentConstructor4Complex = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(SimpleRendererComponentConstructor4Complex, _super);
      function SimpleRendererComponentConstructor4Complex(customFragment, renderer, componentIs, fixedPropKeys, fixedDataKeys, initLogicOption, targetMeta, styleScope, option) {
          var _this = this;
          option.targetMeta = targetMeta;
          option.styleScope = styleScope;
          _this = _super.call(this, option) || this;
          _this.customFragment = customFragment;
          _this.renderer = renderer;
          _this.componentIs = componentIs;
          _this.fixedDefaultPropKeys = fixedPropKeys;
          _this.fixedDataKeys = fixedDataKeys;
          _this.initLogicOption = initLogicOption;
          _this.dataKeys = createSet();
          _this.type = 2 /* EZRuntimeLinkedInstanceType.Component */;
          _this._receivedProps = null;
          return _this;
      }
      SimpleRendererComponentConstructor4Complex.prototype.afterCreate = function (initProps, fixedPropKeys, nonEventSize, refMethod) {
          var parentTarget = this.option.parentTarget;
          var parentAssociatedTargetId = parentTarget ? parentTarget.getTargetId() : undefined;
          this.renderer.onComponentMount(this.targetId, parentAssociatedTargetId, this.componentIs, initProps, fixedPropKeys, nonEventSize, refMethod);
      };
      SimpleRendererComponentConstructor4Complex.prototype.beforeCreate = function (initProps, fixedPropKeys, nonEventSize) {
          // 开始建立对等的 logicInstance
          // 1. 通知 coordinator 创建实例，获得一个 id
          // 2. 跟已有的 defaultProps 进行一次合并，设置到 _state 中, 并通知 coordinator props 初始化变更
          // 3. 除了发过去以外，自己得留一份 currentProps 的结果
          // 3. 合并 data
          // 4. 组件初始化
          var componentId = this.renderer.onComponentInit(this);
          this.targetId = componentId;
          var currentState = {
              $id: componentId,
          };
          // default props
          var defaultProps = this.initLogicOption[1];
          if (defaultProps) {
              for (var _i = 0, _a = this.fixedDefaultPropKeys; _i < _a.length; _i++) {
                  var key = _a[_i];
                  currentState[key] = defaultProps[key];
              }
          }
          // changed props
          for (var _b = 0, fixedPropKeys_1 = fixedPropKeys; _b < fixedPropKeys_1.length; _b++) {
              var key = fixedPropKeys_1[_b];
              var value = initProps[key];
              if (value !== undefined) {
                  currentState[key] = value;
              }
          }
          this.fixedReceivedPropKeys = fixedPropKeys;
          this.fixedNonEventSize = nonEventSize;
          // init data
          var initData = this.initLogicOption[2];
          var dataKeys = this.dataKeys;
          for (var _c = 0, _d = this.fixedDataKeys; _c < _d.length; _c++) {
              var key = _d[_c];
              currentState[key] = initData[key];
              dataKeys.add(key);
          }
          if (this.renderer.rType === 8 /* ESharedAppxFlexibleRendererType.SimpleSync */) {
              var parentTarget = this.option.parentTarget;
              var parentTargetId = parentTarget ? parentTarget.getTargetId() : undefined;
              var derivingData = this.renderer.beforeComponentInit(componentId, parentTargetId, this.componentIs, initProps, fixedPropKeys, nonEventSize);
              if (derivingData) {
                  for (var _e = 0, derivingData_1 = derivingData; _e < derivingData_1.length; _e++) {
                      var payload = derivingData_1[_e];
                      setDataByTypeForZephyr(payload[0], currentState, payload[1], null, dataKeys);
                  }
              }
          }
          this._state = currentState;
          this._receivedProps = initProps;
          this._fragment = this.customFragment.fragment(this, this._state);
      };
      SimpleRendererComponentConstructor4Complex.prototype.updateData = function (diff, data) {
          // 逻辑链路中 setData
          if (!this.disposed) {
              if (this.renderer.rType === 8 /* ESharedAppxFlexibleRendererType.SimpleSync */) {
                  var derivingData = this.renderer.beforeComponentUpdate(this.targetId, null, null);
                  if (derivingData) {
                      var _a = this, dataKeys = _a.dataKeys, currentState = _a._state;
                      for (var _i = 0, derivingData_2 = derivingData; _i < derivingData_2.length; _i++) {
                          var payload = derivingData_2[_i];
                          // 暂时丢弃 switchFragment
                          setDataByTypeForZephyr(payload[0], currentState, payload[1], diff, dataKeys);
                      }
                  }
              }
              _super.prototype.updateData.call(this, diff, data);
              this.renderer.onComponentUpdate(this.targetId, null);
          }
      };
      SimpleRendererComponentConstructor4Complex.prototype.receiveProps = function (receivingProps, diff) {
          // 渲染链路中接受 props
          if (!this.disposed) {
              var _a = this, dataKeys = _a.dataKeys, state = _a._state, receivedProps = _a._receivedProps, renderer = _a.renderer;
              var isSimpleSync = renderer.rType === 8 /* ESharedAppxFlexibleRendererType.SimpleSync */;
              var dataQueue = renderer.takePendingAction(this.targetId, false);
              var newDiff = dataQueue
                  ? renderer.applyPendingAction(dataQueue, diff, state, dataKeys)
                  : diff;
              var defaultProps = this.initLogicOption[1];
              var updatedProps = {};
              for (var _i = 0, _b = this.fixedReceivedPropKeys; _i < _b.length; _i++) {
                  var key = _b[_i];
                  if (diff[key]) {
                      var value = receivingProps[key];
                      receivedProps[key] = value;
                      if (value === undefined && defaultProps) {
                          value = defaultProps[key];
                      }
                      updatedProps[key] = value;
                      if (!dataKeys.has(key)) {
                          state[key] = value;
                      }
                  }
              }
              if (isSimpleSync) {
                  var derivingData = this.renderer.beforeComponentUpdate(this.targetId, updatedProps, diff);
                  if (derivingData) {
                      for (var _c = 0, derivingData_3 = derivingData; _c < derivingData_3.length; _c++) {
                          var payload = derivingData_3[_c];
                          // 暂时丢弃 switchFragment
                          setDataByTypeForZephyr(payload[0], state, payload[1], newDiff, dataKeys);
                      }
                  }
              }
              _super.prototype.updateData4Props.call(this, newDiff, state);
              this.renderer.onComponentUpdate(this.targetId, isSimpleSync ? null : simpleDeepCopy(updatedProps));
          }
      };
      SimpleRendererComponentConstructor4Complex.prototype.beforeUpdate = function () { };
      SimpleRendererComponentConstructor4Complex.prototype.afterUpdate = function () { };
      SimpleRendererComponentConstructor4Complex.prototype.beforeDestroy = function () {
          this.disposed = true;
          this.renderer.onComponentDestroy(this.targetId);
          this.customFragment = null;
      };
      return SimpleRendererComponentConstructor4Complex;
  }(TargetConstructorSlotLazy4ClientSide));
  function getSimpleRendererComponentConstructor4Complex(renderer, componentIs, fragment, initLogicOption, styleScope, isUsingMiniExtension) {
      // const fixedProps = !publicOptions.mixins ?
      var fixedPropKeys = objectKeys(initLogicOption[1]);
      var fixedDataKeys = objectKeys(initLogicOption[2]);
      // 这里拿到的已经是合并完 mixins 的了
      return SimpleRendererComponentConstructor4Complex.bind(null, fragment, renderer, componentIs, fixedPropKeys, fixedDataKeys, initLogicOption, isUsingMiniExtension ? getTargetMetaFromComponentIs(componentIs) : undefined, styleScope);
  }

  function getSimpleRendererComponentConstructor(renderer, componentIs, fragment, initLogicOption, isUsingMiniExtension, styleScope) {
      return getSimpleRendererComponentConstructor4Complex(renderer, componentIs, fragment, initLogicOption || [0xffffff, {}, {}], styleScope, isUsingMiniExtension);
  }

  var simpleClientRendererImpl;
  function setSimpleClientRendererImpl(v) {
      simpleClientRendererImpl = v;
  }
  function createSimpleClientRenderer(clientProxy, rType) {
      return new simpleClientRendererImpl(clientProxy, rType);
  }
  var SimpleClientRenderer = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(SimpleClientRenderer, _super);
      function SimpleClientRenderer() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.componentIdBase = 0;
          _this.cache4component = createMap();
          return _this;
      }
      SimpleClientRenderer.prototype.onComponentInit = function (instance) {
          // 分配一个 componentId 出去
          var currentComponentId = ++this.componentIdBase;
          this.vm[currentComponentId] = instance;
          return currentComponentId;
      };
      SimpleClientRenderer.prototype.onComponentMount = function (currentComponentId, parentComponentId, componentIs, receivedProps, propKeys, nonEventSize, refMethod) {
          // 分配一个 componentId 出去
          var renderMessage = this.renderFinishMessage;
          var order = renderMessage[0].push([
              componentIs,
              currentComponentId,
              parentComponentId,
              receivedProps,
              propKeys,
              nonEventSize,
              refMethod ]);
          if (this.rType === 8 /* ESharedAppxFlexibleRendererType.SimpleSync */) {
              renderMessage[7].push([0 /* ESharedAppxFlexibleComponentPendingLifeType.DidMount */, order - 1]);
          }
      };
      SimpleClientRenderer.prototype.onMount = function (data, componentStaticInfo, publicMethod, componentInstanceInfo) {
          if (this.clientProxy.pType === 1 /* ESharedAppxFlexibleProxyType.Local */) {
              debug$1$1(function () { return '[APPX] RenderLocalBaseInstance::onActionRenderMount'; });
          }
          _super.prototype.onMount.call(this, data, componentStaticInfo, publicMethod, componentInstanceInfo);
      };
      SimpleClientRenderer.prototype.onComponentUpdate = function (componentId, receivedProps) {
          var renderMessage = this.renderFinishMessage;
          var order = renderMessage[1].push([componentId, receivedProps]);
          if (this.rType === 8 /* ESharedAppxFlexibleRendererType.SimpleSync */) {
              renderMessage[7].push([1 /* ESharedAppxFlexibleComponentPendingLifeType.DidUpdate */, order - 1]);
          }
      };
      SimpleClientRenderer.prototype.onComponentDestroy = function (componentId) {
          var renderMessage = this.renderFinishMessage;
          var order = renderMessage[2].push([componentId]);
          if (this.rType === 8 /* ESharedAppxFlexibleRendererType.SimpleSync */) {
              renderMessage[7].push([2 /* ESharedAppxFlexibleComponentPendingLifeType.DidUnmount */, order - 1]);
          }
      };
      SimpleClientRenderer.prototype.beforeComponentInit = function (componentId, parentComponentId, componentIs, initProps, propKeys, nonEventSize) {
          return this.clientProxy.beforeComponentInit(componentId, parentComponentId, componentIs, initProps, propKeys, nonEventSize);
      };
      SimpleClientRenderer.prototype.beforeComponentUpdate = function (componentId, partialProps, propsDiffMap) {
          return this.clientProxy.beforeComponentUpdate(componentId, partialProps, propsDiffMap);
      };
      SimpleClientRenderer.prototype.getSlotProviderCreator = function () {
          return this.renderContext.createSlotProvider4Immediate.bind(null, null);
      };
      SimpleClientRenderer.prototype.getComponent4ZRuntime = function (componentIs, type, miniExtensionId) {
          if (type === 2 /* ERequireZComponentType.MainAppRequireDynamicExtensionComponent */) {
              var manager = this.clientProxy.getMiniExtensionManager();
              var componentPath = manager.getMiniExtensionComponentPath(type, {
                  type: 2 /* EMiniExtensionStringType.dynamic_plugin_$_id_$_public_name */,
                  value: componentIs,
              });
              if (!componentPath) {
                  return;
              }
              else {
                  componentIs = componentPath.value;
              }
          }
          else if (type === 1 /* ERequireZComponentType.MainAppRequireStaticExtensionComponent */) {
              // 表明引用插件 path 为静态 string
              return;
          }
          var foundComponentRenderConstructor = this.cache4component.get(componentIs);
          if (!foundComponentRenderConstructor) {
              var renderConfig = this.clientProxy.getComponentOptions(componentIs).exportDefault;
              var styleScope = renderConfig.styleScope;
              var mainFragmentExport = this.getComponentConstructor(componentIs);
              var nonVirtual = this.componentStaticInfo[componentIs] &&
                  getComponentNonVirtualConfig(this.componentStaticInfo[componentIs][0], renderConfig.virtualHost);
              if (nonVirtual) {
                  mainFragmentExport = new Fragment4NonVirtual(mainFragmentExport, this.renderContext, componentIs);
              }
              foundComponentRenderConstructor = getSimpleRendererComponentConstructor(this, componentIs, mainFragmentExport, this.componentStaticInfo[componentIs], isPluginPrivateProtocolPath(componentIs), styleScope);
              this.cache4component.set(componentIs, foundComponentRenderConstructor);
          }
          return foundComponentRenderConstructor;
      };
      return SimpleClientRenderer;
  }(SharedClientRenderer));

  var hostCompositeEventHubImpl;
  function createHostCompositeEventHub(hostProxy, dynamicComposite) {
      if (hostCompositeEventHubImpl) {
          return new hostCompositeEventHubImpl(hostProxy, dynamicComposite);
      }
      else {
          return null;
      }
  }
  function setHostCompositeEventHubImpl(v) {
      hostCompositeEventHubImpl = v;
  }
  var hostCompositeEvents;
  function setHostCompositeEvents(v) {
      hostCompositeEvents = v;
  }
  function getHostCompositeEvents() {
      return hostCompositeEvents;
  }

  var SharedHostRenderer = /** @class */ /*#__PURE__*/ (function () {
      function SharedHostRenderer(page) {
          this.flushStep = 0 /* ESharedAppxFlexibleHostRendererFlushingStep.Initing */;
          this.pendingMessage = [];
          this.typedCallbacks = [[], []];
          this.pendingData = [];
          this.pendingDataMap = Object.create(null);
          this.depthOfBatching = 0;
          this.inRunloop = 0;
          this.disposed = false;
          this.page = page;
          this.compositeHub = createHostCompositeEventHub(this.page.proxy, getRuntimeById(page.appInstanceId).getSwitchManager().get("compositeElement" /* ESharedAppxSwitchManagerName.CompositeElement */));
      }
      SharedHostRenderer.prototype.bootstrap = function () {
          debug$1$1(function () { return '[APPX] RenderLocalBaseInstance bootstrap'; });
      };
      SharedHostRenderer.prototype.dispose = function () {
          this.disposed = true;
          this.typedCallbacks = [[], []];
          this.pendingMessage = [];
          this.pendingData = [];
          this.pendingDataMap = Object.create(null);
          if (this.compositeHub) {
              this.compositeHub.dispose();
          }
          this.page.proxy.port.onRenderDestroy();
      };
      SharedHostRenderer.prototype.refresh = function () {
          this.disposed = false;
          this.flushStep = 0 /* ESharedAppxFlexibleHostRendererFlushingStep.Initing */;
          this.typedCallbacks = [[], []];
          this.pendingMessage = [];
          this.pendingData = [];
          this.pendingDataMap = Object.create(null);
          if (this.compositeHub) {
              this.compositeHub.refresh(this.page.proxy);
          }
      };
      SharedHostRenderer.prototype.onInit = function () {
          var page = this.page;
          var runtime = getRuntimeById(this.page.appInstanceId);
          var shouldHandleRequirement = false;
          ifIsMiniProgramEnv(function () { return (shouldHandleRequirement = true); });
          if (shouldHandleRequirement) {
              /**
               * 如果是动态插件页面，则需要在 发送onInit消息之前，添加 Requirement行为（加载动态插件包）
               */
              var pagePath = page.pagePath;
              if (isPluginPrivateProtocolPath(pagePath)) {
                  var pluginPrivatePath = {
                      type: 0 /* EMiniExtensionStringType.plugin_private_$_id_$_resolved_path */,
                      value: pagePath,
                  };
                  var res = get_extensionId_resolvedPath(pluginPrivatePath);
                  var extensionManager = this.page.proxy.getMiniExtensionManager();
                  if (res && !extensionManager.isStaticMiniExtension(res.extensionId)) {
                      page.proxy.addRequirement4Plugin(res.extensionId.value);
                  }
              }
              /**
               * 页面添加前置依赖
               * - 动态插件
               * - 字体
               */
              page.proxy.prepareClientRequirement();
          }
          var switchManager = runtime.getSwitchManager();
          var _a = runtime.getEnv(), originalStartupParams = _a.originalStartupParams, isPortalWorkerScene = _a.isPortalWorkerScene;
          var perfFeatures = [];
          var lazyCodeLoading = runtime.getRegistry().lazyCodeLoading;
          if (lazyCodeLoading) {
              perfFeatures.push([2 /* ESharedAppxPerformanceFeatureType.LazyCodeLoading */, lazyCodeLoading]);
          }
          if (switchManager.get("enableAppXStorageCache" /* ESharedAppxSwitchManagerName.EnableAppXStorageCache */)) {
              perfFeatures.push([
                  3 /* ESharedAppxPerformanceFeatureType.StorageBoost */,
                  5 ]);
          }
          if (switchManager.get("enableProxy4GetSystemInfo" /* ESharedAppxSwitchManagerName.EnableProxy4GetSystemInfo */)) {
              perfFeatures.push([
                  4 /* ESharedAppxPerformanceFeatureType.SystemInfoBoost */,
                  5 ]);
          }
          page.proxy.port.onRenderInit(page.rType, switchManager.config, {
              isAppFirstPage: this.page.getIsFirstPage(),
              isPortalWorker: isPortalWorkerScene ? true : undefined,
              isRestarted: this.page.getIsFromResumeReLaunch(),
              promotionModal: originalStartupParams.appXPromotionModal,
              perfFeatures: perfFeatures.length ? perfFeatures : undefined,
              slotLinkTree: switchManager.get("useSlotLinkTree" /* ESharedAppxSwitchManagerName.UseSlotLinkTree */) ? true : undefined,
              switchValues: switchManager.persistedValues,
              virtualHost: (isPortalWorkerScene && originalStartupParams.onlineHost) || undefined,
          });
      };
      SharedHostRenderer.prototype.pushCallback = function (callback) {
          if (this.disposed) {
              return;
          }
          if (this.flushStep === 0 /* ESharedAppxFlexibleHostRendererFlushingStep.Initing */) {
              this.typedCallbacks[0 /* ESharedHostRendererTypedCallback.Initing */].push(callback);
          }
          else {
              this.typedCallbacks[1 /* ESharedHostRendererTypedCallback.Pending */].push(callback);
          }
      };
      SharedHostRenderer.prototype.pushData = function (targetId, type, diff, callback) {
          if (!diff || this.disposed) {
              return;
          }
          var hasCallback = callback && typeof callback === 'function';
          if (this.flushStep === 0 /* ESharedAppxFlexibleHostRendererFlushingStep.Initing */) {
              if (hasCallback) {
                  this.pushCallback(callback);
              }
          }
          else {
              var pendingData = this.pendingDataMap[targetId];
              if (!pendingData) {
                  pendingData = this.pendingDataMap[targetId] = {
                      q: [],
                      t: targetId,
                  };
                  this.pendingData.push(pendingData);
              }
              pendingData.q.push([type, diff]);
              if (hasCallback) {
                  this.pushCallback(callback);
              }
              if (this.depthOfBatching === 0 && this.flushStep === 1 /* ESharedAppxFlexibleHostRendererFlushingStep.Immediately */) {
                  this.flushDataAndMessage();
              }
          }
      };
      SharedHostRenderer.prototype.batchedUpdates = function (callback) {
          if (typeof callback === 'function') {
              this.enterBatching();
              try {
                  callback();
              }
              catch (ex) {
                  reportHostError(this.page.appInstanceId, 13 /* ESharedAppxSpecificErrorCode.HostUserError */, ex, "[APPX][Page] ".concat(this.page.pagePath, "/").concat(this.page.pageId, " batchedUpdates error"));
              }
              this.exitBatching();
          }
      };
      SharedHostRenderer.prototype.loadDynamicMiniExtensionInitialConfig = function (miniExtensionId, sendMessage) {
          /* override */
      };
      SharedHostRenderer.prototype.pushMessage = function (messageType, payload, callback) {
          if (this.disposed) {
              return;
          }
          this.pendingMessage.push([messageType, payload, callback]);
          if (this.depthOfBatching === 0 && this.flushStep === 1 /* ESharedAppxFlexibleHostRendererFlushingStep.Immediately */) {
              // 立即则刷新
              this.flushDataAndMessage();
          }
      };
      SharedHostRenderer.prototype.enterBatching = function () {
          var nextDepthOfBatching = ++this.depthOfBatching;
          if (nextDepthOfBatching === 1) {
              getRuntimeById(this.page.appInstanceId).getKernel().__ENTER_BATCHING__();
          }
      };
      SharedHostRenderer.prototype.notifyFragmentSwitchFlush = function (mainCacheKey) { };
      SharedHostRenderer.prototype.exitBatching = function () {
          var nextDepthOfBatching = --this.depthOfBatching;
          if (nextDepthOfBatching === 0) {
              if (this.flushStep === 1 /* ESharedAppxFlexibleHostRendererFlushingStep.Immediately */ && !this.inRunloop) {
                  this.flushDataAndMessage();
              }
              getRuntimeById(this.page.appInstanceId).getKernel().__EXIT_BATCHING__();
          }
      };
      SharedHostRenderer.prototype.onClientResponseCallback = function (callbacks, response) {
          if (response) {
              this.updateCompositeElement(response[3], response[4], response[5]);
          }
          if (callbacks) {
              this.flushCallbacks(callbacks);
          }
      };
      SharedHostRenderer.prototype.updateCompositeElement = function (create, update, destroy) {
          var this$1 = this;

          if (!this.compositeHub) {
              return;
          }
          if (create) {
              for (var _i = 0, create_1 = create; _i < create_1.length; _i++) {
                  var createPayload = create_1[_i];
                  this$1.compositeHub.addElement(createPayload[0], createPayload[1], createPayload[2], createPayload[3], createPayload[4], createPayload[5], createPayload[6]);
              }
          }
          if (update) {
              for (var _a = 0, update_1 = update; _a < update_1.length; _a++) {
                  var updatePayload = update_1[_a];
                  this$1.compositeHub.updateElement(updatePayload[0], updatePayload[1], updatePayload[2], updatePayload[3]);
              }
          }
          if (destroy) {
              for (var _b = 0, destroy_1 = destroy; _b < destroy_1.length; _b++) {
                  var destroyPayload = destroy_1[_b];
                  this$1.compositeHub.removeElement(destroyPayload);
              }
          }
      };
      SharedHostRenderer.prototype.flushCallbacks = function (callbacks) {
          if (callbacks.length) {
              var clonedCallbacks = callbacks.slice();
              callbacks.length = 0;
              this.enterBatching();
              for (var _i = 0, clonedCallbacks_1 = clonedCallbacks; _i < clonedCallbacks_1.length; _i++) {
                  var cb = clonedCallbacks_1[_i];
                  try {
                      cb();
                  }
                  catch (ex) {
                      // reportError
                  }
              }
              this.exitBatching();
          }
      };
      SharedHostRenderer.prototype.reportPerformance = function (clientPerformance) {
          var runtime = getRuntimeById(this.page.appInstanceId);
          runtime.getLogger().reportPerformance(this.page, clientPerformance);
          this.page.setClientPerformancePoint(clientPerformance);
      };
      return SharedHostRenderer;
  }());

  // tslint:disable no-bitwise
  function getPublicMethodFromPage(page) {
      var ret = 0;
      if (page.hasMethodOnPagePublicInstance("onPageScroll" /* ESharedAppxEvent.Page.onScroll */) ||
          page.hasEventOnPagePublicInstance("onPageScroll" /* ESharedAppxEvent.Page.onScroll */)) {
          ret |= 1 /* EAppxWeb2MessagePayload4S2CCallbackRequestPayload4RenderMountPublicMethod.onPageScroll */;
      }
      if (page.hasMethodOnPagePublicInstance("onReachBottom" /* ESharedAppxEvent.Page.onReachBottom */) ||
          page.hasEventOnPagePublicInstance("onReachBottom" /* ESharedAppxEvent.Page.onReachBottom */)) {
          ret |= 2 /* EAppxWeb2MessagePayload4S2CCallbackRequestPayload4RenderMountPublicMethod.onReachBottom */;
      }
      if (page.hasMethodOnPagePublicInstance("onShareAppMessage" /* ESharedAppxEvent.Page.onShareAppMessage */)) {
          ret |= 4 /* EAppxWeb2MessagePayload4S2CCallbackRequestPayload4RenderMountPublicMethod.onShareAppMessage */;
      }
      return ret;
  }

  var SharedSimpleHostRenderer = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(SharedSimpleHostRenderer, _super);
      function SharedSimpleHostRenderer() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      SharedSimpleHostRenderer.prototype.performSnapshot = function (option) { };
      SharedSimpleHostRenderer.prototype.getSnapshotDebugInfo = function () {
          return "-5" /* ESharedAppxFlexibleRendererHydrateDebugInfo.BadSimpleRenderer */;
      };
      SharedSimpleHostRenderer.prototype.setupSnapshot = function (option, callback, isOnLoad) {
          callback("BAD_SIMPLE_RENDERER" /* ESharedAppxFlexibleRendererHydrateError.BadSimpleRenderer */);
      };
      SharedSimpleHostRenderer.prototype.onClientResponseCallback = function (pendingCallbacks, response) {
          this.enterBatching();
          this.updateComponent(response);
          _super.prototype.onClientResponseCallback.call(this, pendingCallbacks, response);
          this.exitBatching();
      };
      SharedSimpleHostRenderer.prototype.selectAllComponentsRef = function (selector, targetId) {
          var _this = this;
          var clientProxy = this.page.proxy.port.getClientProxy();
          var result = [];
          if (clientProxy) {
              var vm = clientProxy.renderer.vm;
              var componentInstance = vm && vm[targetId];
              if (componentInstance) {
                  var resultIds = queryAllComponents(selector, componentInstance);
                  if (resultIds.length) {
                      var targetProviderInfo_1 = this.getTargetProviderInfo(targetId);
                      if (targetProviderInfo_1) {
                          resultIds.map(function (componentId) {
                              var pubRef = _this.getComponentPublicRef(componentId, targetProviderInfo_1);
                              result.push(pubRef);
                          });
                      }
                  }
              }
          }
          return result;
      };
      SharedSimpleHostRenderer.prototype.selectComponentRef = function (selector, targetId) {
          var clientProxy = this.page.proxy.port.getClientProxy();
          var result = null;
          if (clientProxy) {
              var vm = clientProxy.renderer.vm;
              var componentInstance = vm && vm[targetId];
              if (componentInstance) {
                  var resultId = queryComponent(selector, componentInstance);
                  if (resultId) {
                      var targetProviderInfo = this.getTargetProviderInfo(targetId);
                      if (targetProviderInfo) {
                          result = this.getComponentPublicRef(resultId, targetProviderInfo);
                      }
                  }
              }
          }
          return result;
      };
      SharedSimpleHostRenderer.prototype.selectOwnerComponentRef = function (componentId) {
          var page = this.page;
          var logics = page.logics;
          var componentLogic = logics[componentId];
          if (componentLogic) {
              var ownerId = componentLogic.parentComponentId;
              var ownerLogic = logics[ownerId];
              if (ownerLogic) {
                  if (ownerId) {
                      return ownerLogic.getPublicRef(componentLogic.getProviderInfo());
                  }
                  return componentLogic.pagePublicInstance;
              }
          }
      };
      SharedSimpleHostRenderer.prototype.selectComposedParentComponentRef = function (componentId) {
          var page = this.page;
          var clientProxy = page.proxy.port.getClientProxy();
          if (clientProxy) {
              var logics = page.logics;
              var vm = clientProxy.renderer.vm;
              var componentInstance = vm[componentId];
              var componentLogic = logics[componentId];
              if (componentInstance && componentLogic) {
                  var node = componentInstance.node;
                  if (node) {
                      var parent = node.parent;
                      while (parent) {
                          var component = parent.component;
                          if (component && component.type >= 2 /* EZRuntimeLinkedInstanceType.Component */) {
                              var parentId = component.getTargetId();
                              var parentInstance = vm[parentId];
                              var parentLogic = logics[parentId];
                              if (parentInstance && parentLogic) {
                                  if (parentId) {
                                      return parentLogic.getPublicRef(componentLogic.getProviderInfo());
                                  }
                                  return componentLogic.pagePublicInstance;
                              }
                              break;
                          }
                          parent = parent.parent;
                      }
                  }
              }
          }
      };
      SharedSimpleHostRenderer.prototype.onRemount = function (hash) {
          // no implement
      };
      SharedSimpleHostRenderer.prototype.linkComponent = function (componentId, renderComponentInstance) {
          // no implement
      };
      SharedSimpleHostRenderer.prototype.getComponentPublicRef = function (componentId, targetProviderInfo) {
          var componentLogic = this.page.logics[componentId];
          return componentLogic.getPublicRef(targetProviderInfo);
      };
      SharedSimpleHostRenderer.prototype.getTargetProviderInfo = function (targetId) {
          var page = this.page;
          if (targetId === 0) {
              return page.getProviderInfo();
          }
          var logics = page.logics;
          var componentLogic = logics[targetId];
          if (componentLogic) {
              return componentLogic.getProviderInfo();
          }
          return undefined;
      };
      return SharedSimpleHostRenderer;
  }(SharedHostRenderer));

  var SimpleAsyncHostRenderer = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(SimpleAsyncHostRenderer, _super);
      function SimpleAsyncHostRenderer() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.component2 = false;
          return _this;
      }
      SimpleAsyncHostRenderer.prototype.onMount = function (data) {
          var _this = this;
          var page = this.page;
          var runtime = getRuntimeById(page.appInstanceId);
          var pendingMessages = this.pendingMessage;
          if (pendingMessages.length) {
              this.pendingMessage = [];
          }
          this.flushStep = 1 /* ESharedAppxFlexibleHostRendererFlushingStep.Immediately */;
          page.proxy.port.onRenderMount(pendingMessages, data, getComponentInitialConfig(runtime.getRegistry(), page.pagePath, true), getPublicMethodFromPage(page), null, function (response) {
              _this.onClientResponseCallback(_this.typedCallbacks[0 /* ESharedHostRendererTypedCallback.Initing */], response);
              _this.page.setState("Readied" /* EPageLifecycleState.READIED */);
              _this.reportPerformance(response[6]);
              debug$1$1(function () { return '[APPX] RenderLocalBaseInstance::onActionRenderMount done'; });
          }, null);
      };
      SimpleAsyncHostRenderer.prototype.getPrevComponentData = function (prevDataBeforeDidUpdate, dataBeforeDidUpdate, dataAfterDidUpdate) {
          return dataAfterDidUpdate;
      };
      SimpleAsyncHostRenderer.prototype.getComponentDerivingData = function () { };
      SimpleAsyncHostRenderer.prototype.updateComponent = function (componentMessage) {
          // 同步组件创建信息
          // 触发 component didMount, didUpdate, didUnmount 生命周期
          var create = componentMessage[0];
          var update = componentMessage[1];
          var destroy = componentMessage[2];
          var page = this.page;
          if (update) {
              for (var _i = 0, update_1 = update; _i < update_1.length; _i++) {
                  var payload = update_1[_i];
                  // 可以考虑过滤 diff
                  var componentId = payload[0], updatedProps = payload[1];
                  var componentLogicInstance = page.getComponentLogicInstance(componentId, true); // componentPoll[componentId];
                  if (componentLogicInstance) {
                      componentLogicInstance.onComponentUpdated(updatedProps);
                  }
              }
          }
          // AppX component1 下 create 整体晚于 update
          if (create) {
              var instanceList = [];
              for (var _a = 0, create_1 = create; _a < create_1.length; _a++) {
                  var payload = create_1[_a];
                  // 进行 logic 创建
                  var componentPath = payload[0], componentId = payload[1], parentComponentId = payload[2], initProps = payload[3], initPropKeys = payload[4], nonEventSize = payload[5];
                  var componentInstance = getComponentFlexibleLogicInstance(componentPath, page, componentId, parentComponentId, initProps, initPropKeys, true, nonEventSize);
                  page.addComponent(componentInstance, true);
                  instanceList.push(componentInstance);
              }
              for (var _b = 0, instanceList_1 = instanceList; _b < instanceList_1.length; _b++) {
                  var instance = instanceList_1[_b];
                  instance.onComponentMounted();
              }
          }
          if (destroy) {
              for (var _c = 0, _d = destroy.slice().reverse(); _c < _d.length; _c++) {
                  var payload = _d[_c];
                  var componentId = payload[0];
                  page.removeComponent(componentId);
              }
          }
      };
      SimpleAsyncHostRenderer.prototype.flushDataAndMessage = function () {
          var pendingData = this.pendingData;
          this.pendingData = [];
          var pendingMessages = this.pendingMessage;
          if (pendingMessages.length) {
              this.pendingMessage = [];
          }
          if (pendingData.length) {
              this.pendingDataMap = Object.create(null);
              var pendingCallbacks = this.typedCallbacks[1 /* ESharedHostRendererTypedCallback.Pending */];
              this.typedCallbacks[1 /* ESharedHostRendererTypedCallback.Pending */] = [];
              this.page.proxy.port.onUpdateData(pendingMessages, pendingData, null, this.onClientResponseCallback.bind(this, pendingCallbacks));
          }
          else if (pendingMessages.length) {
              this.page.proxy.port.sendMessageWithoutData(pendingMessages);
          }
      };
      return SimpleAsyncHostRenderer;
  }(SharedSimpleHostRenderer));

  var SimpleSyncHostRenderer = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(SimpleSyncHostRenderer, _super);
      function SimpleSyncHostRenderer() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.component2 = true;
          _this.inIniting = true;
          return _this;
      }
      SimpleSyncHostRenderer.prototype.onMount = function (data) {
          var _this = this;
          // 避免在 component2 时
          // 下一批次的数据和当前批次混在一起
          this.enterBatching();
          var _a = this, page = _a.page, pendingMessage = _a.pendingMessage;
          var runtime = getRuntimeById(page.appInstanceId);
          if (pendingMessage.length) {
              this.pendingMessage = [];
          }
          // 改为 Immediately 才能复用 super.pushData
          // 使得后续的数据能够攒起来发给 Client
          // Initing 阶段是不会攒数据的
          this.flushStep = 1 /* ESharedAppxFlexibleHostRendererFlushingStep.Immediately */;
          page.proxy.port.onRenderMount(pendingMessage, data, getComponentInitialConfig(runtime.getRegistry(), page.pagePath, true), getPublicMethodFromPage(page), null, 
          // 和 Remote Port 不一样的是
          // RP 需要等待异步回调，而 LP 则不需要
          // 这会导致 LP 和 RP 跑出来的回调顺序可能不一致
          // 比如 onReady 和 onLoad 中的 setTimeout
          // RP: 先 onLoad.setTimeout 其次 onReady
          // LP: 先 onReady 后 onLoad.setTimeout
          function (response) {
              _this.onClientResponseCallback(null, response);
              _this.page.setState("Readied" /* EPageLifecycleState.READIED */);
              _this.reportPerformance(response[6]);
          }, null);
          this.exitBatching();
          // 在此之前的回调通过 pushCallback 中的此标强制拦截放进了 Initing
          this.inIniting = false;
          var pendingCallbacks = this.typedCallbacks[0 /* ESharedHostRendererTypedCallback.Initing */];
          this.typedCallbacks[0 /* ESharedHostRendererTypedCallback.Initing */] = [];
          this.flushCallbacks(pendingCallbacks);
          debug$1$1(function () { return '[APPX] RenderLocalBaseInstance::onActionRenderMount done'; });
      };
      SimpleSyncHostRenderer.prototype.getPrevComponentData = function (prevDataBeforeDidUpdate, dataBeforeDidUpdate, dataAfterDidUpdate) {
          if (prevDataBeforeDidUpdate !== dataBeforeDidUpdate) {
              return dataBeforeDidUpdate;
          }
          else {
              // 不变
              return prevDataBeforeDidUpdate;
          }
      };
      SimpleSyncHostRenderer.prototype.pushCallback = function (callback) {
          if (this.disposed) {
              return;
          }
          // 对于 Runloop Sync 而言
          // onMount 开始后进行树创建，对于 Page
          //  - flushStep 仍为 Initing，把回调放进 Initing 的回调
          //  - 标记 inRunloop 为 true，使得数据被积攒到下一次生命周期更新队列中
          // 从而不需要 pendingDataMap 攒数据并发给 Client
          // 但这对 Simple Sync 这种单树模式是不可能的，数据必须发给 Client 去做生命周期更新
          // 所以 Simple Sync 在对齐的时候有所差异
          //  - 在 onMount 之前的回调都在 Initing 中
          //  - onMount 过程中的回调通过 isIniting 标拦截到 Initing 去
          if (this.flushStep === 0 /* ESharedAppxFlexibleHostRendererFlushingStep.Initing */ || this.inIniting) {
              this.typedCallbacks[0 /* ESharedHostRendererTypedCallback.Initing */].push(callback);
          }
          else {
              this.typedCallbacks[1 /* ESharedHostRendererTypedCallback.Pending */].push(callback);
          }
      };
      SimpleSyncHostRenderer.prototype.pushData = function (targetId, type, diff, callback) {
          if (!diff || this.disposed) {
              return;
          }
          if (
          // 不在页面初始化渲染中
          // 必然条件
          // Simple 模式下自定义组件创建是来自 onMount 后 Client 的调用
          // 而 onMount 后 flushStep 为 Immediately
          this.flushStep === 1 /* ESharedAppxFlexibleHostRendererFlushingStep.Immediately */ &&
              // 是自定义组件
              targetId) {
              var vm = this.page.logics[targetId];
              if (vm &&
                  // deriveDataFromProps 阶段 (排除组件初始化那次)
                  // 和 Runloop 模式不同的是
                  // Runloop 需要 1. 立即合并数据并更新 Host 树 2. 将数据推给 Client
                  // Simple 这两步则是合一的，因为树就在 Client 侧
                  (vm.step === 2 /* ESharedAppxFlexibleComplexComponentStep.Deriving */ ||
                      // 组件初始化阶段
                      // 和 Runloop 模式不同的是
                      // Runloop 是合并数据后一次性发给 Client
                      // Simple 则是在创建树时过来主动拉取过去
                      vm.step === 0 /* ESharedAppxFlexibleComplexComponentStep.Initing */)
              // 注意 Simple component1 下 vm.step 可能为 undefined
              ) {
                  // 数据和回调应该在这一批次立即完成
                  // 记下来等 Client 来取
                  // Host 这里的记录和 Client 的取一定是同步且不会被其他组件干扰的
                  // 因为一个组件进入 deriveDataFromProps 后
                  // 1. 不会触发其他组件创建：当前正在创建某个自定义组件，只有更新树的时候才会有新组件创建，这一定是在后面的
                  // 2. 如果触发其他组件更新：其他组件收到数据后要发给 Port，那批数据的消费则会排队在后面
                  if (!this.derivingData) {
                      this.derivingData = [];
                  }
                  this.derivingData.push([type, diff]);
                  if (typeof callback === 'function') {
                      this.pushCallback(callback);
                  }
                  return;
              }
              // 其他情况
              // 1. onMount 中的 Page setData
              // 2. onMount 前的 Initing 阶段 -> 只有 Page 的创建
              // 3. Component 的更新
              // 对应地
              // 1. inIniting 标生效，回调放 Initing 但数据攒下来
              // 2. 回调放 Initing 数据不用攒
              // 2. 数据和回调都攒到下一批，inIniting 的时候回调放 Initing 否则放 Immediately
          }
          _super.prototype.pushData.call(this, targetId, type, diff, callback);
      };
      SimpleSyncHostRenderer.prototype.getComponentDerivingData = function () {
          var derivingData = this.derivingData;
          if (derivingData) {
              this.derivingData = null;
              return derivingData;
          }
      };
      SimpleSyncHostRenderer.prototype.updateComponent = function (componentMessage) {
          var page = this.page;
          var create = componentMessage[0], update = componentMessage[1], destroy = componentMessage[2];
          var messageOrder = componentMessage[7];
          var componentLogicInstance;
          for (var _i = 0, messageOrder_1 = messageOrder; _i < messageOrder_1.length; _i++) {
              var _a = messageOrder_1[_i], lifeType = _a[0], orderIndex = _a[1];
              switch (lifeType) {
                  case 1 /* ESharedAppxFlexibleComponentPendingLifeType.DidUpdate */:
                      componentLogicInstance = page.getComponentLogicInstance(update[orderIndex][0], true);
                      if (componentLogicInstance) {
                          componentLogicInstance.onComponentUpdated(update[orderIndex][1]);
                      }
                      break;
                  case 0 /* ESharedAppxFlexibleComponentPendingLifeType.DidMount */:
                      componentLogicInstance = page.getComponentLogicInstance(create[orderIndex][1], true);
                      if (componentLogicInstance) {
                          componentLogicInstance.onComponentMounted();
                          var refMethod = create[orderIndex][6];
                          if (refMethod) {
                              componentLogicInstance.onComponentRefBind(refMethod);
                          }
                      }
                      break;
                  case 2 /* ESharedAppxFlexibleComponentPendingLifeType.DidUnmount */:
                      page.removeComponent(destroy[orderIndex][0]);
                      break;
              }
          }
      };
      SimpleSyncHostRenderer.prototype.flushDataAndMessage = function () {
          var _this = this;
          var pendingData = this.pendingData;
          this.pendingData = [];
          var pendingMessages = this.pendingMessage;
          if (pendingMessages.length) {
              this.pendingMessage = [];
          }
          if (pendingData.length) {
              this.pendingDataMap = Object.create(null);
              this.enterBatching();
              this.page.proxy.port.onUpdateData(pendingMessages, pendingData, null, this.onClientResponseCallback.bind(this, null));
              this.exitBatching();
              var pendingCallbacks_1 = this.typedCallbacks[1 /* ESharedHostRendererTypedCallback.Pending */];
              this.typedCallbacks[1 /* ESharedHostRendererTypedCallback.Pending */] = [];
              getRuntimeById(this.page.appInstanceId)
                  .getKernel()
                  .setTimeout(function () {
                  _this.enterBatching();
                  _this.flushCallbacks(pendingCallbacks_1);
                  _this.exitBatching();
              }, 1);
          }
          else if (pendingMessages.length) {
              this.page.proxy.port.sendMessageWithoutData(pendingMessages);
          }
      };
      return SimpleSyncHostRenderer;
  }(SharedSimpleHostRenderer));

  var RunloopHostRendererComponentConstructor = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(RunloopHostRendererComponentConstructor, _super);
      function RunloopHostRendererComponentConstructor(customFragment, hostRenderer, componentIs, fixedPropKeys, initLogicOption, option) {
          var _this = _super.call(this, option) || this;
          _this.type = 2 /* EZRuntimeLinkedInstanceType.Component */;
          _this.dataKeys = createSet();
          _this.customFragment = customFragment;
          _this.hostRenderer = hostRenderer;
          _this.componentIs = componentIs;
          _this.fixedDefaultPropKeys = fixedPropKeys;
          _this.initLogicOption = initLogicOption;
          _this._receivedProps = null;
          return _this;
      }
      RunloopHostRendererComponentConstructor.prototype.afterCreate = function (initProps, fixedPropKeys, nonEventSize, refMethod) {
          var lifehookRequiremenet = this.initLogicOption && this.initLogicOption[0];
          // tslint:disable no-bitwise
          var requireDidMount = !!(lifehookRequiremenet & 4 /* EComponentHostSideRequirement.didMount */);
          var requireSaveRef = !!(lifehookRequiremenet & 32 /* EComponentHostSideRequirement.saveRef */);
          // tslint:enable no-bitwise
          if (refMethod) {
              this.receivedRefMethod = refMethod;
              if (!requireSaveRef) {
                  refMethod = null;
              }
          }
          if (requireDidMount || refMethod) {
              this.hostRenderer.mountComponent(this.targetId, initProps, fixedPropKeys, nonEventSize, refMethod);
          }
      };
      RunloopHostRendererComponentConstructor.prototype.beforeCreate = function (initProps, fixedPropKeys, nonEventSize) {
          var parentTarget = this.option.parentTarget;
          var parentTargetId = parentTarget ? parentTarget.getTargetId() : undefined;
          this.fixedReceivedPropKeys = fixedPropKeys;
          this.receivedNonEventSize = nonEventSize;
          var lifehookRequiremenet = this.initLogicOption && this.initLogicOption[0];
          // tslint:disable no-bitwise
          var requireOnInit = lifehookRequiremenet & 1 /* EComponentHostSideRequirement.onInit */;
          var requireDeriveDataFromProps = lifehookRequiremenet & 2 /* EComponentHostSideRequirement.deriveDataFromProps */;
          // tslint:enable no-bitwise
          this._receivedProps = initProps;
          var currentTargetId = this.createTargetId();
          var logicInstance = (this.logic = this.initComponent(currentTargetId, parentTargetId, initProps, fixedPropKeys, nonEventSize));
          var publicInstance = logicInstance.publicInstance;
          var component2 = this.hostRenderer.component2;
          if (component2) {
              logicInstance.onComponentInit(!!requireOnInit, !!requireDeriveDataFromProps);
          }
          var $id = (this.targetId = logicInstance.id);
          var serializedData = !component2 && publicInstance.data ? simpleDeepCopy(publicInstance.data) : publicInstance.data;
          var state = (this._state = __assign(__assign({ $id: $id }, publicInstance.props), serializedData));
          if (serializedData) {
              var dataKeys = this.dataKeys;
              for (var _i = 0, _a = Object.keys(serializedData); _i < _a.length; _i++) {
                  var dataKey = _a[_i];
                  dataKeys.add(dataKey);
              }
          }
          this._fragment = this.customFragment.fragment(this, state);
      };
      RunloopHostRendererComponentConstructor.prototype.receiveProps = function (receivingProps, diff) {
          // // 渲染链路中接受 props
          if (!this.disposed) {
              // 同步此时 data 变更
              var _a = this, dataKeys = _a.dataKeys, state = _a._state, receivedProps = _a._receivedProps, hostRenderer = _a.hostRenderer;
              var dataQueue = hostRenderer.takePendingAction(this.targetId, false);
              var newDiffMayboNull = (this._diff = dataQueue
                  ? hostRenderer.applyPendingAction(dataQueue, diff, state, dataKeys)
                  : undefined);
              var defaultProps = this.initLogicOption && this.initLogicOption[1];
              var component2 = hostRenderer.component2;
              var lifehookRequirement = this.initLogicOption && this.initLogicOption[0];
              // tslint:disable no-bitwise
              var requireDeriveDataFromProps = lifehookRequirement & 2 /* EComponentHostSideRequirement.deriveDataFromProps */;
              // tslint:enable no-bitwise
              if (!newDiffMayboNull) {
                  if (requireDeriveDataFromProps) {
                      newDiffMayboNull = this._diff = __assign({}, diff);
                  }
                  else {
                      newDiffMayboNull = diff;
                  }
              }
              var nextPrtialProps = void 0;
              for (var _i = 0, _b = this.fixedReceivedPropKeys; _i < _b.length; _i++) {
                  var key = _b[_i];
                  if (diff[key]) {
                      var value = receivingProps[key];
                      receivedProps[key] = value;
                      if (value === undefined && defaultProps) {
                          var defaultValue = defaultProps[key];
                          if (defaultValue !== undefined) {
                              if (!nextPrtialProps) {
                                  nextPrtialProps = __assign({}, receivingProps);
                              }
                              value = nextPrtialProps[key] = defaultValue;
                          }
                      }
                      if (!dataKeys.has(key)) {
                          state[key] = value;
                      }
                  }
              }
              if (component2) {
                  this.logic.onComponentDeriveData(nextPrtialProps || receivingProps, diff, !!requireDeriveDataFromProps);
              }
              this.updateData4Props(newDiffMayboNull, state);
              this._diff = null;
              hostRenderer.updateComponent(this.targetId, 
              // Component2 已经在 onComponentDeriveData 中记录了 nextProps
              // 这里不用传了
              component2 ? null : simpleDeepCopy(receivingProps));
          }
      };
      RunloopHostRendererComponentConstructor.prototype.updateData = function (diff, data) {
          // // 逻辑链路中 setData
          if (!this.disposed) {
              // 就算data变 props不变，也需要来一次 derive
              var lifehookRequirement = this.initLogicOption && this.initLogicOption[0];
              // tslint:disable no-bitwise
              var requireDeriveDataFromProps = lifehookRequirement & 2 /* EComponentHostSideRequirement.deriveDataFromProps */;
              var requireDidUpdated = lifehookRequirement & 8 /* EComponentHostSideRequirement.didUpdate */;
              // tslint:enable no-bitwise
              var newDiff = diff;
              if (requireDeriveDataFromProps && this.hostRenderer.component2) {
                  newDiff = this._diff = __assign({}, diff);
                  // 单纯的数据更新不用记录 nextProps 或者 prevData
                  // 因而可以根据是否有钩子而选择要不要进
                  this.logic.onComponentDeriveData(null, null, true);
              }
              TargetConstructorSlotLazy4HostSide.prototype.updateData.call(this, newDiff, data);
              // host 组件树更新完清除 _diff
              this._diff = null;
              if (requireDidUpdated) {
                  this.hostRenderer.updateComponent(this.targetId, null);
              }
          }
      };
      RunloopHostRendererComponentConstructor.prototype.beforeLink = function (currentLinkNode, initProps, newFixedPropKeys, nonEventSize) {
          var previousComponentInstance = currentLinkNode.component;
          if (previousComponentInstance.type < 2 /* EZRuntimeLinkedInstanceType.Component */) {
              return false;
          }
          if (previousComponentInstance.componentIs !== this.componentIs) {
              return false;
          }
          var logic = previousComponentInstance.logic, targetId = previousComponentInstance.targetId, dataKeys = previousComponentInstance.dataKeys, state = previousComponentInstance._state, prevReceivedProps = previousComponentInstance._receivedProps;
          var defaultProps = this.initLogicOption && this.initLogicOption[1];
          // 之前接收的固定属性
          var prevFixedReceivedPropKeysCopy = previousComponentInstance.fixedReceivedPropKeys.slice().sort();
          // 新接收到的固定属性
          var nextFixedReceivedPropKeysCopy = newFixedPropKeys.slice().sort();
          // 然后进行比较
          var prevFixedReceivedPropKeysLen = prevFixedReceivedPropKeysCopy.length;
          var nextFixedReceivedPropKeysLen = nextFixedReceivedPropKeysCopy.length;
          var prevFixedReceivedPropKeysIndex = 0;
          var nextFixedReceivedPropKeysIndex = 0;
          var isPropsChanged = false;
          var onRemoveFixedReceivedPropKey = function (removedFixedPropKey) {
              if (!dataKeys.has(removedFixedPropKey)) {
                  state[removedFixedPropKey] = defaultProps ? defaultProps[removedFixedPropKey] : undefined;
              }
              isPropsChanged = true;
          };
          var onUpdateFixedReceivedPropKey = function (newFixedPropKey, isAdd) {
              // 计算最终值
              var newFixedPropValue = initProps[newFixedPropKey];
              // 注意先判定值变化与否再计算的最终值
              isPropsChanged = isPropsChanged || isAdd || prevReceivedProps[newFixedPropKey] !== newFixedPropValue;
              // 如果 props 的值在默认值和 undefined 之间反复横跳
              // 在 component2 正常链路中属于更新
              // 故判定值是否变化只看接收到的数据是否变化
              if (newFixedPropValue === undefined && defaultProps) {
                  newFixedPropValue = defaultProps[newFixedPropKey];
              }
              if (!dataKeys.has(newFixedPropKey) && (isAdd || state[newFixedPropKey] !== newFixedPropValue)) {
                  state[newFixedPropKey] = newFixedPropValue;
              }
          };
          // 排序后，进行一个个对比
          while (prevFixedReceivedPropKeysIndex < prevFixedReceivedPropKeysLen &&
              nextFixedReceivedPropKeysIndex < nextFixedReceivedPropKeysLen) {
              var prevFixedReceivedPropKey = prevFixedReceivedPropKeysCopy[prevFixedReceivedPropKeysIndex];
              var nextFixedReceivedPropKey = nextFixedReceivedPropKeysCopy[nextFixedReceivedPropKeysIndex];
              // 属性没有变化，但值可能变化了
              if (prevFixedReceivedPropKey === nextFixedReceivedPropKey) {
                  prevFixedReceivedPropKeysIndex += 1;
                  nextFixedReceivedPropKeysIndex += 1;
                  onUpdateFixedReceivedPropKey(nextFixedReceivedPropKey, false);
              }
              // 属性被删除啦
              else if (prevFixedReceivedPropKey < nextFixedReceivedPropKey) {
                  prevFixedReceivedPropKeysIndex += 1;
                  onRemoveFixedReceivedPropKey(prevFixedReceivedPropKey);
              }
              // 新加了个属性
              else {
                  nextFixedReceivedPropKeysIndex += 1;
                  onUpdateFixedReceivedPropKey(nextFixedReceivedPropKey, true);
              }
          }
          // 还有多余的老的属性，全部删除之
          while (prevFixedReceivedPropKeysIndex < prevFixedReceivedPropKeysLen) {
              onRemoveFixedReceivedPropKey(prevFixedReceivedPropKeysCopy[prevFixedReceivedPropKeysIndex++]);
          }
          // 新增加了一些属性啦
          while (nextFixedReceivedPropKeysIndex < nextFixedReceivedPropKeysLen) {
              onUpdateFixedReceivedPropKey(nextFixedReceivedPropKeysCopy[nextFixedReceivedPropKeysIndex++], true);
          }
          // 推荐是后续队列走一次完整的 receiveProps 可能更好？，还是当前队列
          this.targetId = targetId;
          this.fixedReceivedPropKeys = newFixedPropKeys;
          this._state = state;
          this.dataKeys = dataKeys;
          this.logic = logic;
          this._receivedProps = initProps;
          this._fragment = this.customFragment.fragment(this, state);
          this.hostRenderer.linkComponent(targetId, this);
          // 来一波更新
          if (isPropsChanged) {
              logic.onComponentLink(initProps, newFixedPropKeys, nonEventSize);
          }
          return true;
      };
      RunloopHostRendererComponentConstructor.prototype.receiveOnlySlot = function () {
          if (!this.disposed) {
              _super.prototype.receiveOnlySlot.call(this);
          }
      };
      RunloopHostRendererComponentConstructor.prototype.beforeUpdate = function () { };
      RunloopHostRendererComponentConstructor.prototype.afterUpdate = function () { };
      RunloopHostRendererComponentConstructor.prototype.beforeDestroy = function () {
          // 强制更新前刷新
          this.disposed = true;
          var lifehookRequirement = this.initLogicOption && this.initLogicOption[0];
          // tslint:disable no-bitwise
          var requireDidUnmount = !!(lifehookRequirement & 16 /* EComponentHostSideRequirement.didUnmount */);
          // tslint:enable no-bitwise
          this.hostRenderer.destroyComponent(this.targetId, requireDidUnmount);
          this.customFragment = null;
          this.logic = null;
      };
      RunloopHostRendererComponentConstructor.prototype.createTargetId = function () {
          return this.hostRenderer.createTargetId();
      };
      RunloopHostRendererComponentConstructor.prototype.initComponent = function (currentTargetId, parentTargetId, initProps, fixedPropKeys, nonEventSize) {
          return this.hostRenderer.initComponent(this, currentTargetId, parentTargetId, this.componentIs, initProps, fixedPropKeys, nonEventSize);
      };
      return RunloopHostRendererComponentConstructor;
  }(TargetConstructorSlotLazy4HostSide));
  function getRunloopHostRendererComponentConstructor(factory, hostRenderer, componentIs, fragment, hostComponentInfo) {
      var finalHostComponentInfo = hostComponentInfo || [
          0xffffff,
          {},
          {} ];
      var fixedPropKeys = objectKeys(finalHostComponentInfo[1]);
      return factory.bind(null, fragment, hostRenderer, componentIs, fixedPropKeys, finalHostComponentInfo);
  }

  var ReplaceableRunloopHostRendererComponentConstructor = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ReplaceableRunloopHostRendererComponentConstructor, _super);
      function ReplaceableRunloopHostRendererComponentConstructor(newComponentInfo, customFragment, hostRenderer, componentIs, fixedPropKeys, initLogicOption, option) {
          var _this = _super.call(this, new ReplaceableFragment(customFragment), hostRenderer, componentIs, fixedPropKeys, initLogicOption, option) || this;
          _this.newComponentInfo = newComponentInfo;
          return _this;
      }
      ReplaceableRunloopHostRendererComponentConstructor.prototype.beforeCreate = function (initProps, fixedPropKeys, nonEventSize) {
          _super.prototype.beforeCreate.call(this, initProps, fixedPropKeys, nonEventSize);
          if (this.newComponentInfo) {
              this.hostRenderer.registerFragmentSwitchAction(this.targetId, this.newComponentInfo);
              this.newComponentInfo = null;
          }
      };
      ReplaceableRunloopHostRendererComponentConstructor.prototype.receiveOnlySlot = function () {
          if (!this.disposed) {
              var newResolvedComponentIs = this.shouldSwitchFragment();
              if (newResolvedComponentIs) {
                  this.switchFragment(newResolvedComponentIs);
                  // 更新 slotProvider 标记，但是不会再触发第二次更新了
                  return _super.prototype.receiveOnlySlot.call(this);
              }
              else {
                  return _super.prototype.receiveOnlySlot.call(this);
              }
          }
      };
      ReplaceableRunloopHostRendererComponentConstructor.prototype.receiveProps = function (receivingProps, diff) {
          if (!this.disposed) {
              var newResolvedComponentIs = this.shouldSwitchFragment();
              if (newResolvedComponentIs) {
                  var receivedProps = this._receivedProps;
                  for (var _i = 0, _a = this.fixedReceivedPropKeys; _i < _a.length; _i++) {
                      var key = _a[_i];
                      if (diff[key]) {
                          receivedProps[key] = receivingProps[key];
                      }
                  }
                  this.switchFragment(newResolvedComponentIs);
                  // 仅更新 slotProvider 标记，不再二次更新了
                  return _super.prototype.receiveOnlySlot.call(this);
              }
              else {
                  return _super.prototype.receiveProps.call(this, receivingProps, diff);
              }
          }
      };
      ReplaceableRunloopHostRendererComponentConstructor.prototype.shouldSwitchFragment = function () {
          var hostRenderer = this.hostRenderer;
          var nextActionQueue = hostRenderer.takePendingAction(this.targetId, true);
          if (nextActionQueue) {
              for (var _i = 0, nextActionQueue_1 = nextActionQueue; _i < nextActionQueue_1.length; _i++) {
                  var _a = nextActionQueue_1[_i], actionType = _a[0], actionPayload = _a[1];
                  if (actionType === 3 /* EAppxCoreHelperSetDataType.SwitchFragment */) {
                      return actionPayload;
                  }
              }
          }
      };
      ReplaceableRunloopHostRendererComponentConstructor.prototype.createTargetId = function () {
          var currentTargetId = this.nextTargetId;
          if (currentTargetId) {
              // 偶数次
              this.nextTargetId = null;
          }
          else {
              // 奇数次
              currentTargetId = this.hostRenderer.createTargetId();
              this.nextTargetId = this.hostRenderer.createTargetId();
          }
          return currentTargetId;
      };
      ReplaceableRunloopHostRendererComponentConstructor.prototype.switchFragment = function (newResolvedComponentIs) {
          // 保持节点
          // 如果在其中任意一个生命周期内，节点先创建了新的子节点，又操作了 父节点
          // 导致父节点把当前节点销毁，从树同步最终一致角度，必须是不再对该节点进行 replace 操作
          // 因此，需要把整个过程融入 Operation 队列中，并且开新的 dataQueueMap 暂定为 replaceQueueMap ?
          // 所以产生了一个除了 setData/spliceData 以外的新指令，switchComponent
          // 沿着树进行整体操作
          if (this.componentIs === newResolvedComponentIs) {
              return;
          }
          // env prepare
          var _a = this, receivedProps = _a._receivedProps, receivedNonEventSize = _a.receivedNonEventSize, receivedRefMethod = _a.receivedRefMethod;
          var customFragment = this.customFragment;
          this.componentIs = newResolvedComponentIs;
          this.initLogicOption = this.hostRenderer.getComponentStaticInfo(newResolvedComponentIs);
          var newFragmentExport = this.hostRenderer.getComponentConstructor(newResolvedComponentIs);
          customFragment.setNextFragment(newFragmentExport);
          // enter
          customFragment.enterDetaching();
          var slotProviders = this.option.slotProviders;
          if (slotProviders) {
              for (var _i = 0, slotProviders_1 = slotProviders; _i < slotProviders_1.length; _i++) {
                  var slotProvider = slotProviders_1[_i];
                  slotProvider.enterProviderDetaching();
              }
          }
          // detach
          helperDetachComponent4Host(this, true);
          this.disposed = false;
          this.customFragment = customFragment;
          // create & attach
          helperCreateComponent(this, receivedProps, this.fixedReceivedPropKeys, receivedNonEventSize, receivedRefMethod);
          // attach
          helperAttachComponent4Host(this);
          // exit
          if (slotProviders) {
              for (var _b = 0, slotProviders_2 = slotProviders; _b < slotProviders_2.length; _b++) {
                  var slotProvider = slotProviders_2[_b];
                  slotProvider.exitProviderDetaching();
              }
          }
          customFragment.exitDetaching();
      };
      return ReplaceableRunloopHostRendererComponentConstructor;
  }(RunloopHostRendererComponentConstructor));

  var RunloopHostRendererTabBarConstructor = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(RunloopHostRendererTabBarConstructor, _super);
      function RunloopHostRendererTabBarConstructor() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      RunloopHostRendererTabBarConstructor.prototype.initComponent = function (currentComponentId, parentTargetId, initProps, fixedPropKeys, nonEventSize) {
          return this.hostRenderer.initTabBar(this);
      };
      return RunloopHostRendererTabBarConstructor;
  }(RunloopHostRendererComponentConstructor));

  var sharedRunloopHostRendererSlotBlockConstructor;
  function getSharedRunloopHostRendererSlotBlockConstructor(SlotBlockConstructor) {
      return /** @class */ (function (_super) {
          __extends$1(SlotBlock, _super);
          function SlotBlock(hostRenderer, 
          // tslint:disable-next-line
          _fragment, provider) {
              var _this = _super.call(this, provider) || this;
              _this.hostRenderer = hostRenderer;
              _this._fragment = _fragment;
              _this.targetId = _this.hostRenderer.createTargetId();
              return _this;
          }
          SlotBlock.prototype["m" /* EZRuntimeBlockMethod.Mount */] = function (target, anchor) {
              target.insertBefore(this.node, anchor);
              return this._fragment["m" /* EZRuntimeBlockMethod.Mount */](this.node, null);
          };
          SlotBlock.prototype["d" /* EZRuntimeBlockMethod.Destroy */] = function (isDestroyRoot) {
              this._fragment["d" /* EZRuntimeBlockMethod.Destroy */](isDestroyRoot);
              this.node.parent.removeChild(this.node);
          };
          return SlotBlock;
      }(SlotBlockConstructor));
  }
  function getRunloopHostRendererSlotBlockConstructor(hostRenderer, SlotBlockConstructor) {
      if (!sharedRunloopHostRendererSlotBlockConstructor) {
          sharedRunloopHostRendererSlotBlockConstructor = getSharedRunloopHostRendererSlotBlockConstructor(SlotBlockConstructor);
      }
      return sharedRunloopHostRendererSlotBlockConstructor.bind(null, hostRenderer);
  }

  function getComponentCacheKey(info) {
      var cacheKey;
      var isStaticMiniExtension = info[1 /* EZComponentCompileInfoArgumentIndex.Type */] === 1 /* ERequireZComponentType.MainAppRequireStaticExtensionComponent */;
      if (isStaticMiniExtension) {
          cacheKey =
              info[2 /* EZComponentCompileInfoArgumentIndex.MiniExtensionId */] + info[0 /* EZComponentCompileInfoArgumentIndex.ComponentIs */];
      }
      else {
          cacheKey = info[0 /* EZComponentCompileInfoArgumentIndex.ComponentIs */];
      }
      return cacheKey;
  }
  var RunloopHostRenderer = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(RunloopHostRenderer, _super);
      function RunloopHostRenderer(page) {
          var _a;
          var _this = _super.call(this, page) || this;
          _this.nextComponentTargetId = 1;
          _this.orderedComponentSeq = 0;
          _this.vm = [null];
          /**
           * derived 生命周期写入当前 _state 不进这里
           * normal 从 performUpdate 放到下一个 performLifecycle 中，用于下一批运行
           */
          _this.nextDataQueueByTargetId = [];
          _this.currentDataQueueByTargetId = [];
          /**
           * 与 nextDataQueueByTargetId 对等的，涉及了多少组件，减少遍历开销
           */
          _this.nextTargetIds = [];
          // 自动加载动态插件需要准备的信息
          _this.requirementMiniExtensionComponent = {};
          _this.cache4component = createMap();
          _this.cache4componentFromMiniExtension = createMap();
          _this.usingExtensionInComponent = [];
          _this.fragmentSwitchActions = createMap();
          var ZRuntime = getZRuntime4HostSide();
          _this.renderContext = (_a = {
                  PageConstructor: ZRuntime.PageConstructor,
                  SlotBlockConstructor: ZRuntime.SlotBlockConstructor,
                  TargetConstructor: ZRuntime.TargetConstructor,
                  createSlotProvider4Immediate: ZRuntime.createSlotProvider4Immediate,
                  createSlotProvider4Lazy: ZRuntime.createSlotProvider4Lazy,
                  enableFeature: ZRuntime.enableFeature,
                  setInsideRuntime: ZRuntime.setInsideRuntime
              },
              _a["c" /* ECompilerRuntimeContextSymbol.GetComponent */] = _this.getComponent4ZRuntime.bind(_this),
              _a["t" /* ECompilerRuntimeContextSymbol.GetTabBar */] = _this.getTabBar4ZRuntime.bind(_this),
              _a["h" /* ECompilerRuntimeContextSymbol.Helper */] = ZRuntime["h" /* ECompilerRuntimeContextSymbol.Helper */],
              _a);
          return _this;
      }
      RunloopHostRenderer.prototype.refresh = function () {
          _super.prototype.refresh.call(this);
          this.orderedComponentSeq = 0;
          this.componentStaticInfo = null;
          this.requirementMiniExtensionComponent = {};
          this.cache4component = createMap();
          this.cache4componentFromMiniExtension = createMap();
          this.nextTargetIds = [];
          this.nextDataQueueByTargetId = [];
          this.currentDataQueueByTargetId = [];
          this.vm = [null];
          this.nextComponentTargetId = 1;
          this.inRunloop = 0;
          this.pendingReportSnapshotOption = null;
          this.hostHydrateConfig = null;
          this.hostHydrateError = null;
      };
      RunloopHostRenderer.prototype.pushData = function (targetId, type, diff, callback) {
          if (!diff || this.disposed) {
              return;
          }
          if (targetId === 0) {
              var isInitingBeforeRunloop = this.flushStep === 0 /* ESharedAppxFlexibleHostRendererFlushingStep.Initing */ && !this.inRunloop;
              if (!isInitingBeforeRunloop) {
                  this.pushToNextQueue(0, type, diff);
              }
              _super.prototype.pushData.call(this, targetId, type, diff, callback);
          }
          else {
              // 自定义组件需要判断组件本身的 deriving 状态
              var vm = this.vm[targetId];
              if (!(vm && vm.logic)) {
                  return;
              }
              var step = vm.logic.step;
              if (step === 1 /* ESharedAppxFlexibleComplexComponentStep.Normal */) {
                  this.pushToNextQueue(targetId, type, diff);
                  _super.prototype.pushData.call(this, targetId, type, diff, callback);
              }
              else if (step === 0 /* ESharedAppxFlexibleComplexComponentStep.Initing */) {
                  // 包括了启动第一次 deriving
                  // 再压入一个 pending callback(仅 callback)
                  if (callback && typeof callback === 'function') {
                      this.pushCallback(callback);
                  }
              }
              else if (step === 2 /* ESharedAppxFlexibleComplexComponentStep.Deriving */) {
                  // 立即修改 _state, _diff 进行后续 render
                  setDataByTypeForZephyr(type, vm._state, diff, vm._diff, vm.dataKeys);
                  _super.prototype.pushData.call(this, targetId, type, diff, callback);
              }
          }
      };
      RunloopHostRenderer.prototype.onMount = function (data) {
          // 开始构造
          var page = this.page;
          var runtime = getRuntimeById(page.appInstanceId);
          var componentStaticInfo = (this.componentStaticInfo = this.getComponentInitialConfig(runtime.getRegistry(), page.pagePath));
          // 合并插件依赖
          this.componentStaticInfo = __assign(__assign({}, this.componentStaticInfo), this.requirementMiniExtensionComponent);
          var prevOrderedComponentSequence = this.orderedComponentSeq;
          this.inRunloop++;
          this.performMount(data);
          var flushCallbackByMessage = runtime
              .getSwitchManager()
              .get("runloopCallbackByMessage" /* ESharedAppxSwitchManagerName.RunloopCallbackByMessage */);
          this.performRunloop(!flushCallbackByMessage, 0 /* ESharedHostRendererTypedCallback.Initing */);
          this.performMountAfterWaiting(flushCallbackByMessage, prevOrderedComponentSequence);
      };
      RunloopHostRenderer.prototype.onRemount = function (hash) {
          var page = this.page;
          var runtime = getRuntimeById(page.appInstanceId);
          try {
              // 先清空一次队列
              if (this.depthOfBatching === 0 && this.flushStep === 1 /* ESharedAppxFlexibleHostRendererFlushingStep.Immediately */) {
                  this.flushDataAndMessage();
              }
              var prevOrderedComponentSequence = (this.orderedComponentSeq = 0);
              this.flushStep = 0 /* ESharedAppxFlexibleHostRendererFlushingStep.Initing */;
              this.inRunloop++;
              this.vm[0].option.fragment = this.getPageConstructor(page.pagePath);
              // clear all old instance
              this.vm.length = 1;
              this.vm[0].hydrate();
              var flushCallbackByMessage = runtime
                  .getSwitchManager()
                  .get("runloopCallbackByMessage" /* ESharedAppxSwitchManagerName.RunloopCallbackByMessage */);
              this.performRunloop(!flushCallbackByMessage, 0 /* ESharedHostRendererTypedCallback.Initing */);
              this.inRunloop--;
              this.flushStep = 1 /* ESharedAppxFlexibleHostRendererFlushingStep.Immediately */;
              // 收集一次全量树
              var componentInstanceInfo = this.getAllComponentInstanceInfo(prevOrderedComponentSequence);
              var pendingMessages = this.pendingMessage;
              if (pendingMessages.length) {
                  this.pendingMessage = [];
              }
              var pageData = this.page.logics[0].publicInstance.data;
              // TODO 过程中的 pendingMessage 也需要传递
              this.page.proxy.port.updateHMR(pendingMessages, hash, "page" /* EHMRUpdateType.PAGE */, pageData, componentInstanceInfo);
          }
          catch (e) {
              var hmrUpdateManager = runtime.getHMRUpdateManager();
              if (hmrUpdateManager) {
                  hmrUpdateManager.invokeUpdated(e, hash);
              }
          }
      };
      RunloopHostRenderer.prototype.createTargetId = function () {
          return this.nextComponentTargetId++;
      };
      RunloopHostRenderer.prototype.initComponent = function (renderComponentInstance, currentComponentId, parentComponentId, componentIs, receivedProps, propKeys, nonEventSize) {
          var page = this.page;
          var logicComponentInstance = getComponentFlexibleLogicInstance(componentIs, page, currentComponentId, parentComponentId, receivedProps, propKeys, !this.component2);
          page.addComponent(logicComponentInstance, true);
          this.vm[currentComponentId] = renderComponentInstance;
          return logicComponentInstance;
      };
      RunloopHostRenderer.prototype.initTabBar = function (renderComponentInstance) {
          this.vm[1] = renderComponentInstance;
          return this.page.logics[1];
      };
      RunloopHostRenderer.prototype.initTabBarLogicInstance = function () {
          var page = this.page;
          var runtime = getRuntimeById(page.appInstanceId);
          var isPageSupportCustomizeTabBar = checkPageSupportCustomizeTabBar(runtime, page.pagePath);
          if (isPageSupportCustomizeTabBar) {
              debug$1$1(function () { return '[APPX] RunloopHostRenderer::initTabBarLogicInstance'; });
              var currentComponentId = this.createTargetId();
              var logicComponentInstance = getComponentFlexibleLogicInstance("/customize-tab-bar/index" /* ECustomizeTabBar.TabBarPath */, page, currentComponentId, 0, {}, [], !this.component2);
              page.addComponent(logicComponentInstance, true);
          }
      };
      RunloopHostRenderer.prototype.takePendingAction = function (targetId, keep) {
          var dataQueueMap = this.currentDataQueueByTargetId;
          var queue = dataQueueMap[targetId];
          if (!keep) {
              dataQueueMap[targetId] = null;
          }
          return queue;
      };
      RunloopHostRenderer.prototype.applyPendingAction = function (queue, receivingDiff, currentState, dataKeys) {
          var componentNeedMessageClone = !this.component2;
          // shallow copy
          var diffMap = __assign({}, receivingDiff);
          for (var _i = 0, queue_1 = queue; _i < queue_1.length; _i++) {
              var payload = queue_1[_i];
              setDataByTypeForZephyr(payload[0], currentState, payload[1] && componentNeedMessageClone ? simpleDeepCopy(payload[1]) : payload[1], diffMap, dataKeys);
          }
          return diffMap;
      };
      RunloopHostRenderer.prototype.linkComponent = function (componentId, renderComponentInstance) {
          this.vm[componentId] = renderComponentInstance;
      };
      RunloopHostRenderer.prototype.getSnapshotDebugInfo = function () {
          return getSharedAppxFlexibleRendererHydrateDebugInfo(this.hostHydrateConfig ? this.hostHydrateConfig.state : 0 /* ESharedAppxFlexibleRendererHydrateState.Disabled */, this.hostHydrateError);
      };
      RunloopHostRenderer.prototype.loadDynamicMiniExtensionInitialConfig = function (miniExtensionId, sendMessage) {
          var this$1 = this;

          var initialConfig = this.getDynamicMiniExtensionInitialConfig(miniExtensionId);
          if (!initialConfig) {
              // deadcode
              return;
          }
          var keys = initialConfig.keys, miniExtensionComponentDef = initialConfig.miniExtensionComponentDef;
          // 插件在用到之前，page 就应该挂上, refresh 还会清除这个
          var componentStaticInfo = this.componentStaticInfo;
          // 动态插件自动挂载
          // 如果 componentStaticInfo 不存在, 说明页面还在 onmount 阶段
          var enableDynamicPluginAutoLoad = getRuntimeById(this.page.appInstanceId)
              .getSwitchManager()
              .get("enableDynamicPluginAutoLoad" /* ESharedAppxSwitchManagerName.EnableDynamicPluginAutoLoad */);
          if (enableDynamicPluginAutoLoad && !componentStaticInfo && keys && miniExtensionComponentDef) {
              for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                  var componentIs = keys_1[_i];
                  this$1.requirementMiniExtensionComponent[componentIs] = miniExtensionComponentDef[componentIs];
              }
              return;
          }
          if (keys && miniExtensionComponentDef) {
              for (var _a = 0, keys_2 = keys; _a < keys_2.length; _a++) {
                  var componentIs = keys_2[_a];
                  componentStaticInfo[componentIs] = miniExtensionComponentDef[componentIs];
              }
              if (sendMessage) {
                  this.page.proxy.port.appendDynamicMiniExtensionInitialConfig(initialConfig);
              }
          }
          return initialConfig;
      };
      RunloopHostRenderer.prototype.performSnapshot = function (option) {
          var hostHydrateConfig = this.hostHydrateConfig;
          if (hostHydrateConfig) {
              var timer = hostHydrateConfig.timer;
              if (timer) {
                  getRuntimeById(this.page.appInstanceId).getKernel().clearTimeout(timer);
                  hostHydrateConfig.timer = null;
              }
              if (this.pendingMessage.length || this.pendingData.length || this.inRunloop) {
                  this.pendingReportSnapshotOption = option || { available: false };
                  return;
              }
              var available = option && option.available;
              if (hostHydrateConfig.state === 1 /* ESharedAppxFlexibleRendererHydrateState.Pending */) {
                  var state = (hostHydrateConfig.state = available
                      ? 2 /* ESharedAppxFlexibleRendererHydrateState.Fulfilled */
                      : 4 /* ESharedAppxFlexibleRendererHydrateState.Rejected */);
                  this.page.proxy.port.reportHydrateReady(state, this.orderedComponentSeq, this.vm[0].document.getAllOrderedTargets().map(extractComponentTargetId), hostHydrateConfig.visualizer);
              }
              else {
                  this.page.invokeRenderMethod(available ? "saveSnapshot" /* ESharedAppxPageRenderMethod.SaveSnapshot */ : "clearSnapshot" /* ESharedAppxPageRenderMethod.ClearSnapshot */, []);
              }
          }
      };
      RunloopHostRenderer.prototype.setupSnapshot = function (option, callback, isOnLoad) {
          var _this = this;
          if (!isOnLoad) {
              callback((this.hostHydrateError = "NON_ONLOAD_CALL" /* ESharedAppxFlexibleRendererHydrateError.NotOnLoadCall */));
          }
          if (this.hostHydrateConfig) {
              callback((this.hostHydrateError = "REPEATED_ENABLE_CALL" /* ESharedAppxFlexibleRendererHydrateError.RepeatedSetOptionMethodCall */));
              return;
          }
          var appInstanceId = this.page.appInstanceId;
          var runtime = getRuntimeById(appInstanceId);
          var switchManager = runtime.getSwitchManager();
          if (!switchManager.get("appxngSnapshot" /* ESharedAppxSwitchManagerName.Snapshot */)) {
              callback((this.hostHydrateError = "SWITCH_NOT_OPEN" /* ESharedAppxFlexibleRendererHydrateError.SwitchNotOpen */));
              return;
          }
          if (/^[-\w]*?plugin[-\w]*?:\/\//.test(this.page.pagePath) || // 当前页面为插件页
              (!(option && option.disableDynamicPluginCheck) && runtime.getMeta().isUsingMiniExtension4Dynamic()) || // App 使用动态插件
              runtime.getRegistry().getPageLogicComponentDep(this.page.pagePath).miniExtensionIdList // Page 依赖插件资源
          ) {
              callback((this.hostHydrateError = "HAS_PLUGIN" /* ESharedAppxFlexibleRendererHydrateError.HasPlugin */));
              return;
          }
          var timeout = Math.max(0, option && option.timeout);
          var startupEnableSnapshot = runtime.getEnv().startupParams.enableSnapshot;
          this.hostHydrateConfig = {
              callback: function (error) {
                  var message = error && error.message;
                  if (message) {
                      _this.hostHydrateError = message;
                      callback(message);
                  }
                  else {
                      callback();
                  }
              },
              crossVersion: !!(startupEnableSnapshot &&
                  startupEnableSnapshot.crossVersion &&
                  switchManager.get("crossVersionSnapshot" /* ESharedAppxSwitchManagerName.CrossVersionSnapshot */)),
              state: timeout
                  ? 1 /* ESharedAppxFlexibleRendererHydrateState.Pending */
                  : 2 /* ESharedAppxFlexibleRendererHydrateState.Fulfilled */,
              timer: timeout
                  ? runtime.getKernel().setTimeout(function () {
                      _this.hostHydrateConfig.timer = null;
                      callback((_this.hostHydrateError = "TIMEOUT" /* ESharedAppxFlexibleRendererHydrateError.PendDataReadyTimeout */));
                      _this.performSnapshot({ available: false });
                  }, timeout)
                  : null,
              visualizer: !!(switchManager.get("debugSnapshot" /* ESharedAppxSwitchManagerName.DebugSnapshot */) &&
                  (this.page.getQuery() + '').indexOf('debugSnapshot=YES') > -1),
          };
      };
      RunloopHostRenderer.prototype.flushDataAndMessage = function () {
          // 这里的数据 如何确定要发多少
          var pendingData = this.pendingData;
          this.page.beforeClientUpdate();
          if (pendingData.length) {
              var prevOrderedComponentSequence = this.orderedComponentSeq;
              this.inRunloop++;
              this.enterBatching();
              this.performUpdate();
              this.exitBatching();
              var runtime = getRuntimeById(this.page.appInstanceId);
              var flushCallbackByMessage = runtime
                  .getSwitchManager()
                  .get("runloopCallbackByMessage" /* ESharedAppxSwitchManagerName.RunloopCallbackByMessage */);
              this.performRunloop(!flushCallbackByMessage, 1 /* ESharedHostRendererTypedCallback.Pending */);
              this.inRunloop--;
              var componentInstanceInfo = this.getPendingComponentInstanceInfo(prevOrderedComponentSequence);
              this.pendingData = [];
              this.pendingDataMap = Object.create(null);
              var pendingMessages = this.pendingMessage;
              if (pendingMessages.length) {
                  this.pendingMessage = [];
              }
              var updateCallback = void 0;
              if (flushCallbackByMessage) {
                  var pendingCallbacks = this.typedCallbacks[1 /* ESharedHostRendererTypedCallback.Pending */];
                  if (pendingCallbacks.length) {
                      this.typedCallbacks[1 /* ESharedHostRendererTypedCallback.Pending */] = [];
                      updateCallback = this.onClientResponseCallback.bind(this, pendingCallbacks);
                  }
              }
              this.page.proxy.port.onUpdateData(pendingMessages, pendingData, componentInstanceInfo, updateCallback);
          }
          else {
              var pendingMessages = this.pendingMessage;
              if (pendingMessages.length) {
                  this.pendingMessage = [];
              }
              this.page.proxy.port.sendMessageWithoutData(pendingMessages);
          }
          var pendingReportSnapshotOption = this.pendingReportSnapshotOption;
          if (pendingReportSnapshotOption) {
              this.pendingReportSnapshotOption = null;
              this.performSnapshot(pendingReportSnapshotOption);
          }
      };
      RunloopHostRenderer.prototype.getComponentStaticInfo = function (resolvedComponentIs) {
          return this.componentStaticInfo[resolvedComponentIs];
      };
      RunloopHostRenderer.prototype.getComponentConstructor = function (componentIs) {
          var runtime = getRuntimeById(this.page.appInstanceId);
          var registry = runtime.getRegistry();
          var componentOption = registry.getComponentHostRenderConfig(componentIs).exportDefault;
          var exportFactory = componentOption.zcomponent;
          if (!exportFactory) {
              throw new Error('exportFactory');
          }
          return exportFactory(this.renderContext);
      };
      RunloopHostRenderer.prototype.registerFragmentSwitchAction = function (componentId, componentInfo) {
          var _this = this;
          var runtime = getRuntimeById(this.page.appInstanceId);
          var mainCacheKey;
          switch (componentInfo[1 /* EZComponentCompileInfoArgumentIndex.Type */]) {
              case 2 /* ERequireZComponentType.MainAppRequireDynamicExtensionComponent */:
                  // TODO 动态插件，暂时不处理
                  break;
              case 3 /* ERequireZComponentType.InjectGenericComponent */:
                  // 泛型注入，暂时不处理
                  break;
              case 1 /* ERequireZComponentType.MainAppRequireStaticExtensionComponent */:
                  // 如果是未初始化的懒加载插件，才注册
                  var miniExtensionManager = runtime.getMiniExtensionManager();
                  var pluginId_1 = componentInfo[2 /* EZComponentCompileInfoArgumentIndex.MiniExtensionId */];
                  // TODO: 1000 个组件会触发 1000 个回调 flush
                  var extensionId = {
                      type: 4 /* EMiniExtensionStringType._$_extension_id_$_ */,
                      value: pluginId_1,
                  };
                  var loadInvoked = miniExtensionManager.loadLazyMiniExtension(extensionId, this.page.pageId, function () {
                      _this.page.notifyFragmentSwitchFlush(pluginId_1);
                  });
                  if (loadInvoked) {
                      mainCacheKey = pluginId_1;
                  }
                  break;
          }
          if (!mainCacheKey) {
              return;
          }
          var mainQueue = this.fragmentSwitchActions.get(mainCacheKey);
          if (!mainQueue) {
              mainQueue = createMap();
              this.fragmentSwitchActions.set(mainCacheKey, mainQueue);
          }
          var componentCacheKey = getComponentCacheKey(componentInfo);
          var targetQueue = mainQueue.get(componentCacheKey);
          if (!targetQueue) {
              targetQueue = {
                  componentInfo: componentInfo,
                  targetIds: [],
              };
              mainQueue.set(componentCacheKey, targetQueue);
          }
          targetQueue.targetIds.push(componentId);
      };
      RunloopHostRenderer.prototype.notifyFragmentSwitchFlush = function (mainCacheKey) {
          var _this = this;
          this.enterBatching();
          var mainQueue = this.fragmentSwitchActions.get(mainCacheKey);
          if (mainQueue) {
              // 把所有组件刷一遍
              var deleteKeys_2 = [];
              mainQueue.forEach(function (targetQueue, componentCacheKey) {
                  if (targetQueue && targetQueue.targetIds.length) {
                      var resolvedComponentIs = _this.resolveComponentIs(targetQueue.componentInfo, true);
                      if (resolvedComponentIs) {
                          for (var _i = 0, _a = targetQueue.targetIds; _i < _a.length; _i++) {
                              var targetId = _a[_i];
                              _this.pushData(targetId, 3 /* EAppxCoreHelperSetDataType.SwitchFragment */, resolvedComponentIs);
                          }
                          deleteKeys_2.push(componentCacheKey);
                      }
                  }
                  else {
                      // 也要删
                      deleteKeys_2.push(componentCacheKey);
                  }
              });
              for (var _i = 0, deleteKeys_1 = deleteKeys_2; _i < deleteKeys_1.length; _i++) {
                  var componentCacheKey = deleteKeys_1[_i];
                  mainQueue.delete(componentCacheKey);
              }
          }
          this.exitBatching();
      };
      RunloopHostRenderer.prototype.selectAllComponentsRef = function (selector, targetId) {
          var _this = this;
          var result = [];
          var componentInstance = this.vm && this.vm[targetId];
          if (componentInstance) {
              var resultIds = queryAllComponents(selector, componentInstance);
              if (resultIds.length) {
                  var targetProviderInfo_1 = this.getTargetProviderInfo(targetId);
                  resultIds.map(function (componentId) {
                      var pubRef = _this.getComponentPublicRef(componentId, targetProviderInfo_1);
                      result.push(pubRef);
                  });
              }
          }
          return result;
      };
      RunloopHostRenderer.prototype.selectComponentRef = function (selector, targetId) {
          var result = null;
          var componentInstance = this.vm && this.vm[targetId];
          if (componentInstance) {
              var resultId = queryComponent(selector, componentInstance);
              if (resultId) {
                  var targetProviderInfo = this.getTargetProviderInfo(targetId);
                  result = this.getComponentPublicRef(resultId, targetProviderInfo);
              }
          }
          return result;
      };
      RunloopHostRenderer.prototype.selectOwnerComponentRef = function (componentId) {
          var vm = this.vm;
          var componentInstance = vm[componentId];
          if (componentInstance) {
              var componentLogic = componentInstance.logic;
              var ownerId = componentLogic.parentComponentId;
              var ownerInstance = vm[ownerId];
              if (ownerInstance) {
                  if (ownerId) {
                      return ownerInstance.logic.getPublicRef(componentLogic.getProviderInfo());
                  }
                  return componentLogic.pagePublicInstance;
              }
          }
      };
      RunloopHostRenderer.prototype.selectComposedParentComponentRef = function (componentId) {
          var vm = this.vm;
          var componentInstance = vm[componentId];
          if (componentInstance) {
              var parent = componentInstance.node.parent;
              while (parent) {
                  var component = parent.component;
                  if (component.type >= 2 /* EZRuntimeLinkedInstanceType.Component */) {
                      var parentId = component.getTargetId();
                      var parentInstance = vm[parentId];
                      if (parentInstance) {
                          var componentLogic = componentInstance.logic;
                          if (parentId) {
                              return parentInstance.logic.getPublicRef(componentLogic.getProviderInfo());
                          }
                          return componentLogic.pagePublicInstance;
                      }
                      break;
                  }
                  parent = parent.parent;
              }
          }
      };
      RunloopHostRenderer.prototype.getComponentPublicRef = function (componentId, targetProviderInfo) {
          var logic = this.vm[componentId].logic;
          return logic.getPublicRef(targetProviderInfo);
      };
      RunloopHostRenderer.prototype.getTargetProviderInfo = function (targetId) {
          if (targetId === 0) {
              return this.page.getProviderInfo();
          }
          return this.vm[targetId].logic.getProviderInfo();
      };
      RunloopHostRenderer.prototype.hasComponentConstructor = function (componentIs) {
          var _a;
          var runtime = getRuntimeById(this.page.appInstanceId);
          var registry = runtime.getRegistry();
          var config = registry.getComponentHostRenderConfig(componentIs);
          return !!((_a = config === null || config === void 0 ? void 0 : config.exportDefault) === null || _a === void 0 ? void 0 : _a.zcomponent);
      };
      RunloopHostRenderer.prototype.getAllComponentInstanceInfo = function (prevOrderedComponentSequence) {
          // getAllOrderedTargets
          var document = this.vm[0].document;
          var instanceList = document.getAllOrderedTargets();
          var hostOperations = document.getAllOperations();
          this.orderedComponentSeq += instanceList.length;
          var result = [
              prevOrderedComponentSequence,
              instanceList.map(extractComponentTargetId),
              instanceList.map(extractComponentData),
               instanceList.map(extractComponentPath) ,
              hostOperations ];
          return result;
      };
      RunloopHostRenderer.prototype.performMountAfterWaiting = function (flushCallbackByMessage, prevOrderedComponentSequence) {
          var _this = this;
          this.inRunloop--;
          this.flushStep = 1 /* ESharedAppxFlexibleHostRendererFlushingStep.Immediately */;
          var page = this.page;
          var componentInstanceInfo = this.getPendingComponentInstanceInfo(prevOrderedComponentSequence);
          var pendingMessages = this.pendingMessage;
          if (pendingMessages.length) {
              this.pendingMessage = [];
          }
          page.beforeClientUpdate();
          page.proxy.port.onRenderMount(pendingMessages, page.logics[0].publicInstance.data, this.componentStaticInfo, getPublicMethodFromPage(page), componentInstanceInfo, function (response) {
              _this.onClientResponseCallback(flushCallbackByMessage ? _this.typedCallbacks[0 /* ESharedHostRendererTypedCallback.Initing */] : undefined, response);
              // TheRiver 上可能模拟出这种情况:
              // navigateTo A 然后 A.onLoad 中 reLaunch B
              // A、B 页面被销毁后
              // 才发来 A.onRenderMount 消息
              // 先不考虑这种情况
              // 触发一下 RenderReady
              _this.page.setState("Readied" /* EPageLifecycleState.READIED */);
              _this.reportPerformance(response[6]);
              debug$1$1(function () { return '[APPX] RenderLocalBaseInstance::onActionRenderMount done'; });
          }, this.hostHydrateConfig);
      };
      RunloopHostRenderer.prototype.pushToNextQueue = function (targetId, type, diff) {
          var nextData = this.nextDataQueueByTargetId[targetId];
          if (!nextData) {
              nextData = this.nextDataQueueByTargetId[targetId] = [];
              this.nextTargetIds.push(targetId);
          }
          // 实际渲染数据不被污染
          nextData.push([type, diff]);
      };
      RunloopHostRenderer.prototype.setupSlotBlock4ZRuntime = function (block, provider) {
          var slotConstructor = getRunloopHostRendererSlotBlockConstructor(this, this.renderContext.SlotBlockConstructor);
          return new slotConstructor(block, provider);
      };
      RunloopHostRenderer.prototype.remoteDevelopmentDebugLog = function (payload) {
          var runtime = getRuntimeById(this.page.appInstanceId);
          var env = runtime.getEnv();
          var originalStartupParams = env.originalStartupParams, userAgent = env.userAgent;
          var sceneType = getPackageAndRunSceneType(originalStartupParams, userAgent);
          if (sceneType === 16 /* EAppxPackageAndRunSceneType.Release */) {
              // 前置关闭
              this.remoteDevelopmentDebugLog = null;
              return;
          }
          runtime.getMiniExtensionManager().remoteDevelopmentDebugLog(payload);
      };
      RunloopHostRenderer.prototype.getTabBar4ZRuntime = function (componentIs) {
          var foundComponentRenderConstructor = null;
          var cachePool = this
              .cache4component;
          foundComponentRenderConstructor = cachePool.get(componentIs);
          if (!foundComponentRenderConstructor) {
              var mainFragmentExport = this.getComponentConstructor(componentIs);
              foundComponentRenderConstructor = getRunloopHostRendererComponentConstructor(RunloopHostRendererTabBarConstructor, this, componentIs, mainFragmentExport, this.componentStaticInfo[componentIs]);
              cachePool.set(componentIs, foundComponentRenderConstructor);
          }
          return foundComponentRenderConstructor;
      };
      RunloopHostRenderer.prototype.resolveComponentIs = function (componentInfo, existenceRequired) {
          var componentIs = componentInfo[0 /* EZComponentCompileInfoArgumentIndex.ComponentIs */];
          var type = componentInfo[1 /* EZComponentCompileInfoArgumentIndex.Type */];
          var miniExtensionId = componentInfo[2 /* EZComponentCompileInfoArgumentIndex.MiniExtensionId */];
          var finalComponentIs;
          var useEmptyComponent = false;
          var usingExtensionId;
          if (!type) {
              // type == 0
              finalComponentIs = componentIs;
          }
          else if (type === 2 /* ERequireZComponentType.MainAppRequireDynamicExtensionComponent */) {
              var runtime = getRuntimeById(this.page.appInstanceId);
              var manager = runtime.getMiniExtensionManager();
              var componentPath = manager.getMiniExtensionComponentPath(type, {
                  type: 2 /* EMiniExtensionStringType.dynamic_plugin_$_id_$_public_name */,
                  value: componentIs,
              });
              if (!componentPath) {
                  useEmptyComponent = true;
                  finalComponentIs = kEmptyComponentPath;
              }
              else {
                  // hasComponentConstructor 也需要判断下
                  finalComponentIs = componentPath.value;
                  usingExtensionId = componentPath.extensionId;
              }
          }
          else if (type === 1 /* ERequireZComponentType.MainAppRequireStaticExtensionComponent */) {
              var runtime = getRuntimeById(this.page.appInstanceId);
              var manager = runtime.getMiniExtensionManager();
              var componentPath = manager.getMiniExtensionComponentPath(type, {
                  type: 4 /* EMiniExtensionStringType._$_extension_id_$_ */,
                  value: miniExtensionId,
              }, {
                  type: 6 /* EMiniExtensionStringType._$_public_name_$_ */,
                  value: componentInfo[0 /* EZComponentCompileInfoArgumentIndex.ComponentIs */],
              });
              if (!componentPath) {
                  useEmptyComponent = true;
                  finalComponentIs = kEmptyComponentPath;
              }
              else {
                  usingExtensionId = componentPath.extensionId;
                  finalComponentIs = componentPath.value;
              }
          }
          if (existenceRequired && !useEmptyComponent) {
              useEmptyComponent = !this.hasComponentConstructor(finalComponentIs);
          }
          if (useEmptyComponent) {
              return;
          }
          if (usingExtensionId) {
              this.usingExtensionInComponent.push(usingExtensionId);
              // 由于静态插件加载继续阻塞，这里只能做动态插件跨页面懒加载保证, 暂不支持
              // this.page.proxy.addRequirement4Plugin(usingExtensionId);
          }
          /**
           * 一次性通过率，插件组件渲染埋点
           * 宿主渲染插件时才做上报
           */
          if (type && this.remoteDevelopmentDebugLog) {
              // tslint:disable object-literal-sort-keys
              this.remoteDevelopmentDebugLog({
                  miniExtensionId: {
                      type: 4 /* EMiniExtensionStringType._$_extension_id_$_ */,
                      value: usingExtensionId,
                  },
                  type: "component" /* EPluginDevelopmentDebugType.COMPONENT */,
                  componentPath: componentIs,
                  error: useEmptyComponent ? "COMPONENT_NOT_FOUND" /* EPluginDevelopmentDebugErrorMessage.COMPONENT_NOT_FOUND */ : '',
              });
          }
          return finalComponentIs;
      };
      RunloopHostRenderer.prototype.getComponent4ZRuntime = function (componentIs, type, miniExtensionId, placeholderComponentInfo) {
          var defaultComponentInfo = [componentIs, type, miniExtensionId];
          var currentComponentInfo;
          var currentFactory = RunloopHostRendererComponentConstructor;
          var shouldTryPlaceholder = !!(placeholderComponentInfo && placeholderComponentInfo[0]);
          if (shouldTryPlaceholder) {
              currentComponentInfo = placeholderComponentInfo;
          }
          else {
              currentComponentInfo = defaultComponentInfo;
          }
          var currentCacheKey = getComponentCacheKey(currentComponentInfo);
          var cachePool = this.cache4component;
          var foundComponentRenderConstructor = cachePool.get(currentCacheKey);
          var resolvedComponentIs;
          if (!foundComponentRenderConstructor) {
              resolvedComponentIs = this.resolveComponentIs(currentComponentInfo, shouldTryPlaceholder);
              if (resolvedComponentIs) {
                  if (shouldTryPlaceholder) {
                      switch (currentComponentInfo[1 /* EZComponentCompileInfoArgumentIndex.Type */]) {
                          case 1 /* ERequireZComponentType.MainAppRequireStaticExtensionComponent */:
                              // 用到静态插件，添加 requirement
                              this.page.proxy.addRequirement4Plugin(currentComponentInfo[2 /* EZComponentCompileInfoArgumentIndex.MiniExtensionId */]);
                              break;
                      }
                  }
                  // 首次查到，直接渲染，不支持切换
                  // currentFactory = RunloopHostRendererComponentConstructor;
              }
              else {
                  if (shouldTryPlaceholder) {
                      // 占位组件降级到 fallback
                      currentCacheKey = currentCacheKey + getComponentCacheKey(defaultComponentInfo);
                      foundComponentRenderConstructor = cachePool.get(currentCacheKey);
                      if (!foundComponentRenderConstructor) {
                          resolvedComponentIs = this.resolveComponentIs(defaultComponentInfo, false);
                          if (resolvedComponentIs) {
                              currentFactory = ReplaceableRunloopHostRendererComponentConstructor.bind(null, currentComponentInfo);
                          }
                      }
                  }
              }
          }
          if (!foundComponentRenderConstructor) {
              if (resolvedComponentIs) {
                  var mainFragmentExport = this.getComponentConstructor(resolvedComponentIs);
                  // 那按照 currentFragmentTransformer 来做继承算了？
                  // 本来就要套娃，继续套？
                  foundComponentRenderConstructor = getRunloopHostRendererComponentConstructor(currentFactory, this, resolvedComponentIs, mainFragmentExport, this.componentStaticInfo[resolvedComponentIs]);
                  cachePool.set(currentCacheKey, foundComponentRenderConstructor);
              }
              else {
                  // 空组件实现
                  var exportFactory = getEmptyComponent4ZRuntime().zcomponent;
                  if (!exportFactory) {
                      throw new Error('exportFactory');
                  }
                  var mainFragmentExport = exportFactory(this.renderContext);
                  foundComponentRenderConstructor = getRunloopHostRendererComponentConstructor(currentFactory, this, kEmptyComponentPath, mainFragmentExport, this.componentStaticInfo[kEmptyComponentPath]);
              }
          }
          return foundComponentRenderConstructor;
      };
      RunloopHostRenderer.prototype.invokeTargetMethodWithArgs = function (targetId, method, args) {
          if (targetId === undefined) {
              return;
          }
          var instance = this.page.logics[targetId];
          if (instance) {
              return instance.invokeMethod(method, args);
          }
      };
      RunloopHostRenderer.prototype.getPageConstructor = function (pagePath) {
          var page = this.page;
          var appInstanceId = page.appInstanceId;
          var pageOption = getRegistryByRuntimeId(appInstanceId).getPageHostRenderConfig(pagePath).exportDefault;
          var exportFactory = pageOption.zcomponent;
          if (!exportFactory) {
              throw new Error('exportFactory');
          }
          return exportFactory(this.renderContext);
      };
      RunloopHostRenderer.prototype.performMount = function (data) {
          var page = this.page;
          var pageId = page.pageId;
          var pagePath = page.pagePath;
          var appInstanceId = page.appInstanceId;
          var runtime = getRuntimeById(appInstanceId);
          var mainFragmentExport = this.getPageConstructor(pagePath);
          var isPageSupportCustomizeTabBar = checkPageSupportCustomizeTabBar(runtime, page.pagePath);
          var componentInstance = new this.renderContext.PageConstructor({
              createSlotProvider: this.getSlotProviderCreator(),
              // page data need shallow clone
              data: this.component2
                  ? __assign({}, data) : simpleDeepCopy(data),
              fragment: mainFragmentExport,
              onCallEvent: this.invokeTargetMethodWithArgs.bind(this),
              parent: null,
              parentTarget: null,
              root: null,
              runtime: {
                  appInstanceId: appInstanceId,
                  pageInstanceId: pageId,
                  proxy: null,
                  getLazyLoadManager: runtime.getLazyLoadManager.bind(runtime),
              },
              renderContext: this.renderContext,
              tabbar: isPageSupportCustomizeTabBar,
          });
          componentInstance.root = componentInstance;
          componentInstance.option.root = componentInstance;
          this.vm[0] = componentInstance;
          componentInstance.create();
          componentInstance.mount(null, null);
      };
      RunloopHostRenderer.prototype.getSlotProviderCreator = function () {
          var runtime = getRuntimeById(this.page.appInstanceId);
          var useSlotLinkTree = runtime.getSwitchManager().get("useSlotLinkTree" /* ESharedAppxSwitchManagerName.UseSlotLinkTree */);
          var useSlotLazyUpdating = runtime.getSwitchManager().get("useSlotLazyUpdating" /* ESharedAppxSwitchManagerName.UseSlotLazyUpdating */);
          var bindLinkNode = useSlotLinkTree ? this.setupSlotBlock4ZRuntime.bind(this) : null;
          if (useSlotLazyUpdating) {
              return this.renderContext.createSlotProvider4Lazy.bind(null, bindLinkNode);
          }
          else {
              return this.renderContext.createSlotProvider4Immediate.bind(null, bindLinkNode);
          }
      };
      RunloopHostRenderer.prototype.performUpdate = function () {
          var pendingDataQueueMap = this.nextDataQueueByTargetId;
          var vms = this.vm;
          this.nextDataQueueByTargetId = [];
          this.currentDataQueueByTargetId = pendingDataQueueMap;
          var targetIds = this.nextTargetIds.sort(compareByDecimal);
          this.nextTargetIds = [];
          var componentNeedMessageClone = !this.component2;
          // tslint:disable prefer-for-of
          for (var targetIndex = 0; targetIndex < targetIds.length; targetIndex++) {
              // tslint:enable prefer-for-of
              var targetId = targetIds[targetIndex];
              var queue = pendingDataQueueMap[targetId];
              // 有可能之前的 flush 就把这里需要flush的数据消费掉了
              // 这里就不再需要 flush 了
              if (queue) {
                  // 触发更新前先清理表
                  // 避免下一轮更新被塞到这轮的表里
                  pendingDataQueueMap[targetId] = null;
                  var vm = vms[targetId];
                  if (vm) {
                      var diffMap = Object.create(null);
                      // 或者 setData 的时候 Normal 也刷一下 _state
                      var modifiedData = vm._state;
                      // Page 没有 dataKeys
                      var dataKeysMayBeVoid = vm.dataKeys;
                      var processed = 0;
                      for (var _i = 0, queue_2 = queue; _i < queue_2.length; _i++) {
                          var payload = queue_2[_i];
                          processed += setDataByTypeForZephyr(payload[0], modifiedData, payload[1] && componentNeedMessageClone ? simpleDeepCopy(payload[1]) : payload[1], diffMap, dataKeysMayBeVoid);
                      }
                      // 没处理完，检测是否 switchFragment
                      if (processed < queue.length) {
                          var shouldStopCurrentTargetUpdate = false;
                          for (var _a = 0, queue_3 = queue; _a < queue_3.length; _a++) {
                              var _b = queue_3[_a], type = _b[0], payload = _b[1];
                              if (type === 3 /* EAppxCoreHelperSetDataType.SwitchFragment */) {
                                  vm.switchFragment(payload);
                                  // 立即停止，后续数据不再处理
                                  shouldStopCurrentTargetUpdate = true;
                                  break;
                              }
                          }
                          if (shouldStopCurrentTargetUpdate) {
                              continue;
                          }
                      }
                      vm.updateData(diffMap, modifiedData);
                  }
              }
          }
      };
      RunloopHostRenderer.prototype.getPendingComponentInstanceInfo = function (prevOrderedComponentSequence) {
          var _this = this;
          // 这里进行一次 树刷新，刷到新增的节点
          // 如果一颗子树没有新增（标记为脏）则不处理
          // 访问过一次之后标记为不脏
          var document = this.vm[0].document;
          var instanceList = document.getNewOrderedTargets(false);
          var hostOperations = document.getNewOperations();
          this.orderedComponentSeq += instanceList.length;
          var result = [
              prevOrderedComponentSequence,
              instanceList.map(extractComponentTargetId),
              instanceList.map(extractComponentData),
               instanceList.map(extractComponentPath) ,
              hostOperations ];
          debug$1$1(function () {
              return "[APPX] RunloopHostRenderer::getPendingComponentInstanceInfo: ".concat(prevOrderedComponentSequence, "/").concat(instanceList.length, "/").concat(_this.orderedComponentSeq, " ").concat(JSON.stringify(result));
          });
          return result;
      };
      return RunloopHostRenderer;
  }(SharedHostRenderer));
  function checkPageSupportCustomizeTabBar(runtime, pagePath) {
      var isSupportCustomizeTabBar = isAppSupportCustomizeTabBar(runtime.getMeta().getTabBar(), runtime.getEnv().originalStartupParams);
      return isSupportCustomizeTabBar && runtime.getMeta().isTabPage(pagePath);
  }
  function extractComponentData(componentInstance) {
      return componentInstance.logic ? componentInstance.logic.publicInstance.data : {};
  }
  function extractComponentTargetId(componentInstance) {
      return componentInstance.targetId;
  }
  function extractComponentPath(componentInstance) {
      return componentInstance.logic && componentInstance.logic.componentPath;
  }
  // function extractComponentParentTargetId(
  //   componentInstance: IZRuntimeLinkedInstance4LinkNode<EZRuntimeLinkedSideType.Host, EZRuntimePlatformType>
  // ) {
  //   const parentNode = componentInstance.node.parent;
  //   if (parentNode && parentNode.hType === EZRuntimeHostSideElementType.TargetOrSlot) {
  //     return parentNode.component.targetId;
  //   } else {
  //     return -1;
  //   }
  // }

  var RunloopSyncHostRenderer = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(RunloopSyncHostRenderer, _super);
      function RunloopSyncHostRenderer() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.component2 = true;
          _this.nextLifeQueue = [];
          return _this;
      }
      RunloopSyncHostRenderer.prototype.getPrevComponentData = function (prevDataBeforeDidUpdate, dataBeforeDidUpdate, dataAfterDidUpdate) {
          if (prevDataBeforeDidUpdate !== dataBeforeDidUpdate) {
              return dataBeforeDidUpdate;
          }
          else {
              // 不变
              return prevDataBeforeDidUpdate;
          }
      };
      RunloopSyncHostRenderer.prototype.refresh = function () {
          _super.prototype.refresh.call(this);
          this.nextLifeQueue = [];
      };
      RunloopSyncHostRenderer.prototype.mountComponent = function (targetId, receivedProps, propKeys, nonEventSize, refMethod) {
          this.nextLifeQueue.push([0 /* ESharedAppxFlexibleComponentPendingLifeType.DidMount */, targetId, refMethod]);
      };
      RunloopSyncHostRenderer.prototype.updateComponent = function (componentId, nextProps) {
          this.nextLifeQueue.push([1 /* ESharedAppxFlexibleComponentPendingLifeType.DidUpdate */, componentId, nextProps]);
      };
      RunloopSyncHostRenderer.prototype.destroyComponent = function (componentId, hasDidUnmount) {
          this.vm[componentId] = null;
          this.nextLifeQueue.push([2 /* ESharedAppxFlexibleComponentPendingLifeType.DidUnmount */, componentId, hasDidUnmount]);
      };
      RunloopSyncHostRenderer.prototype.getDynamicMiniExtensionInitialConfig = function (miniExtensionId) {
          var registry = getRegistryByRuntimeId(this.page.appInstanceId);
          if (!registry) {
              return;
          }
          return getComponentInitialConfigFromMiniExtension(registry, miniExtensionId, false, true);
      };
      RunloopSyncHostRenderer.prototype.onRemount = function (hash) {
          _super.prototype.onRemount.call(this, hash);
          this.nextLifeQueue = [];
      };
      RunloopSyncHostRenderer.prototype.performLifecycle = function (nextLifeQueue) {
          var page = this.page;
          var logics = page.logics;
          if (nextLifeQueue.length) {
              var _loop_1 = function (lifeInfo) {
                  var targetId = lifeInfo[1];
                  var logicInstance = logics[targetId];
                  if (logicInstance) {
                      switch (lifeInfo[0]) {
                          case 0 /* ESharedAppxFlexibleComponentPendingLifeType.DidMount */:
                              logicInstance.onComponentMounted();
                              if (lifeInfo[2]) {
                                  logicInstance.onComponentRefBind(lifeInfo[2]);
                              }
                              break;
                          case 1 /* ESharedAppxFlexibleComponentPendingLifeType.DidUpdate */:
                              logicInstance.onComponentUpdated(lifeInfo[2]);
                              break;
                          case 2 /* ESharedAppxFlexibleComponentPendingLifeType.DidUnmount */:
                              page.removeComponent(targetId, !lifeInfo[1 /* hasDidUnmount */]);
                              break;
                      }
                  }
                  else {
                      debug$1$1(function () { return "[APPX] RunloopSyncHostRenderer::performLifecycle(".concat(lifeInfo[0], ") ").concat(targetId, " not found"); });
                  }
              };
              for (var _i = 0, nextLifeQueue_1 = nextLifeQueue; _i < nextLifeQueue_1.length; _i++) {
                  var lifeInfo = nextLifeQueue_1[_i];
                  _loop_1(lifeInfo);
              }
          }
      };
      RunloopSyncHostRenderer.prototype.performRunloop = function (shouldFlushCallback, callbackType) {
          var this$1 = this;

          var _this = this;
          do {
              this$1.performLifecycle(this$1.nextLifeQueue);
              this$1.nextLifeQueue = [];
              this$1.performUpdate();
          } while (
          // component2 模式只识别 Serial 周期
          this.nextLifeQueue.length);
          var callbacks = this.typedCallbacks[callbackType];
          var runtime = getRuntimeById(this.page.appInstanceId);
          if (shouldFlushCallback && callbacks.length) {
              this.typedCallbacks[callbackType] = [];
              var switchManager = runtime.getSwitchManager();
              var component2CallbackTimeout = switchManager.get("runloopCallbackTimeout" /* ESharedAppxSwitchManagerName.RunloopCallbackTimeout */);
              if (typeof component2CallbackTimeout === 'number' &&
                  component2CallbackTimeout > 0 &&
                  component2CallbackTimeout < 10000) {
                  var requestTimeout = runtime.getKernel().setTimeout;
                  requestTimeout(function () {
                      _this.enterBatching();
                      _this.flushCallbacks(callbacks);
                      _this.exitBatching();
                  }, component2CallbackTimeout);
              }
              else {
                  var PromiseConstructor = runtime.getKernel().Promise;
                  PromiseConstructor.resolve().then(function () {
                      _this.enterBatching();
                      _this.flushCallbacks(callbacks);
                      _this.exitBatching();
                  });
              }
          }
          if (this.usingExtensionInComponent.length) {
              var usingExtensionComponents = this.usingExtensionInComponent;
              this.usingExtensionInComponent = [];
              runtime.getLogger().reportExtensionUsageInComponent(this.page, usingExtensionComponents);
          }
          // 清理下插件使用上报
          // 全做完了之后，再进行 callback 清理，这个清理得异步 batch
          // ||
          // this.typedCallbacks[callbackType].length
          // this.flushCallbacks(this.typedCallbacks[callbackType]);
      };
      RunloopSyncHostRenderer.prototype.getComponentInitialConfig = function (registry, pagePath) {
          return getComponentInitialConfig(registry, pagePath, false, true);
      };
      return RunloopSyncHostRenderer;
  }(RunloopHostRenderer));

  var RunloopAsyncHostRenderer = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(RunloopAsyncHostRenderer, _super);
      function RunloopAsyncHostRenderer() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.component2 = false;
          _this.nextLifeQueueDirty = false;
          _this.nextLifeQueue = [[], [], []];
          return _this;
      }
      RunloopAsyncHostRenderer.prototype.getPrevComponentData = function (prevDataBeforeDidUpdate, dataBeforeDidUpdate, dataAfterDidUpdate) {
          return dataAfterDidUpdate;
      };
      RunloopAsyncHostRenderer.prototype.refresh = function () {
          _super.prototype.refresh.call(this);
          this.nextLifeQueue = [[], [], []];
          this.nextLifeQueueDirty = false;
      };
      RunloopAsyncHostRenderer.prototype.mountComponent = function (targetId, receivedProps, propKeys, nonEventSize, refMethod) {
          this.nextLifeQueueDirty = true;
          this.nextLifeQueue[0 /* ESharedAppxFlexibleComponentPendingLifeType.DidMount */].push([targetId, refMethod]);
      };
      RunloopAsyncHostRenderer.prototype.updateComponent = function (componentId, nextProps) {
          this.nextLifeQueueDirty = true;
          this.nextLifeQueue[1 /* ESharedAppxFlexibleComponentPendingLifeType.DidUpdate */].push([componentId, nextProps]);
      };
      RunloopAsyncHostRenderer.prototype.destroyComponent = function (componentId, hasDidUnmount) {
          this.vm[componentId] = null;
          this.nextLifeQueueDirty = true;
          this.nextLifeQueue[2 /* ESharedAppxFlexibleComponentPendingLifeType.DidUnmount */].push([componentId, hasDidUnmount]);
      };
      RunloopAsyncHostRenderer.prototype.getDynamicMiniExtensionInitialConfig = function (miniExtensionId) {
          var registry = getRegistryByRuntimeId(this.page.appInstanceId);
          if (!registry) {
              return;
          }
          return getComponentInitialConfigFromMiniExtension(registry, miniExtensionId, false, false);
      };
      RunloopAsyncHostRenderer.prototype.onRemount = function (hash) {
          _super.prototype.onRemount.call(this, hash);
          this.nextLifeQueue = [[], [], []];
          this.nextLifeQueueDirty = false;
      };
      /**
       * @description
       *  - 对于多个 task 中触发的多个 performRunloop，需要保证相互之间不清理对方的 queue
       *  - 需要做到 perform 同时固定被操作回调队列
       * @example
       *  - batching#1 setTimeout1
       *  - batching#2 setTimeout1
       *
       */
      RunloopAsyncHostRenderer.prototype.performRunloop = function (shouldFlushCallback, callbackType) {
          var _this = this;
          var runtime = getRuntimeById(this.page.appInstanceId);
          var switchManager = runtime.getSwitchManager();
          var switchCallbackTimeout = switchManager.get("runloopCallbackTimeout" /* ESharedAppxSwitchManagerName.RunloopCallbackTimeout */);
          var callbackTimeout = 0;
          var kernel = runtime.getKernel();
          var requestTimeout = kernel.setTimeout;
          if (typeof switchCallbackTimeout === 'number' && switchCallbackTimeout > 0 && switchCallbackTimeout < 10000) {
              callbackTimeout = switchCallbackTimeout;
          }
          var coorespondingNextLifeQueue = this.nextLifeQueue;
          var isNextLifeQueueDirty = this.nextLifeQueueDirty;
          var coorespondingTypedCallbacks = shouldFlushCallback ? this.typedCallbacks[callbackType] : [];
          var isTypedCallbackDirty = !!coorespondingTypedCallbacks.length;
          if (isNextLifeQueueDirty || isTypedCallbackDirty) {
              // 需要刷新生命周期
              if (isNextLifeQueueDirty) {
                  this.nextLifeQueue = [[], [], []];
                  this.nextLifeQueueDirty = false;
              }
              if (isTypedCallbackDirty) {
                  this.typedCallbacks[callbackType] = [];
              }
              requestTimeout(function () {
                  /**
                   * 对齐 AppX 1.0
                   * - 先处理 lifecycle 消息
                   * - 再处理 callback 消息
                   */
                  if (isNextLifeQueueDirty) {
                      _this.enterBatching();
                      _this.performLifecycle(coorespondingNextLifeQueue);
                      _this.exitBatching();
                  }
                  if (isTypedCallbackDirty) {
                      _this.enterBatching();
                      _this.flushCallbacks(coorespondingTypedCallbacks);
                      _this.exitBatching();
                  }
              }, callbackTimeout);
          }
      };
      RunloopAsyncHostRenderer.prototype.performLifecycle = function (nextLifeQueue) {
          var this$1 = this;

          var logics = this.page.logics;
          var _a = nextLifeQueue, _b = 0 /* ESharedAppxFlexibleComponentPendingLifeType.DidMount */, create = _a[_b], _c = 1 /* ESharedAppxFlexibleComponentPendingLifeType.DidUpdate */, update = _a[_c], _d = 2 /* ESharedAppxFlexibleComponentPendingLifeType.DidUnmount */, destroy = _a[_d];
          if (create.length || update.length || destroy.length) {
              var _loop_1 = function (lifeInfo) {
                  var logicInstance = logics[lifeInfo[0]];
                  if (logicInstance) {
                      logicInstance.onComponentUpdated(lifeInfo[1]);
                  }
                  else {
                      debug$1$1(function () { return "[APPX] RunloopAsyncHostRenderer::performLifecycle(DidUpdate) ".concat(lifeInfo[0], " not found"); });
                  }
              };
              for (var _i = 0, update_1 = update; _i < update_1.length; _i++) {
                  var lifeInfo = update_1[_i];
                  _loop_1(lifeInfo);
              }
              var _loop_2 = function (lifeInfo) {
                  var logicInstance = logics[lifeInfo[0]];
                  if (logicInstance) {
                      logicInstance.onComponentMounted();
                      // async 不支持 ref 绑定
                      // if (lifeInfo[1]) {
                      //   logicInstance.onComponentRefBind(lifeInfo[1]);
                      // }
                  }
                  else {
                      debug$1$1(function () { return "[APPX] RunloopAsyncHostRenderer::performLifecycle(DidMount) ".concat(lifeInfo[0], " not found"); });
                  }
              };
              for (var _e = 0, create_1 = create; _e < create_1.length; _e++) {
                  var lifeInfo = create_1[_e];
                  _loop_2(lifeInfo);
              }
              for (var _f = 0, _g = destroy.slice().reverse(); _f < _g.length; _f++) {
                  var lifeInfo = _g[_f];
                  this$1.page.removeComponent(lifeInfo[0], !lifeInfo[1 /* hasDidUnmount */]);
              }
          }
      };
      RunloopAsyncHostRenderer.prototype.getComponentInitialConfig = function (registry, pagePath) {
          return getComponentInitialConfig(registry, pagePath, false, false);
      };
      return RunloopAsyncHostRenderer;
  }(RunloopHostRenderer));

  function createFlexibleClientExternalElementProxy(proxy, startupParams, extraParams, resUrl) {
      return {
          extraParams: extraParams,
          resUrl: resUrl,
          startupParams: startupParams,
          isAppClosed: function () {
              return proxy.platform.isTitleCloseClicked();
          },
          isAppFirstPage: function () {
              return proxy.isAppFirstPageFromHost() || proxy.isRestartedFromHost();
          },
          isAppHomePage: function () {
              var meta = proxy.meta;
              if (meta) {
                  return getEntryPagePath(meta) === proxy.pagePath;
              }
              else {
                  return false;
              }
          },
          isPagePaused: function () {
              return proxy.platform.isPagePaused();
          },
          isTab: function (params) {
              var url = params.url || '';
              url = url.replace(/^\//, '');
              var meta = proxy.meta;
              if (meta && meta.tabBar && meta.tabBar.items) {
                  for (var _i = 0, _a = meta.tabBar.items; _i < _a.length; _i++) {
                      var tabItem = _a[_i];
                      if (tabItem.pagePath.replace(/^\//, '') === url) {
                          return true;
                      }
                  }
              }
              return false;
          },
          navigateTo: function (params) {
              proxy.invokeHostBridgeCallProxy('navigateTo', params, undefined);
          },
          switchTab: function (params) {
              proxy.invokeHostBridgeCallProxy('switchTab', params, undefined);
          },
      };
  }

  var platformRendererImpl;
  function setPlatformRendererImpl(v) {
      platformRendererImpl = v;
  }
  function createPlatformRenderer(clientProxy) {
      return new platformRendererImpl(clientProxy);
  }
  var FlexibleClientProxy = /** @class */ /*#__PURE__*/ (function () {
      function FlexibleClientProxy(context, pType, port) {
          var _a;
          this.profiling = false;
          this.extraInfo = {};
          this.context = context;
          this.port = port;
          this.pType = pType;
          if (context.appInstanceId) {
              this.appInstanceId = context.appInstanceId;
          }
          var pagePath = context.pagePath;
          this.pagePath = pagePath;
          if (isPluginPrivateProtocolPath(pagePath)) {
              var res = get_extensionId_resolvedPath({
                  type: 0 /* EMiniExtensionStringType.plugin_private_$_id_$_resolved_path */,
                  value: pagePath,
              });
              if (res) {
                  this.extensionPageMeta = {
                      extensionId: res.extensionId,
                      resolvedPath: res.resolvedPath,
                  };
              }
          }
          this.pageId = context.pageId;
          this.queryString = context.queryString;
          this.viewId = context.viewId;
          if (context.meta) {
              this.meta = context.meta;
          }
          this.platform = createPlatformRenderer(this);
          var startupParams = this.getStartupParams();
          if ((insideFeatureRuntimeVersion >= /* f_renderSwitchConfig_2_7_23:10.2.80 */ 10002080)) {
              var __appxFrameworkConfig = startupParams.__appxFrameworkConfig;
              if (__appxFrameworkConfig &&
                  this.initSwitchManager(__appxFrameworkConfig).get("disablePreInitSwitch" /* ESharedAppxSwitchManagerName.DisablePreInitSwitch */)) {
                  this.switchManager = undefined;
              }
          }
          this.perfFeatures = (_a = {},
              _a[1 /* ESharedAppxPerformanceFeatureType.Snapshot */] = normalizeSnapshotStartupParams(startupParams)
                  ? 1 /* ESharedAppxPerformanceFeatureValue.Support */
                  : 0 /* ESharedAppxPerformanceFeatureValue.No */,
              _a[2 /* ESharedAppxPerformanceFeatureType.LazyCodeLoading */] = 0 /* ESharedAppxPerformanceFeatureValue.No */,
              _a);
      }
      FlexibleClientProxy.prototype.getPerfFeatures = function () {
          return this.perfFeatures;
      };
      FlexibleClientProxy.prototype.setPerfFeature = function (type, value) {
          this.perfFeatures[type] = value;
      };
      FlexibleClientProxy.prototype.bootstrap = function () {
          var ready = this.port.bootstrap();
          this.platform.bootstrap(ready);
      };
      FlexibleClientProxy.prototype.dispose = function () {
          if (this.renderer) {
              this.renderer.dispose();
              this.renderer = null;
          }
          if (this.platform) {
              this.platform.dispose();
              this.platform = null;
          }
          if (this.port) {
              this.port.dispose();
              this.port = null;
          }
          if (this.subPackageManager) {
              this.subPackageManager.dispose();
              this.subPackageManager = null;
          }
          this.switchManager = null;
      };
      FlexibleClientProxy.prototype.getExtraInfo4H5Fragment = function () {
          return this.port.getExtraInfo4H5Fragment();
      };
      FlexibleClientProxy.prototype.initRenderer = function (rType, isVersionDismatch) {
          if (this.renderer) {
              this.renderer.dispose();
              this.renderer = null;
          }
          if (rType === 4 /* ESharedAppxFlexibleRendererType.SimpleAsync */ || rType === 8 /* ESharedAppxFlexibleRendererType.SimpleSync */) {
              this.renderer = createSimpleClientRenderer(this, rType);
              this.renderer.bootstrap();
              this.renderer.onInit(isVersionDismatch);
              var hostRuntime = this.port.getHostRuntime();
              if (hostRuntime) {
                  this.hostPageInstance = hostRuntime
                      .getPageManager()
                      .getInstanceById(this.pageId);
              }
          }
          else if (rType === 1 /* ESharedAppxFlexibleRendererType.RunloopSync */ ||
              rType === 2 /* ESharedAppxFlexibleRendererType.RunloopAsync */) {
              this.renderer = createRunloopClientRenderer();
              this.renderer.bootstrap();
              this.renderer.onInit(isVersionDismatch);
          }
      };
      FlexibleClientProxy.prototype.initFinish = function (initExtraConfig) {
          var partialPerfFeatures = initExtraConfig && initExtraConfig.perfFeatures;
          if (partialPerfFeatures) {
              var targetPerfFeatures = this.perfFeatures;
              for (var _i = 0, partialPerfFeatures_1 = partialPerfFeatures; _i < partialPerfFeatures_1.length; _i++) {
                  var _a = partialPerfFeatures_1[_i], key = _a[0], value = _a[1];
                  targetPerfFeatures[key] = value;
              }
          }
          this.platform.afterRenderInitMessage(initExtraConfig);
      };
      FlexibleClientProxy.prototype.onPageNotFound = function (error) {
          this.platform.onPageNotFound(error);
          this.port.onPageNotFound();
      };
      FlexibleClientProxy.prototype.invokeHMR = function (type, hash, changes) {
          this.port.invokeHMR(type, hash, changes);
      };
      FlexibleClientProxy.prototype.onHMRUpdated = function (e, hash) {
          this.port.onHMRUpdated(e, hash);
      };
      FlexibleClientProxy.prototype.isHMREnabled = function () {
          if (this.meta) {
              return (this.meta.__compile_info__ || {}).enableHotModuleReplace;
          }
          else {
              return false;
          }
      };
      FlexibleClientProxy.prototype.isTabPage = function (pagePath) {
          var tabBar = this.meta && this.meta.tabBar;
          return tabBar && tabBar.items.filter(function (item) { return item.pagePath === pagePath; }).length > 0;
      };
      FlexibleClientProxy.prototype.onCompositeElementCreate = function (compositeElementId, logicTargetId, // 如果 id 为 0 表示是 Page，如果 id 不为 0 表示是组件
      compositeElementTagName, events, dataset, userDefinedAttrId, tagOrder) {
          this.renderer.onCompositeElementCreate(compositeElementId, logicTargetId, compositeElementTagName, events, dataset, userDefinedAttrId, tagOrder);
      };
      FlexibleClientProxy.prototype.onCompositeElementUpdate = function (compositeElementId, events, dataset, userDefinedAttrId) {
          this.renderer.onCompositeElementUpdate(compositeElementId, events, dataset, userDefinedAttrId);
      };
      FlexibleClientProxy.prototype.onCompositeElementDestroy = function (compositeElementId) {
          this.renderer.onCompositeElementDestroy(compositeElementId);
      };
      FlexibleClientProxy.prototype.getPageOptions = function (pagePath) {
          var runtime = this.port.getHostRuntime();
          if (runtime) {
              return runtime.getRegistry().getPageRenderConfig(pagePath).exportDefault;
          }
          else {
              return this.platform.getPageOptions(pagePath);
          }
      };
      FlexibleClientProxy.prototype.getComponentOptions = function (componentIs) {
          var runtime = this.port.getHostRuntime();
          if (runtime) {
              return runtime.getRegistry().getComponentRenderConfig(componentIs);
          }
          else {
              return this.platform.getComponentOptions(componentIs);
          }
      };
      FlexibleClientProxy.prototype.getSubPackageManager = function () {
          var runtime = this.port.getHostRuntime();
          if (runtime) {
              // local 模式，托管给 Bridge 实现
              return runtime.getSubPackageManager();
          }
          else {
              // Client 中心化，数据状态维持在 platform 中
              // 挂自己上面
              if (!this.subPackageManager) {
                  this.subPackageManager = new SubPackageManager(this.context.meta);
              }
              return this.subPackageManager;
          }
      };
      FlexibleClientProxy.prototype.invokeClientBridgeCall = function (apiName, option, domain, callback) {
          var runtime = this.port.getHostRuntime();
          if (runtime) {
              runtime
                  .getBridge()
                  .callBridge(apiName, option, callback, this.pageId);
          }
          else {
              this.platform.invokeClientBridgeCall(apiName, option, domain, callback);
          }
      };
      FlexibleClientProxy.prototype.invokeRenderMethod = function (method, args, callback) {
          this.platform.invokeRenderMethod(method, args, callback);
      };
      FlexibleClientProxy.prototype.invokeClientBridgeCall4InternalAPI = function (method, param, domain, callback) {
          var insideBasicCfg = getInsideStaticConfig().config;
          if (insideBasicCfg && insideBasicCfg.noUseInternalAPI === true) {
              this.invokeClientBridgeCall(method, param, domain, callback);
          }
          else {
              var internalParams = {
                  method: method,
                  param: param,
                  viewId: ('viewId' in param ? param.viewId : undefined),
              };
              this.invokeClientBridgeCall('internalAPI', internalParams, domain, callback);
          }
      };
      FlexibleClientProxy.prototype.invokeHostBridgeCallProxy = function (apiName, option, domain, callback) {
          this.port.invokeHostBridgeCallProxy(apiName, option, domain, callback);
      };
      FlexibleClientProxy.prototype.invokeHostPageMethod = function (pageMethod, option, callback) {
          this.port.invokeHostPageMethod(pageMethod, option, callback);
      };
      FlexibleClientProxy.prototype.getEventTaskManager = function () {
          return this.platform.getEventTaskManager();
      };
      FlexibleClientProxy.prototype.getTargetContext = function (targetId) {
          var target = this.renderer.vm[targetId];
          return target && target.context;
      };
      FlexibleClientProxy.prototype.callHostReadyTargetMethod = function (targetId, method, arg0, callback, extra) {
          var target = this.renderer.vm[targetId];
          if (target) {
              target.callMethod(method, arg0, callback, extra);
          }
      };
      FlexibleClientProxy.prototype.isAppFirstPageFromHost = function () {
          var hostInitExtraConfig = this.platform.hostInitExtraConfig;
          return !!(hostInitExtraConfig && hostInitExtraConfig.isAppFirstPage);
      };
      FlexibleClientProxy.prototype.isRestartedFromHost = function () {
          var hostInitExtraConfig = this.platform.hostInitExtraConfig;
          return !!(hostInitExtraConfig && hostInitExtraConfig.isRestarted);
      };
      FlexibleClientProxy.prototype.getExternalProxy = function (startupParams, externalParams, resUrl) {
          return createFlexibleClientExternalElementProxy(this, startupParams, externalParams, resUrl);
      };
      FlexibleClientProxy.prototype.invokeHostTargetMethod = function (targetId, method, arg0, callback, extra) {
          this.port.invokeHostTargetMethod(targetId, method, arg0, callback, extra);
      };
      FlexibleClientProxy.prototype.getNormalizedSrc = function (src, providerInfo) {
          return getNormalizedSrc(src, this.pagePath, providerInfo);
      };
      FlexibleClientProxy.prototype.getPlatformPromise = function () {
          var runtime = this.port.getHostRuntime();
          if (runtime) {
              return runtime.getKernel().Promise;
          }
          else {
              return Promise;
          }
      };
      FlexibleClientProxy.prototype.getPlatformSetTimeout = function () {
          var runtime = this.port.getHostRuntime();
          if (runtime) {
              return runtime.getKernel().setTimeout;
          }
          else {
              return setTimeout;
          }
      };
      FlexibleClientProxy.prototype.invokeHostPageEvent = function (event, type, payload) {
          this.port.invokeHostPageEvent(event, type, payload);
      };
      FlexibleClientProxy.prototype.getClientInfo = function () {
          var runtime = this.port.getHostRuntime();
          if (runtime) {
              var _a = runtime.getEnv(), clientName = _a.clientName, clientVersion = _a.clientVersion, clientVersionSequence = _a.clientVersionSequence, isAndroid = _a.isAndroid, isIDE = _a.isIDE, isIOS = _a.isIOS, isUCWebView = _a.isUCWebView, language = _a.language, originalClientName = _a.originalClientName, platform = _a.platform, ucMajorVersion = _a.ucMajorVersion, ucMinorVersion = _a.ucMinorVersion, ucVersion = _a.ucVersion, iosMajorVersion = _a.iosMajorVersion, iosMinorVersion = _a.iosMinorVersion, iosPatchVersion = _a.iosPatchVersion;
              return {
                  clientName: clientName,
                  clientVersion: clientVersion,
                  clientVersionSequence: clientVersionSequence,
                  isAndroid: isAndroid,
                  isIDE: isIDE,
                  isIOS: isIOS,
                  isUCWebView: isUCWebView,
                  language: language,
                  originalClientName: originalClientName,
                  platform: platform,
                  ucMajorVersion: ucMajorVersion,
                  ucMinorVersion: ucMinorVersion,
                  ucVersion: ucVersion,
                  iosMajorVersion: iosMajorVersion,
                  iosMinorVersion: iosMinorVersion,
                  iosPatchVersion: iosPatchVersion,
              };
          }
          else {
              return this.platform.getClientInfo();
          }
      };
      FlexibleClientProxy.prototype.getStartupParams = function () {
          var runtime = this.port.getHostRuntime();
          if (runtime) {
              return runtime.getEnv().startupParams;
          }
          return this.platform.getStartupParams();
      };
      FlexibleClientProxy.prototype.initSwitchManager = function (config, persistedValues) {
          var _this = this;
          var switchManager = this.switchManager;
          if (switchManager) {
              switchManager.bootstrap(config, persistedValues);
          }
          else {
              var meta = this.meta;
              switchManager = this.switchManager = new SharedAppxSwitchManager(config, function (code, error) { return _this.platform.onError(code, error); }, this.getStartupParams().appId, kConsistAppxVersion, (meta && meta.allProviders && Object.keys(meta.allProviders)) || undefined, persistedValues);
          }
          return switchManager;
      };
      FlexibleClientProxy.prototype.getSwitchManager = function () {
          return this.switchManager;
      };
      FlexibleClientProxy.prototype.hasPublicMethod = function (method) {
          // tslint:disable no-bitwise
          return !!(this.renderer.publicMethod & method);
          // tslint:enable no-bitwise
      };
      FlexibleClientProxy.prototype.getExtraInfo = function () {
          return this.extraInfo;
      };
      FlexibleClientProxy.prototype.getMiniExtensionManager = function () {
          var runtime = this.port.getHostRuntime();
          if (runtime) {
              return runtime.getMiniExtensionManager();
          }
          else {
              return this.platform.getMiniExtensionManager();
          }
      };
      FlexibleClientProxy.prototype.beforeComponentInit = function (componentId, parentComponentId, componentIs, initProps, initPropKeys, nonEventSize) {
          {
              var pageInstance = this.hostPageInstance;
              if (pageInstance) {
                  var componentInstance = getComponentFlexibleLogicInstance(componentIs, pageInstance, componentId, parentComponentId, initProps, initPropKeys, false, nonEventSize);
                  pageInstance.addComponent(componentInstance, true);
                  componentInstance.onComponentInit(true, true);
                  return pageInstance.renderer.getComponentDerivingData();
              }
          }
      };
      FlexibleClientProxy.prototype.beforeComponentUpdate = function (componentId, partialProps, propsDiffMap) {
          {
              var pageInstance = this.hostPageInstance;
              if (pageInstance) {
                  var componentInstance = pageInstance.getComponentLogicInstance(componentId, true);
                  if (componentInstance) {
                      componentInstance.onComponentDeriveData(partialProps, propsDiffMap, true);
                      return pageInstance.renderer.getComponentDerivingData();
                  }
              }
          }
      };
      FlexibleClientProxy.prototype.writeToHostConsole = function (method, params) {
          var runtime = this.port.getHostRuntime();
          var packageAndRunSceneType = runtime
              ? runtime.getEnv().packageAndRunSceneType
              : this.platform.getPackageAndRunSceneType();
          if (isConsoleAvaliableToDeveloper(packageAndRunSceneType)) {
              this.port.invokeHostPageMethod('hostConsole', [method, params]);
          }
      };
      return FlexibleClientProxy;
  }());

  var FlexibleLocalMessagePort = /** @class */ /*#__PURE__*/ (function () {
      function FlexibleLocalMessagePort(page) {
          this.page = page;
      }
      FlexibleLocalMessagePort.prototype.bindClientProxy = function (clientProxy) {
          this.clientProxy = clientProxy;
      };
      FlexibleLocalMessagePort.prototype.bootstrap = function () {
          return function () { };
      };
      FlexibleLocalMessagePort.prototype.dispose = function () { };
      FlexibleLocalMessagePort.prototype.onRenderInit = function (rType, _, extraConfig) {
          this.clientProxy.initRenderer(rType);
          this.clientProxy.platform.afterRenderInitMessage(extraConfig);
      };
      FlexibleLocalMessagePort.prototype.refresh = function (rawPort) {
          return true;
      };
      FlexibleLocalMessagePort.prototype.restoreState = function (pt) {
          // nothing
      };
      FlexibleLocalMessagePort.prototype.onRenderMount = function (pendingMessages, data, componentStaticInfo, publicMethod, componentInstanceInfo, callback, hostHydrateConfig) {
          if (pendingMessages.length) {
              pendingMessages = pendingMessages.slice();
          }
          this.clientProxy.renderer.onMount(this.page.renderer.component2 ? __assign({}, data) : simpleDeepCopy(data), componentStaticInfo, publicMethod, simpleDeepCopy(componentInstanceInfo), null // H5 和 Native 不需要 Hydrate
          );
          this.clientProxy.platform.afterRenderMountMessage();
          var renderFinishMessage = this.clientProxy.renderer.getPendingMessages();
          var compositeElementMessage = this.clientProxy.renderer.getCompositeElementMessages();
          if (compositeElementMessage) {
              renderFinishMessage[3] = compositeElementMessage[0];
              renderFinishMessage[4] = compositeElementMessage[1];
              renderFinishMessage[5] = compositeElementMessage[2];
          }
          renderFinishMessage[6] = this.clientProxy.renderer.getPerformancePoint();
          this.sendMessageWithoutData(pendingMessages);
          if (callback) {
              callback(renderFinishMessage);
          }
      };
      FlexibleLocalMessagePort.prototype.onRenderDestroy = function () {
          this.clientProxy.dispose();
      };
      FlexibleLocalMessagePort.prototype.reportHydrateReady = function (hydrateState, nextOrderedComponentOffset, targetIds, visualizer) { };
      FlexibleLocalMessagePort.prototype.invokeClientBridgeCall = function (apiName, option, domain, callback) {
          this.clientProxy.invokeClientBridgeCall(apiName, option, domain, callback);
      };
      FlexibleLocalMessagePort.prototype.getExtraInfo4H5Fragment = function () {
          return this.page.context.extraInfo4H5Fragment;
      };
      FlexibleLocalMessagePort.prototype.getHostRuntime = function () {
          return getRuntimeById(this.page.appInstanceId);
      };
      FlexibleLocalMessagePort.prototype.onHostError = function (code, error) {
          // no implement
      };
      FlexibleLocalMessagePort.prototype.addClientRequirement = function (type, args) {
          // no implement
      };
      FlexibleLocalMessagePort.prototype.getClientProxy = function () {
          return this.clientProxy;
      };
      FlexibleLocalMessagePort.prototype.reportClientActionRecords = function () { };
      FlexibleLocalMessagePort.prototype.updateHMR = function (pendingMessages, hash, type, data, componentInstanceInfo) { };
      FlexibleLocalMessagePort.prototype.invokeHMR = function (type, hash, changes) { };
      FlexibleLocalMessagePort.prototype.onHMRUpdated = function (e, hash) { };
      FlexibleLocalMessagePort.prototype.onPageNotFound = function () { };
      FlexibleLocalMessagePort.prototype.onUpdateData = function (pendingMessages, pendingData, componentInstanceInfo, callback) {
          if (pendingMessages.length) {
              pendingMessages = pendingMessages.slice();
          }
          if (!this.page.renderer.component2) {
              pendingData = simpleDeepCopy(pendingData);
              componentInstanceInfo = simpleDeepCopy(componentInstanceInfo);
          }
          this.clientProxy.renderer.onUpdateData(pendingData, componentInstanceInfo);
          var renderFinishMessage = this.clientProxy.renderer.getPendingMessages();
          var compositeElementMessage = this.clientProxy.renderer.getCompositeElementMessages();
          this.sendMessageWithoutData(pendingMessages);
          if (callback) {
              // 这里切换一次异步
              if (compositeElementMessage) {
                  // 如果有 callback， 一并过去
                  renderFinishMessage[3] = compositeElementMessage[0];
                  renderFinishMessage[4] = compositeElementMessage[1];
                  renderFinishMessage[5] = compositeElementMessage[2];
              }
              if (this.page.renderer.component2) {
                  callback(renderFinishMessage);
              }
              else {
                  getRuntimeById(this.page.appInstanceId)
                      .getKernel()
                      .Promise.resolve()
                      .then(function () {
                      callback(renderFinishMessage);
                  });
              }
          }
          else {
              if (compositeElementMessage) {
                  // 如果没 callback，独立发送
                  this.page.proxy.onUpdateCompositeElement(compositeElementMessage);
              }
          }
      };
      FlexibleLocalMessagePort.prototype.invokeHostTargetMethod = function (targetId, method, arg0, callback, extra) {
          var renderFinishMessage = this.clientProxy.renderer.getPendingMessages();
          // 不需要 compositeElementMessage 数据
          this.page.proxy.onReceiveMethodCall([renderFinishMessage, [targetId, method, arg0, extra]], callback);
      };
      FlexibleLocalMessagePort.prototype.invokeHostPageEvent = function (event, type, payload) {
          this.page.proxy.invokeHostPageEvent(event, type, payload);
      };
      FlexibleLocalMessagePort.prototype.invokeHostPageMethod = function (pageMethod, option, callback) {
          this.page.proxy.invokeHostPageMethod(pageMethod, option, callback);
      };
      FlexibleLocalMessagePort.prototype.invokeHostBridgeCallProxy = function (apiName, option, domain, callback) {
          this.page.proxy.invokeHostBridgeCallProxy(apiName, option, domain, callback);
      };
      FlexibleLocalMessagePort.prototype.sendMessageWithoutData = function (pendingMessages) {
          var this$1 = this;

          var sizeOfMessage = pendingMessages.length;
          if (sizeOfMessage) {
              for (var _i = 0, pendingMessages_1 = pendingMessages; _i < pendingMessages_1.length; _i++) {
                  var message = pendingMessages_1[_i];
                  var a = message[0];
                  switch (a) {
                      case 4 /* EAppxWeb2MessageKey4S2CCallback.CallRenderMethod */:
                          {
                              var p = message[1];
                              this$1.clientProxy.platform.invokeRenderMethod(p[0], p[1], message[2]);
                          }
                          break;
                      case 6 /* EAppxWeb2MessageKey4S2CCallback.CallElementMethod */:
                          {
                              var p = message[1];
                              this$1.clientProxy.platform.invokeClientElementMethod(p[0], p[1], p[2], message[2]);
                          }
                          break;
                  }
              }
          }
      };
      FlexibleLocalMessagePort.prototype.appendDynamicMiniExtensionInitialConfig = function (initialConfig) {
          if (initialConfig) {
              this.clientProxy.renderer.appendDynamicMiniExtensionComponentStaticInfo(initialConfig.miniExtensionComponentDef);
          }
      };
      return FlexibleLocalMessagePort;
  }());
  var messagePortImpl = FlexibleLocalMessagePort;
  function createLocalMessagePort(page) {
      return new messagePortImpl(page);
  }

  var FlexibleRemoteHostMessagePort = /** @class */ /*#__PURE__*/ (function () {
      function FlexibleRemoteHostMessagePort(page) {
          this.currentProfileEvent = undefined;
          this.callbackPoll = {};
          this.callbackIdBase = 0;
          this.messageIndex = 0;
          this.sessionId = Date.now();
          this.pendingRequirements = [];
          this.page = page;
          this.onMessage = this.getMessageHandler(this.onMessage);
          var port = page.context.port;
          port.onmessage = this.onMessage;
          this.port = port;
          this.shouldSerializeMessage = !!getRuntimeById(page.appInstanceId)
              .getSwitchManager()
              .get("stringifyRemotePortPendingMessages" /* ESharedAppxSwitchManagerName.StringifyRemotePortPendingMessages */);
      }
      FlexibleRemoteHostMessagePort.prototype.restoreState = function (pt) {
          this.sessionId = pt.sessionId;
          this.messageIndex = pt.messageIndex;
          this.callbackIdBase = pt.callbackIdBase;
          // not restore callback pool
      };
      FlexibleRemoteHostMessagePort.prototype.refresh = function (rawPort) {
          if (isPreConnectMessagePort(this.port)) {
              // 是一个预分配端口实际建链，只做链接建立
              this.port.connect(rawPort);
              // 建立完成后 this.port 就不再是 PreConnect 了
              return false;
          }
          else {
              // 是 Client 重刷新建链
              this.page.context.port = rawPort;
              this.port = rawPort;
              rawPort.onmessage = this.onMessage;
              this.pendingRequirements = [];
              this.callbackPoll = {};
              this.callbackIdBase = 0;
              this.messageIndex = 0;
              this.sessionId = Date.now();
              return true;
          }
      };
      FlexibleRemoteHostMessagePort.prototype.onRenderInit = function (rType, switchManagerConfig, extraConfig) {
          var payload = {
              a: 1 /* EAppxWeb2MessageKey4S2CCallback.RenderInit */,
              p: [rType, kConsistAppxVersion, switchManagerConfig, extraConfig],
          };
          this.port.postMessage({
              i: ++this.messageIndex,
              p: payload,
              r: this.getClientPendingRequirements(),
              sn: this.sessionId,
              t: 2 /* EAppxWeb2MessageKey.S2C_CallbackRequest */,
          });
      };
      FlexibleRemoteHostMessagePort.prototype.getProfileEvent = function () {
          // 什么都不用做，在拦截的时候会指定返回值
      };
      FlexibleRemoteHostMessagePort.prototype.onHostError = function (code, error) {
          var payload = {
              a: 8 /* EAppxWeb2MessageKey4S2CCallback.HostError */,
              p: [code, error],
          };
          this.port.postMessage({
              i: ++this.messageIndex,
              p: payload,
              // 异常不被阻塞
              r: false,
              sn: this.sessionId,
              t: 2 /* EAppxWeb2MessageKey.S2C_CallbackRequest */,
          });
      };
      FlexibleRemoteHostMessagePort.prototype.onRenderMount = function (pendingMessages, data, componentStaticInfo, publicMethod, componentInstanceInfo, callback, hostHydrateConfig) {
          var mountData = [
              data,
              componentStaticInfo,
              publicMethod,
              componentInstanceInfo,
              this.getHydrateConfig(hostHydrateConfig) ];
          var mountPayload = {
              a: 2 /* EAppxWeb2MessageKey4S2CCallback.RenderMount */,
              c: callback ? this.getHostCallback(callback) : undefined,
              s: JSON.stringify(mountData),
          };
          var renderMountMessage = {
              e: this.getProfileEvent(),
              i: ++this.messageIndex,
              p: mountPayload,
              r: this.getClientPendingRequirements(),
              sn: this.sessionId,
              t: 2 /* EAppxWeb2MessageKey.S2C_CallbackRequest */,
          };
          this.port.postMessage(renderMountMessage);
          this.sendMessageWithoutData(pendingMessages);
      };
      FlexibleRemoteHostMessagePort.prototype.onRenderDestroy = function () {
          // do nothing
      };
      FlexibleRemoteHostMessagePort.prototype.reportHydrateReady = function (hydrateState, nextOrderedComponentOffset, targetIds, visualizer) {
          var payload = {
              a: 9 /* EAppxWeb2MessageKey4S2CCallback.HydrateReady */,
              p: [hydrateState, nextOrderedComponentOffset, targetIds, visualizer],
          };
          this.port.postMessage({
              i: ++this.messageIndex,
              p: payload,
              r: this.getClientPendingRequirements(),
              sn: this.sessionId,
              t: 2 /* EAppxWeb2MessageKey.S2C_CallbackRequest */,
          });
      };
      FlexibleRemoteHostMessagePort.prototype.addClientRequirement = function (type, args) {
          // 往当前待发送队列中添加
          this.pendingRequirements.push({
              p: args,
              t: type,
          });
      };
      FlexibleRemoteHostMessagePort.prototype.onUpdateData = function (pendingMessages, pendingData, componentInstanceInfo, callback) {
          var updateData = [
              pendingData,
              componentInstanceInfo ];
          var updatePayload = {
              a: 3 /* EAppxWeb2MessageKey4S2CCallback.UpdateData */,
              c: callback ? this.getHostCallback(callback) : undefined,
              s: JSON.stringify(updateData),
          };
          var updateMessage = {
              e: this.getProfileEvent(),
              i: ++this.messageIndex,
              p: updatePayload,
              r: this.getClientPendingRequirements(),
              sn: this.sessionId,
              t: 2 /* EAppxWeb2MessageKey.S2C_CallbackRequest */,
          };
          this.port.postMessage(updateMessage);
          this.sendMessageWithoutData(pendingMessages);
      };
      FlexibleRemoteHostMessagePort.prototype.invokeClientBridgeCall = function (apiName, option, domain, callback) {
          var payload = {
              a: 7 /* EAppxWeb2MessageKey4S2CCallback.ClientBridgeCall */,
              c: callback ? this.getHostCallback(callback) : undefined,
              p: [apiName, option],
          };
          this.port.postMessage({
              i: ++this.messageIndex,
              p: payload,
              r: this.getClientPendingRequirements(),
              sn: this.sessionId,
              t: 2 /* EAppxWeb2MessageKey.S2C_CallbackRequest */,
          });
      };
      FlexibleRemoteHostMessagePort.prototype.sendMessageWithoutData = function (pendingMessages) {
          var this$1 = this;

          var sizeOfMessage = pendingMessages.length;
          if (sizeOfMessage) {
              var payload = new Array(sizeOfMessage);
              var shouldSerializeMessage = this.shouldSerializeMessage;
              for (var index = 0; index < sizeOfMessage; index++) {
                  var message = pendingMessages[index];
                  var callback = message[2] ? this$1.getHostCallback(message[2], true) : undefined;
                  payload[index] = shouldSerializeMessage
                      ? {
                          a: message[0],
                          c: callback,
                          s: JSON.stringify(message[1]),
                      }
                      : {
                          a: message[0],
                          c: callback,
                          p: message[1],
                      };
              }
              var batchedMessage = {
                  e: this.getProfileEvent(),
                  p: payload,
                  r: this.getClientPendingRequirements(),
                  t: 6 /* EAppxWeb2MessageKey.S2C_BatchedCallbackRequest */,
              };
              this.port.postMessage(batchedMessage);
          }
      };
      FlexibleRemoteHostMessagePort.prototype.appendDynamicMiniExtensionInitialConfig = function (initialConfig) {
          if (initialConfig) {
              var keys = initialConfig.keys, miniExtensionComponentDef = initialConfig.miniExtensionComponentDef;
              if (keys && miniExtensionComponentDef) {
                  var payload = this
                      .shouldSerializeMessage
                      ? {
                          a: 11 /* EAppxWeb2MessageKey4S2CCallback.AppendDynamicMiniExtensionComponentStaticInfo */,
                          s: JSON.stringify([miniExtensionComponentDef]),
                      }
                      : {
                          a: 11 /* EAppxWeb2MessageKey4S2CCallback.AppendDynamicMiniExtensionComponentStaticInfo */,
                          p: [miniExtensionComponentDef],
                      };
                  this.port.postMessage({
                      i: ++this.messageIndex,
                      p: payload,
                      r: this.getClientPendingRequirements(),
                      sn: this.sessionId,
                      t: 2 /* EAppxWeb2MessageKey.S2C_CallbackRequest */,
                  });
              }
          }
      };
      FlexibleRemoteHostMessagePort.prototype.getMessageHandler = function (handler) {
          return handler.bind(this);
      };
      FlexibleRemoteHostMessagePort.prototype.getClientProxy = function () { };
      FlexibleRemoteHostMessagePort.prototype.updateHMR = function (pendingMessages, hash, type, data, componentInstanceInfo) {
          var mountPayload = {
              a: 12 /* EAppxWeb2MessageKey4S2CCallback.HMRInvokeClientUpdate */,
              c: undefined,
              s: JSON.stringify([hash, type, data, componentInstanceInfo]),
          };
          var renderMountMessage = {
              i: ++this.messageIndex,
              p: mountPayload,
              sn: this.sessionId,
              t: 2 /* EAppxWeb2MessageKey.S2C_CallbackRequest */,
          };
          this.port.postMessage(renderMountMessage);
          this.sendMessageWithoutData(pendingMessages);
      };
      FlexibleRemoteHostMessagePort.prototype.getClientPendingRequirements = function () {
          var requirements = this.pendingRequirements;
          if (requirements && requirements.length) {
              this.pendingRequirements = [];
              return requirements;
          }
          else {
              return undefined;
          }
      };
      FlexibleRemoteHostMessagePort.prototype.getHostCallback = function (cb, errorFormat) {
          if (typeof cb === 'function') {
              if (errorFormat) {
                  cb.errorFormat = true;
              }
              var currentCallbackId = ++this.callbackIdBase;
              this.callbackPoll[currentCallbackId] = cb;
              return currentCallbackId;
          }
      };
      FlexibleRemoteHostMessagePort.prototype.responseCallback = function (callbackId, action, payload) {
          // 不需要，只有 HostBridgeCall 使用
          // if (payload && payload[0] && payload[0] instanceof Error) {
          //   payload[0] = payload[0].message;
          // }
          this.port.postMessage({
              i: ++this.messageIndex,
              p: {
                  c: callbackId,
                  p: payload,
              },
              r: false,
              sn: this.sessionId,
              t: 5 /* EAppxWeb2MessageKey.C2S_CallbackResponse */,
          });
      };
      FlexibleRemoteHostMessagePort.prototype.onMessage = function (event) {
          // 先看这个能不能收到
          var eventData = event.data;
          if (eventData.t === 3 /* EAppxWeb2MessageKey.S2C_CallbackResponse */) {
              var payload = eventData.p;
              // switch(payload.c)
              var callbackId = payload.c;
              var fn = this.callbackPoll[callbackId];
              if (typeof fn === 'function') {
                  this.callbackPoll[callbackId] = null;
                  if (fn.errorFormat) {
                      var p = payload.p;
                      fn(p && p[0] ? new Error(p[0]) : null, p[1]);
                  }
                  else {
                      fn(payload.p);
                  }
              }
          }
          else if (eventData.t === 4 /* EAppxWeb2MessageKey.C2S_CallbackRequest */) {
              var payload = eventData.p;
              var callback = payload.c ? this.responseCallback.bind(this, payload.c, payload.a) : null;
              // 开始派发消息
              switch (payload.a) {
                  case 3 /* EAppxWeb2MessageKey4C2SCallback.UpdateCompositeElement */:
                      {
                          var $payload = payload
                              .p;
                          this.page.proxy.onUpdateCompositeElement($payload);
                      }
                      break;
                  case 6 /* EAppxWeb2MessageKey4C2SCallback.HMRInvokeHostUpdate */:
                      {
                          var $payload = payload
                              .p;
                          var runtime = getRuntimeById(this.page.appInstanceId);
                          var hmrUpdateManager = runtime.getHMRUpdateManager();
                          if (hmrUpdateManager) {
                              hmrUpdateManager.registerClientRequest($payload[0], $payload[1], $payload[2]);
                          }
                      }
                      break;
                  case 7 /* EAppxWeb2MessageKey4C2SCallback.HMRClientUpdated */:
                      {
                          var $payload = payload
                              .p;
                          var runtime = getRuntimeById(this.page.appInstanceId);
                          var hmrUpdateManager = runtime.getHMRUpdateManager();
                          if (hmrUpdateManager) {
                              hmrUpdateManager.invokeUpdated($payload[0] ? new Error($payload[0]) : null, $payload[1]);
                          }
                      }
                      break;
                  case 1 /* EAppxWeb2MessageKey4C2SCallback.CallMethod */:
                      {
                          var $payload = payload
                              .p;
                          this.page.proxy.onReceiveMethodCall($payload, callback);
                      }
                      break;
                  case 2 /* EAppxWeb2MessageKey4C2SCallback.HostBridgeCall */:
                      {
                          var $payload = payload
                              .p;
                          this.page.proxy.invokeHostBridgeCallProxy($payload[0], $payload[1], $payload[2], callback);
                      }
                      break;
                  case 4 /* EAppxWeb2MessageKey4C2SCallback.HostPageMethod */:
                      {
                          var $payload = payload
                              .p;
                          this.page.proxy.invokeHostPageMethod($payload[0], $payload[1], callback);
                      }
                      break;
                  case 5 /* EAppxWeb2MessageKey4C2SCallback.HostPageEvent */:
                      {
                          var $payload = payload
                              .p;
                          this.page.proxy.invokeHostPageEvent($payload[0], $payload[1], $payload[2]);
                      }
                      break;
              }
          }
      };
      FlexibleRemoteHostMessagePort.prototype.getHydrateConfig = function (hydrate) {
          if (hydrate) {
              return [
                  /* state */ hydrate.state,
                  /* callback */ this.getHostCallback(hydrate.callback, true),
                  /* crossVersion */ hydrate.crossVersion ];
          }
      };
      return FlexibleRemoteHostMessagePort;
  }());

  function createFlexibleHostMessagePort(page) {
      if ( isPageFlexibleInstanceProxyTypeRemote(page)) {
          return new FlexibleRemoteHostMessagePort(page);
      }
      if ( isPageFlexibleInstanceProxyTypeLocal(page)) {
          var localPort = createLocalMessagePort(page);
          var clientProxy = new FlexibleClientProxy({
              Vue: page.context.Vue,
              appInstanceId: page.appInstanceId,
              bridge: page.context.bridge,
              meta: void 0,
              mountRoot: page.context.mountRoot,
              pageId: page.pageId,
              pagePath: page.pagePath,
              port: void 0,
              queryString: void 0,
              viewId: void 0,
          }, 1 /* ESharedAppxFlexibleProxyType.Local */, localPort);
          localPort.bindClientProxy(clientProxy);
          clientProxy.bootstrap();
          return localPort;
      }
  }

  var FlexibleHostProxy = /** @class */ /*#__PURE__*/ (function () {
      function FlexibleHostProxy(page) {
          this.clientPlugins = createSet();
          this.page = page;
          this.pageId = page.pageId;
          this.pType = page.pType;
          this.port = createFlexibleHostMessagePort(page);
          var behavior = getRuntimeById(page.appInstanceId)
              .getBehaviorManager()
              .get("fixEventTargetId" /* ESharedAppxSwitchManagerName.FixEventTargetId */);
          this.patchEventTargetId =
              behavior.report || behavior.standard ? patchZRuntimeElementInstanceEventTargetId.bind(null, behavior) : noop;
      }
      FlexibleHostProxy.prototype.bootstrap = function () { };
      FlexibleHostProxy.prototype.dispose = function () { };
      FlexibleHostProxy.prototype.refresh = function (rawPort) {
          var shouldReboot = this.port.refresh(rawPort);
          if (shouldReboot) {
              // client 信息已丢失
              this.clientPlugins.clear();
          }
          return shouldReboot;
      };
      FlexibleHostProxy.prototype.onReceiveMethodCall = function (payload, callback) {
          var renderMessage = payload[0], _a = payload[1], targetId = _a[0], method = _a[1], arg0 = _a[2], extra = _a[3];
          this.page.renderer.onClientResponseCallback(null, renderMessage);
          this.invokeHostTargetMethod(targetId, method, arg0, callback, extra);
      };
      FlexibleHostProxy.prototype.onUpdateCompositeElement = function (payload) {
          if (payload) {
              this.page.renderer.updateCompositeElement(payload[0], payload[1], payload[2]);
          }
      };
      FlexibleHostProxy.prototype.prepareClientRequirement = function () {
          var runtime = getRuntimeById(this.page.appInstanceId);
          var pageStateManager = runtime.getPageStateManager();
          if (pageStateManager) {
              pageStateManager.addRequirement(this.page);
          }
      };
      FlexibleHostProxy.prototype.addRequirement4Plugin = function (pluginId) {
          if (!this.clientPlugins.has(pluginId)) {
              this.port.addClientRequirement(0 /* EAppxWeb2MessageRequirementType.EnsureExtension */, [pluginId, {}]);
              this.clientPlugins.add(pluginId);
          }
      };
      FlexibleHostProxy.prototype.addRequirement = function (requirementType, options) {
          this.port.addClientRequirement(requirementType, [options, {}]);
      };
      FlexibleHostProxy.prototype.reportHostErrorToClient = function (code, error) {
          this.port.onHostError(code, error);
      };
      FlexibleHostProxy.prototype.invokeClientElementMethod = function (attributeId, method, args, callback) {
          this.page.renderer.pushMessage(6 /* EAppxWeb2MessageKey4S2CCallback.CallElementMethod */, [attributeId, method, args], callback);
      };
      FlexibleHostProxy.prototype.invokeHostPageMethod = function (pageMethod, option, callback) {
          var methods = appxHostMethods;
          var method = methods[pageMethod];
          if (method) {
              method(this.page, option, callback);
          }
      };
      FlexibleHostProxy.prototype.invokeRenderMethod = function (method, args, callback) {
          this.page.renderer.pushMessage(4 /* EAppxWeb2MessageKey4S2CCallback.CallRenderMethod */, [method, args], callback);
      };
      FlexibleHostProxy.prototype.invokeRenderMethodImmediately = function (method, args, callback) {
          var pushMessage = [
              [4 /* EAppxWeb2MessageKey4S2CCallback.CallRenderMethod */, [method, args], callback] ];
          this.port.sendMessageWithoutData(pushMessage);
      };
      FlexibleHostProxy.prototype.getSubPackageManager = function () {
          return getRuntimeById(this.page.appInstanceId).getSubPackageManager();
      };
      FlexibleHostProxy.prototype.getMiniExtensionManager = function () {
          return getRuntimeById(this.page.appInstanceId).getMiniExtensionManager();
      };
      FlexibleHostProxy.prototype.invokeClientBridgeCall = function (apiName, option, domain, callback) {
          // 发消息
          this.port.invokeClientBridgeCall(apiName, option, domain, callback);
      };
      FlexibleHostProxy.prototype.invokeHostPageEvent = function (event, type, payload) {
          var page = this.page;
          page.invokePageEvent(event, type, payload);
      };
      FlexibleHostProxy.prototype.invokeHostBridgeCallProxy = function (apiName, option, domain, callback) {
          if (domain === null || domain === undefined) {
              /**
               * render 和 worker 不一致的时候会送过来 undefined，只能拿 defaultScope 兜底了
               */
              domain = kBridgeAppxDomain4Empty;
          }
          var page = this.page;
          getRuntimeById(page.appInstanceId).getBridge().getScope(domain).call(apiName, option, callback, page.pageId);
      };
      FlexibleHostProxy.prototype.getEventTaskManager = function () {
          var runtime = getRuntimeById(this.page.appInstanceId);
          var event = runtime.getBridge().event;
          return event.taskManager;
      };
      FlexibleHostProxy.prototype.invokeHostTargetMethod = function (targetId, method, arg0, callback, extra) {
          if (targetId === undefined) {
              return;
          }
          var instance = this.page.logics[targetId];
          if (instance) {
              if (arg0 && extra) {
                  this.patchEventTargetId(extra, arg0);
              }
              var result = void 0;
              if (isEventTrusted(extra, 'tap')) {
                  result = this.page.getTapMarkManager().wrapTapMark(function () {
                      return instance.invokePublicMethod(method, arg0);
                  });
              }
              else {
                  result = instance.invokePublicMethod(method, arg0);
              }
              if (callback) {
                  callback(result);
              }
          }
      };
      FlexibleHostProxy.prototype.invokeHMRRemount = function (hash, pageChanges, componentChanges) {
          var currentPagePath = this.page.pagePath;
          if (pageChanges.has(currentPagePath)) {
              this.page.renderer.onRemount(hash);
              return;
          }
          var componentPoll = this.page.logics;
          if (componentPoll.some(function (instance) { return instance && componentChanges.has(instance.componentPath); })) {
              this.page.renderer.onRemount(hash);
          }
      };
      return FlexibleHostProxy;
  }());

  function createPageFlexibleInstanceBoundContext(pageInstance, method, option, componentId) {
      var componentInstance;
      if (componentId) {
          componentInstance = pageInstance.logics[componentId];
      }
      var bridgeInstance = getRuntimeById(pageInstance.appInstanceId)
          .getBridge()
          .getScopeByProviderInfo((componentInstance || pageInstance).getProviderInfo());
      if (bridgeInstance) {
          var pagePublicInstance = pageInstance.getPageLogicInstance().publicInstance;
          return bridgeInstance
              .call4PublicNamed(method, __assign(__assign({}, option), { page: pagePublicInstance, strict: true }))
              .in(componentInstance ? componentInstance.publicInstance : pagePublicInstance);
      }
  }

  var PageFlexibleInstance = /** @class */ /*#__PURE__*/ (function () {
      function PageFlexibleInstance(appInstanceId, pagePath, pageId, context, proxyType, rendererType) {
          var _a;
          this.pType = proxyType;
          this.rType = rendererType;
          this.appInstanceId = appInstanceId;
          this.pagePath = pagePath;
          this.pageId = pageId;
          this.context = context;
          this.tapMarkManager = new TapMarkManager();
          this.backEventManager = new BackEventManager(this);
          if (isPluginPrivateProtocolPath(pagePath)) {
              var typedString4PluginPrivatePath = {
                  type: 0 /* EMiniExtensionStringType.plugin_private_$_id_$_resolved_path */,
                  value: pagePath,
              };
              var result = get_extensionId_resolvedPath(typedString4PluginPrivatePath);
              if (result) {
                  this.providerInfo = createProviderInfo4MiniExtension(result.extensionId.value, result.resolvedPath.value);
              }
              else {
                  this.providerInfo = createProviderInfo4MainApp(pagePath);
              }
          }
          else {
              this.providerInfo = createProviderInfo4MainApp(pagePath);
          }
          this.proxy = new FlexibleHostProxy(this);
          if (rendererType === 4 /* ESharedAppxFlexibleRendererType.SimpleAsync */) {
              debug$1$1(function () { return "[APPX] createRenderInstance ".concat(pagePath, ":").concat(pageId); });
              this.renderer = new SimpleAsyncHostRenderer(this);
          }
          else if (rendererType === 8 /* ESharedAppxFlexibleRendererType.SimpleSync */) {
              {
                  debug$1$1(function () { return "[APPX] createRenderInstance(SimpleSync) ".concat(pagePath, ":").concat(pageId); });
                  this.renderer = new SimpleSyncHostRenderer(this);
              }
          }
          else if (rendererType === 1 /* ESharedAppxFlexibleRendererType.RunloopSync */) {
              {
                  debug$1$1(function () { return "[APPX] createRenderInstance(RunloopSync) ".concat(pagePath, ":").concat(pageId); });
                  this.renderer = new RunloopSyncHostRenderer(this);
              }
          }
          else if (rendererType === 2 /* ESharedAppxFlexibleRendererType.RunloopAsync */) {
              {
                  debug$1$1(function () { return "[APPX] createRenderInstance(RunloopAsync) ".concat(pagePath, ":").concat(pageId); });
                  this.renderer = new RunloopAsyncHostRenderer(this);
              }
          }
          this.logics = [];
          debug$1$1(function () { return "[APPX] createPageLogicInstance ".concat(pagePath, ":").concat(pageId); });
          this.logics[0] = createPageFlexibleLogicInstance(this);
          this.plugin = {
              jscontext: null,
              share: null,
          };
          this.lifecycle = new PageLifecycleManager(this);
          this.initTime = Date.now();
          this.setIsHoistEmbededWebView((_a = context.port) === null || _a === void 0 ? void 0 : _a.hoist);
      }
      PageFlexibleInstance.prototype.getTapMarkManager = function () {
          return this.tapMarkManager;
      };
      PageFlexibleInstance.prototype.getBackEventManager = function () {
          return this.backEventManager;
      };
      PageFlexibleInstance.prototype.setNativeBindingInstance = function (nativeBindingInstanceType, id, nativeBindingInstance) {
          if (!this.nativeBindingInstanceMap) {
              this.nativeBindingInstanceMap = createMap();
          }
          if (!this.nativeBindingInstanceMap.has(nativeBindingInstanceType)) {
              this.nativeBindingInstanceMap.set(nativeBindingInstanceType, createMap());
          }
          this.nativeBindingInstanceMap.get(nativeBindingInstanceType).set(id, nativeBindingInstance);
      };
      PageFlexibleInstance.prototype.getNativeBindingInstance = function (nativeBindingInstanceType, id) {
          if (this.nativeBindingInstanceMap && this.nativeBindingInstanceMap.has(nativeBindingInstanceType)) {
              return this.nativeBindingInstanceMap.get(nativeBindingInstanceType).get(id);
          }
          else {
              return undefined;
          }
      };
      PageFlexibleInstance.prototype.enableSnapshot = function (option, callback) {
          this.renderer.setupSnapshot(option, callback, this.lifecycle.state === "Inited" /* EPageLifecycleState.INITED */);
      };
      PageFlexibleInstance.prototype.reportSnapshot = function (option) {
          this.renderer.performSnapshot(option);
      };
      PageFlexibleInstance.prototype.getSnapshotDebugInfo = function () {
          return this.renderer.getSnapshotDebugInfo();
      };
      PageFlexibleInstance.prototype.onReConnect = function (port) {
          if (port.hoist) {
              // prerun 时没有启动同层
              // 后收到消息后真正建连
              info$1$1('[APPX][HoistEmbededWebView] reconnect');
              this.setIsHoistEmbededWebView(true);
              this.beforeClientUpdate();
          }
          var shouldReboot = this.proxy.refresh(port);
          if (shouldReboot) {
              // 在调用 组件销毁之前，先抑制 renderer 处理data，清空并且禁用消息处理
              this.renderer.dispose();
              this.clear();
              this.renderer.refresh();
              this.lifecycle.refresh();
              this.logics[0].dispose();
              this.logics[0] = createPageFlexibleLogicInstance(this);
              this.logics[0].bootstrap();
          }
      };
      PageFlexibleInstance.prototype.hasPageLoaded = function () {
          return this.lifecycle.state !== "Inited" /* EPageLifecycleState.INITED */;
      };
      PageFlexibleInstance.prototype.hasPageUnloaded = function () {
          return this.lifecycle.state === "Unloaded" /* EPageLifecycleState.UNLOADED */;
      };
      PageFlexibleInstance.prototype.addComponent = function (instance, noDidMount) {
          debug$1$1(function () { return "[APPX] addComponent: ".concat(instance.id); });
          var componentId = instance.id;
          var componentPoll = this.logics;
          if (!componentPoll[componentId]) {
              componentPoll[componentId] = instance;
              if (!noDidMount) {
                  instance.onComponentMounted();
              }
          }
          else {
              throw getError4ComponentActionFail('add', componentId);
          }
      };
      PageFlexibleInstance.prototype.getComponentLogicInstance = function (componentId, noerror) {
          debug$1$1(function () { return "[APPX] getComponentLogicInstance: ".concat(componentId); });
          var componentPoll = this.logics;
          var instance = componentPoll[componentId];
          if (instance) {
              return instance;
          }
          else {
              if (!noerror) {
                  throw getError4ComponentActionFail('get', componentId);
              }
          }
      };
      PageFlexibleInstance.prototype.removeComponent = function (componentId, noDidUnmount) {
          var componentPoll = this.logics;
          var instance = componentPoll[componentId];
          if (instance) {
              this.removeComponentInstance(instance, noDidUnmount);
              componentPoll[componentId] = null;
          }
      };
      PageFlexibleInstance.prototype.getPageLogicInstance = function () {
          return this.logics[0];
      };
      PageFlexibleInstance.prototype.getPagePublicInstanceProxy = function () {
          if (!this.logicProxy) {
              var publicInstance = this.getPageLogicInstance().publicInstance;
              this.logicProxy = Object.create({
                  route: publicInstance.route,
              });
              this.logicProxy.$id = publicInstance.$id;
              this.logicProxy.$viewId = publicInstance.$viewId;
              this.logicProxy.$batchedUpdates = publicInstance.$batchedUpdates;
          }
          return this.logicProxy;
      };
      PageFlexibleInstance.prototype.getTabBar = function () {
          var tabBarInstance = this.logics[1];
          return tabBarInstance && tabBarInstance.componentPath === "/customize-tab-bar/index" /* ECustomizeTabBar.TabBarPath */
              ? tabBarInstance.publicInstance
              : undefined;
      };
      PageFlexibleInstance.prototype.getPagePublicInstanceForComponent = function (componentProviderInfo) {
          var publicInstance = this.getPageLogicInstance().publicInstance;
          if (!componentProviderInfo || isProviderInfoSameOrigin(componentProviderInfo, this.providerInfo)) {
              return publicInstance;
          }
          return {
              $batchedUpdates: publicInstance.$batchedUpdates,
              $id: publicInstance.$id,
              $viewId: publicInstance.$viewId,
          };
      };
      PageFlexibleInstance.prototype.onPagePause = function () {
          this.lifecycle.onPagePause();
      };
      PageFlexibleInstance.prototype.onPageResume = function () {
          this.lifecycle.onPageResume();
      };
      PageFlexibleInstance.prototype.onPageWillUnload = function () {
          this.lifecycle.onPageWillUnlaod();
      };
      PageFlexibleInstance.prototype.onPageUnload = function () {
          var successUnload = this.lifecycle.onPageUnload();
          if (successUnload) {
              getRuntimeById(this.appInstanceId).getPageManager().destroyInstance(this.pageId);
          }
      };
      PageFlexibleInstance.prototype.onPageRefresh = function () {
          // this.logic.page.callAction('page', 'RenderRefresh');
      };
      PageFlexibleInstance.prototype.getEngineType = function () {
          return 1 /* ESharedAppxPageEngineType.WebEngine */;
      };
      PageFlexibleInstance.prototype.onPageNeedRenderRefresh = function () {
          this.lifecycle.onPageNeedRenderRefresh();
      };
      PageFlexibleInstance.prototype.bootstrap = function (tabProps) {
          debug$1$1(function () { return '[APPX] PageBaseInstance bootstrap'; });
          this.loadTime = Date.now();
          this.proxy.bootstrap();
          this.renderer.bootstrap();
          this.logics[0].bootstrap(tabProps);
          this.plugin.share = createPagePluginShare(this.appInstanceId, this.pageId);
          if (this.plugin.share) {
              this.plugin.share.bootstrap();
          }
      };
      PageFlexibleInstance.prototype.dispose = function () {
          this.disposing = true;
          if (this.plugin.share) {
              this.plugin.share.dispose();
              this.plugin.share = null;
          }
          this.clear();
          this.renderer.dispose();
          this.logics[0].dispose();
          this.lifecycle.dispose();
          this.backEventManager.dispose();
      };
      PageFlexibleInstance.prototype.setIsFirstPage = function () {
          this.isFirstPage = true;
      };
      PageFlexibleInstance.prototype.getIsFirstPage = function () {
          return this.isFirstPage;
      };
      PageFlexibleInstance.prototype.setTabQuery = function (tabQuery) {
          this.context.tabQuery = tabQuery;
      };
      PageFlexibleInstance.prototype.getQuery = function () {
          return this.context.tabQuery || this.context.query;
      };
      PageFlexibleInstance.prototype.setIsFromResumeReLaunch = function () {
          this.isFromResumeReLaunch = true;
      };
      PageFlexibleInstance.prototype.getIsFromResumeReLaunch = function () {
          return this.isFromResumeReLaunch;
      };
      PageFlexibleInstance.prototype.setIsNextFromResumeReLaunch = function () {
          this.isNextFromResumeReLaunch = true;
      };
      PageFlexibleInstance.prototype.getIsNextFromResumeReLaunch = function () {
          return this.isNextFromResumeReLaunch;
      };
      PageFlexibleInstance.prototype.setLastPagePath = function (pagePath) {
          // 只有初始化时可以设置
          if (this.lifecycle.state === "Inited" /* EPageLifecycleState.INITED */) {
              this.lastPagePath = pagePath;
          }
      };
      PageFlexibleInstance.prototype.setOpenerEventChannel = function (getOpenerEventChannel) {
          this.openerEventChannel = [false, getOpenerEventChannel];
      };
      PageFlexibleInstance.prototype.getLastPagePath = function () {
          return this.lastPagePath;
      };
      PageFlexibleInstance.prototype.onTabItemTap = function (tabProps) {
          var state = this.lifecycle.state;
          if (!(state === "Unloaded" /* EPageLifecycleState.UNLOADED */ || state === "WILL_UNLOAD" /* EPageLifecycleState.WILL_UNLOAD */)) {
              this.invokePageEvent("onTabItemTap" /* ESharedAppxEvent.Page.onTabItemTap */, 3 /* ISharedAppxPageBaseInstanceEventInvokeType.LegacyAndEvents */, tabProps);
          }
      };
      PageFlexibleInstance.prototype.hasMethodOnPagePublicInstance = function (method) {
          var page = this.logics[0];
          if (page) {
              var fn = page.publicInstance[method];
              return typeof fn === 'function';
          }
          return false;
      };
      PageFlexibleInstance.prototype.hasEventOnPagePublicInstance = function (method) {
          var page = this.logics[0];
          if (page) {
              var events = page.publicInstance.events;
              if (!events) {
                  return false;
              }
              var fn = events[method];
              return typeof fn === 'function';
          }
          return false;
      };
      PageFlexibleInstance.prototype.reportHostErrorToClient = function (code, error) {
          this.proxy.reportHostErrorToClient(code, error);
      };
      PageFlexibleInstance.prototype.invokeRenderMethod = function (method, args, callback) {
          this.proxy.invokeRenderMethod(method, args, callback);
      };
      PageFlexibleInstance.prototype.invokeRenderMethodImmediately = function (method, args, callback) {
          this.proxy.invokeRenderMethodImmediately(method, args, callback);
      };
      PageFlexibleInstance.prototype.invokeClientElementMethod = function (attributeId, method, args, callback) {
          this.proxy.invokeClientElementMethod(attributeId, method, args, callback);
      };
      PageFlexibleInstance.prototype.invokePageEvent = function (event, type, payload) {
          // 后面再支持 page.events 对象
          var renderer = this.renderer;
          var logics = this.logics;
          var pageLogicInstance = logics[0];
          if (pageLogicInstance) {
              renderer.enterBatching();
              for (var i = 1; i < logics.length; i++) {
                  var componentInstance = logics[i];
                  if (componentInstance &&
                      componentInstance.publicOptions.pageEvents &&
                      componentInstance.publicOptions.pageEvents[event]) {
                      componentInstance.invokePageEventToComponent(event, payload);
                  }
              }
              // tslint:disable no-bitwise
              if (type & 1 /* ISharedAppxPageBaseInstanceEventInvokeType.LegacyPlain */) {
                  pageLogicInstance.invokePublicMethod(event, payload);
              }
              if (type & 2 /* ISharedAppxPageBaseInstanceEventInvokeType.EventsNested */) {
                  // 执行 page.events.xxx 方法
                  pageLogicInstance.invokeEventMethod(event, payload);
              }
              // tslint:enable no-bitwise
              renderer.exitBatching();
          }
      };
      PageFlexibleInstance.prototype.setState = function (nextState, payload) {
          this.lifecycle.setState(nextState, payload);
      };
      PageFlexibleInstance.prototype.getState = function () {
          return this.lifecycle.state;
      };
      PageFlexibleInstance.prototype.notifyFragmentSwitchFlush = function (mainCacheKey) {
          this.renderer.notifyFragmentSwitchFlush(mainCacheKey);
      };
      PageFlexibleInstance.prototype.whenCompositeElementReady = function (elementId, callback) {
          var compositeHub = this.renderer.compositeHub;
          if (compositeHub) {
              compositeHub.whenElementReady(elementId, callback);
          }
          else {
              callback();
          }
      };
      PageFlexibleInstance.prototype.getClientPerformancePoint = function () {
          return this.clientPerformance;
      };
      PageFlexibleInstance.prototype.setClientPerformancePoint = function (clientPerformance) {
          this.clientPerformance = clientPerformance;
      };
      PageFlexibleInstance.prototype.loadDynamicMiniExtensionComponentStaticInfo = function (miniExtensionId) {
          this.renderer.loadDynamicMiniExtensionInitialConfig(miniExtensionId, true);
      };
      PageFlexibleInstance.prototype.getProviderInfo = function () {
          return this.providerInfo;
      };
      PageFlexibleInstance.prototype.getOpenerEventChannel = function () {
          var openerEventChannel = this.openerEventChannel;
          if (!openerEventChannel) {
              openerEventChannel = this.openerEventChannel = [
                  true,
                  {
                  // 比如首页、Tab，或者非通过 navigateTo 打开的二级页
                  } ];
          }
          if (openerEventChannel[0] === true) {
              getRuntimeById(this.appInstanceId)
                  .getBehaviorManager()
                  .warn('当前页并非通过 my.navigateTo() 打开，请检查 getOpenerEventChannel() 的调用');
              return openerEventChannel[1];
          }
          return openerEventChannel[1]().getOpenedPort().getPublicInstance();
      };
      PageFlexibleInstance.prototype.createIntersectionObserver = function (option, componentId) {
          return createPageFlexibleInstanceBoundContext(this, 'createIntersectionObserver', option, componentId);
      };
      PageFlexibleInstance.prototype.createSelectorQuery = function (option, componentId) {
          return createPageFlexibleInstanceBoundContext(this, 'createSelectorQuery', option, componentId);
      };
      PageFlexibleInstance.prototype.selectComponent = function (selector, targetId) {
          if (targetId === void 0) { targetId = 0; }
          return selector ? this.renderer.selectComponentRef(selector, targetId) : null;
      };
      PageFlexibleInstance.prototype.selectAllComponents = function (selector, targetId) {
          if (targetId === void 0) { targetId = 0; }
          return selector ? this.renderer.selectAllComponentsRef(selector, targetId) : [];
      };
      PageFlexibleInstance.prototype.selectOwnerComponent = function (option, componentId) {
          return this.renderer.selectOwnerComponentRef(componentId);
      };
      PageFlexibleInstance.prototype.selectComposedParentComponent = function (option, componentId) {
          return this.renderer.selectComposedParentComponentRef(componentId);
      };
      PageFlexibleInstance.prototype.beforeClientUpdate = function () {
          var _this = this;
          var hoistInfo = this.hoistEmbededWebView;
          if (hoistInfo) {
              var runtime = getRuntimeById(this.appInstanceId);
              var pageHoistRenderConfig = runtime.getRegistry().getPageHostRenderConfig(this.pagePath).exportDefault;
              var stateGetter = pageHoistRenderConfig.hoistEmbededWebView;
              if (stateGetter) {
                  var viewId = this.pageId;
                  var dataInfo_1 = stateGetter(this.logics[0].publicInstance.data);
                  var src = ((dataInfo_1[0 /* ESharedAppxHostEmbededWebViewInfo.Src */] || '') + '').trim();
                  var element_1 = hoistInfo[0 /* EPageFlexibleInstanceEmbededWebViewInfo.Id */];
                  // 如果已经初始化过数据
                  if (element_1) {
                      // 如果已经可以通信
                      if (hoistInfo[2 /* EPageFlexibleInstanceEmbededWebViewInfo.Ready */]) {
                          if (hoistInfo[1 /* EPageFlexibleInstanceEmbededWebViewInfo.Src */] !== src) {
                              hoistInfo[1 /* EPageFlexibleInstanceEmbededWebViewInfo.Src */] = src;
                              runtime.getBridge().callInternalAPI('loadHoistEmbededWebViewSrc', {
                                  element: element_1,
                                  src: src,
                                  viewId: viewId,
                              }, null, viewId);
                          }
                          this.renderer.compositeHub.updateElement(
                          /* compositeElementId */ hoistInfo[0 /* EPageFlexibleInstanceEmbededWebViewInfo.Id */], 
                          /* compositeElementEventInBatched */ dataInfo_1[2 /* ESharedAppxHostEmbededWebViewInfo.Event */], 
                          /* compositeElementDatasetInBatched */ dataInfo_1[4 /* ESharedAppxHostEmbededWebViewInfo.Dataset */], 
                          /* userDefinedAttrId */ dataInfo_1[1 /* ESharedAppxHostEmbededWebViewInfo.Id */]);
                          info$1$1('[APPX][HoistEmbededWebView] update: ' + JSON.stringify(dataInfo_1));
                      }
                      // 否则标记为数据更新过
                      // 等待通信
                      else {
                          hoistInfo[3 /* EPageFlexibleInstanceEmbededWebViewInfo.Queued */] = true;
                      }
                  }
                  // 初始化
                  else if (src) {
                      element_1 = dataInfo_1[1 /* ESharedAppxHostEmbededWebViewInfo.Id */] || 'appx-embeded-webview-' + viewId;
                      hoistInfo[0 /* EPageFlexibleInstanceEmbededWebViewInfo.Id */] = element_1;
                      hoistInfo[1 /* EPageFlexibleInstanceEmbededWebViewInfo.Src */] = src;
                      runtime.getBridge().callInternalAPI('loadHoistEmbededWebViewSrc', {
                          element: element_1,
                          src: src,
                          viewId: viewId,
                      }, function (res) {
                          // 等同于 nbcomponent.canrender 逻辑
                          // 此时可以通信并向容器发消息
                          if (res.success) {
                              hoistInfo[2 /* EPageFlexibleInstanceEmbededWebViewInfo.Ready */] = true;
                              var dataset = {
                              // 初始是个对象
                              };
                              for (var _i = 0, _a = dataInfo_1[4 /* ESharedAppxHostEmbededWebViewInfo.Dataset */]; _i < _a.length; _i++) {
                                  var _b = _a[_i], key = _b[0], value = _b[1];
                                  dataset[key] = value;
                              }
                              _this.renderer.compositeHub.addElement(
                              /* compositeElementId */ element_1, 
                              /* logicTargetId */ 0, "web-view" /* EZElementStringTag.WebView */, 
                              /* compositeElementEvent */ dataInfo_1[2 /* ESharedAppxHostEmbededWebViewInfo.Event */], 
                              /* compositeElementDataset */ dataset, 
                              /* userDefinedAttrId */ dataInfo_1[1 /* ESharedAppxHostEmbededWebViewInfo.Id */], 29 /* EZElementTagName.WebView */);
                              info$1$1('[APPX][HoistEmbededWebView] ready');
                              // 如果已经发生过更新，这里补偿之
                              if (hoistInfo[3 /* EPageFlexibleInstanceEmbededWebViewInfo.Queued */]) {
                                  _this.beforeClientUpdate();
                              }
                          }
                          else {
                              info$1$1('[APPX][HoistEmbededWebView] fail: ' + JSON.stringify(res));
                          }
                      }, viewId);
                      info$1$1('[APPX][HoistEmbededWebView] load: ' + JSON.stringify(dataInfo_1));
                  }
              }
              else {
                  info$1$1('[APPX][HoistEmbededWebView] bundle error');
              }
          }
      };
      PageFlexibleInstance.prototype.registerRequirement = function (type, payload, appxDomain, global) {
          if (global === void 0) { global = false; }
          var runtime = getRuntimeById(this.appInstanceId);
          var pageStateManager = runtime.getPageStateManager();
          if (pageStateManager) {
              pageStateManager.registerPageRequirement({
                  payload: payload,
                  type: type,
              }, appxDomain, global, this);
          }
      };
      PageFlexibleInstance.prototype.clear = function () {
          var this$1 = this;

          /**
           * slice 拷贝完之后清空到只剩 Page，保证后续不再能够通过 logics 访问到
           */
          var logics = this.logics.slice();
          this.logics.length = 1;
          var existedComponetLength = logics.length;
          var componentId;
          // 清理 logics 为空，再
          for (componentId = 1; componentId < existedComponetLength; ++componentId) {
              var componentInstance = logics[componentId];
              if (componentInstance) {
                  this$1.removeComponentInstance(componentInstance);
              }
          }
      };
      PageFlexibleInstance.prototype.removeComponentInstance = function (componentInstance, noDidUnmount) {
          debug$1$1(function () { return "[APPX] removeComponent: ".concat(componentInstance.id); });
          componentInstance.onComponentBeforeDestroy(noDidUnmount);
      };
      PageFlexibleInstance.prototype.setIsHoistEmbededWebView = function (isHoist) {
          this.hoistEmbededWebView = isHoist ? ['', '', false, false] : false;
      };
      return PageFlexibleInstance;
  }());
  var pageFlexibleImpl;
  function setPageFlexibleImpl(v) {
      pageFlexibleImpl = v;
  }
  function createPageFlexibleInstance(appInstanceId, pagePath, pageId, context, logicRenderType) {
      debug$1$1(function () { return "[APPX] createPageInstance ".concat(pagePath, ":").concat(pageId); });
      // 在这里重新决策（基于 ProxyType）
      var renderType;
      // tslint:disable no-bitwise
      var enableRunloopAsync = logicRenderType & 16 /* ISharedAppxPageLogicRenderType.RunloopAsyncRenderer */;
      var enableRunloopSync = logicRenderType & 4 /* ISharedAppxPageLogicRenderType.RunloopSyncRenderer */;
      var enableAsyncSimple = logicRenderType & 8 /* ISharedAppxPageLogicRenderType.SimpleAsyncRenderer */;
      var enableSyncSimple = logicRenderType & 32 /* ISharedAppxPageLogicRenderType.SimpleSyncRenderer */;
      // tslint:enable no-bitwise
      var runtime = getRuntimeById(appInstanceId);
      var runloopAsyncToSimpleSwitch = runtime
          .getSwitchManager()
          .get("runloopAsyncToSimple" /* ESharedAppxSwitchManagerName.RunloopAsyncToSimple */);
      var shouldUseRunloopAsync =  context.proxyType === 2 /* ESharedAppxFlexibleProxyType.Remote */ && enableRunloopAsync
          ? // 有 RA 产物，有RA架构
              enableAsyncSimple
                  ? // 有 S 产物，可以选择看开关
                      runloopAsyncToSimpleSwitch
                          ? // 开关要求降级到 S
                              false
                          : // 没要求降级，优先 RA
                              true
                  : // 没 S 产物，没得选
                      true
          : false;
      if (shouldUseRunloopAsync) {
          renderType = 2 /* ESharedAppxFlexibleRendererType.RunloopAsync */;
      }
      else if (enableAsyncSimple) {
          renderType = 4 /* ESharedAppxFlexibleRendererType.SimpleAsync */;
      }
      else if (enableSyncSimple) {
          {
              renderType = 8 /* ESharedAppxFlexibleRendererType.SimpleSync */;
          }
      }
      else if (enableRunloopSync) {
          {
              renderType = 1 /* ESharedAppxFlexibleRendererType.RunloopSync */;
          }
      }
      if (context.proxyType === 1 /* ESharedAppxFlexibleProxyType.Local */) {
          if (renderType === 1 /* ESharedAppxFlexibleRendererType.RunloopSync */) {
              {
                  renderType = 8 /* ESharedAppxFlexibleRendererType.SimpleSync */;
                  debug$1$1(function () { return '[APPX] createPageInstance moveto simple-sync'; });
              }
          }
          else if (renderType === 2 /* ESharedAppxFlexibleRendererType.RunloopAsync */) {
              renderType = 4 /* ESharedAppxFlexibleRendererType.SimpleAsync */;
              debug$1$1(function () { return '[APPX] createPageInstance moveto simple-async'; });
          }
      }
      if (!context.proxyType) {
          throw new Error('proxyType undefined');
      }
      var instance = new pageFlexibleImpl(appInstanceId, pagePath, pageId, context, context.proxyType, renderType);
      return instance;
  }
  var PageFlexibleInstanceMethodInteceptor;
  function getPageFlexibleInstanceMethodInteceptor() {
      if (!PageFlexibleInstanceMethodInteceptor) {
          PageFlexibleInstanceMethodInteceptor = createClassMethodInteceptor(PageFlexibleInstance);
      }
      return PageFlexibleInstanceMethodInteceptor;
  }

  var PageInstanceManager = /** @class */ /*#__PURE__*/ (function () {
      function PageInstanceManager(appInstanceId) {
          this.instanceMapByPageId = Object.create(null);
          this.nextPageUniqueId = 0;
          this.createMessageMapByPageId = {};
          this.appInstanceId = appInstanceId;
      }
      PageInstanceManager.prototype.getInstanceById = function (pageId) {
          return this.instanceMapByPageId[pageId];
      };
      PageInstanceManager.prototype.hasCreateMessageReceived = function (pageId) {
          return !!this.createMessageMapByPageId[pageId];
      };
      PageInstanceManager.prototype.receiveCreateMessage = function (pageId) {
          this.createMessageMapByPageId[pageId] = true;
      };
      PageInstanceManager.prototype.getNextPageId = function () {
          return this.nextPageUniqueId;
      };
      PageInstanceManager.prototype.setNeedRenderRefresh = function (pagePathMapOrAll) {
          var this$1 = this;

          var pageInstanceIds = objectKeys(this.instanceMapByPageId);
          for (var _i = 0, pageInstanceIds_1 = pageInstanceIds; _i < pageInstanceIds_1.length; _i++) {
              var pageInstanceId = pageInstanceIds_1[_i];
              var pageInstance = this$1.instanceMapByPageId[pageInstanceId];
              if (pagePathMapOrAll === true) {
                  pageInstance.onPageNeedRenderRefresh();
              }
              else if (pagePathMapOrAll[pageInstance.pagePath]) {
                  pageInstance.onPageNeedRenderRefresh();
              }
          }
      };
      PageInstanceManager.prototype.createInstance = function (pagePath, instanceId, context) {
          var _a = this.createInstanceInternal(pagePath, instanceId, context), instance = _a[0], navActionId = _a[1];
          this.instanceMapByPageId[instanceId] = instance;
          this.incNextPageUniqueId();
          getRuntimeById(this.appInstanceId).getNav().onPageCreate({
              data: {
                  instanceId: instanceId,
                  navActionId: navActionId,
              },
          });
      };
      PageInstanceManager.prototype.destroyInstance = function (instanceId) {
          var pageInstance = this.instanceMapByPageId[instanceId];
          if (pageInstance) {
              pageInstance.dispose();
              delete this.instanceMapByPageId[instanceId];
          }
      };
      PageInstanceManager.prototype.dispose = function () {
          var _this = this;
          Object.keys(this.instanceMapByPageId).forEach(function (instanceId) {
              _this.destroyInstance(instanceId);
          });
      };
      PageInstanceManager.prototype.bootstrap = function () { };
      PageInstanceManager.prototype.reloadPage = function (previousPage) { };
      PageInstanceManager.prototype.incNextPageUniqueId = function () {
          this.nextPageUniqueId += 1;
      };
      PageInstanceManager.prototype.createInstanceInternal = function (pagePath, instanceId, context) {
          debug$1$1(function () { return "[APPX] PageInstanceManager:createInstance ".concat(pagePath, "/").concat(instanceId); });
          var navActionId;
          var appInstanceId = this.appInstanceId;
          var runtime = getRuntimeById(appInstanceId);
          var renderType = runtime.getRegistry().getPageLogicRenderType(pagePath);
          if (context.query && runtime.getNav().supportId()) {
              var extract = extractPageInstanceNavActionIdFromQueryString(context.query);
              if (extract) {
                  context.query = extract[0];
                  navActionId = extract[1];
              }
          }
          var instance = createPageInstance(appInstanceId, renderType, pagePath, instanceId, context);
          return [instance, navActionId];
      };
      return PageInstanceManager;
  }());
  {
      setRuntimeDependencyImpl(2 /* ESharedAppxRuntimeDependencyType.PageInstanceManager */, 0 /* ESharedAppxRuntimeContextType.App */, PageInstanceManager);
  }
  function createPageInstance(appInstanceId, renderType, pagePath, pageId, context) {
      var instance;
      {
          instance = createPageFlexibleInstance(appInstanceId, pagePath, pageId, context, renderType);
      }
      return instance;
  }

  function reportUnhandledRejectionToApp(runtime, event) {
      try {
          var eventManager = runtime.getTypedEventManager();
          // unhandleredRejection 处理
          runtime.getApp().reportUnhandledRejection(event);
          // tslint:disable-next-line no-bitwise
          if (eventManager.flag & 32 /* ESharedAppxInternalEventFlag.AppDidUnhandledRejection */) {
              eventManager.invokeInternalEvent(5 /* ESharedAppxInternalEvent.AppDidUnhandledRejection */, [event]);
          }
      }
      catch (ex) {
          debug$1$1(function () { return "[APPX][Error] reportError invoke App.onError fail ".concat(ex && ex.message, " ").concat(ex && ex.stack); });
      }
  }
  function reportErrorToApp(runtime, code, formatedError) {
      try {
          var eventManager = runtime.getTypedEventManager();
          // 在 reportError 中避免递归
          var message = "".concat(formatedError.message);
          var stack = formatedError.stack ? "".concat(formatedError.stack) : undefined;
          runtime.getApp().reportError(message, code, formatedError);
          // tslint:disable-next-line no-bitwise
          if (eventManager.flag & 16 /* ESharedAppxInternalEventFlag.AppDidError */) {
              eventManager.invokeInternalEvent(4 /* ESharedAppxInternalEvent.AppDidError */, [message, stack]);
          }
      }
      catch (ex) {
          debug$1$1(function () { return "[APPX][Error] reportError invoke App.onError fail ".concat(ex && ex.message, " ").concat(ex && ex.stack); });
      }
  }
  function invokeComponentError(appInstanceId, error, method, component) {
      var eventManager = getRuntimeById(appInstanceId).getTypedEventManager();
      // tslint:disable-next-line no-bitwise
      if (eventManager.flag & 64 /* ESharedAppxInternalEventFlag.ComponentError */) {
          eventManager.invokeInternalEvent(6 /* ESharedAppxInternalEvent.ComponentError */, [error, method, component]);
      }
  }

  function reportHostError(kernelOrId, code, error, logPrefix, errorType) {
      var formatedError = formatAppxErrorInfo(error, errorType);
      if (logPrefix) {
          info$1$1("".concat(logPrefix, " ").concat(formatedError.message, "/").concat(formatedError.stack));
      }
      else {
          debug$1$1(function () { return "[APPX][Error] ".concat(formatedError.message); });
      }
      var appInstanceId;
      var kernel;
      if (typeof kernelOrId === 'string') {
          appInstanceId = kernelOrId;
          kernel = null;
      }
      else {
          appInstanceId = kernelOrId && kernelOrId.appInstanceId;
          kernel = kernelOrId;
      }
      if (!appInstanceId) {
          debug$1$1(function () { return '[APPX][Error] reportError without appInstanceId'; });
      }
      var runtime = getRuntimeById(appInstanceId);
      // REPORT_ERROR
      if (runtime && runtime.getKernel()) {
          kernel = runtime.getKernel();
      }
      if (kernel && kernelErrorReporterImpl) {
          kernelErrorReporterImpl(kernel, code, formatedError);
      }
      // 下面都依赖 runtime
      if (!runtime) {
          debug$1$1(function () { return '[APPX][Error] reportError without runtime'; });
          return;
      }
      // HostUnhandledRejection 需要单独发送
      if (code !== 15 /* ESharedAppxSpecificErrorCode.HostUnhandledRejection */ &&
          code !== 25 /* ESharedAppxSpecificErrorCode.FrameworkMonitor */) {
          reportErrorToApp(runtime, code, formatedError);
      }
      var logger = runtime.getLogger();
      if (logger) {
          // TINY_ERROR
          // clue
          // tracker 自行实现
          logger.reportError(code, formatedError, error);
      }
      else {
          debug$1$1(function () { return '[APPX][Error] reportError without logger'; });
      }
  }
  var kernelErrorReporterImpl;
  function setKernelErrorReporterImpl(v) {
      kernelErrorReporterImpl = v;
  }

  var EventBaseManager = /** @class */ /*#__PURE__*/ (function () {
      function EventBaseManager(appInstanceId) {
          this.callbackMap = Object.create(null);
          this.implMap = Object.create(null);
          this.appInstanceId = appInstanceId;
      }
      EventBaseManager.prototype.dispose = function () {
          var _this = this;
          // 销毁缓存函数
          Object.keys(this.implMap).forEach(function (name) {
              _this.removeEventListeners(name);
          });
          this.implMap = null;
          this.callbackMap = null;
      };
      EventBaseManager.prototype.addEventListener = function (name, callback) {
          if (typeof callback !== 'function') {
              throw getError4ListenerNeedCallback('add');
          }
          if (!this.implMap[name]) {
              var boundCallback = this.invokeEvent.bind(this, name);
              this.addEventImpl(name, boundCallback);
              this.implMap[name] = boundCallback;
          }
          var callbacks = (this.callbackMap[name] = this.callbackMap[name] || []);
          if (callbacks.indexOf(callback) < 0) {
              callbacks.push(callback);
          }
      };
      EventBaseManager.prototype.removeEventListener = function (name, callback) {
          if (typeof callback !== 'function') {
              throw getError4ListenerNeedCallback('remove');
          }
          this.callbackMap[name] = this.callbackMap[name] || [];
          this.callbackMap[name] = this.callbackMap[name].filter(function (d) { return d !== callback; });
          // 如果为空了，清理
          if (this.callbackMap[name].length === 0) {
              this.removeEventImpl(name, this.implMap[name]);
              delete this.implMap[name];
          }
      };
      EventBaseManager.prototype.removeEventListeners = function (name) {
          this.callbackMap[name] = [];
          this.removeEventImpl(name, this.implMap[name]);
          delete this.implMap[name];
      };
      EventBaseManager.prototype.invokeEvent = function (name, payload) {
          var this$1 = this;

          var callbacks = this.callbackMap[name] || [];
          debug$1$1(function () { return "[APPX] EventBaseManager:invokeEvent ".concat(name, ":").concat(callbacks.length); });
          for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {
              var cb = callbacks_1[_i];
              try {
                  cb(payload);
              }
              catch (ex) {
                  reportHostError(this$1.appInstanceId, 12 /* ESharedAppxSpecificErrorCode.HostFrameworkError */, ex, "[APPX][Event] ".concat(name, " event error"));
                  throw ex;
              }
          }
      };
      EventBaseManager.prototype.addEventImpl = function (name, callback) {
          getRuntimeById(this.appInstanceId).getKernel().__EVENT_ADD_LISTENER__(name, callback);
      };
      EventBaseManager.prototype.removeEventImpl = function (name, callback) {
          getRuntimeById(this.appInstanceId).getKernel().__EVENT_REMOVE_LISTENER__(name, callback);
      };
      return EventBaseManager;
  }());

  var SharedAppxTypedEventManager = /** @class */ /*#__PURE__*/ (function () {
      function SharedAppxTypedEventManager() {
          this.flag = 0;
          this.events = [[], [], [], [], [], [], [], [], []];
      }
      SharedAppxTypedEventManager.prototype.invokeInternalEvent = function (type, payload) {
          var events = this.events[type];
          for (var _i = 0, events_1 = events; _i < events_1.length; _i++) {
              var callback = events_1[_i];
              callback.apply(void 0, payload);
          }
      };
      SharedAppxTypedEventManager.prototype.addEventListener = function (type, callback, needRemove) {
          var _this = this;
          var events = this.events[type];
          if (events.indexOf(callback) !== -1) {
              // 对齐 appx 1.0
              return;
          }
          // tslint:disable-next-line no-bitwise
          this.flag |= 1 << type;
          events.push(callback);
          if (needRemove) {
              return {
                  remove: function () {
                      _this.removeEventListener(type, callback);
                  },
              };
          }
      };
      SharedAppxTypedEventManager.prototype.removeEventListener = function (type, callback) {
          var events = this.events[type];
          var foundIndex = events.indexOf(callback);
          if (foundIndex !== -1) {
              events.splice(foundIndex, 1);
          }
          if (events.length === 0) {
              // 消除 type 位
              // tslint:disable-next-line no-bitwise
              this.flag &= 0x7f ^ (1 << type);
          }
      };
      return SharedAppxTypedEventManager;
  }());

  function getCompileInfo(compileInfo, appInstanceId) {
      if (compileInfo.component2 === undefined) {
          var runtime = getRuntimeById(appInstanceId);
          var registry = runtime && runtime.getRegistry();
          if (registry) {
              var component2 = registry.hasAnyPageLogicRenderTypeMatch(
              // tslint:disable-next-line no-bitwise
              4 /* ISharedAppxPageLogicRenderType.RunloopSyncRenderer */ | 32 /* ISharedAppxPageLogicRenderType.SimpleSyncRenderer */);
              // true: 至少一个 page 具备 Sync
              // false: 所有 page 都不具备 Sync
              // undefined: 无 page
              if (component2 !== undefined) {
                  compileInfo.component2 = component2;
              }
          }
      }
      if (compileInfo.hydratable === undefined) {
          compileInfo.hydratable = false;
      }
      return compileInfo;
  }

  var AppxBaseMeta4App = /** @class */ /*#__PURE__*/ (function () {
      function AppxBaseMeta4App(appInstanceId, args) {
          var this$1 = this;

          var _this = this;
          this.pagePathMap = Object.create(null);
          this.tabPagePathStaticMap = Object.create(null);
          /**
           * dynamicTabItemPagePathMap 中可能含有 staticPathMap 的东西
           * 需要考虑下 remove 一个既有静态 tab 的情况
           */
          this.tabPagePathDynamicMap = Object.create(null);
          /**
           * 可能为负数，如果移除了静态表的 tab 的话
           */
          this.dynamicTabItemCount = 0;
          this.staticTabItemCount = 0;
          this.pageToSubPackageMap = Object.create(null);
          this.staticMiniExtensionId = null;
          var meta = args[0], pageMeta = args[1];
          this.appInstanceId = appInstanceId;
          this.meta = meta;
          this.pageMeta = pageMeta || {};
          if (meta.tabBar && meta.tabBar.items) {
              var staticTabItemCount = meta.tabBar.items.length;
              if (staticTabItemCount) {
                  this.staticTabItemCount = staticTabItemCount;
                  meta.tabBar.items.forEach(function (tab) {
                      _this.tabPagePathStaticMap[tab.pagePath] = true;
                  });
              }
          }
          var pagePathMap = this.pagePathMap;
          for (var _i = 0, _a = meta.pages; _i < _a.length; _i++) {
              var pagePath = _a[_i];
              pagePathMap[pagePath] = true;
          }
          if (meta.subPackages) {
              for (var _b = 0, _c = meta.subPackages; _b < _c.length; _b++) {
                  var pack = _c[_b];
                  var root = pack.root, _d = pack.pages, pages = _d === void 0 ? [] : _d;
                  for (var _e = 0, pages_1 = pages; _e < pages_1.length; _e++) {
                      var page = pages_1[_e];
                      var wholePath = "".concat(root, "/").concat(page);
                      if (pagePathMap) {
                          pagePathMap[wholePath] = true;
                      }
                      this$1.pageToSubPackageMap[wholePath] = root;
                  }
              }
          }
      }
      AppxBaseMeta4App.prototype.getPageConfig = function (pagePath, key) {
          var pageParams = this.pageMeta[pagePath];
          if (pageParams && pageParams[key] !== undefined) {
              return pageParams[key];
          }
          var appParams = this.meta.window;
          if (appParams && appParams[key] !== undefined) {
              return appParams[key];
          }
          return undefined;
      };
      AppxBaseMeta4App.prototype.getHomePage = function () {
          return getEntryPagePath(this.meta);
      };
      AppxBaseMeta4App.prototype.hasTabBar = function () {
          return !!this.staticTabItemCount;
      };
      AppxBaseMeta4App.prototype.getTabBar = function () {
          return this.meta.tabBar;
      };
      AppxBaseMeta4App.prototype.isTabPage = function (pagePath) {
          // 只要
          var dynamicValue = this.tabPagePathDynamicMap[pagePath];
          if (typeof dynamicValue === 'boolean') {
              // 说明是确实设置了最新值的
              // 这里可以保证在静态表但是被强制移除的正确性
              return dynamicValue;
          }
          else {
              // 说明是未设置，走 static
              return !!this.tabPagePathStaticMap[pagePath];
          }
      };
      AppxBaseMeta4App.prototype.removeTabBarItem = function (pagePath) {
          var dynamicTabItemPagePathMap = this.tabPagePathDynamicMap;
          var dynamicValue = dynamicTabItemPagePathMap[pagePath];
          if (typeof dynamicValue === 'boolean') {
              if (dynamicValue) {
                  dynamicTabItemPagePathMap[pagePath] = false;
                  this.dynamicTabItemCount -= 1;
              }
          }
          else {
              // 之前没添加过
              if (this.tabPagePathStaticMap[pagePath]) {
                  // 但是在静态表，也需要强制删除
                  // 这里可能导致 dynamicTabItemCount 为 -1
                  dynamicTabItemPagePathMap[pagePath] = false;
                  this.dynamicTabItemCount -= 1;
              }
          }
      };
      AppxBaseMeta4App.prototype.addTabBarItem = function (pagePath) {
          var dynamicTabItemPagePathMap = this.tabPagePathDynamicMap;
          var dynamicValue = dynamicTabItemPagePathMap[pagePath];
          if (typeof dynamicValue === 'boolean') {
              if (!dynamicValue) {
                  dynamicTabItemPagePathMap[pagePath] = true;
                  this.dynamicTabItemCount += 1;
              }
          }
          else {
              if (this.tabPagePathStaticMap[pagePath]) ;
              else {
                  // 不是静态表的
                  dynamicTabItemPagePathMap[pagePath] = true;
                  this.dynamicTabItemCount += 1;
              }
          }
      };
      AppxBaseMeta4App.prototype.shouldAddTabBarItem = function () {
          return this.staticTabItemCount + this.dynamicTabItemCount < 100;
      };
      AppxBaseMeta4App.prototype.hasPagePath = function (pagePath) {
          return !!this.pagePathMap[pagePath] || !!this.pageToSubPackageMap[pagePath];
      };
      AppxBaseMeta4App.prototype.getPagePaths = function () {
          return this.meta.pages;
      };
      AppxBaseMeta4App.prototype.getPluginInfo4PluginName = function (name) {
          var plugins = this.meta.plugins;
          if (plugins && plugins[name]) {
              return plugins[name];
          }
      };
      AppxBaseMeta4App.prototype.getPluginInfo4PluginId = function (pluginId) {
          var plugins = this.meta.plugins;
          if (plugins) {
              for (var _i = 0, _a = Object.keys(plugins); _i < _a.length; _i++) {
                  var key = _a[_i];
                  var plugin = plugins[key];
                  if (plugin.provider === pluginId) {
                      return plugin;
                  }
              }
          }
      };
      AppxBaseMeta4App.prototype.getStaticMiniExtensionId = function () {
          var staticMiniExtensionId = this.staticMiniExtensionId;
          if (!staticMiniExtensionId) {
              var plugins = this.meta.plugins;
              if (plugins) {
                  var names = Object.keys(plugins);
                  var nameLen = names.length;
                  staticMiniExtensionId = this.staticMiniExtensionId = Array(nameLen);
                  for (var index = 0; index < nameLen; index += 1) {
                      staticMiniExtensionId[index] = plugins[names[index]].provider;
                  }
              }
              else {
                  staticMiniExtensionId = this.staticMiniExtensionId = [];
              }
          }
          return staticMiniExtensionId;
      };
      AppxBaseMeta4App.prototype.isUsingMiniExtension = function () {
          return this.isUsingMiniExtension4Dynamic() || this.isUsingMiniExtension4Static();
      };
      AppxBaseMeta4App.prototype.isUsingMiniExtension4Dynamic = function () {
          return !!this.meta.useDynamicPlugins;
      };
      AppxBaseMeta4App.prototype.isUsingMiniExtension4Static = function () {
          var plugins = this.meta.plugins;
          return !!plugins;
      };
      AppxBaseMeta4App.prototype.getSubPackageByPage = function (pagePath) {
          return this.pageToSubPackageMap[pagePath];
      };
      AppxBaseMeta4App.prototype.getPreloadRuleByPage = function (pagePath) {
          return (this.meta.preloadRule && this.meta.preloadRule[pagePath]) || undefined;
      };
      AppxBaseMeta4App.prototype.getAppExt = function () {
          return this.meta.ext;
      };
      AppxBaseMeta4App.prototype.getCompileInfo = function () {
          if (!this.meta.__compile_info__) {
              this.meta.__compile_info__ = {
                  buildTarget: undefined,
                  component2: undefined,
                  hydratable: undefined,
                  zephyrFlag: 0,
              };
          }
          return getCompileInfo(this.meta.__compile_info__, this.appInstanceId);
      };
      AppxBaseMeta4App.prototype.isMiniExtensionRequiredAsStatic = function (miniExtensionId) {
          if (!miniExtensionId) {
              return false;
          }
          var allProviders = this.meta.allProviders;
          if (allProviders) {
              return !!allProviders[miniExtensionId.value];
          }
          return false;
      };
      AppxBaseMeta4App.prototype.isMiniExtensionRequiredAsLazy = function (miniExtensionId) {
          if (!miniExtensionId) {
              return false;
          }
          var plugin = this.getPluginInfo4PluginId(miniExtensionId.value);
          if (plugin) {
              return plugin.lazy === true;
          }
          return false;
      };
      AppxBaseMeta4App.prototype.getAppBehavior = function () {
          return this.meta.behavior;
      };
      AppxBaseMeta4App.prototype.getAppMeta = function () {
          return this.meta;
      };
      return AppxBaseMeta4App;
  }());

  var AppxBaseMeta4Page = /** @class */ /*#__PURE__*/ (function () {
      function AppxBaseMeta4Page(appInstanceId, args) {
          var _this = this;
          this.staticTabItemCount = 0;
          this.pagePathMap = Object.create(null);
          this.tabPagePathMap = Object.create(null);
          this.h5PageMappingInited = false;
          var meta = args[0], pageMeta = args[1];
          this.appInstanceId = appInstanceId;
          this.meta = meta;
          this.pageMeta = pageMeta || {};
          if (meta.tabBar && meta.tabBar.items) {
              var staticTabItemCount = meta.tabBar.items.length;
              if (staticTabItemCount) {
                  this.staticTabItemCount = staticTabItemCount;
                  meta.tabBar.items.forEach(function (tab, index) {
                      _this.tabPagePathMap[tab.pagePath] = index;
                  });
              }
          }
          var pagePathMap = this.pagePathMap;
          for (var _i = 0, _a = meta.pages; _i < _a.length; _i++) {
              var pagePath = _a[_i];
              pagePathMap[pagePath] = true;
          }
      }
      AppxBaseMeta4Page.prototype.getAppExt = function () {
          return undefined;
      };
      AppxBaseMeta4Page.prototype.getH5PagePathByHTMLPath = function (htmlPath) {
          if (!this.h5PageMappingInited) {
              this.initH5PageMapping();
          }
          return this.h5PageReverseMapping[htmlPath];
      };
      AppxBaseMeta4Page.prototype.getH5HTMLPathByPagePath = function (pagePath) {
          if (!this.h5PageMappingInited) {
              this.initH5PageMapping();
          }
          return [this.h5PageMapping[pagePath], !!this.meta.h5.route];
      };
      AppxBaseMeta4Page.prototype.getH5LaunchParamsByPagePath = function (pagePath) {
          var meta = this.meta;
          var launchParams = meta && meta.h5 && meta.h5.launchParams;
          return launchParams && launchParams[pagePath];
      };
      AppxBaseMeta4Page.prototype.hasTabBar = function () {
          return !!this.staticTabItemCount;
      };
      AppxBaseMeta4Page.prototype.getTabBar = function () {
          return this.meta.tabBar;
      };
      AppxBaseMeta4Page.prototype.getHomePage = function () {
          return getEntryPagePath(this.meta);
      };
      AppxBaseMeta4Page.prototype.isTabPage = function (pagePath) {
          return typeof this.tabPagePathMap[pagePath] === 'number';
      };
      AppxBaseMeta4Page.prototype.removeTabBarItem = function (pagePath) { };
      AppxBaseMeta4Page.prototype.addTabBarItem = function (pagePath) { };
      AppxBaseMeta4Page.prototype.shouldAddTabBarItem = function () {
          return false;
      };
      AppxBaseMeta4Page.prototype.getPageConfig = function (pagePath, key) {
          var pageParams = this.pageMeta[pagePath];
          if (pageParams && pageParams[key] !== undefined) {
              return pageParams[key];
          }
          var appParams = this.meta.window;
          if (appParams && appParams[key] !== undefined) {
              return appParams[key];
          }
          return undefined;
      };
      AppxBaseMeta4Page.prototype.hasPagePath = function (pagePath) {
          return !!this.pagePathMap[pagePath];
      };
      AppxBaseMeta4Page.prototype.getPagePaths = function () {
          return this.meta.pages;
      };
      AppxBaseMeta4Page.prototype.getPluginInfo4PluginName = function () { };
      AppxBaseMeta4Page.prototype.getPluginInfo4PluginId = function () { };
      AppxBaseMeta4Page.prototype.getStaticMiniExtensionId = function () { };
      AppxBaseMeta4Page.prototype.isUsingMiniExtension = function () {
          return false;
      };
      AppxBaseMeta4Page.prototype.isUsingMiniExtension4Dynamic = function () {
          return false;
      };
      AppxBaseMeta4Page.prototype.isUsingMiniExtension4Static = function () {
          return false;
      };
      AppxBaseMeta4Page.prototype.getSubPackageByPage = function (pagePath) {
          return;
      };
      AppxBaseMeta4Page.prototype.getPreloadRuleByPage = function (pagePath) {
          return;
      };
      AppxBaseMeta4Page.prototype.getCompileInfo = function () {
          if (!this.meta.__compile_info__) {
              this.meta.__compile_info__ = {
                  buildTarget: undefined,
                  component2: undefined,
                  hydratable: undefined,
                  zephyrFlag: 0,
              };
          }
          return getCompileInfo(this.meta.__compile_info__, this.appInstanceId);
      };
      AppxBaseMeta4Page.prototype.isMiniExtensionRequiredAsStatic = function () {
          return false;
      };
      AppxBaseMeta4Page.prototype.isMiniExtensionRequiredAsLazy = function () {
          return false;
      };
      AppxBaseMeta4Page.prototype.getAppBehavior = function () {
          return this.meta.behavior;
      };
      AppxBaseMeta4Page.prototype.getAppMeta = function () {
          return this.meta;
      };
      AppxBaseMeta4Page.prototype.initH5PageMapping = function () {
          var this$1 = this;

          if (!this.h5PageMappingInited) {
              this.h5PageMappingInited = true;
              var h5PageReverseMap = (this.h5PageReverseMapping = Object.create(null));
              var h5PageMapping = (this.h5PageMapping = Object.create(null));
              if (this.meta.h5) {
                  var routeConfig = this.meta.h5.route;
                  var pageMapping = this.meta.h5.pageMapping;
                  if (pageMapping) {
                      for (var _i = 0, _a = Object.keys(pageMapping); _i < _a.length; _i++) {
                          var pagePath = _a[_i];
                          var htmlPath = pageMapping[pagePath] + '.html';
                          var publicHtmlPath = htmlPath;
                          var externalHtmlPath = void 0;
                          if (this$1.meta.h5.route) {
                              // 有路由的话，还要考虑 externalFolder, publicFolder
                              publicHtmlPath = "".concat(routeConfig.publicFolder).concat(htmlPath);
                              externalHtmlPath = "".concat(routeConfig.externalFolder).concat(htmlPath);
                              h5PageReverseMap[externalHtmlPath] = pagePath;
                          }
                          h5PageReverseMap[publicHtmlPath] = pagePath;
                          h5PageMapping[pagePath] = publicHtmlPath;
                      }
                  }
              }
          }
      };
      return AppxBaseMeta4Page;
  }());

  function noop$3() { }
  function process$1(nav, action) {
      var payload = action.payload;
      nav.callBridge(action, payload.method, payload.param);
  }
  // 某些事件，比如 reLaunch 是需要卸载页面+创建页面的
  // 如果两件事同时完成才能释放
  // 当然，可能存在被强制打断前的页面被释放导致提前误判
  // 但这至少好过没有
  function unlockWhenPagesCreatedDestroyed(nav, action, state) {
      action.lock = action.lock || 0;
      // tslint:disable no-bitwise
      var lock = (action.lock |= state);
      if (lock & 2 /* ESharedAppxNavigationActionLock.PageCreated */ && lock & 1 /* ESharedAppxNavigationActionLock.PageDestroyed */) {
          nav.addTrace('unlock when pages created and destroyed');
          // tslint:enable no-bitwise
          nav.unlock();
      }
  }
  function sharedAppxNavigationActionToJson() {
      return {
          bypass: this.bypass,
          from: this.from ? this.from.pagePath + ':' + this.from.pageId : null,
          id: this.id,
          next: this.next,
          processable: this.processable,
          tabQuery: this.tabQuery,
          tail: this.tail,
          to: this.to,
          type: this.type,
      };
  }
  function sharedAppxNavigationActionToString() {
      return JSON.stringify(this.toJSON ? this.toJSON() : this, null, 2);
  }
  function notifyPageNotFoundToClient(port, error) {
      // 让页面糊个错误提示出来
      var payload = {
          a: 13 /* EAppxWeb2MessageKey4S2CCallback.PageNotFound */,
          p: [kAppxVersion, '', error],
      };
      port.postMessage({
          i: undefined,
          p: payload,
          sn: undefined,
          t: 2 /* EAppxWeb2MessageKey.S2C_CallbackRequest */,
      });
  }
  function getUserSideNavigationType(type) {
      switch (type) {
          case "NavigateTo" /* ESharedAppxNavigationType.NAVIGATETO */:
              return 'navigateTo';
          case "NavigateBack" /* ESharedAppxNavigationType.NAVIGATIONBACK */:
              return 'navigateBack';
          case "RedirectTo" /* ESharedAppxNavigationType.REDIRECTTO */:
              return 'redirectTo';
          case "ReLaunch" /* ESharedAppxNavigationType.RELAUNCH */:
              return 'reLaunch';
          case "SwitchTab" /* ESharedAppxNavigationType.SWITCHTAB */:
              return 'switchTab';
      }
  }

  function prepare(nav, payload) {
      // 进入该事件后，锁定导航，等待 create / resume 触发
      nav.lock("AppReLaunchBeforeAppResume4iOSCube" /* ESharedAppxNavigationType.APPRELAUNCHBEFOREAPPRESUME4IOSCUBE */, null);
  }
  function postprocess(nav, nextPage, action, newPageCreated, navActionId) {
      if (newPageCreated) {
          // 存档一下当前准备的 page，然后开始等 appresume
          nav.pendingPage = nextPage;
      }
      nav.unlock();
  }

  var appRelaunchBeforeAppResume = {
      __proto__: null,
      prepare: prepare,
      postprocess: postprocess,
      process: noop$3
  };

  function isUrlFragmentProtocol4MiniExtension(urlFragment) {
      return urlFragment.protocol === 0 /* EUrlProtocol.miniExtension */;
  }
  function createPagePathFromFragment(urlFragment) {
      var protocol = urlFragment.protocol;
      if (protocol === 0 /* EUrlProtocol.miniExtension */) {
          return "".concat(kPrivateMiniExtensionProtocol).concat(urlFragment.domain ? urlFragment.domain + '/' : '').concat(urlFragment.pagePath);
      }
      else {
          return urlFragment.pagePath;
      }
  }
  function createUrlFromFragment(urlFragment) {
      return '#' + createPagePathFromFragment(urlFragment) + (urlFragment.query ? '?' + urlFragment.query : '');
  }
  function getPluginLoadInfo(runtime, path) {
      if (isPluginProtocolPath(path) || isDynamicProtocolPath(path)) {
          var manager = runtime().getMiniExtensionManager();
          var typedPagePath = {
              type: 2 /* EMiniExtensionStringType.dynamic_plugin_$_id_$_public_name */,
              value: path,
          };
          var extensionId = manager.getMiniExtensionIdAndPublicNameByPagePath(typedPagePath).extensionId;
          var loaded = extensionId && manager.isInitedByExtensionId(extensionId.value);
          var result = manager.getMiniExtensionPagePath(typedPagePath);
          if (result) {
              return {
                  domain: result.extensionId.value,
                  lazy: false,
                  loaded: loaded,
                  pagePath: '/' + result.resolvedPath.value, // 表示当前 domain 下的 绝对路径
              };
          }
          else {
              if (extensionId) {
                  return {
                      domain: extensionId.value,
                      lazy: manager.isLazyMiniExtension(extensionId),
                      loaded: loaded,
                  };
              }
              return {
                  domain: undefined,
                  lazy: false,
                  loaded: loaded,
              };
          }
      }
  }
  /**
   * 将 url 解析为 protocol domain path query 四部分
   * @param runtime
   * @param url
   */
  function createFragmentFromUrl(runtime, url) {
      var queryIndex = url.indexOf('?');
      var path = url;
      var query = '';
      var protocol = 1 /* EUrlProtocol.empty */;
      var domain = '';
      if (queryIndex !== -1) {
          path = url.slice(0, queryIndex);
          query = url.slice(queryIndex + 1);
      }
      if (isPluginProtocolPath(path) || isDynamicProtocolPath(path)) {
          var manager = runtime().getMiniExtensionManager();
          // TODO: type
          var result = manager.getMiniExtensionPagePath({
              type: 2 /* EMiniExtensionStringType.dynamic_plugin_$_id_$_public_name */,
              value: path,
          });
          if (result) {
              protocol = 0 /* EUrlProtocol.miniExtension */;
              domain = result.extensionId.value;
              path = '/' + result.resolvedPath.value; // 表示当前 domain 下的 绝对路径
          }
      }
      return {
          domain: domain,
          pagePath: path,
          protocol: protocol,
          query: query,
      };
  }

  function fetchSubpackageAndPrepageNavigation(callContext, pagePath, resolve, navType, navOption, callbackPayload) {
      var runtime = callContext.runtime();
      var navigation = runtime.getNav();
      var topViewId = navigation.getTopViewId();
      var subPackageManager = runtime.getSubPackageManager();
      var shouldShowLoading = !subPackageManager.isRootLoaded(pagePath);
      if (shouldShowLoading) {
          callContext.callScopedBridge('showLoading', { viewId: topViewId }, undefined, topViewId);
      }
      if (navigation.supportChain()) {
          navigation.beforePreparation(navType, navOption);
          subPackageManager.preparePage(pagePath, function (error) {
              if (shouldShowLoading) {
                  callContext.callScopedBridge('hideLoading', { viewId: topViewId }, undefined, topViewId);
              }
              if (error) {
                  resolve({
                      error: 1,
                      errorMessage: 'can not find page: ' + pagePath,
                  });
              }
              else {
                  navigation.prepare(navType, navOption, resolve, callbackPayload);
              }
          });
      }
      else {
          // 非链式导航暂不支持 pageNotFound 抢救
          navigation.prepare(navType, navOption, resolve, callbackPayload);
          subPackageManager.preparePage(pagePath, function (error) {
              if (shouldShowLoading) {
                  callContext.callScopedBridge('hideLoading', { viewId: topViewId }, undefined, topViewId);
              }
              if (error) {
                  navigation.failPostNavigation();
              }
              else {
                  callContext.callDefaultBridge(navOption.method, navOption.param, navigation.failPostNavigation);
              }
          });
      }
  }
  function fetchLazyLoadPlugin(callContext, url, callback) {
      var runtime = callContext.runtime();
      var navigation = runtime.getNav();
      var topViewId = navigation.getTopViewId();
      var pluginLoadInfo = getPluginLoadInfo(callContext.runtime, url);
      if (pluginLoadInfo && pluginLoadInfo.loaded === false && pluginLoadInfo.lazy) {
          // 懒加载插件
          var hideLoadingInvoked_1 = false;
          var loadInvoked = runtime
              .getMiniExtensionManager()
              .loadLazyMiniExtension({ type: 4 /* EMiniExtensionStringType._$_extension_id_$_ */, value: pluginLoadInfo.domain }, topViewId, function (error) {
              hideLoadingInvoked_1 = true;
              callContext.callScopedBridge('hideLoading', { viewId: topViewId }, undefined, topViewId);
              if (error) {
                  callback(error);
                  return;
              }
              callback();
          });
          if (loadInvoked && !hideLoadingInvoked_1) {
              callContext.callScopedBridge('showLoading', { viewId: topViewId }, undefined, topViewId);
          }
      }
      else {
          callback();
      }
  }
  function resolveCleanPagePath(runtime, baseDomain, // 调用方信息
  url, navigationType, resolvedPath) {
      /**
       * 决定最终跳转的 targetUrl 的参数为：
       * 1. url (用户传入的路径)
       * 2. calleeDomain (调用方的 domain 信息，是插件还是主体小程序，以及插件 ID)
       * 3. currentPagePath (栈顶页面的路径，也有对应的 domain)
       */
      /**
       * 1. 先判防一下需要相对路径解析同时 currentPagePath 不存在的情况
       */
      var urlString = url + '';
      var nav = runtime().getNav();
      var topInstance = nav.getTopInstance();
      if (!isAbsoluteUrl(url)) {
          // 处在抢救当中，强制走绝对路径
          // 把栈顶置为空即可
          if (nav.supportRescue(navigationType)) {
              if (!runtime().getSwitchManager().get("navRescueRelativeToTop" /* ESharedAppxSwitchManagerName.NavRescueRelativeToTop */)) {
                  topInstance = null;
              }
          }
          // 用户打开小程序，还未等 H/C 建连（创建第一个页面）就压后台
          // 进入 onAppResume -> reLaunch 链路
          // 结果到这里判定报错
          // 又或者应用启动的时候直接跳转插件页面或者绝对路径页面
          else if (!topInstance) {
              throw getError4NavigationException('current page not found');
          }
      }
      /**
       * 处理当前 url 相关的信息
       */
      var fragment = createFragmentFromUrl(runtime, urlString);
      /**
       * 插件在跳转到没有 domain 的域名时候，表示的是跳转到自己的页面，所以复写 domain
       */
      if (isAppxDomain4Extension(baseDomain) && fragment.protocol === 1 /* EUrlProtocol.empty */) {
          fragment.protocol = 0 /* EUrlProtocol.miniExtension */;
          fragment.domain = baseDomain.value;
      }
      /**
       * 如果需要相对路径解析，获取当前 resolvedPath
       */
      var currentPagePath = '';
      if (resolvedPath) {
          currentPagePath = resolvedPath;
      }
      else if (topInstance) {
          var providerInfo = topInstance.getProviderInfo();
          currentPagePath = providerInfo.resolvedPath;
      }
      // 对相对路径的 pagePath，前置链路已经校验过 domain 是否相同
      var finalPagePath = resolveRelative(fragment.pagePath, currentPagePath);
      return {
          domain: fragment.domain,
          pagePath: finalPagePath.replace(/^\//, ''),
          protocol: fragment.protocol,
          query: fragment.query && validateQueryStringFromBizCode(fragment.query),
      };
  }
  function validateQueryStringFromBizCode(query) {
      if (query.indexOf('__appxPageId') > -1) {
          var _a = parse(query), __appxPageId = _a.__appxPageId, otherQueryString = __rest(_a, ["__appxPageId"]);
          query = stringify(otherQueryString);
      }
      return query;
  }
  function reportPagePathNavigationError(runtime, navigationType, requestUrl, resolvedUrl, inPlugin) {
      var switchManager = runtime().getSwitchManager();
      if (switchManager && switchManager.get("reportNavigationValidation" /* ESharedAppxSwitchManagerName.ReportNavigationValidation */)) {
          var reportLevel = switchManager.get("reportNavigationValidation" /* ESharedAppxSwitchManagerName.ReportNavigationValidation */);
          var errorMessage = '[NavigationPageValidation]';
          if (reportLevel === 2 /* ESharedAppxSwitchManagerValue4ReportNavigationValidation.Detail */) {
              errorMessage = "[NavigationPageValidation]: resolved to ".concat(resolvedUrl, " not found");
          }
          var top = runtime().getNav().getTopInstance();
          var error = new Error(errorMessage);
          extendAppxErrorDetail(error, 'nav:page', JSON.stringify({
              base: top && top.getProviderInfo().resolvedPath,
              plugin: inPlugin,
              request: requestUrl,
              resolved: resolvedUrl,
              type: navigationType,
          }));
          reportHostError(runtime().getKernel(), 11 /* ESharedAppxSpecificErrorCode.HostGlobalError */, error, undefined, 1 /* ESharedAppxErrorType.PageNotFound */);
      }
  }
  function validatePagePath(runtime, baseDomain, url, acceptTab, acceptNonTab, navigationType, resolvedPath) {
      var pluginLoadInfo = getPluginLoadInfo(runtime, url);
      if (pluginLoadInfo && !pluginLoadInfo.loaded && pluginLoadInfo.lazy) {
          return;
      }
      var result;
      var fragment = resolveCleanPagePath(runtime, baseDomain, url, navigationType, resolvedPath);
      var pagePath = createPagePathFromFragment(fragment);
      if (isUrlFragmentProtocol4MiniExtension(fragment) && runtime().getMeta().isUsingMiniExtension()) {
          var hasExtensionPagePath = !!runtime().getRegistry().getPageLogicOption(pagePath);
          if (!hasExtensionPagePath) {
              reportPagePathNavigationError(runtime, navigationType, url, pagePath, true);
              result = {
                  error: 1,
                  errorMessage: "".concat(url, " resolved to ").concat(pagePath, " is not found in plugin"),
              };
          }
      }
      else {
          if (!runtime().getMeta().hasPagePath(pagePath)) {
              reportPagePathNavigationError(runtime, navigationType, url, pagePath, false);
              result = {
                  error: 1,
                  errorMessage: "".concat(url, " resolved to ").concat(pagePath, " is not found"),
              };
          }
      }
      if (!result && runtime().getMeta().isTabPage(pagePath)) {
          if (!acceptTab) {
              result = {
                  error: 1,
                  errorMessage: "".concat(url, " resolved to ").concat(pagePath, " is tab, which is not valid"),
              };
          }
      }
      else {
          if (!acceptNonTab) {
              result = {
                  error: 1,
                  errorMessage: "".concat(url, " resolved to ").concat(pagePath, " is not tab,  which is not valid"),
              };
          }
      }
      /**
       * 一次性通过率埋点
       * 宿主跳插件页面，都要统计
       */
      if (isAppxDomain4App(baseDomain) && (isPluginProtocolPath(url) || isDynamicProtocolPath(url))) {
          var runtimeInstance = getRuntimeById(runtime().getApp().appInstanceId);
          // tslint:disable object-literal-sort-keys
          runtimeInstance.getMiniExtensionManager().remoteDevelopmentDebugLog({
              miniExtensionId: {
                  type: 4 /* EMiniExtensionStringType._$_extension_id_$_ */,
                  value: fragment.domain,
              },
              type: "page" /* EPluginDevelopmentDebugType.PAGE */,
              pagePath: url,
              error: result && result.error ? "PAGE_NOT_FOUND" /* EPluginDevelopmentDebugErrorMessage.PAGE_NOT_FOUND */ : '',
          });
      }
      return result;
  }
  /**
   * 插件导航的设计原则
   * ** 插件只能跳转插件的页面，不能跳转 app 的页面 **
   * 1. 对绝对路径的 url 是通过添加 prefix plugin-private:// 解决的
   * 2. 对相对路径的要校验当前栈顶是不是当前插件的页面，如果不是，则报错
   */
  function isValidPageRoute4MiniExtension(runtime, url, appxDomain, resolvedPath) {
      var kSuccessResult = { result: true };
      if (!url) {
          return kSuccessResult;
      }
      if (url[0] === '/') {
          return kSuccessResult;
      }
      // 1. 插件不能跳转到主体小程序页面，防止类 intent 攻击
      // 2. 插件不能跳转到另一个插件页面
      // 3. 插件页面跳转没有效果
      var topPage = runtime().getNav().getTopInstance();
      var miniExtensionId = appxDomain.value;
      if (topPage) {
          var isTopPageMiniExtension = isProviderInfo4MiniExtension(topPage.getProviderInfo());
          var isAbsolute = isAbsoluteUrl(url);
          /**
           * 插件发起相对路径的调用
           * 并且栈顶不是插件页面
           */
          if (!isTopPageMiniExtension && !isAbsolute && !resolvedPath) {
              return {
                  reason: "plugin ".concat(miniExtensionId, " cannot jump to app page ").concat(url),
                  result: false,
              };
          }
          var isPluginPrivatePrefix = isPluginPrivateProtocolPath(url);
          if (isPluginPrivatePrefix) {
              // 如果是一个 plugin private url
              var typedString4PluginPrivatePath = {
                  type: 0 /* EMiniExtensionStringType.plugin_private_$_id_$_resolved_path */,
                  value: url,
              };
              var result = get_extensionId_resolvedPath(typedString4PluginPrivatePath);
              if (result && miniExtensionId !== result.extensionId.value) {
                  return {
                      reason: "can not use ".concat(url, " to jump to another plugin(").concat(result.extensionId.value, ") page"),
                      result: false,
                  };
              }
          }
      }
      else {
          // 如果栈顶页面不存在， AppX1.0 throw Error
          return {
              reason: "plugin(".concat(miniExtensionId, ") can not jump to any page(").concat(url, ") when there is not page in stack"),
              result: false,
          };
      }
      return kSuccessResult;
  }
  function isAbsoluteUrl(url) {
      return isPluginPrivateProtocolPath(url) || isPluginProtocolPath(url) || url[0] === '/';
  }

  var navigateBack = {
      v: function (opt) {
          var nav = this.runtime().getNav();
          if (!opt || !opt.delta) {
              opt.index = -1;
          }
          else {
              // 再看下 delta 是否满足栈
              var delta = parseInt(opt.delta, 10);
              var pageStackLen = nav.getCurrentStackLength();
              if (delta > 0 && delta < pageStackLen) {
                  // 最多退 len-1个页面
                  opt.index = -delta;
              }
              else if (delta >= pageStackLen) {
                  // 太多了，退到第一个
                  opt.index = -(pageStackLen - 1);
              }
              else {
                  // 默认退1个
                  opt.index = -1;
              }
          }
          if (opt.index >= 0 || !nav.canPopBack()) {
              return {
                  error: 'already top of navigation',
              };
          }
      },
      b: function (opt) {
          return opt;
      },
      d: function (opt, resolve) {
          var pageInstance = this.getPageInstance();
          var shouldPreventOriginalBackAction = pageInstance && pageInstance.getBackEventManager().performBackActionByHostAPI();
          if (shouldPreventOriginalBackAction) {
              return resolve();
          }
          var runtime = this.runtime();
          var navigation = runtime.getNav();
          navigation.prepare("NavigateBack" /* ESharedAppxNavigationType.NAVIGATIONBACK */, {
              method: "popTo" /* ESharedAppxNavigationBridgeMethod.PopTo */,
              param: opt,
          }, resolve);
          if (!navigation.supportChain()) {
              this.callDefaultBridge("popTo" /* ESharedAppxNavigationBridgeMethod.PopTo */, opt, navigation.failPostNavigation);
          }
      },
  };

  var AppxNavigationEventChannelPort = /** @class */ /*#__PURE__*/ (function () {
      function AppxNavigationEventChannelPort(dispatchImpl) {
          this.listeners = Object.create(null);
          this.pendingRecord = Object.create(null);
          this.dispatchEventToOpposite = dispatchImpl;
      }
      AppxNavigationEventChannelPort.prototype.addEvent = function (once, name, callback) {
          var this$1 = this;

          var addInfo = { callback: callback, once: once };
          var listeners = this.listeners[name];
          if (listeners) {
              if (!listeners.some(function (info) { return info.callback === callback; })) {
                  listeners.push(addInfo);
              }
          }
          else {
              // 首次监听
              this.listeners[name] = [addInfo];
              // 检视缓存队列
              var pendingRecord = this.pendingRecord;
              var record = pendingRecord[name];
              if (Array.isArray(record)) {
                  pendingRecord[name] = [];
                  for (var _i = 0, record_1 = record; _i < record_1.length; _i++) {
                      var payload = record_1[_i];
                      this$1.dispatchEvent(name, payload);
                  }
              }
          }
      };
      // 实际的 🚀 逻辑
      // 被 EventChannel 调用，触发自己
      AppxNavigationEventChannelPort.prototype.dispatchEvent = function (name, args) {
          var this$1 = this;

          var listeners = this.listeners[name];
          if (listeners) {
              for (var _i = 0, _a = listeners.slice(); _i < _a.length; _i++) {
                  var _b = _a[_i], once = _b.once, callback = _b.callback;
                  if (once) {
                      this$1.off(name, callback);
                  }
                  callback.apply(null, args);
              }
          }
          else {
              var pendingRecord = this.pendingRecord;
              var records = pendingRecord[name];
              if (records) {
                  records.push(args);
              }
              else {
                  pendingRecord[name] = [args];
              }
          }
      };
      // 做一层代理，只暴露四个接口
      AppxNavigationEventChannelPort.prototype.getPublicInstance = function () {
          var publicInstance = this.publicInstance;
          if (!publicInstance) {
              publicInstance = this.publicInstance = {
                  emit: this.emit.bind(this),
                  off: this.off.bind(this),
                  on: this.addEvent.bind(this, false),
                  once: this.addEvent.bind(this, true),
              };
          }
          return publicInstance;
      };
      AppxNavigationEventChannelPort.prototype.off = function (name, callback) {
          var listeners = this.listeners[name];
          if (listeners) {
              if (callback) {
                  var len = listeners.length;
                  while (len--) {
                      var listener = listeners[len];
                      if (listener.callback === callback) {
                          listeners.splice(len, 1);
                          // 不会重复监听一样的回调函数，去除一次后就可以溜了
                          break;
                      }
                  }
              }
              else {
                  // 清空该函数名的监听队列
                  listeners.length = 0;
              }
          }
      };
      // 被用户调用，去触发对面
      AppxNavigationEventChannelPort.prototype.emit = function (name) {
          var arguments$1 = arguments;

          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments$1[_i];
          }
          this.dispatchEventToOpposite(name, args);
      };
      return AppxNavigationEventChannelPort;
  }());

  var AppxNavigationEventChannel = /** @class */ /*#__PURE__*/ (function () {
      function AppxNavigationEventChannel() {
      }
      AppxNavigationEventChannel.prototype.getOpenerPort = function () {
          var openerPort = this.openerPort;
          if (!openerPort) {
              openerPort = this.openerPort = new AppxNavigationEventChannelPort(this.dispatchToOpened.bind(this));
          }
          return openerPort;
      };
      AppxNavigationEventChannel.prototype.getOpenedPort = function () {
          var openedPort = this.openedPort;
          if (!openedPort) {
              openedPort = this.openedPort = new AppxNavigationEventChannelPort(this.dispatchToOpener.bind(this));
          }
          return openedPort;
      };
      AppxNavigationEventChannel.prototype.dispatchToOpened = function (name, args) {
          this.getOpenedPort().dispatchEvent(name, args);
      };
      AppxNavigationEventChannel.prototype.dispatchToOpener = function (name, args) {
          this.getOpenerPort().dispatchEvent(name, args);
      };
      return AppxNavigationEventChannel;
  }());

  var navigateTo = {
      v: function (opt) {
          if (this.isMiniExtension) {
              var valid4Extension = isValidPageRoute4MiniExtension(this.runtime, opt.url, this.appxDomain, opt.resolvedPath);
              if (valid4Extension.result === false) {
                  return {
                      error: 1,
                      errorMessage: valid4Extension.reason,
                  };
              }
          }
          // https://baiyan.antfin.com/task/86490?bqlKey=12d3972
          // 页面深度超10时做下日志上报
          var runtime = this.runtime();
          var nav = runtime.getNav();
          if (nav.getCurrentStackLength() >= 10) {
              runtime.getBehaviorManager().report('page stack overflow', {
                  pagePathStack: nav.currentStack.map(function (page) { return page.pagePath; }),
                  targetUrl: opt.url,
              });
          }
          return validatePagePath(this.runtime, this.appxDomain, opt.url, true, true, "NavigateTo" /* ESharedAppxNavigationType.NAVIGATETO */, opt.resolvedPath);
      },
      b: function (opt) {
          // 还需要判断 finalUrl 是不是合法等一系列问题
          if (!opt || !opt.url) {
              throw getError4UrlEmpty();
          }
      },
      d: function (opt, resolve) {
          var _this = this;
          var openerPublicInstance;
          var eventChannel;
          function getEventChannel() {
              if (!eventChannel) {
                  eventChannel = new AppxNavigationEventChannel();
              }
              return eventChannel;
          }
          var callbackPayload = {
              get eventChannel() {
                  if (!openerPublicInstance) {
                      openerPublicInstance = getEventChannel().getOpenerPort().getPublicInstance();
                  }
                  return openerPublicInstance;
              },
              set eventChannel(value) {
                  Object.defineProperty(this, 'eventChannel', {
                      configurable: true,
                      enumerable: true,
                      value: value,
                      writable: true,
                  });
              },
          };
          var openerEvents = opt.events;
          if (openerEvents) {
              var openerPort = callbackPayload.eventChannel;
              for (var _i = 0, _a = Object.keys(openerEvents); _i < _a.length; _i++) {
                  var name = _a[_i];
                  openerPort.on(name, openerEvents[name]);
              }
          }
          fetchLazyLoadPlugin(this, opt.url, function () {
              var error = validatePagePath(_this.runtime, _this.appxDomain, opt.url, true, true, "NavigateTo" /* ESharedAppxNavigationType.NAVIGATETO */, opt.resolvedPath);
              if (error) {
                  return resolve(error);
              }
              var fragment = resolveCleanPagePath(_this.runtime, _this.appxDomain, opt.url, "NavigateTo" /* ESharedAppxNavigationType.NAVIGATETO */, opt.resolvedPath);
              opt.url = createUrlFromFragment(fragment);
              opt.launchParamsTag = createPagePathFromFragment(fragment);
              fetchSubpackageAndPrepageNavigation(_this, opt.launchParamsTag, resolve, "NavigateTo" /* ESharedAppxNavigationType.NAVIGATETO */, {
                  getEventChannel: getEventChannel,
                  method: "pushWindow" /* ESharedAppxNavigationBridgeMethod.PushWindow */,
                  param: opt,
              }, callbackPayload);
          });
      },
  };

  var reLaunch = {
      v: function (opt) {
          if (this.isMiniExtension) {
              var valid4Extension = isValidPageRoute4MiniExtension(this.runtime, opt.url, this.appxDomain, opt.resolvedPath);
              if (valid4Extension.result === false) {
                  return {
                      error: 1,
                      errorMessage: valid4Extension.reason,
                  };
              }
          }
          return validatePagePath(this.runtime, this.appxDomain, opt.url, true, true, "ReLaunch" /* ESharedAppxNavigationType.RELAUNCH */, opt.resolvedPath);
      },
      b: function (opt) {
          if (!opt || !opt.url) {
              throw getError4UrlEmpty();
          }
      },
      d: function (opt, resolve) {
          var _this = this;
          fetchLazyLoadPlugin(this, opt.url, function () {
              var error = validatePagePath(_this.runtime, _this.appxDomain, opt.url, true, true, "ReLaunch" /* ESharedAppxNavigationType.RELAUNCH */, opt.resolvedPath);
              if (error) {
                  return resolve(error);
              }
              var newOpt;
              var fragment = resolveCleanPagePath(_this.runtime, _this.appxDomain, opt.url, "ReLaunch" /* ESharedAppxNavigationType.RELAUNCH */, opt.resolvedPath);
              var url = createUrlFromFragment(fragment);
              var pagePath = createPagePathFromFragment(fragment);
              // TODO: 把当前所有页面都unload掉
              if (_this.runtime().getMeta().isTabPage(pagePath)) {
                  newOpt = {
                      method: "switchTab" /* ESharedAppxNavigationBridgeMethod.SwitchTab */,
                      pagePath: pagePath,
                      param: {
                          recreate: true,
                          tag: pagePath,
                      },
                      tabQuery: fragment.query,
                  };
              }
              else {
                  newOpt = {
                      method: "pushWindow" /* ESharedAppxNavigationBridgeMethod.PushWindow */,
                      pagePath: pagePath,
                      param: {
                          launchParamsTag: pagePath,
                          param: {
                              animationType: 'none',
                              closeAllWindow: true,
                          },
                          url: url,
                      },
                  };
              }
              fetchSubpackageAndPrepageNavigation(_this, newOpt.pagePath, resolve, "ReLaunch" /* ESharedAppxNavigationType.RELAUNCH */, newOpt);
          });
      },
  };

  var redirectTo = {
      v: function (opt) {
          if (this.isMiniExtension) {
              var valid4Extension = isValidPageRoute4MiniExtension(this.runtime, opt.url, this.appxDomain, opt.resolvedPath);
              if (valid4Extension.result === false) {
                  return {
                      error: 1,
                      errorMessage: valid4Extension.reason,
                  };
              }
          }
          return validatePagePath(this.runtime, this.appxDomain, opt.url, true, true, "RedirectTo" /* ESharedAppxNavigationType.REDIRECTTO */, opt.resolvedPath);
      },
      b: function (opt) {
          if (!opt || !opt.url) {
              throw getError4UrlEmpty();
          }
      },
      d: function (opt, resolve) {
          var _this = this;
          fetchLazyLoadPlugin(this, opt.url, function () {
              var error = validatePagePath(_this.runtime, _this.appxDomain, opt.url, true, true, "RedirectTo" /* ESharedAppxNavigationType.REDIRECTTO */, opt.resolvedPath);
              if (error) {
                  return resolve(error);
              }
              var fragment = resolveCleanPagePath(_this.runtime, _this.appxDomain, opt.url, "RedirectTo" /* ESharedAppxNavigationType.REDIRECTTO */, opt.resolvedPath);
              opt.url = createUrlFromFragment(fragment);
              opt.launchParamsTag = createPagePathFromFragment(fragment);
              opt.param = {
                  animationType: 'none',
                  closeCurrentWindow: true,
              };
              fetchSubpackageAndPrepageNavigation(_this, opt.launchParamsTag, resolve, "RedirectTo" /* ESharedAppxNavigationType.REDIRECTTO */, {
                  method: "pushWindow" /* ESharedAppxNavigationBridgeMethod.PushWindow */,
                  param: opt,
              });
          });
      },
  };

  var switchTab = {
      v: function (opt) {
          if (opt.tag) {
              return;
          }
          if (this.isMiniExtension) {
              // 是插件在调用这个 JSAPI
              return {
                  error: 1,
                  errorMessage: 'plugin can not use switchTab',
              };
              // throw new Error('plugin can not use switchTab');
          }
          return validatePagePath(this.runtime, this.appxDomain, opt.url, true, false, "SwitchTab" /* ESharedAppxNavigationType.SWITCHTAB */, opt.resolvedPath);
      },
      b: function (opt) {
          if (!opt.tag) {
              // 还需要判断 finalUrl 是不是合法等一系列问题
              if (!opt.url) {
                  throw getError4UrlEmpty();
              }
              var fragment = resolveCleanPagePath(this.runtime, this.appxDomain, opt.url, "SwitchTab" /* ESharedAppxNavigationType.SWITCHTAB */, opt.resolvedPath);
              var pagePath = createPagePathFromFragment(fragment);
              opt.tag = pagePath;
              delete opt.url;
              opt.recreate = false;
              opt.tabQuery = fragment.query;
          }
      },
      d: function (_a, resolve) {
          var tabQuery = _a.tabQuery, opt = __rest(_a, ["tabQuery"]);
          fetchSubpackageAndPrepageNavigation(this, opt.tag, resolve, "SwitchTab" /* ESharedAppxNavigationType.SWITCHTAB */, {
              method: "switchTab" /* ESharedAppxNavigationBridgeMethod.SwitchTab */,
              param: opt,
              tabQuery: tabQuery,
          });
      },
  };

  var reportCustomError = {
      fnOptionIndex: false,
      fn: function (error) {
          var stack;
          if (!error) {
              return;
          }
          try {
              stack = (error.stack || '').split('\n').slice(0, 5).join('\n');
          }
          catch (e) { }
          reportHostError(this.runtime().getKernel(), 20 /* ESharedAppxSpecificErrorCode.HostCustomError */, {
              column: error.column,
              line: error.line,
              message: error.message,
              sourceURL: error.sourceURL,
              stack: stack,
          });
      },
  };



  var CoreAPIMap = {
      __proto__: null,
      navigateBack: navigateBack,
      navigateTo: navigateTo,
      reLaunch: reLaunch,
      redirectTo: redirectTo,
      switchTab: switchTab,
      reportCustomError: reportCustomError
  };

  // tslint:disable object-literal-sort-keys
  function getBridgeCanIUse4Core(appMode) {
      var appFlag = appMode ? 1 : 0;
      var onKeyboardShowOrHide = (/* f_page_onKeyboardShowOrHide_23_2:false */ false) ? 1 : 0;
      var canIUse = {
          component: {
              createIntersectionObserver: 1,
              createSelectorQuery: 1,
              pageEvents: 1,
              onError: 1,
          },
          page: {
              createIntersectionObserver: 1,
              createSelectorQuery: 1,
              setData: {
                  callback: 1,
              },
              $spliceData: 1,
              onOptionMenuClick: 1,
              onPopMenuClick: 1,
              onTabItemTap: 1,
              onPullIntercept: 1,
              onPullDownRefresh: {
                  object: {
                      from: 1,
                  },
              },
              events: {
                  onLoad: 1,
                  onShow: 1,
                  onReady: 1,
                  onHide: 1,
                  onTabItemTap: 1,
                  onPageScroll: 1,
                  onReachBottom: 1,
                  onPullDownRefresh: 1,
                  beforeTabItemTap: 1,
                  onBack: appFlag,
                  onKeyboardHeight: appFlag,
                  onKeyboardShow: onKeyboardShowOrHide,
                  onKeyboardHide: onKeyboardShowOrHide,
                  onOptionMenuClick: 1,
                  onPopMenuClick: 1,
                  onPullIntercept: 1,
                  onTitleClick: 1,
                  onResize: 1,
                  onSnapshotInteraction: 1,
                  onSelectedTabItemTap: (insideFeatureRuntimeVersion >= /* f_page_events_onSelectedTabItemTap_2_7_0:10.2.18 */ 10002018) ? 1 : 0,
              },
              onShareAppMessage: {
                  return: {
                      searchTip: (insideFeatureRuntimeVersion >= /* f_share_return_searchTip_24_0:10.1.82 */ 10001082) ? 1 : 0,
                      scImgUrl: (insideFeatureRuntimeVersion >= /* f_share_return_scImgUrl_2_7_13:10.2.50 */ 10002050) ? 1 : 0,
                  },
                  async: 1,
              },
              onKeyboardShow: onKeyboardShowOrHide,
              onKeyboardHide: onKeyboardShowOrHide,
          },
          styleIsolation: {
              'apply-shared': 1,
              shared: 1,
          },
          sjs: {
              event: {
                  component: {
                      callMethod: 1,
                      cancelAnimationFrame: 1,
                      getState: 1,
                      requestAnimationFrame: 1,
                      selectAllComponents: 1,
                      selectComponent: 1,
                      selectOwnerComponent: 1,
                  },
                  composedPath: 1,
                  element: {
                      addClass: 1,
                      callMethod: 1,
                      cancelAnimationFrame: 1,
                      getBoundingClientRect: 1,
                      getComputedStyle: 1,
                      getDOMProperty: 1,
                      getDataset: 1,
                      getState: 1,
                      hasClass: 1,
                      removeClass: 1,
                      requestAnimationFrame: 1,
                      selectAllComponents: 1,
                      selectComponent: 1,
                      selectOwnerComponent: 1,
                      setDOMProperty: 1,
                      setStyle: 1,
                  },
                  preventDefault: 1,
                  return: {
                      false: 1,
                  },
                  selector: {
                      deep: 1,
                  },
                  stopPropagation: 1,
              },
          },
      };
      return canIUse;
  }
  function getBridgeCanIUse4CoreWithRuntime(appMode, runtimeGetter) {
      var runtime = runtimeGetter();
      var meta = runtime.getMeta();
      var info = meta.getCompileInfo();
      var env = runtime.getEnv();
      var _a = env.originalStartupParams, _b = _a.inPageRenderType, inPageRenderType = _b === void 0 ? '' : _b, enableHoistEmbededWebView = _a.enableHoistEmbededWebView;
      var inPageRenderTypeObj = Object.create(null);
      /**
       * Android 系统内核不支持同层
       */
      if (env.userAgent.indexOf('UCBS') === -1) {
          for (var _i = 0, _c = inPageRenderType.split('|'); _i < _c.length; _i++) {
              var item = _c[_i];
              inPageRenderTypeObj[item] = 1;
          }
      }
      var switchManager = runtime.getSwitchManager();
      var disableSelectMethods = switchManager.get("disableSelectComponentMethods" /* ESharedAppxSwitchManagerName.DisableSelectComponentMethods */) || 0;
      var enableSelectComponent = switchManager.get("enableSelectComponent" /* ESharedAppxSwitchManagerName.EnableSelectComponent */) !== false;
      return {
          // TODO:
          // h5-worker 没有走这个函数
          // 所以该库会失效
          // 等下个版本全量这个能力时再使其生效
          component: {
              selectComposedParentComponent: 
              // tslint:disable-next-line no-bitwise
              disableSelectMethods & 1 /* ESharedAppxSwitchManagerValue4DisableSelectComponentMethods.ComposedParentComponent */
                  ? 0
                  : 1,
              selectOwnerComponent: 
              // tslint:disable-next-line no-bitwise
              disableSelectMethods & 2 /* ESharedAppxSwitchManagerValue4DisableSelectComponentMethods.OwnerComponent */ ? 0 : 1,
              $selectComponent: enableSelectComponent ? 1 : 0,
              $selectAllComponents: enableSelectComponent ? 1 : 0,
          },
          component2: info && info.component2 ? 1 : 0,
          page: {
              hoistEmbededWebView: enableHoistEmbededWebView ? 1 : 0,
          },
          plugin: (insideFeatureRuntimeVersion >= /* f_plugin_23_0:10.1.80 */ 10001080)
              ? {
                  // constructor.app 传送门见上方 getBridgeCanIUseEvaluate4Core
                  dynamic: !!meta.isUsingMiniExtension4Dynamic() ? 1 : 0,
              }
              : 0,
          inPageRenderType: inPageRenderType !== '' ? inPageRenderTypeObj : 0,
          sjs: {
              // tslint:disable-next-line no-bitwise
              propObserver: info && info.zephyrFlag & 8 /** EZCompilerRuntimeFlag.SjsPropObserver */ ? 1 : 0,
          },
          MYWebAssembly: (insideFeatureRuntimeVersion >= /* f_webassembly_2_7_11:10.2.30 */ 10002030) &&
              switchManager.get("enableMYWebAssembly" /* ESharedAppxSwitchManagerName.EnableMYWebAssembly */)
              ? 1
              : 0,
      };
  }

  function getBridgeAPI4Core() {
      return createBridgeTypedAPI(CoreAPIMap);
  }

  var reLaunchToStaticMiniExtensionPrivatePageInternal = {
      b: reLaunch.b,
      private: true,
      v: function (opt) {
          var runtime = this.runtime();
          if (runtime.getMeta().isUsingMiniExtension()) {
              var fragment = resolveCleanPagePath(this.runtime, this.appxDomain, opt.url, "ReLaunch" /* ESharedAppxNavigationType.RELAUNCH */, opt.resolvedPath);
              var pagePath = createPagePathFromFragment(fragment);
              if (runtime.getRegistry().getPageLogicOption(pagePath)) {
                  return;
              }
              else {
                  /**
                   * 如果页面找不到，可能是因为此时，动态插件的loadPlugin还没触发
                   * 比如在保活场景下，使用新schema直接跳转动态插件页面，这时候不应该报错，需要走正常加载流程
                   */
                  var pluginPrivatePath = {
                      type: 0 /* EMiniExtensionStringType.plugin_private_$_id_$_resolved_path */,
                      value: pagePath,
                  };
                  var res = get_extensionId_resolvedPath(pluginPrivatePath);
                  if (res) {
                      var extensionId = {
                          type: 4 /* EMiniExtensionStringType._$_extension_id_$_ */,
                          value: res.extensionId.value,
                      };
                      var isStatic = runtime.getMiniExtensionManager().isStaticMiniExtension(extensionId);
                      if (!isStatic) {
                          // 是动态插件，走正常relunch逻辑
                          return;
                      }
                  }
              }
          }
          return {
              error: 1,
              errorMessage: "".concat(opt.url, " is not found in plugin"),
          };
      },
      d: function (opt, resolve) {
          var _this = this;
          fetchLazyLoadPlugin(this, opt.url, function () {
              var newOpt;
              var fragment = resolveCleanPagePath(_this.runtime, _this.appxDomain, opt.url, "ReLaunch" /* ESharedAppxNavigationType.RELAUNCH */);
              var url = createUrlFromFragment(fragment);
              var pagePath = createPagePathFromFragment(fragment);
              // TODO: 把当前所有页面都unload掉
              if (_this.runtime().getMeta().isTabPage(pagePath)) {
                  newOpt = {
                      method: "switchTab" /* ESharedAppxNavigationBridgeMethod.SwitchTab */,
                      pagePath: pagePath,
                      param: {
                          recreate: true,
                          tag: pagePath,
                      },
                      tabQuery: fragment.query,
                  };
              }
              else {
                  newOpt = {
                      method: "pushWindow" /* ESharedAppxNavigationBridgeMethod.PushWindow */,
                      pagePath: pagePath,
                      param: {
                          launchParamsTag: pagePath,
                          param: {
                              animationType: 'none',
                              closeAllWindow: true,
                          },
                          url: url,
                      },
                  };
              }
              fetchSubpackageAndPrepageNavigation(_this, newOpt.pagePath, resolve, "ReLaunch" /* ESharedAppxNavigationType.RELAUNCH */, newOpt);
          });
      },
  };

  function resetStacks(nav, nextPage) {
      // 只有当锁定场景会到这里进行 postprocess
      // 需要把清理页面以及入栈的事情做完
      nav.resetStacks(false);
      // 新页面入栈
      nav.pushStack(nextPage, true);
  }
  function shouldAppResumeReLaunch(runtime, isAliveStartup) {
      var env = runtime.getEnv();
      // 92及以上才有 isAliveStartup 这个标
      // Cube 也什么都不做
      if (env.clientVersionSequence < 10001092 /* EBridgeAlipayVersionSequence.v_10_1_92 */ || env.isOnlyCube) {
          return true;
      }
      var switchValue = runtime.getSwitchManager().get("appResumeReLaunchNeedIsAliveStartup" /* ESharedAppxSwitchManagerName.AppResumeReLaunchNeedIsAliveStartup */) ||
          0 /* ESharedAppxSwitchManagerValue4AppResumeReLaunchNeedIsAliveStartup.Ignore */;
      if (
      // 满足 !shouldNotReLaunch + appResume + page 即可 reLaunch
      switchValue === 0 /* ESharedAppxSwitchManagerValue4AppResumeReLaunchNeedIsAliveStartup.Ignore */ ||
          // 有这个标就不用判断环境了
          isAliveStartup) {
          return true;
      }
      // isAliveStartup 为布尔假
      switch (switchValue) {
          case 3 /* ESharedAppxSwitchManagerValue4AppResumeReLaunchNeedIsAliveStartup.All */:
              // iOS 和安卓都不允许 reLaunch
              return false;
          case 1 /* ESharedAppxSwitchManagerValue4AppResumeReLaunchNeedIsAliveStartup.IOS */:
              return env.platform !== 'ios';
          case 2 /* ESharedAppxSwitchManagerValue4AppResumeReLaunchNeedIsAliveStartup.Android */:
              return env.platform !== 'android';
      }
      // 不可能走到这里来
  }
  function showPageDisableToast(runtime, bridgePublicInstance, err) {
      var switchManager = runtime.getSwitchManager();
      if (switchManager && !switchManager.get("disableToastWhenAppResumePageNotFound" /* ESharedAppxSwitchManagerName.DisableToastWhenAppResumePageNotFound */)) {
          if (err && err.error === 1 && /not found/.test(err.errorMessage)) {
              bridgePublicInstance.showToast({
                  content: '页面已失效',
                  type: 'exception',
              });
          }
      }
  }
  function prepare$1(nav, payload) {
      // 更新启动参数
      /**
       * 普通 Resume 和 ReLaunch 都会进入这里，但是 Resume 容器不会携带启动参数
       * 因此
       *
       * - 当且仅当有新的启动参数传入时，才进入参数刷新流程(先不处理)
       * - 传给 app.onShow 的参数一定是从 payload 中来的(避免刷新时未覆盖而用老的)
       */
      refreshAppxEnvStartupParams(nav.appInstanceId, payload);
      var runtime = getRuntimeById(nav.appInstanceId);
      var appBehavior = runtime.getMeta().getAppBehavior();
      var decodeQuery = true;
      if (appBehavior &&
          appBehavior["decodeQuery" /* ESharedAppMetaBehaviorMapValue.DecodeQuery */] === "disable" /* ESharedDecodeQueryBehaviorType.Disable */) {
          decodeQuery = false;
      }
      // 处理半屏启动参数，当前小程序启动后半屏启动参数不会再变
      var halfScreen = runtime.getEnv().originalStartupParams.halfScreen;
      var resumeOption = getLaunchOptionFromLatestStartupParams(__assign(__assign({}, payload), { halfScreen: halfScreen }), payload.page, decodeQuery);
      // 在触发 app resume, page resume
      nav.getApp().onResume(resumeOption);
      // 如果页面将要 reLaunch
      // 不要触发 PageResume
      if (nav.isValidPageUrl(payload.NBPageUrl) && !resumeOption.path) {
          var topPage = nav.getTopInstance();
          if (topPage) {
              topPage.onPageResume();
          }
      }
      var willUnloadCurrentPages;
      if (payload.shouldNotReLaunch) {
          willUnloadCurrentPages = true;
          // reLaunch 模式
          // 锁定一直等到容器把新页面放进来
          if (nav.pendingPage) {
              // 立即执行 post把栈处理完
              var nextPage = nav.pendingPage;
              nav.pendingPage = null;
              resetStacks(nav, nextPage);
              nextPage.setIsFromResumeReLaunch();
              nextPage.bootstrap();
          }
          else {
              // 没有 pendingPage 等 create
              nav.lock("AppResumeReLaunch" /* ESharedAppxNavigationType.APPRESUMERELAUNCH */, null);
          }
      }
      else if (payload.page) {
          if (shouldAppResumeReLaunch(runtime, payload.isAliveStartup)) {
              willUnloadCurrentPages = true;
              // 设置为绝对路径
              // 避免 H/C 建连之前如果走到这里
              // 没有首页导致 JSAPI 抛错问题
              var sourcePagePath = payload.page.replace(/^\//, '');
              var url = '/' + sourcePagePath;
              // 比如当前应用没被保活，但是在支付宝前台(支付宝压后台)
              // 从外部指定 page 的 scheme 跳入, 会进入这个分支
              // 需要来一遍 reLaunch 的流程
              var topInstance = runtime.getNav().getTopInstance();
              if (topInstance) {
                  topInstance.setIsNextFromResumeReLaunch();
              }
              var bridgePublicInstance_1 = runtime.getBridge().defaultScope.publicInstance;
              var reLaunchOption = {
                  url: url,
                  fail: function (err) {
                      showPageDisableToast(runtime, bridgePublicInstance_1, err);
                  },
              };
              // 插件页面是 plugin-private:// 协议，不能走 my.reLaunch
              if (isPluginPrivateProtocolPath(sourcePagePath)) {
                  callAPIInfo('reLaunch', reLaunchToStaticMiniExtensionPrivatePageInternal, kBridgeAppxDomain4Empty, function () { return runtime; }, reLaunchOption);
              }
              // TODO
              // 这里直接调了 my.reLaunch 可能被用户劫持
              else {
                  bridgePublicInstance_1.reLaunch(reLaunchOption);
              }
          }
      }
      if (willUnloadCurrentPages) {
          nav.willUnloadStacks();
      }
  }
  function postprocess$1(nav, nextPage, action, newPageCreated, navActionId) {
      if (newPageCreated) {
          resetStacks(nav, nextPage);
          nav.unlock();
          nextPage.setIsFromResumeReLaunch();
          nextPage.bootstrap();
      }
      else {
          nav.addTrace('AppResumeReLaunch:postprocess no page created', null, 2 /* ESharedAppxNavigationTraceReportLevel.Warning */);
      }
  }

  var appResumeReLaunch = {
      __proto__: null,
      shouldAppResumeReLaunch: shouldAppResumeReLaunch,
      prepare: prepare$1,
      postprocess: postprocess$1,
      process: noop$3
  };

  function prepare$2(nav, option) {
      var toPage = nav.currentStack[nav.currentStack.length - 1 + option.param.index];
      nav.lock("NavigateBack" /* ESharedAppxNavigationType.NAVIGATIONBACK */, toPage.pageId, option);
  }
  function process$2(nav, action) {
      var payload = action.payload;
      // 如果被排队过来，如 navigateTo -> reLaunch + navigateBack
      // 可能失败（预期之中）
      nav.callBridge(action, payload.method, payload.param);
      // 执行完 JSBridge 后直接解锁
      // 被退栈的页面会在 nav.onPageDestroy 事件中被销毁
      nav.unlock();
  }

  var navigateBack$1 = {
      __proto__: null,
      prepare: prepare$2,
      process: process$2,
      postprocess: noop$3
  };

  function prepare$3(nav, option) {
      nav.lock("NavigateTo" /* ESharedAppxNavigationType.NAVIGATETO */, option.param.launchParamsTag, option);
  }
  function postprocess$2(nav, nextPage, action, newPageCreated, navActionId) {
      if (newPageCreated) {
          // 新建立的页面不是目标页面
          if (!(nextPage.pagePath === action.to && action.id === navActionId)) {
              nav.addTrace('NavigateTo:postprocess pages dismatch', null, 1 /* ESharedAppxNavigationTraceReportLevel.Error */);
              return true;
          }
          // 是的话继续走下去吧
      }
      // 没有新建页面
      else {
          nav.addTrace('NavigateTo:postprocess unexpected resume', null, action.next ? 1 /* ESharedAppxNavigationTraceReportLevel.Error */ : 2 /* ESharedAppxNavigationTraceReportLevel.Warning */);
          return true;
      }
      if (action.from) {
          action.from.onPagePause();
      }
      else {
          nav.addTrace('NavigateTo:postprocess source page not found', null, (action.payload && action.payload).recovery
              ? 4 /* ESharedAppxNavigationTraceReportLevel.Verbose */
              : 1 /* ESharedAppxNavigationTraceReportLevel.Error */);
      }
      nav.pushStack(nextPage, false);
      if (action.from) {
          nextPage.setLastPagePath(action.from.pagePath);
          var payload = action.payload;
          if (payload && payload.getEventChannel) {
              nextPage.setOpenerEventChannel(payload.getEventChannel);
          }
      }
      nav.unlock();
      nextPage.bootstrap();
  }

  var navigateTo$1 = {
      __proto__: null,
      prepare: prepare$3,
      postprocess: postprocess$2,
      process: process$1
  };

  function prepare$4(nav, option) {
      nav.lock("ReLaunch" /* ESharedAppxNavigationType.RELAUNCH */, option.method === "switchTab" /* ESharedAppxNavigationBridgeMethod.SwitchTab */ ? option.param.tag : option.param.launchParamsTag, option);
  }
  function process$3(nav, action) {
      // 如果当前栈是空的，不必等销毁事件
      action.lock = nav.getTopInstance() ? 0 : 1 /* ESharedAppxNavigationActionLock.PageDestroyed */;
      var payload = action.payload;
      nav.callBridge(action, payload.method, payload.param);
  }
  function postprocess$3(nav, nextPage, action, newPageCreated, navActionId) {
      // 没新页面创建或者新创建的页面不是目标页面则不消费该事件
      if (!(newPageCreated && nextPage.pagePath === action.to && navActionId === action.id)) {
          // 线上发现 iOS 在 reLaunch 建立新页面后
          // 还会收到老页面建立的消息
          // 先强行忽略
          if (newPageCreated &&
              action.from &&
              nextPage.pagePath === action.from.pagePath &&
              nextPage.pageId === action.from.pageId) {
              // TODO
              // 尽管导航栈跳过了
              // 但仍然存活于 pageManager 中
              nav.addTrace('ReLaunch:postprocess old page was recreated', null, 2 /* ESharedAppxNavigationTraceReportLevel.Warning */);
          }
          else {
              nav.addTrace('ReLaunch:postprocess pages dismatch or unexpected resume', null, newPageCreated || action.next
                  ? 1 /* ESharedAppxNavigationTraceReportLevel.Error */
                  : 2 /* ESharedAppxNavigationTraceReportLevel.Warning */);
          }
          return true;
      }
      nav.resetStacks(false);
      nav.pushStack(nextPage, true);
      if (action.from) {
          nextPage.setLastPagePath(action.from.pagePath);
          if (action.from.getIsNextFromResumeReLaunch()) {
              nextPage.setIsFromResumeReLaunch();
          }
      }
      if (newPageCreated) {
          if (action.tabQuery) {
              nextPage.setTabQuery(action.tabQuery);
          }
      }
      nextPage.bootstrap();
      unlockWhenPagesCreatedDestroyed(nav, action, 2 /* ESharedAppxNavigationActionLock.PageCreated */);
  }

  var reLaunch$1 = {
      __proto__: null,
      prepare: prepare$4,
      process: process$3,
      postprocess: postprocess$3
  };

  function prepare$5(nav, option) {
      nav.lock("RedirectTo" /* ESharedAppxNavigationType.REDIRECTTO */, option.param.launchParamsTag, option);
  }
  function postprocess$4(nav, nextPage, action, newPageCreated, navActionId) {
      if (newPageCreated) {
          // 新建立的页面不是目标页面
          if (!(nextPage.pagePath === action.to && action.id === navActionId)) {
              nav.addTrace('NavigateTo:postprocess pages dismatch', null, 1 /* ESharedAppxNavigationTraceReportLevel.Error */);
              return true;
          }
          // 是的话继续走下去吧
      }
      // 没有新建页面
      else {
          nav.addTrace('NavigateTo:postprocess unexpected resume', null, action.next ? 1 /* ESharedAppxNavigationTraceReportLevel.Error */ : 2 /* ESharedAppxNavigationTraceReportLevel.Warning */);
          // 没有新页面什么都别做
          return true;
      }
      // A navigateTo B，B redirectTo C，假设 B 已经被 beforeDestroy 消息退栈
      // C 创建时栈里只剩下 A 了
      // 我们不可以把 A 干掉
      // 所以下面的 popStack 必须精准识别页面
      if (action.from) {
          // 从 B redirectTo C，B 作为 action.from 需要被移除
          // 正常来讲 B 会收到对应的 beforeDestroy 消息
          // 但假设 redirectTo 的 H/C 建连先到
          // 我们也先移除一把（但保持静默）
          // 这样子的话生命周期的顺序才对的上
          // 即：先 Unload B，再 Load/Show C
          nav.popStack(action.from);
      }
      else {
          nav.addTrace('RedirectTo:postprocess source page not found', null, (action.payload && action.payload).recovery
              ? 4 /* ESharedAppxNavigationTraceReportLevel.Verbose */
              : 1 /* ESharedAppxNavigationTraceReportLevel.Error */);
      }
      // 换掉之后还要切换一下 currentTabPage
      nav.pushStack(nextPage, nav.currentStack.length === 0);
      if (action.from) {
          nextPage.setLastPagePath(action.from.pagePath);
      }
      nav.unlock();
      nextPage.bootstrap();
  }

  var redirectTo$1 = {
      __proto__: null,
      prepare: prepare$5,
      postprocess: postprocess$4,
      process: process$1
  };

  function prepare$6(nav, option) {
      // 加锁
      nav.lock("SwitchTab" /* ESharedAppxNavigationType.SWITCHTAB */, option.param.tag, option);
  }
  function process$4(nav, action) {
      // 如果执行的时候已经在当前页面了
      // 跳不动的
      if (nav.getTopPagePath() === action.to) {
          nav.unlock();
      }
      else {
          var payload = action.payload;
          nav.callBridge(action, payload.method, payload.param);
      }
  }
  function postprocess$5(nav, nextPage, action, newPageCreated, navActionId) {
      var meta = getRuntimeById(nav.appInstanceId).getMeta();
      var pagePath = nextPage.pagePath;
      var isNextPageTab = meta.isTabPage(pagePath);
      // 同时发起 navigateTo + switchTab，把 navigateTo 打断，但
      // navigateTo 先 H/C 建连走到这里来
      // 就需要将其忽略，等到真正 switchTab 的建连过来
      if (!isNextPageTab) {
          nav.addTrace('SwitchTab:postprocess unexpected non tab page');
          return true;
      }
      if (pagePath !== action.to) {
          if (newPageCreated) {
              // 发生连续的 SwitchTab / SwitchTabClick 时
              // 新页面需要存下来，等下次点过去的时候恢复
              // 但由于没有 tabProps（如果后面需要提前其生命周期可以保存）
              // 所以只留栈不操作生命周期
              nav.tabStack[pagePath] = [nextPage];
              nav.addTrace('SwitchTab:postprocess non current tab page created', null, 2 /* ESharedAppxNavigationTraceReportLevel.Warning */);
          }
          return true;
      }
      // 原来的 Tab 页面隐藏掉
      if (action.from && meta.isTabPage(action.from.pagePath)) {
          action.from.onPagePause();
      }
      // 干掉其他非 Tab 页
      nav.resetStacks(true);
      // 读取栈的时候注意还没有切底栈，所以直接访问
      var stackPage = nav.tabStack[pagePath] && nav.tabStack[pagePath][0];
      if (stackPage && stackPage !== nextPage) {
          stackPage.onPageUnload();
          nav.addTrace('tab has page in stack already', null, 1 /* ESharedAppxNavigationTraceReportLevel.Error */);
      }
      // 把新 Tab 放进去
      // 注意这个 Tab 可能是 onPageResume 回来的
      // 甚至可能是上一次被跳过的
      nav.pushStack(nextPage, true);
      // 生命周期来一遍
      // 上一次被跳过的也当成新 Tab
      var isNewTab = newPageCreated || nextPage.getState() === "Inited" /* EPageLifecycleState.INITED */;
      if (action.from && isNewTab) {
          nextPage.setLastPagePath(action.from.pagePath);
      }
      if (newPageCreated) {
          if (action.tabQuery) {
              nextPage.setTabQuery(action.tabQuery);
          }
      }
      nav.unlock();
      var tabProps = action.payload;
      if (isNewTab) {
          nextPage.bootstrap(tabProps);
      }
      else if (tabProps) {
          nextPage.onTabItemTap(tabProps);
      }
  }

  var switchTab$1 = {
      __proto__: null,
      prepare: prepare$6,
      process: process$4,
      postprocess: postprocess$5
  };

  function prepare$7(nav, payload) {
      nav.lock("SwitchTabClick" /* ESharedAppxNavigationType.SWITCHTABCLICK */, payload.pagePath, payload);
  }

  var switchTabClick = {
      __proto__: null,
      prepare: prepare$7,
      process: noop$3,
      postprocess: postprocess$5
  };



  var NavigationActionImpl = {
      __proto__: null,
      AppReLaunchBeforeAppResume4iOSCube: appRelaunchBeforeAppResume,
      AppResumeReLaunch: appResumeReLaunch,
      NavigateBack: navigateBack$1,
      NavigateTo: navigateTo$1,
      ReLaunch: reLaunch$1,
      RedirectTo: redirectTo$1,
      SwitchTab: switchTab$1,
      SwitchTabClick: switchTabClick
  };

  function isPageNotFoundRecoveryNavType(navType) {
      switch (navType) {
          case "RedirectTo" /* ESharedAppxNavigationType.REDIRECTTO */:
          case "ReLaunch" /* ESharedAppxNavigationType.RELAUNCH */:
          case "SwitchTab" /* ESharedAppxNavigationType.SWITCHTAB */:
              return true;
      }
  }
  var AppxNavigationController = /** @class */ /*#__PURE__*/ (function () {
      function AppxNavigationController(appInstanceId) {
          this.tabStack = Object.create(null);
          this.traceReportLevel = 0 /* ESharedAppxNavigationTraceReportLevel.None */;
          this.traceMessages = [];
          this.navActionId = 1;
          this.inRecovery = false;
          this.whenTopInstancePushedCallback = [];
          this.destroyPages = createSet();
          this.appInstanceId = appInstanceId;
      }
      Object.defineProperty(AppxNavigationController.prototype, "currentStack", {
          get: function () {
              return this.getStack(this.getCurrentTabPagePath());
          },
          enumerable: false,
          configurable: true
      });
      AppxNavigationController.prototype.supportChain = function () {
          return true;
      };
      AppxNavigationController.prototype.supportRescue = function (type) {
          return this.inRecovery && isPageNotFoundRecoveryNavType(type);
      };
      AppxNavigationController.prototype.failPostNavigation = function () { };
      AppxNavigationController.prototype.onPageNotFound = function (pagePath, context, error) {
          var runtime = getRuntimeById(this.appInstanceId);
          var port = context.port;
          if (port && !port.onmessage) {
              port.onmessage = this.onPageNotFoundMessageHandler.bind(this);
          }
          if (runtime.getSwitchManager().get("disableNavigationRecovery" /* ESharedAppxSwitchManagerName.DisableNavigationRecovery */)) {
              this.addTrace('onPageNotFound switch off');
              notifyPageNotFoundToClient(port, error);
              return;
          }
          // 标记开始抢救
          this.inRecovery = true;
          // 触发用户钩子
          var payload = {
              isEntryPage: !this.internalCurrentTabPagePath,
              path: pagePath,
              query: context.query ? parse(context.query) : {},
          };
          this.addTrace('onPageNotFound will invoke', payload);
          // 触发钩子中，用户可以通过 my.redirectTo 等发起请求重定向页面
          // 发生重定向请求时，会预先经过导航 JSAPI 的页面有效性（是否存在）判定
          // 如果判定有效，后续进入 this.beforePreparation
          // 而 beforePreparation 一旦触发，则认为抢救成功
          runtime.getApp().invokeLifeCycle('onPageNotFound', payload);
          runtime.getTypedEventManager().invokeInternalEvent(7 /* ESharedAppxInternalEvent.PageNotFound */, [payload]);
          // 钩子触发完毕后还是处在「抢救中」
          // 说明 beforePreparation 没有被触发
          if (this.inRecovery) {
              notifyPageNotFoundToClient(context.port, error);
              this.addTrace('onPageNotFound no recovery attempt or all failed', null, 1 /* ESharedAppxNavigationTraceReportLevel.Error */);
              this.inRecovery = false;
          }
          // 已经抢救成功啦
          // 但是，假设容器又加载分包失败等，就 GG 了
          // 链式导航认为 JSAPI 只要发起成功即成功
          // 所以框架和业务都再也没有兜底办法了
          else {
              this.addTrace('onPageNotFound recovery success');
          }
      };
      AppxNavigationController.prototype.beforePreparation = function (navType, navOption) {
          if (this.inRecovery) {
              if (isPageNotFoundRecoveryNavType(navType)) {
                  this.inRecovery = false;
                  navOption.recovery = true;
                  this.addTrace('beforePreparation valid', navOption);
              }
              // 抢救期间来一个非替换页面的导航请求
              // 业务咋想的
              else {
                  this.addTrace('beforePreparation invalid', navOption, 1 /* ESharedAppxNavigationTraceReportLevel.Error */);
              }
          }
      };
      AppxNavigationController.prototype.dispose = function () {
          this.tabStack = {};
          this.pendingAction = null;
          this.traceMessages = null;
      };
      AppxNavigationController.prototype.getTopInstance = function () {
          return this.currentStack[this.currentStack.length - 1];
      };
      AppxNavigationController.prototype.needBackHome = function () {
          var currentStackTop = this.getCurrentTabPagePath();
          var meta = getRuntimeById(this.appInstanceId).getMeta();
          var homePage = meta.getHomePage();
          // 跑到了一个回不到 homePage 也回不到 Tab 的页面上
          return (
          /**
           * 用户指定的首页不能处于当前栈顶
           * - 跑到别的 tab 栈了(如果本身首页是tab的话)
           * - redirectTo 到任意页面(飞了)
           */
          homePage &&
              currentStackTop !== homePage &&
              /**
               * 当前栈顶不是 Tab
               * - 没跑到别的 tab
               */
              !meta.isTabPage(currentStackTop));
      };
      AppxNavigationController.prototype.whenTopInstancePushed = function (cb) {
          var topInstance = this.getTopInstance();
          if (topInstance) {
              cb(topInstance);
          }
          else {
              this.whenTopInstancePushedCallback.push(cb);
          }
      };
      AppxNavigationController.prototype.getTopPagePublicInstance = function () {
          return this.getTopInstance().getPageLogicInstance().publicInstance;
      };
      AppxNavigationController.prototype.getApp = function () {
          return getRuntimeById(this.appInstanceId).getApp();
      };
      /**
       *
       * @param NBPageUrl Web 平台URL，如果不存在则不校验
       */
      AppxNavigationController.prototype.isValidPageUrl = function (NBPageUrl) {
          var env = getRuntimeById(this.appInstanceId).getEnv();
          var startupUrl = env.originalStartupParams.url;
          if (NBPageUrl && startupUrl && typeof NBPageUrl === 'string' && typeof startupUrl === 'string') {
              return getPageUrlPrefix(NBPageUrl) === getPageUrlPrefix(startupUrl);
          }
          return true;
      };
      AppxNavigationController.prototype.removeTopInstanceInStack = function () {
          var instance = this.getTopInstance();
          if (instance) {
              this.currentStack.pop();
          }
      };
      AppxNavigationController.prototype.setCurrentTabPagePath = function (v) {
          this.addTrace('setCurrentTabPagePath', v);
          this.internalCurrentTabPagePath = v;
      };
      AppxNavigationController.prototype.getStack = function (bottomPagePath) {
          if (!this.tabStack[bottomPagePath]) {
              this.tabStack[bottomPagePath] = [];
          }
          return this.tabStack[bottomPagePath];
      };
      AppxNavigationController.prototype.canPopBack = function () {
          var action = this.pendingAction;
          var stackLen = this.currentStack.length;
          while (action) {
              switch (action.type) {
                  case "NavigateTo" /* ESharedAppxNavigationType.NAVIGATETO */:
                      stackLen += 1;
                      break;
                  case "NavigateBack" /* ESharedAppxNavigationType.NAVIGATIONBACK */:
                      stackLen -= 1;
                      break;
                  case "RedirectTo" /* ESharedAppxNavigationType.REDIRECTTO */:
                      // 不增不减
                      break;
                  case "SwitchTabClick" /* ESharedAppxNavigationType.SWITCHTABCLICK */:
                  case "SwitchTab" /* ESharedAppxNavigationType.SWITCHTAB */:
                  case "ReLaunch" /* ESharedAppxNavigationType.RELAUNCH */:
                  case "AppReLaunchBeforeAppResume4iOSCube" /* ESharedAppxNavigationType.APPRELAUNCHBEFOREAPPRESUME4IOSCUBE */:
                  case "AppResumeReLaunch" /* ESharedAppxNavigationType.APPRESUMERELAUNCH */:
                      // 即将只剩一个页面
                      stackLen = 1;
                      break;
              }
              action = action.next;
          }
          return stackLen > 1;
      };
      AppxNavigationController.prototype.isFirstPage = function () {
          var page = this.getTopInstance();
          if (page) {
              return page.getIsFirstPage();
          }
          else {
              // 第一个页面还没创建
              return true;
          }
      };
      AppxNavigationController.prototype.bootstrap = function () {
          this.bindEvent();
      };
      AppxNavigationController.prototype.inited = function () {
          this.bindEvent4Bridge();
          this.initTrace();
      };
      AppxNavigationController.prototype.getTopPagePath = function () {
          var instance = this.getTopInstance();
          return instance ? instance.pagePath : null;
      };
      AppxNavigationController.prototype.getCurrentStackLength = function () {
          return this.currentStack.length;
      };
      AppxNavigationController.prototype.getTopViewId = function () {
          var instance = this.getTopInstance();
          var pageId = instance && instance.pageId;
          return pageId ? String(pageId) : '';
      };
      AppxNavigationController.prototype.getBottomViewId = function () {
          var instance = this.getBottomInstance();
          var pageId = instance && instance.pageId;
          return pageId ? String(pageId) : '';
      };
      AppxNavigationController.prototype.prepare = function (type, payload, callback, callbackPayload) {
          if (callback) {
              if (callbackPayload) {
                  callback(callbackPayload);
              }
              else {
                  callback();
              }
          }
          this.addTrace('prepare', {
              callback: !!callback,
              payload: payload,
              type: type,
          });
          if ((type === "SwitchTab" /* ESharedAppxNavigationType.SWITCHTAB */ || type === "ReLaunch" /* ESharedAppxNavigationType.RELAUNCH */) &&
              payload.tabQuery &&
              !getRuntimeById(this.appInstanceId).getSwitchManager().get("enableNavigationTabQuery" /* ESharedAppxSwitchManagerName.EnableNavigationTabQuery */)) {
              payload.tabQuery = undefined;
          }
          NavigationActionImpl[type].prepare(this, payload);
      };
      AppxNavigationController.prototype.lock = function (type, toPagePath, payload) {
          var pendingAction = this.pendingAction;
          var tailAction = pendingAction ? pendingAction.tail || pendingAction : null;
          var nextAction = {
              bypass: null,
              // from 会影响 lastPagePath
              // 出于排队需求，延迟到 process 阶段再赋值
              from: null,
              id: undefined,
              // 对于个别行为 reLaunch
              // 必须保证收到创建和销毁页面消息后才能开锁
              lock: 0,
              next: null,
              payload: payload,
              processable: true,
              tabQuery: ((type === "SwitchTab" /* ESharedAppxNavigationType.SWITCHTAB */ || type === "ReLaunch" /* ESharedAppxNavigationType.RELAUNCH */) &&
                  payload &&
                  payload.tabQuery) ||
                  undefined,
              tail: null,
              to: toPagePath,
              toJSON: sharedAppxNavigationActionToJson,
              toString: sharedAppxNavigationActionToString,
              type: type,
          };
          if (pendingAction) {
              // 如果需要排队
              if (this.shouldQueue(nextAction)) {
                  if (this.shouldWarn()) {
                      var pendingName = getUserSideNavigationType(pendingAction.type);
                      if (pendingName) {
                          var nextName = getUserSideNavigationType(nextAction.type);
                          if (nextName) {
                              // tslint:disable-next-line no-console
                              console.warn("\u5F53\u524D\u540C\u65F6\u5B58\u5728\u591A\u4E2A\u5BFC\u822A\u8C03\u7528 ".concat(pendingName, ":").concat(pendingAction.to, " \u548C ").concat(nextName, ":").concat(nextAction.to, "\uFF0C\u57FA\u7840\u5E93\u4E0D\u80FD\u4FDD\u8BC1\u8C03\u7528\u5148\u540E\u987A\u5E8F\uFF0C\u8BF7\u5728\u524D\u8005\u8C03\u7528\u5B8C\u6210\u540E\u518D\u8C03\u7528"));
                          }
                      }
                  }
                  this.addTrace('lock queue', {
                      action: nextAction,
                      pending: pendingAction,
                  });
                  pendingAction.tail = tailAction.next = nextAction;
                  return;
              }
              else {
                  // 直接打断
                  nextAction.bypass = pendingAction;
                  if (this.shouldWarn()) {
                      var pendingName = getUserSideNavigationType(pendingAction.type);
                      if (pendingName) {
                          var nextName = getUserSideNavigationType(nextAction.type);
                          if (nextName) {
                              // tslint:disable-next-line no-console
                              console.warn("\u5F53\u524D\u540C\u65F6\u5B58\u5728\u591A\u4E2A\u5BFC\u822A\u8C03\u7528 ".concat(pendingName, ":").concat(pendingAction.to, " \u548C ").concat(nextName, ":").concat(nextAction.to, "\uFF0C\u4F1A\u5BFC\u81F4 ").concat(pendingName, ":").concat(pendingAction.to, " \u8C03\u7528\u88AB\u53D6\u6D88\uFF0C\u5EFA\u8BAE\u5728\u524D\u8005\u8C03\u7528\u5B8C\u6210\u540E\u518D\u8C03\u7528"));
                          }
                      }
                  }
                  this.addTrace('lock bypass', nextAction);
              }
          }
          else {
              this.addTrace('lock idle', nextAction);
          }
          // 没排队的或者空闲的，立即执行
          this.pendingAction = nextAction;
          if (this.internalCurrentTabPagePath ||
              !getRuntimeById(this.appInstanceId).getSwitchManager().get("navActAfterFirstPage" /* ESharedAppxSwitchManagerName.NavActAfterFirstPage */) ||
              (payload && payload.recovery)) {
              this.process(nextAction);
          }
          else {
              nextAction.processable = false;
              this.addTrace('lock not processable');
              if (this.shouldWarn()) {
                  var nextName = getUserSideNavigationType(nextAction.type);
                  if (nextName) {
                      // tslint:disable-next-line no-console
                      console.warn("\u9996\u9875\u5C1A\u672A\u521B\u5EFA\uFF0C\u5BFC\u822A\u8BF7\u6C42 ".concat(nextName, ":").concat(nextAction.to, " \u5C06\u5EF6\u540E"));
                  }
              }
          }
      };
      AppxNavigationController.prototype.unlock = function (killAll) {
          var pendingAction = this.pendingAction;
          if (pendingAction) {
              this.addTrace('unlock', pendingAction);
              if (killAll) {
                  this.pendingAction = null;
              }
              else {
                  var next = pendingAction.next, tail = pendingAction.tail;
                  this.pendingAction = next;
                  if (next) {
                      if (tail && tail !== next) {
                          next.tail = tail;
                      }
                      this.process(next);
                  }
              }
          }
      };
      AppxNavigationController.prototype.supportId = function () {
          return true;
      };
      AppxNavigationController.prototype.callBridge = function (action, method, option) {
          var _this = this;
          if (method === "pushWindow" /* ESharedAppxNavigationBridgeMethod.PushWindow */ && option) {
              var id = (action.id = this.navActionId++);
              option.url = addPageNavActionIdParamToNavigateUrl(option.url, id);
          }
          this.addTrace('callBridge invoking', { action: action, method: method });
          getRuntimeById(this.appInstanceId)
              .getBridge()
              .callBridge(method, option, function (payload) {
              if (payload && payload.error) {
                  _this.addTrace('callBridge fail', { action: action, method: method });
                  // 假设 NavigateTo + ReLaunch
                  // NavigateTo 消息已经发出
                  // ReLaunch 将之打断
                  // 此时 NavigateTo 失败，解锁的时候不能解 ReLaunch
                  if (_this.pendingAction === action) {
                      _this.unlock();
                  }
              }
              else {
                  _this.addTrace('callBridge success', { action: action, method: method });
              }
          });
      };
      AppxNavigationController.prototype.resetStacks = function (preserveTab) {
          var this$1 = this;

          var meta = getRuntimeById(this.appInstanceId).getMeta();
          for (var _i = 0, _a = Object.keys(this.tabStack); _i < _a.length; _i++) {
              var tabName = _a[_i];
              var ownStack = this$1.getStack(tabName);
              var stackLen = preserveTab && meta.isTabPage(tabName) ? 1 : 0;
              if (ownStack.length > stackLen) {
                  for (var _b = 0, _c = ownStack.slice(stackLen).reverse(); _b < _c.length; _b++) {
                      var page = _c[_b];
                      page.onPageUnload();
                  }
                  ownStack.length = stackLen;
              }
          }
      };
      AppxNavigationController.prototype.willUnloadStacks = function () {
          if (!getRuntimeById(this.appInstanceId)
              .getSwitchManager()
              .get("disableNavigationWillUnload" /* ESharedAppxSwitchManagerName.DisableNavigationWillUnload */)) {
              for (var _i = 0, _a = Object.keys(this.tabStack); _i < _a.length; _i++) {
                  var tabName = _a[_i];
                  for (var _b = 0, _c = this.getStack(tabName); _b < _c.length; _b++) {
                      var page = _c[_b];
                      page.onPageWillUnload();
                  }
              }
          }
      };
      AppxNavigationController.prototype.pushStack = function (nextPage, forceBottom) {
          var runtime = getRuntimeById(this.appInstanceId);
          var appBehavior = runtime.getMeta().getAppBehavior();
          var decodeQuery = true;
          if (appBehavior &&
              appBehavior["decodeQuery" /* ESharedAppMetaBehaviorMapValue.DecodeQuery */] === "disable" /* ESharedDecodeQueryBehaviorType.Disable */) {
              decodeQuery = false;
          }
          var isFirstPage = !this.internalCurrentTabPagePath;
          if (isFirstPage || forceBottom) {
              this.setCurrentTabPagePath(nextPage.pagePath);
              this.currentStack[0] = nextPage;
          }
          else {
              this.currentStack.push(nextPage);
          }
          if (isFirstPage) {
              if (this.pendingAction) {
                  this.addTrace('pushStack app launch with pending action');
              }
              nextPage.setIsFirstPage();
              this.getApp().onLaunch(getLaunchOptionFromLatestStartupParams(this.getEnv().originalStartupParams, nextPage.pagePath, decodeQuery));
          }
      };
      AppxNavigationController.prototype.replaceStack = function (previousPage, nextPage) {
          var currentStack = this.currentStack;
          var length = currentStack.length;
          while (length--) {
              if (currentStack[length] === previousPage) {
                  currentStack.splice(length, 1, nextPage);
                  return true;
              }
          }
          return false;
      };
      AppxNavigationController.prototype.popStack = function (instance) {
          var this$1 = this;

          instance.onPageUnload();
          var currentStack = this.currentStack;
          var length = currentStack.length;
          while (length--) {
              if (currentStack[length] === instance) {
                  currentStack.splice(length, 1);
                  this$1.addTrace('popStack', {
                      action: this$1.pendingAction || null,
                      page: instance.pagePath + ':' + instance.pageId,
                  });
                  return;
              }
          }
          // 1. 比如 switchTab
          //   当页面创建好，就会在 SwitchTab:postprocess 里直接干掉所有栈
          //   等 beforeDestroy 消息过来就找不到页面了
          // 2. 再比如同时 navigateTo + switchTab
          //   navigateTo 会被忽略，导致从来不入栈，也就无法出栈
          this.addTrace('popStack fail. maybe had been popped or ignored', {
              action: this.pendingAction || false,
              page: instance.pagePath + ':' + instance.pageId,
          });
      };
      AppxNavigationController.prototype.onPageCreate = function (event) {
          // prerun 模式下，启动 Worker -> 框架构造首页建连消息 -> 业务 redirectTo -> 容器 beforeDestroy 首页 -> 首页 webView 发来建连消息
          // 上述路径中，存在潜在问题，即 beforeDestroy 先于真实建连消息
          // 导致等待 redirectTo 时收到非预期的首页创建消息，这里要过滤一把
          // 特判此种情况
          var instanceId = event.data.instanceId;
          if (
          // 框架判定已经有首页了
          this.internalCurrentTabPagePath &&
              // 发生了导航动作，并且是源页面的建连
              this.pendingAction &&
              this.pendingAction.from &&
              this.pendingAction.from.pageId === instanceId) {
              // prerun 启动参数判定
              var startupParams = getRuntimeById(this.appInstanceId).getEnv().originalStartupParams;
              if (startupParams && startupParams.prerunWorker && startupParams.APVIEWID === instanceId) {
                  this.addTrace('onPageCreate', 'ignore disposed homepage creation');
                  return;
              }
          }
          if (this.ensurePageInstance(instanceId, 'PageCreate')) {
              this.addTrace('onPageCreate', event);
              this.performPostNavigation(event, true);
          }
      };
      AppxNavigationController.prototype.onAppResume = function (event) {
          // 如果不是自己页面，不处理
          // 用于保活 reLaunch到指定页面
          this.addTrace('onAppResume', {
              action: this.pendingAction,
              event: event,
          }, 3 /* ESharedAppxNavigationTraceReportLevel.Info */);
          this.prepare("AppResumeReLaunch" /* ESharedAppxNavigationType.APPRESUMERELAUNCH */, event.data);
      };
      AppxNavigationController.prototype.onAppReLaunchBeforeAppResume4Cube = function (event) {
          // 在 Cube 中
          // AppReLaunchBeforeAppResume -> CreatePage -> AppResumeReLaunch
          // 即页面创建先于 AppResumeReLaunch 发生，导致 AppResumeReLaunch 无法解锁（因为正常下是要等页面创建才能去解锁的）
          // 因此使用 AppReLaunchBeforeAppResume 告知 AppResumeReLaunch 页面已经创建，可以直接操作了
          // 而 Web 中，发现 iOS 客户端 90 版本出现乱序
          // 即 AppReLaunchBeforeAppResume 晚于 AppResumeReLaunch
          // 导致链式导航中 AppReLaunchBeforeAppResume 覆盖了 AppResumeReLaunch，永远解锁不了
          // 因此将 AppReLaunchBeforeAppResume 作为 Cube 的一种特判
          // TODO 需要知道这个事件是 Cube 来的
          if (this.getEnv().isOnlyCube || event.engineType === 2 /* ESharedAppxPageEngineType.CubeEngine */) {
              if (this.ensurePageInstance(event.data.instanceId, 'AppReLaunchBeforeAppResume')) {
                  // 用于保活 reLaunch到指定页面
                  this.addTrace('onAppReLaunchBeforeAppResume4Cube', {
                      action: this.pendingAction,
                      event: event,
                  });
                  this.prepare("AppReLaunchBeforeAppResume4iOSCube" /* ESharedAppxNavigationType.APPRELAUNCHBEFOREAPPRESUME4IOSCUBE */, event.data);
              }
          }
          else {
              this.addTrace('onAppReLaunchBeforeAppResume4Cube ignored in non-cube env', event, 2 /* ESharedAppxNavigationTraceReportLevel.Warning */);
          }
      };
      AppxNavigationController.prototype.addTrace = function (message, detail, reportType) {
          if (reportType === void 0) { reportType = 4 /* ESharedAppxNavigationTraceReportLevel.Verbose */; }
          debug$1$1(function () { return "[APPX][Navigation] AppxNavigationController:".concat(message, ": ").concat(detail ? JSON.stringify(detail) : ''); });
          this.traceMessages.push("".concat(Date.now(), ": ").concat(message, ": ").concat(detail ? JSON.stringify(detail) : ''));
          // 比开关小的日志level才能上报
          // level=Error(1) >= type=Info(3): false
          // level=Verbose(4) >= type=Info(3): true
          if (this.traceReportLevel >= reportType) {
              this.reportNavigationTrace();
          }
      };
      AppxNavigationController.prototype.onSelectedTabItemTap = function (event) {
          if (this.getApp()) {
              var _a = event.data, tag = _a.tag, text = _a.text, index = _a.index, from = _a.from;
              var SelectedTabItemTapPayload = {
                  from: from,
                  index: index,
                  pagePath: tag,
                  text: text,
              };
              var $page = this.getTopInstance();
              if ($page) {
                  if ($page.hasEventOnPagePublicInstance("onSelectedTabItemTap" /* ESharedAppxEvent.Page.onSelectedTabItemTap */)) {
                      $page.invokePageEvent("onSelectedTabItemTap" /* ESharedAppxEvent.Page.onSelectedTabItemTap */, 2 /* ISharedAppxPageBaseInstanceEventInvokeType.EventsNested */, SelectedTabItemTapPayload);
                  }
              }
          }
      };
      AppxNavigationController.prototype.getBottomInstance = function () {
          return this.currentStack[0];
      };
      AppxNavigationController.prototype.process = function (pendingAction) {
          // 如 redirectTo 会卸载 from 页面
          // 就应该在真实调用该 JSAPI 的时候记录 from
          pendingAction.from = this.getTopInstance();
          this.addTrace('process', pendingAction);
          NavigationActionImpl[pendingAction.type].process(this, pendingAction);
      };
      AppxNavigationController.prototype.postprocess = function (type, nextPage, action, newPageCreated, navActionId) {
          this.addTrace('postprocess');
          return NavigationActionImpl[type].postprocess(this, nextPage, action, newPageCreated, navActionId);
      };
      AppxNavigationController.prototype.initTrace = function () {
          var switchValue = getRuntimeById(this.appInstanceId)
              .getSwitchManager()
              .get("chainingNavigationReport" /* ESharedAppxSwitchManagerName.ChainingNavigationReportError */);
          if (switchValue &&
              switchValue > 0 /* ESharedAppxNavigationTraceReportLevel.None */ &&
              switchValue <= 4 /* ESharedAppxNavigationTraceReportLevel.Verbose */) {
              this.traceReportLevel = switchValue;
          }
      };
      AppxNavigationController.prototype.onPullDownRefresh = function (event) {
          var data = event.data;
          var payload = {
              from: (data && data.from) || 'manual',
          };
          var $page = this.getTopInstance();
          if ($page) {
              $page.invokePageEvent("onPullDownRefresh" /* ESharedAppxEvent.Page.onPullDownRefresh */, 3 /* ISharedAppxPageBaseInstanceEventInvokeType.LegacyAndEvents */, payload);
          }
      };
      AppxNavigationController.prototype.reportNavigationTrace = function () {
          var error = new Error('[NavigationTrace]');
          error.detail = {
              't:nav': this.traceMessages.slice().reverse(),
          };
          reportHostError(this.appInstanceId, 12 /* ESharedAppxSpecificErrorCode.HostFrameworkError */, error);
      };
      AppxNavigationController.prototype.bindCompositeEvents = function () {
          var this$1 = this;

          this.onCompositeEvent = this.onCompositeEvent.bind(this);
          var eventMgr = this.getEventManager();
          var groups = getHostCompositeEvents();
          var dynamicComposite = getRuntimeById(this.appInstanceId)
              .getSwitchManager()
              .get("compositeElement" /* ESharedAppxSwitchManagerName.CompositeElement */);
          var platformEventNames = createSet();
          if (groups) {
              for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {
                  var names = groups_1[_i];
                  if (names) {
                      for (var _a = 0, names_1 = names; _a < names_1.length; _a++) {
                          var event = names_1[_a];
                          eventMgr.addEventListener(event, this$1.onCompositeEvent);
                          platformEventNames.add(event);
                      }
                  }
              }
          }
          if (dynamicComposite) {
              for (var _b = 0, _c = Object.keys(dynamicComposite); _b < _c.length; _b++) {
                  var stringTag = _c[_b];
                  var element = dynamicComposite[stringTag];
                  if (element) {
                      var event = element.event;
                      if (event) {
                          for (var _d = 0, _e = Object.keys(event); _d < _e.length; _d++) {
                              var eventName = _e[_d];
                              if (!platformEventNames.has(eventName)) {
                                  eventMgr.addEventListener(eventName, this$1.onCompositeEvent);
                              }
                          }
                      }
                  }
              }
          }
          return platformEventNames;
      };
      AppxNavigationController.prototype.onCompositeEvent = function (event) {
          // 判定 event
          var page = this.getInstanceById(event.data.instanceId);
          if (page && page.renderer && page.renderer.compositeHub) {
              page.renderer.compositeHub.handleEvent(event);
          }
      };
      AppxNavigationController.prototype.shouldQueue = function (next) {
          // 抢救的时候，不要排队
          // 比如通过 AppResumeRelaunch 唤起一个不存在的地址从而触发抢救时
          // 应该让 RedirectTo 等打断 AppResumeReLaunch
          // 再比如，用户在首页建连前已经发起过导航请求了
          // 也会被抢救直接干掉
          if (next.payload && next.payload.recovery) {
              return false;
          }
          switch (next.type) {
              // 前面有动作，一定排队
              case "NavigateTo" /* ESharedAppxNavigationType.NAVIGATETO */:
              case "NavigateBack" /* ESharedAppxNavigationType.NAVIGATIONBACK */:
              case "RedirectTo" /* ESharedAppxNavigationType.REDIRECTTO */:
                  return true;
              // 一定不排队
              case "SwitchTabClick" /* ESharedAppxNavigationType.SWITCHTABCLICK */:
              case "AppResumeReLaunch" /* ESharedAppxNavigationType.APPRESUMERELAUNCH */:
              case "AppReLaunchBeforeAppResume4iOSCube" /* ESharedAppxNavigationType.APPRELAUNCHBEFOREAPPRESUME4IOSCUBE */:
                  return false;
          }
          // 假设 TabA -> NavigateTo PageB -> SwitchTo TabA
          // SwitchTo 把 NavigateTo 打断后又跳不动，就白屏了
          if (next.type === "SwitchTab" /* ESharedAppxNavigationType.SWITCHTAB */ && next.to === this.getTopPagePath()) {
              return true;
          }
          // reLaunch 和 switchTab 可以有条件地打断一些动作
          var pending = this.pendingAction;
          while (pending) {
              switch (pending.type) {
                  case "NavigateTo" /* ESharedAppxNavigationType.NAVIGATETO */:
                  case "RedirectTo" /* ESharedAppxNavigationType.REDIRECTTO */:
                      // 如果都是打开一样的页面就排队
                      // 不然新建页面回来后鬼知道谁是谁
                      if (pending.to === next.to) {
                          return true;
                      }
                      break;
                  case "NavigateBack" /* ESharedAppxNavigationType.NAVIGATIONBACK */:
                      // 回退打断无所谓
                      break;
                  default:
                      // switchTab + switchTab 将导致后续白屏
                      // reLaunch + switchTab 不会创建两次页面
                      // 所以还是别造作
                      return true;
              }
              pending = pending.next;
          }
          return false;
      };
      AppxNavigationController.prototype.onTabClick = function (event) {
          this.addTrace('onTabClick', {
              action: this.pendingAction,
              event: event,
          }, 3 /* ESharedAppxNavigationTraceReportLevel.Info */);
          if (this.getApp()) {
              var _a = event.data, tag = _a.tag, from = _a.from, text = _a.text, index = _a.index;
              if (from === 'user') {
                  var $page = this.getTopInstance();
                  if ($page) {
                      if ($page.hasEventOnPagePublicInstance("beforeTabItemTap" /* ESharedAppxEvent.Page.beforeTabItemTap */)) {
                          $page.invokePageEvent("beforeTabItemTap" /* ESharedAppxEvent.Page.beforeTabItemTap */, 2 /* ISharedAppxPageBaseInstanceEventInvokeType.EventsNested */, {
                              preventDefault: function () { return event.preventDefault(); },
                          });
                      }
                  }
              }
              if (event.isDefaultPrevented()) {
                  this.addTrace('onTabClick default prevented');
              }
              else {
                  var tabPayload = {
                      from: from,
                      index: index,
                      pagePath: tag,
                      text: text,
                  };
                  var pendingAction = this.pendingAction;
                  if (pendingAction) {
                      // 如果导航当前就是 api 触发的 ESharedAppxNavigationType.SWITCHTAB
                      // 那么修改一下 payload
                      if (pendingAction.type === "SwitchTab" /* ESharedAppxNavigationType.SWITCHTAB */ && pendingAction.to === tabPayload.pagePath) {
                          pendingAction.payload = tabPayload;
                          this.addTrace('onTabClick update payload', tabPayload);
                      }
                      // 一个被打断的 switchTab
                      // 由于被打断意味着栈重置，所以可以忽略
                      // 打断只有一次，所以可以界定
                      // 如果未来允许多次打断，这里可能需要向上遍历
                      else if (pendingAction.bypass &&
                          pendingAction.bypass.type === "SwitchTab" /* ESharedAppxNavigationType.SWITCHTAB */ &&
                          pendingAction.bypass.to === tabPayload.pagePath) ;
                      // 用户点击之后打断了正在进行中的 navigateTo 之类
                      // 这里和下面写两遍 prepare 免得以后读不懂
                      else {
                          this.prepare("SwitchTabClick" /* ESharedAppxNavigationType.SWITCHTABCLICK */, tabPayload);
                      }
                  }
                  // 空闲状态下点击 Tab 切换
                  else {
                      this.prepare("SwitchTabClick" /* ESharedAppxNavigationType.SWITCHTABCLICK */, tabPayload);
                  }
              }
          }
      };
      AppxNavigationController.prototype.onPageResume = function (event) {
          // 提前取出，否则 performPostNavigation 可能解锁
          var pendingAction = this.pendingAction;
          var instance = this.getInstanceById(event.data.instanceId);
          this.addTrace('onPageResume', {
              action: pendingAction,
              event: event,
              page: instance ? instance.pagePath + ':' + instance.pageId : null,
          }, 3 /* ESharedAppxNavigationTraceReportLevel.Info */);
          if (instance) {
              this.performPostNavigation(event, false);
              // 可能被销毁了
              instance = this.getInstanceById(event.data.instanceId);
              if (instance) {
                  var shouldResume = true;
                  // Android 从非 Tab 页切换到 Tab 页时，所有在栈的页面全部会触发一次 pageResume 事件。
                  // 在 1.0 中，由于 switchTab 时提前退栈，上述「在栈的页面」就只剩 Tab 页面会触发；
                  // 而 2.0 中，退栈是延后的，故二级页、Tab 页都会触发；
                  // iOS 中，不会有上述 pageResume 事件
                  if (pendingAction &&
                      pendingAction.processable &&
                      pendingAction.type === "SwitchTab" /* ESharedAppxNavigationType.SWITCHTAB */ &&
                      pendingAction.to !== instance.pagePath) {
                      // 使 Android 与 iOS 一致
                      shouldResume = false;
                  }
                  if (shouldResume) {
                      instance.onPageResume();
                  }
                  else {
                      this.addTrace('onPageResume ignored', null, 3 /* ESharedAppxNavigationTraceReportLevel.Info */);
                  }
              }
          }
      };
      AppxNavigationController.prototype.onPageDestroy = function (event) {
          var instance = this.getInstanceById(event.data.instanceId);
          var pendingAction = this.pendingAction;
          this.addTrace('onPageDestroy', {
              action: pendingAction || null,
              event: event,
              page: instance ? instance.pagePath + ':' + instance.pageId : null,
          }, 3 /* ESharedAppxNavigationTraceReportLevel.Info */);
          this.destroyPages.add(event.data.instanceId);
          // 也可能莫得
          // 比如还没建连就被销毁（看下面）
          // 又比如 reLaunch/redirectTo 先创建页面后销毁以前的
          // postprocess 提前手动销毁实例了
          if (instance) {
              this.popStack(instance);
          }
          if (pendingAction) {
              var pageInfo = getPageInfoWithNavActionIdFromUrl(event.data.NBPageUrl);
              var cancelSwitchRawValue = getRuntimeById(this.appInstanceId)
                  .getSwitchManager()
                  .get("chainingNavigationCancelAction" /* ESharedAppxSwitchManagerName.ChainingNavigationCancelAction */);
              var cancelSwitch = cancelSwitchRawValue === undefined
                  ? 1 /* ESharedAppxSwitchManagerValue4ChainingNavigationCancelAction.Open */
                  : Number(cancelSwitchRawValue);
              if (cancelSwitch >= 1 /* ESharedAppxSwitchManagerValue4ChainingNavigationCancelAction.Open */ &&
                  // Cube 莫得这个 NBPageUrl
                  // 但 Cube 建立页面灰常快
                  // 可以相信不会有还没有 H/C 建连就销毁的情况
                  pageInfo &&
                  // 期待创建的页面就是被销毁的页面
                  // 比如
                  //   不当操作导致客户端主进程卡死而无法建连
                  //   或者用户点击之后快速回退
                  //   都可以造成这种情况
                  // 这样的话直接放弃该行为
                  pageInfo.pagePath === pendingAction.to &&
                  // 根据是否是前往 Tab 页面（有无 id）差别判断
                  (pendingAction.id
                      ? // 有 id 是普通页面
                          // 相等表明真的就是想去的页面被干掉了
                          pageInfo.navActionId === pendingAction.id
                      : // SwitchTab 到一个页面
                          // 老的应该 Resume 新的应该 Create
                          // 结果是 Destroy
                          // 强制退栈没跑了
                          pendingAction.type === "SwitchTab" /* ESharedAppxNavigationType.SWITCHTAB */ ||
                              // ReLaunch 到一个页面，结果这个页面被销毁
                              // 比如 TabA -> TabA
                              // 销毁老页面没问题
                              // 销毁新的就是强制退栈，下面判断是否是新的
                              (pendingAction.type === "ReLaunch" /* ESharedAppxNavigationType.RELAUNCH */ &&
                                  // 新的不在栈内
                                  // 但ReLaunch 有两步解锁
                                  // 老页面也可能因为新页面已经创建而被提前退栈
                                  !instance &&
                                  // 所以再判断下新页面也没有被创建
                                  // tslint:disable-next-line no-bitwise
                                  !(pendingAction.lock && pendingAction.lock & 2 /* ESharedAppxNavigationActionLock.PageCreated */)))) {
                  // 当前行为被强制终止的话
                  // 根据开关，后续的操作可能也都放弃
                  var killAll = cancelSwitch === 2 /* ESharedAppxSwitchManagerValue4ChainingNavigationCancelAction.OpenAndKillAll */;
                  this.addTrace('onPageDestroy pending page cancelled', { killAll: killAll }, 2 /* ESharedAppxNavigationTraceReportLevel.Warning */);
                  this.unlock(killAll);
              }
              // 当前行为仍然是有效的
              else {
                  // reLaunch 必须一并等到页面创建和页面销毁的消息后才能释放
                  // 否则会出现 reLaunch + navigateTo，navigateTo 新建的页面被 reLaunch 一锅端的情况
                  if (pendingAction.type === "ReLaunch" /* ESharedAppxNavigationType.RELAUNCH */) {
                      unlockWhenPagesCreatedDestroyed(this, pendingAction, 1 /* ESharedAppxNavigationActionLock.PageDestroyed */);
                  }
              }
          }
      };
      AppxNavigationController.prototype.onPagePause = function (event) {
          // 销毁 pause 时不进行处理（如 switchTab 时）
          // 重复触发自身具备幂等
          var instance = this.getInstanceById(event.data.instanceId);
          this.addTrace('onPagePause', {
              action: this.pendingAction || null,
              event: event,
              page: instance ? instance.pagePath + ':' + instance.pageId : null,
          }, 3 /* ESharedAppxNavigationTraceReportLevel.Info */);
          if (instance) {
              instance.onPagePause();
          }
      };
      AppxNavigationController.prototype.onAppPause = function (event) {
          var page = this.getTopInstance();
          var app = this.getApp();
          this.addTrace('onAppPause', {
              action: this.pendingAction || null,
              appInit: app ? 1 : 0,
              event: event,
              page: page ? page.pagePath + ':' + page.pageId : null,
          }, 3 /* ESharedAppxNavigationTraceReportLevel.Info */);
          // app 存在则执行
          if (app) {
              app.onPause();
          }
          // 如果不是自己页面，不处理
          if (page && this.isValidPageUrl(event.data.NBPageUrl)) {
              page.onPagePause();
          }
      };
      AppxNavigationController.prototype.performPostNavigation = function (event, newPageCreated) {
          var nextPage = this.getInstanceById(event.data.instanceId);
          var navActionId = event.data.navActionId;
          var pendingAction = this.pendingAction;
          this.addTrace('performPostNavigation', {
              action: pendingAction ? pendingAction : null,
              navActionId: navActionId,
              newPageCreated: newPageCreated,
              next: nextPage.pagePath + ':' + nextPage.pageId,
              stack: {
                  bottom: this.getCurrentTabPagePath(),
                  size: this.currentStack.length,
                  top: this.getTopPagePath(),
              },
          });
          if (pendingAction && pendingAction.processable) {
              var type = pendingAction.type;
              switch (type) {
                  // 不处理 NavigateBack，它没有 postprocess
                  case "RedirectTo" /* ESharedAppxNavigationType.REDIRECTTO */:
                  case "NavigateTo" /* ESharedAppxNavigationType.NAVIGATETO */:
                  case "ReLaunch" /* ESharedAppxNavigationType.RELAUNCH */:
                  case "AppResumeReLaunch" /* ESharedAppxNavigationType.APPRESUMERELAUNCH */:
                  case "AppReLaunchBeforeAppResume4iOSCube" /* ESharedAppxNavigationType.APPRELAUNCHBEFOREAPPRESUME4IOSCUBE */:
                  case "SwitchTabClick" /* ESharedAppxNavigationType.SWITCHTABCLICK */:
                  case "SwitchTab" /* ESharedAppxNavigationType.SWITCHTAB */:
                      if (this.postprocess(type, nextPage, pendingAction, newPageCreated, navActionId)) {
                          this.addTrace('performPostNavigation action ignored');
                      }
                      break;
              }
          }
          // 栈里已经有页面了
          else if (this.getCurrentTabPagePath()) {
              // 没有锁，没有创建新的页面某个页面 resume
              var stack = this.currentStack;
              var length = stack.length;
              // 侧滑之后取消侧滑，会导致自己页面发生一次 resume
              if (stack[length - 1] === nextPage) {
                  this.addTrace('performPostNavigation top resume');
              }
              // 回退或者侧滑
              else if (stack[length - 2] === nextPage) {
                  // 考虑如下场景
                  // 小程序扫码 -> appPause, pagePause -> 扫码成功 -> appResume, callback -> navigateTo -> pageCreate -> pageResume
                  // 即原本在 appResume 后紧跟的 pageResume 中穿插了一个导航操作
                  // 等 pageResume 的时候就会走到这里来，导致非预期退栈
                  // 考虑到链式导航 onPageDestroy 的时候也能退栈
                  // 所以这里默认忽略
                  // PortalWorker 在 10.2.70 之前没有发来 beforeDestroy
                  // 这里兼容下
                  if (this.isPortalWorker() &&
                      getRuntimeById(this.appInstanceId).getSwitchManager().get("portalUnloadTopPage" /* ESharedAppxSwitchManagerName.PortalUnloadTopPage */)) {
                      var instance = stack[length - 1];
                      var lifeState = instance.getState();
                      if (lifeState === "Hidden" /* EPageLifecycleState.HIDDEN */ ||
                          lifeState === "Hidden_NotReadied" /* EPageLifecycleState.HIDDEN_NOTREADIED */ ||
                          lifeState === "WILL_UNLOAD" /* EPageLifecycleState.WILL_UNLOAD */ ||
                          lifeState === "Unloaded" /* EPageLifecycleState.UNLOADED */) {
                          this.popStack(instance);
                      }
                  }
              }
              if (newPageCreated && !this.destroyPages.has(nextPage.pageId)) {
                  if (this.isPortalWorker()) {
                      this.pushStack(nextPage);
                      nextPage.bootstrap();
                  }
                  else {
                      this.addTrace('performPostNavigation unexpected newpage', null, 1 /* ESharedAppxNavigationTraceReportLevel.Error */);
                  }
              }
          }
          // 空栈（第一个页面来了）
          else if (newPageCreated) {
              this.pushStack(nextPage, false);
              nextPage.bootstrap();
              if (pendingAction) {
                  this.addTrace('performPostNavigation processable action', null, 3 /* ESharedAppxNavigationTraceReportLevel.Info */);
                  pendingAction.processable = true;
                  this.process(pendingAction);
              }
              if (this.whenTopInstancePushedCallback.length) {
                  var callbacks = this.whenTopInstancePushedCallback.slice();
                  this.whenTopInstancePushedCallback = [];
                  var topInstance = this.getTopInstance();
                  for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {
                      var cb = callbacks_1[_i];
                      cb(topInstance);
                  }
              }
          }
          else {
              this.addTrace('performPostNavigation unexpected event', null, 1 /* ESharedAppxNavigationTraceReportLevel.Error */);
          }
      };
      AppxNavigationController.prototype.getCurrentTabPagePath = function () {
          return this.internalCurrentTabPagePath;
      };
      AppxNavigationController.prototype.ensurePageInstance = function (instanceId, phase) {
          if (this.getInstanceById(instanceId)) {
              return true;
          }
          else {
              var message = "[APPX][Event] page (".concat(instanceId, ") not found for phase (").concat(phase, ")");
              reportHostError(this.appInstanceId, 12 /* ESharedAppxSpecificErrorCode.HostFrameworkError */, new Error(message));
              return false;
          }
      };
      AppxNavigationController.prototype.getInstanceById = function (instanceId) {
          return getRuntimeById(this.appInstanceId).getPageManager().getInstanceById(instanceId);
      };
      AppxNavigationController.prototype.getEnv = function () {
          return getRuntimeById(this.appInstanceId).getEnv();
      };
      AppxNavigationController.prototype.onOptionMenuClick = function (event) {
          var $page = this.getTopInstance();
          if ($page) {
              $page.invokePageEvent("onOptionMenuClick" /* ESharedAppxEvent.Page.onOptionMenuClick */, 3 /* ISharedAppxPageBaseInstanceEventInvokeType.LegacyAndEvents */, event);
          }
      };
      AppxNavigationController.prototype.onKeyboardHeight = function (event) {
          var $page = this.getTopInstance();
          if ($page) {
              if ($page.hasEventOnPagePublicInstance("onKeyboardHeight" /* ESharedAppxEvent.Page.onKeyboardHeight */)) {
                  $page.invokePageEvent("onKeyboardHeight" /* ESharedAppxEvent.Page.onKeyboardHeight */, 2 /* ISharedAppxPageBaseInstanceEventInvokeType.EventsNested */, {
                      height: event.data && event.data.height,
                  });
              }
          }
      };
      AppxNavigationController.prototype.onBack = function (event) {
          var runtime = getRuntimeById(this.appInstanceId);
          var _a = event.data || {}, defaultPrevented = _a.defaultPrevented, instanceId = _a.instanceId;
          // 确保触发page.events.onBack 的page 是instanceId 对应的page
          var $page = runtime.getPageManager().getInstanceById(instanceId);
          if ($page) {
              if ((insideFeatureRuntimeVersion >= /* a_alertBeforeUnload_2_7_17:10.2.60 */ 10002060) && defaultPrevented) {
                  var delay = runtime.getSwitchManager().get("pageUnloadAlertDelay" /* ESharedAppxSwitchManagerName.PageUnloadAlertDelay */);
                  runtime.getKernel().setTimeout(function () {
                      $page.getBackEventManager().performBackActionByClientInteraction();
                  }, 
                  // 这是个在安卓上的预估值
                  // 当用户双击返回按钮时，会触发 back -> 强制回退 -> beforeDestroy
                  // 预期该数值时间内 beforeDestroy 能先于 setTimeout 到达
                  delay >= 0 ? delay : runtime.getEnv().isIOS ? 0 : 300);
              }
              if ($page.hasEventOnPagePublicInstance("onBack" /* ESharedAppxEvent.Page.onBack */)) {
                  $page.invokePageEvent("onBack" /* ESharedAppxEvent.Page.onBack */, 2 /* ISharedAppxPageBaseInstanceEventInvokeType.EventsNested */, {
                      defaultPrevented: (insideFeatureRuntimeVersion >= /* a_alertBeforeUnload_2_7_17:10.2.60 */ 10002060)
                          ? !!defaultPrevented
                          : undefined,
                      preventDefault: function () {
                          return event.preventDefault();
                      },
                  });
              }
          }
      };
      AppxNavigationController.prototype.onTitleClick = function (event) {
          var $page = this.getTopInstance();
          if ($page) {
              $page.invokePageEvent("onTitleClick" /* ESharedAppxEvent.Page.onTitleClick */, 3 /* ISharedAppxPageBaseInstanceEventInvokeType.LegacyAndEvents */);
          }
      };
      AppxNavigationController.prototype.onAppUnload = function (event) {
          // 仅把状态置为 unload，不执行生命周期
          this.getApp().onUnload();
          this.removeTopInstanceInStack();
          // 开始完整的 runtime级别清理
          getRuntimeById(this.appInstanceId).dispose();
      };
      AppxNavigationController.prototype.onPullIntercept = function (event) {
          var data = event.data;
          var $page = this.getTopInstance();
          if ($page) {
              $page.invokePageEvent("onPullIntercept" /* ESharedAppxEvent.Page.onPullIntercept */, 3 /* ISharedAppxPageBaseInstanceEventInvokeType.LegacyAndEvents */);
          }
      };
      AppxNavigationController.prototype.onPopMenuClick = function (event) {
          // 往栈顶发一下
          var data = event.data;
          var payload = __assign(__assign({}, data), { index: Number(data.index) });
          var $page = this.getTopInstance();
          if ($page) {
              $page.invokePageEvent("onPopMenuClick" /* ESharedAppxEvent.Page.onPopMenuClick */, 3 /* ISharedAppxPageBaseInstanceEventInvokeType.LegacyAndEvents */, payload);
          }
      };
      AppxNavigationController.prototype.onBackHomeClick = function (event) {
          // 接收到事件后启动 reLaunch
          var runtime = getRuntimeById(this.appInstanceId);
          var homePage = runtime.getMeta().getHomePage();
          if (homePage) {
              // 非 "/" 开头则补 "/"
              homePage = homePage.replace(/^\/?/, '/');
              runtime.getBridge().defaultScope.call('reLaunch', {
                  url: homePage,
              });
          }
      };
      AppxNavigationController.prototype.bindEvent = function () {
          var eventMgr = this.getEventManager();
          // nebulax event
          eventMgr.addEventListener("pageResume" /* ESharedAppxEvent.Native.PageResume */, this.onPageResume.bind(this));
          eventMgr.addEventListener("pagePause" /* ESharedAppxEvent.Native.PagePause */, this.onPagePause.bind(this));
          eventMgr.addEventListener("beforeDestroy" /* ESharedAppxEvent.Native.PageDestroy */, this.onPageDestroy.bind(this));
          eventMgr.addEventListener("tabClick" /* ESharedAppxEvent.Native.TabClick */, this.onTabClick.bind(this));
          eventMgr.addEventListener("appPause" /* ESharedAppxEvent.Native.AppPause */, this.onAppPause.bind(this));
          eventMgr.addEventListener("appResume" /* ESharedAppxEvent.Native.AppResume */, this.onAppResume.bind(this));
          eventMgr.addEventListener("appRelaunchBeforeAppResume4Cube" /* ESharedAppxEvent.Native.AppReLaunchBeforeAppResume4iOSCube */, this.onAppReLaunchBeforeAppResume4Cube.bind(this));
          eventMgr.addEventListener("appUnload" /* ESharedAppxEvent.Native.AppUnload */, this.onAppUnload.bind(this));
          eventMgr.addEventListener("onBackHomeClick" /* ESharedAppxEvent.Native.BackHomeClick */, this.onBackHomeClick.bind(this));
          eventMgr.addEventListener("customPopMenuClicked" /* ESharedAppxEvent.Native.PopMenuClick */, this.onPopMenuClick.bind(this));
          eventMgr.addEventListener("firePullToRefresh" /* ESharedAppxEvent.Native.PullDownRefresh */, this.onPullDownRefresh.bind(this));
          eventMgr.addEventListener("pullIntercept" /* ESharedAppxEvent.Native.PullIntercept */, this.onPullIntercept.bind(this));
          eventMgr.addEventListener("titleClick" /* ESharedAppxEvent.Native.TitleClick */, this.onTitleClick.bind(this));
          eventMgr.addEventListener("tinyOptionMenu" /* ESharedAppxEvent.Native.OptionMenuClick */, this.onOptionMenuClick.bind(this));
          eventMgr.addEventListener("optionMenu" /* ESharedAppxEvent.Native.OptionMenuClick4Legacy */, this.onOptionMenuClick.bind(this));
          eventMgr.addEventListener("titleCloseClick" /* ESharedAppxEvent.Native.TitleCloseClick */, this.onTitleCloseClick.bind(this));
          eventMgr.addEventListener("selectedTabItemTap" /* ESharedAppxEvent.Native.SelectedTabItemTap */, this.onSelectedTabItemTap.bind(this));
          this.bindCompositeEvents();
      };
      AppxNavigationController.prototype.bindEvent4Bridge = function () {
          var runtime = getRuntimeById(this.appInstanceId);
          // 新增使用 bridgeEvent
          var bridgeEvent = runtime.getBridge().event;
          bridgeEvent.addEventListener("keyboardHeight" /* ESharedAppxEvent.Native.KeyboardHeight */, 0 /* EBridgeEventCustomTypeContext.Raw */, this.onKeyboardHeight.bind(this));
          bridgeEvent.addEventListener("back" /* ESharedAppxEvent.Native.Back */, 0 /* EBridgeEventCustomTypeContext.Raw */, this.onBack.bind(this));
      };
      AppxNavigationController.prototype.isPortalWorker = function () {
          return getRuntimeById(this.appInstanceId).getEnv().isPortalWorkerScene;
      };
      AppxNavigationController.prototype.getEventManager = function () {
          return getRuntimeById(this.appInstanceId).getEventManager();
      };
      AppxNavigationController.prototype.shouldWarn = function () {
          return isConsoleAvaliableToDeveloper(getRuntimeById(this.appInstanceId).getEnv().packageAndRunSceneType);
      };
      AppxNavigationController.prototype.onTitleCloseClick = function (event) {
          var _this = this;
          // 得获取所有活着的页面发下
          Object.keys(this.tabStack).forEach(function (tabName) {
              var ownStack = _this.getStack(tabName);
              ownStack.forEach(function (page) {
                  if (page && !page.hasPageUnloaded()) {
                      page.invokeRenderMethod("setTitleCloseClicked" /* ESharedAppxPageRenderMethod.SetTitleCloseClicked */, []);
                  }
              });
          });
      };
      AppxNavigationController.prototype.onPageNotFoundMessageHandler = function (event) {
          var eventData = event.data;
          if (eventData.t === 4 /* EAppxWeb2MessageKey.C2S_CallbackRequest */) {
              var payload = eventData.p;
              // 开始派发消息
              switch (payload.a) {
                  case 2 /* EAppxWeb2MessageKey4C2SCallback.HostBridgeCall */:
                      {
                          var $payload = payload
                              .p;
                          var apiName = $payload[0], option = $payload[1], _a = $payload[2], domain = _a === void 0 ? kBridgeAppxDomain4Empty : _a;
                          getRuntimeById(this.appInstanceId).getBridge().getScope(domain).call(apiName, option);
                      }
                      break;
              }
          }
      };
      return AppxNavigationController;
  }());

  function isMatchSwitchRule(rule, appId, version) {
      return (rule.value !== undefined &&
          isMatchSwitchRule4AppId(appId, rule.appId, rule.appIdBlackList) &&
          isMatchSwitchRule4Version(version, rule.version, rule.versionBlackList));
  }
  function isMatchSwitchRule4AppId(appId, whiteList, blackList) {
      if (whiteList !== undefined &&
          !(whiteList &&
              whiteList.match && // 字符串
              RegExp(whiteList).test(appId))) {
          return;
      }
      if (blackList !== undefined &&
          !(blackList &&
              blackList.match && // 字符串
              !RegExp(blackList).test(appId))) {
          return;
      }
      return true;
  }
  function isMatchSwitchRule4Version(version, whiteList, blackList) {
      if (whiteList !== undefined &&
          !(Array.isArray(whiteList) &&
              whiteList.length === 2 &&
              compareVersion(version, whiteList[0]) >= 0 &&
              compareVersion(version, whiteList[1]) <= 0)) {
          return;
      }
      if (blackList !== undefined &&
          !(Array.isArray(blackList) &&
              blackList.length === 2 &&
              (compareVersion(version, blackList[0]) < 0 || compareVersion(version, blackList[1]) > 0))) {
          return;
      }
      return true;
  }
  var SharedAppxSwitchManager = /** @class */ /*#__PURE__*/ (function () {
      function SharedAppxSwitchManager(config, reportError, appId, version, extensionId, persistedValues) {
          this.appId = appId;
          this.version = version;
          this.extensionId = Array.isArray(extensionId) ? extensionId : [];
          this.reportError = function (code, error) { return reportError(code, formatAppxErrorInfo(error)); };
          this.extensionValues = Object.create(null);
          this.bootstrap(config, persistedValues);
      }
      SharedAppxSwitchManager.prototype.setValue = function (name, value) {
          this.persistedValues[name] = value;
      };
      SharedAppxSwitchManager.prototype.pushMiniExtensionId = function (extensionId) {
          this.extensionId.push(extensionId);
      };
      SharedAppxSwitchManager.prototype.getMiniExtensionValue = function (name, extensionId) {
          if (this.getControl(name)) {
              var extensionValueMap = this.extensionValues[extensionId];
              if (extensionValueMap) {
                  var value = extensionValueMap[name];
                  if (value !== undefined) {
                      return value;
                  }
              }
              return this.get(name);
          }
      };
      SharedAppxSwitchManager.prototype.exists = function (name) {
          return !!this.getControl(name);
      };
      SharedAppxSwitchManager.prototype.get = function (name) {
          var persistedValue = this.persistedValues[name];
          if (persistedValue !== undefined) {
              return persistedValue;
          }
          var control = this.getControl(name);
          if (control) {
              return control.value;
          }
      };
      SharedAppxSwitchManager.prototype.getAllMatches = function (name) {
          var control = this.getControl(name);
          if (control) {
              return control.allMatches || [];
          }
      };
      SharedAppxSwitchManager.prototype.bootstrap = function (nextConfig, persistedValues) {
          var _this = this;
          var prevConfig = this.config;
          if (prevConfig) {
              if (prevConfig === nextConfig) {
                  return;
              }
              this.reportError(23 /* ESharedAppxSpecificErrorCode.PlatformError */, new Error('[Switch] dismatching config'));
          }
          this.persistedValues = persistedValues || Object.create(null);
          var config = (this.config = nextConfig || '');
          var controls = (this.controls = Object.create(null));
          if (!nextConfig) {
              return;
          }
          debug$1$1(function () { return '[APPX][SWITCH] SharedAppxSwitchManager::init: Receive config: ' + config; });
          var option;
          try {
              option = JSON.parse(config);
          }
          catch (e) {
              debug$1$1(function () { return '[APPX][SWITCH][ERROR] SharedAppxSwitchManager::init: Parse config error'; });
              extendAppxErrorDetail(e, 'config', config ? JSON.stringify(config) : "".concat(config));
              this.reportError(23 /* ESharedAppxSpecificErrorCode.PlatformError */, e);
              return;
          }
          var _loop_1 = function (group) {
              // 空字符串表示没有被灰度到此开关
              if (option[group]) {
                  try {
                      // 这个 JSON 字符串来自另一个开关
                      // 所以容器得到的也是 JSON 字符串并直接透传给前端
                      // 因此有第二次 JSON.parse()
                      var switches = JSON.parse(option[group]);
                      // 第二层遍历，开关项
                      for (var _b = 0, _c = Object.keys(switches); _b < _c.length; _b++) {
                          var name = _c[_b];
                          if (Array.isArray(switches[name])) {
                              if (controls[name]) {
                                  controls[name].rules = controls[name].rules.concat(switches[name]);
                              }
                              else {
                                  controls[name] = {
                                      inited: false,
                                      rules: switches[name],
                                      value: undefined,
                                  };
                              }
                          }
                      }
                  }
                  catch (e) {
                      debug$1$1(function () { return "[APPX][SWITCH][ERROR] SharedAppxSwitchManager::init: Parse switch error: [".concat(group, "] ").concat(option[group]); });
                      this_1.reportError(23 /* ESharedAppxSpecificErrorCode.PlatformError */, e);
                  }
              }
          };
          var this_1 = this;
          // 第一层遍历，策略组
          for (var _i = 0, _a = Object.keys(option); _i < _a.length; _i++) {
              var group = _a[_i];
              _loop_1(group);
          }
          debug$1$1(function () { return '[APPX][SWITCH] SharedAppxSwitchManager::init: Config extracted: ' + JSON.stringify(_this.controls); });
      };
      SharedAppxSwitchManager.prototype.setMiniExtensionValue = function (name, value, extensionId) {
          var extensionValues = this.extensionValues;
          var valueMap = extensionValues[extensionId] || (extensionValues[extensionId] = Object.create(null));
          valueMap[name] = value;
      };
      SharedAppxSwitchManager.prototype.getControl = function (name) {
          var this$1 = this;

          var control = this.controls[name];
          if (control) {
              if (!control.inited) {
                  control.inited = true;
                  try {
                      var _a = this, appId = _a.appId, version = _a.version, extensionId = _a.extensionId;
                      // 第三层遍历，匹配条件
                      var globalValueUndefined = true;
                      for (var _i = 0, _b = control.rules; _i < _b.length; _i++) {
                          var rule = _b[_i];
                          if (rule) {
                              var hasExtension = Array.isArray(rule.extensionId);
                              if ((hasExtension || globalValueUndefined || rule.matchAll) && isMatchSwitchRule(rule, appId, version)) {
                                  if (hasExtension) {
                                      var value = rule.value;
                                      for (var _c = 0, _d = rule.extensionId; _c < _d.length; _c++) {
                                          var ruleExtId = _d[_c];
                                          // 针对插件的，为每个插件单独记录值
                                          // 以便动态插件取值
                                          this$1.setMiniExtensionValue(name, value, ruleExtId);
                                          // 如果此小程序已知的插件中也匹配
                                          // 直接上升到全局开关
                                          if (globalValueUndefined && extensionId.indexOf(ruleExtId) > -1) {
                                              control.value = value;
                                              globalValueUndefined = false;
                                              if (rule.matchAll) {
                                                  control.allMatches = control.allMatches || [];
                                                  control.allMatches.push(value);
                                              }
                                          }
                                      }
                                  }
                                  // 全局的只需要懒计算一次
                                  else {
                                      control.value = rule.value;
                                      globalValueUndefined = false;
                                      if (rule.matchAll) {
                                          control.allMatches = control.allMatches || [];
                                          control.allMatches.push(rule.value);
                                      }
                                  }
                              }
                          }
                      }
                  }
                  catch (e) {
                      this.reportError(23 /* ESharedAppxSpecificErrorCode.PlatformError */, e);
                      debug$1$1(function () { return "[APPX][SWITCH][ERROR] SharedAppxSwitchManager::get: [".concat(name, "] ").concat(e.message, "\n").concat(e.stack); });
                  }
              }
              return control;
          }
      };
      return SharedAppxSwitchManager;
  }());

  var SubPackageManager4Host = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(SubPackageManager4Host, _super);
      function SubPackageManager4Host(appInstanceId, meta) {
          var _this = _super.call(this, meta) || this;
          _this.appInstanceId = appInstanceId;
          _this.setRootPreparer(function (root, callback) {
              var runtime = getRuntimeById(_this.appInstanceId);
              if (runtime) {
                  runtime.getBridge().callBridge('loadSubPackage', {
                      packages: [root],
                  }, function (res) {
                      if (res && res.error !== undefined) {
                          // skipKeepAlive 10.1.80开始支持，worker通过internalAPI调用
                          runtime.getBridge().callInternalAPI('skipKeepAlive', {});
                      }
                      callback(false);
                  });
              }
              else {
                  callback(true);
              }
          });
          _this.setRootLoader(function (script, callback) {
              var runtime = getRuntimeById(_this.appInstanceId);
              if (runtime) {
                  runtime.getKernel().__IMPORT_SCRIPT__("/".concat(script, "/index.worker.js"));
              }
              callback();
          });
          return _this;
      }
      return SubPackageManager4Host;
  }(SubPackageManager));

  var HostLoadClientMiniExtensionLoadManager = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(HostLoadClientMiniExtensionLoadManager, _super);
      function HostLoadClientMiniExtensionLoadManager() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      HostLoadClientMiniExtensionLoadManager.prototype.loadResourceInternal = function (res, callback) {
          debug$1$1(function () { return "call remote client load ".concat(res.url); });
          var runtime = getRuntimeById(res.appInstanceId);
          var page = runtime.getPageManager().getInstanceById(res.pageId);
          if (!page) {
              // 当是启动阶段，client 侧会自己进行加载，page实例还没有
              callback();
              return;
          }
          // 这个 render method 支持一次调用多个，但是这个接口 loadPlugin 不能等 batch...
          page.invokeRenderMethod("loadMiniExtensionClientScripts" /* ESharedAppxPageRenderMethod.LoadMiniExtensionClientScripts */, [
              [
                  {
                      extensionId: res.extensionId.value,
                      url: res.url,
                      version: res.version,
                  } ] ], function (error) {
              debug$1$1(function () { return "call remote client load ".concat(res.url, " finish"); });
              if (error) {
                  debug$1$1(function () { return "call remote client load ".concat(res.url, " error"); });
                  callback({
                      error: 1,
                      errorMessage: error.message,
                  });
              }
              else {
                  debug$1$1(function () { return "call remote client load ".concat(res.url, " success"); });
                  // 这条消息一定在业务代码之前
                  page.loadDynamicMiniExtensionComponentStaticInfo(res.extensionId);
                  callback(undefined, undefined);
              }
          });
      };
      HostLoadClientMiniExtensionLoadManager.prototype.getKeyFromResource = function (res) {
          return res.url;
      };
      HostLoadClientMiniExtensionLoadManager.prototype.shouldRetry4Resource = function () {
          return true;
      };
      return HostLoadClientMiniExtensionLoadManager;
  }(StatefulLoadManager));

  var HostLoadHostMiniExtensionLoadManager = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(HostLoadHostMiniExtensionLoadManager, _super);
      function HostLoadHostMiniExtensionLoadManager(appInstanceId) {
          var _this = _super.call(this) || this;
          _this.appInstanceId = appInstanceId;
          return _this;
      }
      HostLoadHostMiniExtensionLoadManager.prototype.callInternalAPI = function (name, params, callback) {
          var runtime = getRuntimeById(this.appInstanceId);
          var bridge = runtime.getBridge();
          bridge.callInternalAPI(name, params, callback);
      };
      HostLoadHostMiniExtensionLoadManager.prototype.getCompileInfo = function () {
          var runtime = getRuntimeById(this.appInstanceId);
          return runtime.getMeta().getCompileInfo();
      };
      return HostLoadHostMiniExtensionLoadManager;
  }(SharedHostMiniExtensionLoadManager));

  var DynamicMiniExtensionLoadManager4Host = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(DynamicMiniExtensionLoadManager4Host, _super);
      function DynamicMiniExtensionLoadManager4Host(appInstanceId, miniExtensionManager) {
          var _this = _super.call(this, miniExtensionManager) || this;
          _this.clientMiniExtensionLoadManager = {};
          _this.appInstanceId = appInstanceId;
          return _this;
      }
      DynamicMiniExtensionLoadManager4Host.prototype.getClientMiniExtensionLoader = function (pageId) {
          if (!this.clientMiniExtensionLoadManager[pageId]) {
              this.clientMiniExtensionLoadManager[pageId] = new HostLoadClientMiniExtensionLoadManager();
          }
          return this.clientMiniExtensionLoadManager[pageId];
      };
      DynamicMiniExtensionLoadManager4Host.prototype.getHostMiniExtensionLoader = function () {
          if (!this.hostMiniExtensionLoadManager) {
              this.hostMiniExtensionLoadManager = new HostLoadHostMiniExtensionLoadManager(this.appInstanceId);
          }
          return this.hostMiniExtensionLoadManager;
      };
      return DynamicMiniExtensionLoadManager4Host;
  }(DynamicMiniExtensionLoadManager));

  var AppxMiniExtensionManager = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(AppxMiniExtensionManager, _super);
      function AppxMiniExtensionManager(appInstanceId) {
          var _this = _super.call(this, appInstanceId) || this;
          _this.isWorkerReady = false;
          _this.dynamicLoadRequests = [];
          _this.loadedDynamicPluginsMap = createMap();
          /**
           * Map<RequiredPluginId, Map<FromPluginId, ModuleExport>>
           */
          _this.miniExtensionId2ModuleFromMap = createMap();
          _this.initedMiniExtension = createMap();
          _this.appInstanceId = appInstanceId;
          return _this;
      }
      AppxMiniExtensionManager.prototype.bootstrap = function () { };
      AppxMiniExtensionManager.prototype.inited = function () { };
      AppxMiniExtensionManager.prototype.setWorkerReady = function () {
          var this$1 = this;

          if (this.isWorkerReady) {
              return;
          }
          // debug(() => '[APPX][EXTENSION] doLoadDynamicMiniExtension, worker is ready');
          this.isWorkerReady = true;
          var currentRequests = this.dynamicLoadRequests.slice();
          this.dynamicLoadRequests = [];
          for (var _i = 0, currentRequests_1 = currentRequests; _i < currentRequests_1.length; _i++) {
              var _a = currentRequests_1[_i], dynamicPluginExpression = _a.dynamicPluginExpression, currentPageId = _a.currentPageId, callback = _a.callback;
              _super.prototype.loadDynamicMiniExtension.call(this$1, dynamicPluginExpression, currentPageId, callback);
          }
      };
      AppxMiniExtensionManager.prototype.getInitedMiniExtensionInfo = function () {
          var _this = this;
          var ret = [];
          this.initedMiniExtension.forEach(function (v, id) {
              var extensionExtraInfo = _this.extensionExtraInfos.get(id);
              ret.push({
                  id: id,
                  static: v.static,
                  version: extensionExtraInfo && extensionExtraInfo.version,
              });
          });
          return ret;
      };
      AppxMiniExtensionManager.prototype.loadDynamicMiniExtension = function (dynamicPluginExpression, currentPageId, callback) {
          if (this.isWorkerReady) {
              // 加载成功后，存储已经加载过的动态插件信息
              _super.prototype.loadDynamicMiniExtension.call(this, dynamicPluginExpression, currentPageId, callback);
          }
          else {
              debug$1$1(function () { return "[APPX][EXTENSION] loadPlugin in prerun, pluginInfo\uFF1A".concat(JSON.stringify(dynamicPluginExpression)); });
              this.dynamicLoadRequests.push({
                  callback: callback,
                  currentPageId: currentPageId,
                  dynamicPluginExpression: dynamicPluginExpression,
              });
          }
      };
      AppxMiniExtensionManager.prototype.loadLazyMiniExtension = function (miniExtensionId, currentPageId, callback) {
          var runtime = getRuntimeById(this.appInstanceId);
          var pluginInfo = runtime.getMeta().getPluginInfo4PluginId(miniExtensionId.value);
          if (pluginInfo && pluginInfo.lazy && !this.isInitedByExtensionId(miniExtensionId.value)) {
              this.loadDynamicMiniExtension({
                  type: 10 /* EMiniExtensionStringType._extensionId_$_at_$_version */,
                  value: "".concat(miniExtensionId.value, "@").concat(pluginInfo.version || '*'),
              }, currentPageId, callback);
              return true;
          }
          else {
              return false;
          }
      };
      AppxMiniExtensionManager.prototype.preloadPlugins = function (config) {
          var runtime = getRuntimeById(this.appInstanceId);
          var meta = runtime.getMeta();
          var compileInfo = meta.getCompileInfo();
          var debugPlugins = compileInfo && compileInfo.debugPlugins;
          var pluginRequestList = [];
          config.plugins.forEach(function (name) {
              var pluginConfig = meta.getPluginInfo4PluginName(name);
              if (pluginConfig && pluginConfig.lazy) {
                  var pluginId = pluginConfig.provider;
                  var hitDebugPluginInfo = debugPlugins && pluginId && debugPlugins[pluginId];
                  var curretnConfig = {
                      id: pluginId,
                      version: pluginConfig.version,
                  };
                  if (hitDebugPluginInfo) {
                      curretnConfig.pluginScene = hitDebugPluginInfo.scene;
                  }
                  pluginRequestList.push(curretnConfig);
              }
          });
          runtime.getBridge().callInternalAPI('preloadPlugins', { plugins: pluginRequestList, networkType: config.network });
      };
      AppxMiniExtensionManager.prototype.dispose = function () {
          this.miniExtensionId2ModuleFromMap = createMap();
          this.dynamicMiniExtensionLoader.dispose();
          this.dynamicMiniExtensionLoader = null;
      };
      AppxMiniExtensionManager.prototype.initMiniExtensionById = function (miniExtensionId, config, isStatic) {
          debug$1$1(function () { return "initMiniExtension ".concat(miniExtensionId); });
          if (this.initedMiniExtension.has(miniExtensionId)) {
              return;
          }
          this.initedMiniExtension.set(miniExtensionId, {
              static: isStatic,
          });
          var run = config.run, extensionContextAccessor = config.extensionContextAccessor;
          // 静态插件一次性初始化
          var runtime = getRuntimeById(this.appInstanceId);
          var scope = runtime.getBridge().getScope({
              type: "extension" /* EBridgeAppxDomainType.extension */,
              value: miniExtensionId,
          });
          if (scope) {
              var blockAPIString = runtime.getSwitchManager().get("pluginBlackListApi" /* ESharedAppxSwitchManagerName.PluginBlackListApi */);
              if (blockAPIString && typeof blockAPIString === 'string') {
                  var blockAPIs = blockAPIString.split(',');
                  if ((/* f_forbid_loadPlugin_24_0:false */ false)) {
                      blockAPIs.push('loadPlugin');
                  }
                  scope.removeAPIs(blockAPIString.split(','));
              }
              var enableTracert = false !== runtime.getSwitchManager().get("enableTracert" /* ESharedAppxSwitchManagerName.EnableTracert */);
              if (!enableTracert) {
                  scope.removeAPIs(['createTracert'], 'ap');
              }
          }
          this.setupContextSymbol(extensionContextAccessor, miniExtensionId);
          if (run) {
              run();
          }
      };
      AppxMiniExtensionManager.prototype.requireMiniExtensionModule = function (fromPluginId, requiredDynamicPluginPathOrPluginNameOrPluginId, callback) {
          var _this = this;
          debug$1$1(function () { return "requirePlugin ".concat(requiredDynamicPluginPathOrPluginNameOrPluginId); });
          var finalRequiredPluginId;
          var finalRequiredPluginVersion;
          if (isDynamicProtocolPath(requiredDynamicPluginPathOrPluginNameOrPluginId)) {
              finalRequiredPluginId = requiredDynamicPluginPathOrPluginNameOrPluginId.substr(kDynamicMiniExtensionProtocol.length);
          }
          else {
              var miniExtensionInfo = isLikePluginId(requiredDynamicPluginPathOrPluginNameOrPluginId)
                  ? this.getExtensionInfoByExtensionId({
                      type: 4 /* EMiniExtensionStringType._$_extension_id_$_ */,
                      value: requiredDynamicPluginPathOrPluginNameOrPluginId,
                  })
                  : this.getExtensionInfoByExtensionName({
                      type: 5 /* EMiniExtensionStringType._$_extension_name_$_ */,
                      value: requiredDynamicPluginPathOrPluginNameOrPluginId,
                  });
              if (miniExtensionInfo) {
                  finalRequiredPluginId = miniExtensionInfo.provider;
                  finalRequiredPluginVersion = miniExtensionInfo.version;
              }
              else {
                  this.remoteDevelopmentDebugLog({
                      requireName: requiredDynamicPluginPathOrPluginNameOrPluginId,
                      type: "api" /* EPluginDevelopmentDebugType.API */,
                  });
                  return;
              }
          }
          // 这里做存储隔离
          var moduleMapByFromPluginId = this.miniExtensionId2ModuleFromMap.get(finalRequiredPluginId);
          if (!moduleMapByFromPluginId) {
              moduleMapByFromPluginId = createMap();
              this.miniExtensionId2ModuleFromMap.set(finalRequiredPluginId, moduleMapByFromPluginId);
          }
          // 基于 from 再依次隔离
          if (moduleMapByFromPluginId.has(fromPluginId)) {
              var result = moduleMapByFromPluginId.get(fromPluginId);
              if (callback) {
                  callback(result);
              }
              return result;
          }
          var extensionId = {
              type: 4 /* EMiniExtensionStringType._$_extension_id_$_ */,
              value: finalRequiredPluginId,
          };
          // 懒加载插件需要
          var isLazyMode = this.isLazyMiniExtension(extensionId);
          var isInited = this.initedMiniExtension.has(finalRequiredPluginId);
          if (isLazyMode && !isInited) {
              this.loadDynamicMiniExtension({
                  type: 10 /* EMiniExtensionStringType._extensionId_$_at_$_version */,
                  value: "".concat(finalRequiredPluginId, "@").concat(finalRequiredPluginVersion),
              }, this.getPageId(), function () {
                  var result = _this.getExportByExtensionId(extensionId, requiredDynamicPluginPathOrPluginNameOrPluginId, callback);
                  if (result) {
                      moduleMapByFromPluginId.set(fromPluginId, result);
                  }
              });
          }
          else {
              var result = this.getExportByExtensionId(extensionId, requiredDynamicPluginPathOrPluginNameOrPluginId, callback);
              if (result) {
                  moduleMapByFromPluginId.set(fromPluginId, result);
              }
              return result;
          }
      };
      AppxMiniExtensionManager.prototype.isStaticMiniExtension = function (extensionId) {
          var runtime = getRuntimeById(this.appInstanceId);
          if (runtime) {
              var meta = runtime.getMeta();
              return meta.isMiniExtensionRequiredAsStatic(extensionId);
          }
          else {
              return false;
          }
      };
      AppxMiniExtensionManager.prototype.isLazyMiniExtension = function (extensionId) {
          var runtime = getRuntimeById(this.appInstanceId);
          if (runtime) {
              var meta = runtime.getMeta();
              return !!meta.isMiniExtensionRequiredAsLazy(extensionId);
          }
          else {
              return false;
          }
      };
      AppxMiniExtensionManager.prototype.isInitedByExtensionId = function (miniExtensionId) {
          return this.initedMiniExtension.has(miniExtensionId);
      };
      AppxMiniExtensionManager.prototype.getExtraInfoByExtensionId = function (miniExtensionId) {
          return this.extensionExtraInfos.get(miniExtensionId);
      };
      AppxMiniExtensionManager.prototype.setupContextSymbol = function (extensionContextAccessor, miniExtensionId) {
          // todo 未来钉钉用到 cube/h5模式 + 插件时需要处理下 dd === my
      };
      AppxMiniExtensionManager.prototype.getMetaByExtensionId = function (extensionId) {
          if (!extensionId) {
              return;
          }
          var registry = getRegistryByRuntimeId(this.appInstanceId);
          if (registry) {
              return registry.getConfig4MiniExtensionById(extensionId.value);
          }
      };
      AppxMiniExtensionManager.prototype.getMiniProgramExport = function (extensionId) {
          var exports = this._miniProgramExports;
          if (exports) {
              var fn = exports[extensionId];
              try {
                  return fn();
              }
              catch (ex) {
                  reportHostError(this.appInstanceId, 13 /* ESharedAppxSpecificErrorCode.HostUserError */, ex);
              }
          }
      };
      AppxMiniExtensionManager.prototype.setMiniProgramExports = function (miniExtensionExports) {
          this._miniProgramExports = miniExtensionExports;
      };
      // 插件本地开发模式
      AppxMiniExtensionManager.prototype.isExtensionDevelopmentRunScene = function (extensionId) {
          var runtime = getRuntimeById(this.appInstanceId);
          var originalStartupParams = runtime.getEnv().originalStartupParams;
          return originalStartupParams.appId === extensionId.value;
      };
      AppxMiniExtensionManager.prototype.remoteDevelopmentDebugLog = function (payload) {
          var runtime = getRuntimeById(this.appInstanceId);
          var env = runtime.getEnv();
          var originalStartupParams = env.originalStartupParams, userAgent = env.userAgent;
          var appId = originalStartupParams.appId, nbsn = originalStartupParams.nbsn;
          var sceneType = getPackageAndRunSceneType(originalStartupParams, userAgent);
          if (sceneType === 16 /* EAppxPackageAndRunSceneType.Release */) {
              // 线上跑的版本就不上报了
              return;
          }
          var miniExtensionId = payload.miniExtensionId, type = payload.type, ext = __rest(payload, ["miniExtensionId", "type"]);
          var pluginId = miniExtensionId && miniExtensionId.value;
          var extensionExtraInfo = this.getExtraInfoByExtensionId(pluginId);
          var pluginVersion = extensionExtraInfo && extensionExtraInfo.version;
          // tslint:disable object-literal-sort-keys
          runtime.getBridge().callBridge('remoteLog', {
              actionId: 'event',
              bizType: "TinyAppBiz-".concat(appId),
              logLevel: 1,
              param4: escapeLogParams(__assign(__assign({ 
                  // 关联数据
                  appId: appId, pluginId: pluginId, type: type, 
                  // 扩展数据
                  pluginType: this.isLazyMiniExtension(miniExtensionId)
                      ? 'L'
                      : this.isStaticMiniExtension(miniExtensionId)
                          ? 'S'
                          : 'D', pluginVersion: pluginVersion, sdkVersion: env.appxVersion, nbsn: nbsn }, ext), (pluginId ? {} : { error: "PLUGIN_NOT_FOUND" /* EPluginDevelopmentDebugErrorMessage.PLUGIN_NOT_FOUND */ }))),
              seedId: 'appx.plugin.development',
              type: 'monitor',
          });
      };
      AppxMiniExtensionManager.prototype.getPageId = function () {
          var runtime = getRuntimeById(this.appInstanceId);
          var viewId = runtime.getNav().getTopViewId();
          return viewId;
      };
      AppxMiniExtensionManager.prototype.getExtensionInfoByExtensionName = function (extensionName) {
          if (!extensionName) {
              return;
          }
          var runtime = getRuntimeById(this.appInstanceId);
          if (runtime) {
              var meta = runtime.getMeta();
              return meta.getPluginInfo4PluginName(extensionName.value);
          }
      };
      AppxMiniExtensionManager.prototype.getExtensionInfoByExtensionId = function (pluginId) {
          if (!pluginId) {
              return;
          }
          var runtime = getRuntimeById(this.appInstanceId);
          if (runtime) {
              var meta = runtime.getMeta();
              return meta.getPluginInfo4PluginId(pluginId.value);
          }
      };
      AppxMiniExtensionManager.prototype.createDynamicMiniExtensionLoader = function () {
          return new DynamicMiniExtensionLoadManager4Host(this.appInstanceId, this);
      };
      AppxMiniExtensionManager.prototype.getExportByExtensionId = function (extensionId, requiredDynamicPluginPathOrPluginNameOrPluginId, callback) {
          var publicConfig = this.getMetaByExtensionId(extensionId);
          if (!publicConfig) {
              return;
          }
          var mod = publicConfig.mod;
          if (mod) {
              try {
                  var result = mod();
                  this.remoteDevelopmentDebugLog({
                      miniExtensionId: extensionId,
                      requireName: requiredDynamicPluginPathOrPluginNameOrPluginId,
                      type: "api" /* EPluginDevelopmentDebugType.API */,
                  });
                  if (callback) {
                      callback(result);
                  }
                  return result;
              }
              catch (e) {
                  // 这个报错上报 clue 么？
              }
          }
      };
      return AppxMiniExtensionManager;
  }(SharedAppxMiniExtensionManager));

  var HMRUpdateManager = /** @class */ /*#__PURE__*/ (function () {
      function HMRUpdateManager(runtime) {
          this.runtime = runtime;
          this.hostInvokeQueue = [];
          this.clientInvokeQueue = [];
          this.updateCallbacks = [];
      }
      HMRUpdateManager.prototype.registerHostRequest = function (hash) {
          this.hostInvokeQueue.unshift(hash);
          this.hostInvokeQueue = this.hostInvokeQueue.slice(0, HMRUpdateManager.MAX_HMR_HASH_QUEUE_SIZE);
          this.tryProcessRequest();
      };
      HMRUpdateManager.prototype.registerClientRequest = function (type, hash, changes) {
          this.clientInvokeQueue.push({
              changes: changes,
              hash: hash,
              type: type,
          });
          this.tryProcessRequest();
      };
      HMRUpdateManager.prototype.onUpdated = function (cb) {
          this.updateCallbacks.push(cb);
      };
      HMRUpdateManager.prototype.invokeUpdated = function (error, batchHash) {
          for (var _i = 0, _a = this.decodeBatchHash(batchHash); _i < _a.length; _i++) {
              var hash = _a[_i];
              for (var _b = 0, _c = this.updateCallbacks; _b < _c.length; _b++) {
                  var cb = _c[_b];
                  cb(error, hash);
              }
          }
      };
      HMRUpdateManager.prototype.tryProcessRequest = function () {
          var _this = this;
          var taskQueue = this.clientInvokeQueue.reduce(function (res, change) {
              if (_this.hostInvokeQueue.includes(change.hash)) {
                  res.executeQueue.push(change);
              }
              else {
                  res.remainQueue.push(change);
              }
              return res;
          }, {
              executeQueue: [],
              remainQueue: [],
          });
          var executeQueue = taskQueue.executeQueue, remainQueue = taskQueue.remainQueue;
          var pageChanges = new Set();
          var componentChanges = new Set();
          var hashes = [];
          // 基于某个 page 开始 hydrate 或者某个组件开始 hydrate
          for (var _i = 0, executeQueue_1 = executeQueue; _i < executeQueue_1.length; _i++) {
              var change = executeQueue_1[_i];
              if (change.type === "page" /* EHMRUpdateType.PAGE */) {
                  for (var _a = 0, _b = change.changes; _a < _b.length; _a++) {
                      var pagePath = _b[_a];
                      pageChanges.add(pagePath);
                      hashes.push(change.hash);
                  }
              }
              else if (change.type === "component" /* EHMRUpdateType.COMPONENT */) {
                  for (var _c = 0, _d = change.changes; _c < _d.length; _c++) {
                      var componentPath = _d[_c];
                      componentChanges.add(componentPath);
                      hashes.push(change.hash);
                  }
              }
          }
          if (hashes.length > 0) {
              var page = this.runtime.getNav().getTopInstance();
              page.proxy.invokeHMRRemount(this.encodeBatchHash(hashes), pageChanges, componentChanges);
          }
          this.clientInvokeQueue = remainQueue;
      };
      HMRUpdateManager.prototype.encodeBatchHash = function (hashes) {
          return hashes.filter(function (v, idx, arr) { return arr.indexOf(v) === idx; }).join(',');
      };
      HMRUpdateManager.prototype.decodeBatchHash = function (hash) {
          return hash.split(',').filter(Boolean);
      };
      HMRUpdateManager.MAX_HMR_HASH_QUEUE_SIZE = 10;
      return HMRUpdateManager;
  }());

  var profileUniqueIdMap = {};
  function getProfileUniqueIdentifier(rType, type) {
      var key = "".concat(rType, "_").concat(type);
      if (!profileUniqueIdMap[key]) {
          profileUniqueIdMap[key] = 0;
      }
      return ++profileUniqueIdMap[key];
  }
  function isProfileCrossThreadEventType(eType) {
      return eType === 7 /* EProfileEventType.RendererAction */ || eType === 14 /* EProfileEventType.TargetMessage */;
  }

  var ProfileEvent = /** @class */ /*#__PURE__*/ (function () {
      function ProfileEvent(pid, eType, rType, payload, dType, stackId, eventId, crossThreadTaskIndex) {
          if (eventId === void 0) { eventId = getProfileUniqueIdentifier(rType, "e" /* EProfileIdType.Event */); }
          this.pid = pid;
          this.eType = eType;
          this.rType = rType;
          this.payload = payload;
          this.dType = dType;
          this.stackId = stackId;
          this.eventId = eventId;
          this.followTasks = [];
          this.beginTime = -1;
          this.endTime = -1;
          this.crossThreadTaskIndex = crossThreadTaskIndex || 0;
          var isCrossThread = isProfileCrossThreadEventType(eType);
          if (isCrossThread) {
              this.crossThreadType =
                  // 注意这里取的是原始传入值而不是类型保证后的
                  crossThreadTaskIndex >= 0
                      ? 2 /* EProfileEventCrossThreadType.CrossThreadEnd */
                      : 1 /* EProfileEventCrossThreadType.CrossThreadStart */;
          }
          else {
              this.crossThreadType = 0 /* EProfileEventCrossThreadType.SameThread */;
          }
      }
      ProfileEvent.createEvent = function (pid, eType, rType, payload, dType, stackId) {
          return new ProfileEvent(pid, eType, rType, payload, dType, stackId);
      };
      ProfileEvent.createCrossTaskEvent = function (event, pid) {
          var crossEvent = new ProfileEvent(pid, event[0 /* EProfileEventCrossThreadJson.EventType */], event[1 /* EProfileEventCrossThreadJson.TaskType */], event[6 /* EProfileEventCrossThreadJson.Payload */], 1 /* ETraceEventDescriptorType.Complete */, event[2 /* EProfileEventCrossThreadJson.StackId */], event[5 /* EProfileEventCrossThreadJson.EventId */], event[3 /* EProfileEventCrossThreadJson.CrossThreadTaskIndex */]);
          crossEvent.setBegin(event[4 /* EProfileEventCrossThreadJson.BeginTime */]);
          return crossEvent;
      };
      ProfileEvent.prototype.getCrossThreadJSON = function () {
          var crossThreadJson = [];
          crossThreadJson[0 /* EProfileEventCrossThreadJson.EventType */] = this.eType;
          crossThreadJson[2 /* EProfileEventCrossThreadJson.StackId */] = this.stackId;
          crossThreadJson[1 /* EProfileEventCrossThreadJson.TaskType */] = this.rType;
          crossThreadJson[4 /* EProfileEventCrossThreadJson.BeginTime */] = this.beginTime;
          crossThreadJson[5 /* EProfileEventCrossThreadJson.EventId */] = this.eventId;
          crossThreadJson[6 /* EProfileEventCrossThreadJson.Payload */] = this.payload;
          crossThreadJson[3 /* EProfileEventCrossThreadJson.CrossThreadTaskIndex */] = this.crossThreadTaskIndex;
          return crossThreadJson;
      };
      ProfileEvent.prototype.addFollowTask = function (task) {
          this.followTasks.push(task);
      };
      ProfileEvent.prototype.setHidden = function () {
          this.hidden = true;
      };
      ProfileEvent.prototype.setParentTask = function (task) {
          this.taskId = task.taskId;
      };
      ProfileEvent.prototype.setBegin = function (beginTime) {
          if (beginTime === void 0) { beginTime = getPrecisionTimestamp(); }
          this.beginTime = beginTime;
          return this;
      };
      ProfileEvent.prototype.setComplete = function (endTime) {
          if (endTime === void 0) { endTime = getPrecisionTimestamp(); }
          this.endTime = endTime;
          return this;
      };
      ProfileEvent.prototype.isComplete = function () {
          return this.endTime >= 0;
      };
      ProfileEvent.prototype.setCrossThread = function () {
          if (this.crossThreadType === 1 /* EProfileEventCrossThreadType.CrossThreadStart */) {
              this.crossThreadTaskIndex += 1;
          }
      };
      ProfileEvent.prototype.serializeFlow = function (encoder, flowType, relativeTaskType, relativeId, endTime, crossThreadTaskIndex) {
          var descriptor = [];
          var _a = this, rType = _a.rType, pid = _a.pid;
          descriptor[0 /* IProfileSerializer.Flow.EKey.Type */] = flowType;
          descriptor[1 /* IProfileSerializer.Flow.EKey.EventType */] = this.eType;
          descriptor[2 /* IProfileSerializer.Flow.EKey.TaskType */] = rType;
          descriptor[3 /* IProfileSerializer.Flow.EKey.TimeStamp */] = encoder.timeStamp(endTime);
          descriptor[4 /* IProfileSerializer.Flow.EKey.SourceEventId */] = this.eventId;
          descriptor[5 /* IProfileSerializer.Flow.EKey.Name */] = encoder.eventName(this.eType, this.payload);
          descriptor[6 /* IProfileSerializer.Flow.EKey.CrossThreadIndex */] = crossThreadTaskIndex || this.crossThreadTaskIndex;
          descriptor[7 /* IProfileSerializer.Flow.EKey.RelativeId */] = relativeId;
          var hasRelativeTaskType = relativeTaskType !== rType;
          if (hasRelativeTaskType || pid) {
              descriptor[8 /* IProfileSerializer.Flow.EKey.ProcessId */] = pid;
              if (hasRelativeTaskType) {
                  descriptor[9 /* IProfileSerializer.Flow.EKey.RelativeTaskType */] = relativeTaskType;
              }
          }
          return descriptor;
      };
      ProfileEvent.prototype.serialize = function (encoder) {
          var this$1 = this;

          var _a;
          var descriptors = [];
          if (!this.hidden) {
              var _b = this, eType = _b.eType, eventId = _b.eventId, beginTime = _b.beginTime, endTime = _b.endTime, pid = _b.pid, taskId = _b.taskId, rType = _b.rType, payload = _b.payload;
              var name = encoder.eventName(eType, this.payload);
              var type = void 0;
              var path = void 0;
              var actualExecutionStart = void 0;
              var actualExecutionEnd = void 0;
              var bridgeRequest = void 0;
              var bridgeResponse = void 0;
              if (eType === 13 /* EProfileEventType.LifeCycle */) {
                  type = this.payload.type;
                  if (type === 1 /* EProfileEventPayloadType4LifeCycleType.Page */ ||
                      type === 2 /* EProfileEventPayloadType4LifeCycleType.Component */) {
                      path = this.payload.path;
                  }
              }
              if (eType === 15 /* EProfileEventType.SetData */) {
                  path = this.payload.path;
              }
              if (eType === 16 /* EProfileEventType.CodeInjection */) {
                  path = this.payload.path;
              }
              if (eType === 11 /* EProfileEventType.BridgeAPIExecute */) {
                  (_a = this
                      .payload, actualExecutionStart = _a.actualExecutionStart, actualExecutionEnd = _a.actualExecutionEnd, bridgeRequest = _a.request, bridgeResponse = _a.response);
              }
              switch (this.dType) {
                  case 0 /* ETraceEventDescriptorType.Async */: {
                      var start = [];
                      var end = [];
                      start[1 /* IProfileSerializer.Async.EKey.EventType */] = end[1 /* IProfileSerializer.Async.EKey.EventType */] = eType;
                      start[2 /* IProfileSerializer.Async.EKey.TaskType */] = end[2 /* IProfileSerializer.Async.EKey.TaskType */] = rType;
                      start[3 /* IProfileSerializer.Async.EKey.Id */] = end[3 /* IProfileSerializer.Async.EKey.Id */] = eventId;
                      start[4 /* IProfileSerializer.Async.EKey.Name */] = end[4 /* IProfileSerializer.Async.EKey.Name */] = name;
                      start[0 /* IProfileSerializer.Async.EKey.Type */] = 2 /* IProfileSerializer.ESharedType.AsyncStart */;
                      end[0 /* IProfileSerializer.Async.EKey.Type */] = 3 /* IProfileSerializer.ESharedType.AsyncEnd */;
                      start[5 /* IProfileSerializer.Async.EKey.TimeStamp */] = encoder.timeStamp(beginTime);
                      end[5 /* IProfileSerializer.Async.EKey.TimeStamp */] = encoder.timeStamp(endTime);
                      var sourceEventId = void 0;
                      // 小心 payload 可能为 void
                      if (payload) {
                          (sourceEventId = payload.sourceEventId);
                      }
                      if (eType === 11 /* EProfileEventType.BridgeAPIExecute */) {
                          var args = void 0;
                          if (actualExecutionStart && actualExecutionEnd) {
                              args = args || [];
                              args[0] = encoder.timeStamp(actualExecutionStart);
                              args[1] = encoder.timeStamp(actualExecutionEnd);
                          }
                          if (bridgeRequest || bridgeResponse) {
                              args = args || [];
                              args[2] = bridgeRequest;
                              args[3] = bridgeResponse;
                          }
                          if (args) {
                              end[9 /* IProfileSerializer.Async.EKey.Args */] = args;
                          }
                      }
                      if (pid || taskId || sourceEventId) {
                          start[6 /* IProfileSerializer.Async.EKey.ProcessId */] = end[6 /* IProfileSerializer.Async.EKey.ProcessId */] = pid;
                          if (taskId) {
                              start[7 /* IProfileSerializer.Async.EKey.TaskId */] = end[7 /* IProfileSerializer.Async.EKey.TaskId */] = taskId;
                          }
                          if (sourceEventId) {
                              start[8 /* IProfileSerializer.Async.EKey.SourceEventId */] = sourceEventId;
                              end[8 /* IProfileSerializer.Async.EKey.SourceEventId */] = sourceEventId;
                          }
                      }
                      descriptors.push(start, end);
                      break;
                  }
                  case 2 /* ETraceEventDescriptorType.Instant */: {
                      var instant = [];
                      instant[1 /* IProfileSerializer.Instant.EKey.EventType */] = eType;
                      instant[2 /* IProfileSerializer.Instant.EKey.TaskType */] = rType;
                      instant[3 /* IProfileSerializer.Instant.EKey.Id */] = eventId;
                      instant[4 /* IProfileSerializer.Instant.EKey.Name */] = name;
                      instant[0 /* IProfileSerializer.Instant.EKey.Type */] = 7 /* IProfileSerializer.ESharedType.Instant */;
                      instant[5 /* IProfileSerializer.Instant.EKey.Scope */] = "p" /* ETraceEventDescriptorScope.Process */;
                      instant[6 /* IProfileSerializer.Instant.EKey.TimeStamp */] = encoder.timeStamp(beginTime);
                      var sourceEventId = void 0;
                      if (payload) {
                          (sourceEventId = payload.sourceEventId);
                      }
                      if (sourceEventId) {
                          instant[9 /* IProfileSerializer.Instant.EKey.SourceEventId */] = sourceEventId;
                      }
                      if (eType === 11 /* EProfileEventType.BridgeAPIExecute */) {
                          var args = void 0;
                          if (actualExecutionStart && actualExecutionEnd) {
                              args = args || [];
                              args[0] = encoder.timeStamp(actualExecutionStart);
                              args[1] = encoder.timeStamp(actualExecutionEnd);
                          }
                          if (bridgeRequest || bridgeResponse) {
                              args = args || [];
                              args[2] = bridgeRequest;
                              args[3] = bridgeResponse;
                          }
                          if (args) {
                              instant[10 /* IProfileSerializer.Instant.EKey.Args */] = args;
                          }
                      }
                      if (pid || taskId) {
                          instant[7 /* IProfileSerializer.Instant.EKey.ProcessId */] = pid;
                          if (taskId) {
                              instant[8 /* IProfileSerializer.Instant.EKey.TaskId */] = taskId;
                          }
                      }
                      descriptors.push(instant);
                      break;
                  }
                  case 1 /* ETraceEventDescriptorType.Complete */: {
                      var _c = this, crossThreadType = _c.crossThreadType, stackId = _c.stackId;
                      if (crossThreadType === 2 /* EProfileEventCrossThreadType.CrossThreadEnd */) ;
                      else {
                          // setTimeout 等可以连线的同线程事件
                          // 或者跨线程的发起方等
                          // 序列化出其本身的描述
                          var complete = [];
                          var hasStackId = stackId != null;
                          complete[1 /* IProfileSerializer.EventComplete.EKey.EventType */] = eType;
                          complete[2 /* IProfileSerializer.EventComplete.EKey.TaskType */] = rType;
                          complete[3 /* IProfileSerializer.EventComplete.EKey.Duration */] = encoder.timeStamp(endTime, beginTime);
                          complete[4 /* IProfileSerializer.EventComplete.EKey.Id */] = eventId;
                          complete[5 /* IProfileSerializer.EventComplete.EKey.Name */] = name;
                          complete[0 /* IProfileSerializer.EventComplete.EKey.Type */] = 1 /* IProfileSerializer.ESharedType.EventComplete */;
                          complete[6 /* IProfileSerializer.EventComplete.EKey.TimeStamp */] = encoder.timeStamp(beginTime);
                          if (hasStackId || pid || taskId || path || type) {
                              complete[7 /* IProfileSerializer.EventComplete.EKey.TaskId */] = taskId || 0;
                              if (hasStackId || pid || path || type) {
                                  complete[8 /* IProfileSerializer.EventComplete.EKey.ProcessId */] = pid;
                                  if (hasStackId || path || type) {
                                      complete[9 /* IProfileSerializer.EventComplete.EKey.Stack */] = stackId;
                                      if (path && type) {
                                          // 添加页面和组件路径
                                          complete[10 /* IProfileSerializer.EventComplete.EKey.Args */] = [type, encoder.url(path)];
                                      }
                                      else if (path) {
                                          complete[10 /* IProfileSerializer.EventComplete.EKey.Args */] = [encoder.url(path)];
                                      }
                                  }
                              }
                          }
                          descriptors.push(complete);
                          // 对跨线程的源绘制出其流出 FlowStart
                          if (crossThreadType === 1 /* EProfileEventCrossThreadType.CrossThreadStart */) {
                              var crossThreadTaskIndex = this.crossThreadTaskIndex;
                              for (var index = 0; index < crossThreadTaskIndex; index += 1) {
                                  descriptors.push(this$1.serializeFlow(encoder, 5 /* IProfileSerializer.ESharedType.FlowStart */, rType, eventId, endTime, index++));
                              }
                          }
                      }
                      break;
                  }
              }
          }
          return descriptors;
      };
      return ProfileEvent;
  }());

  function reportProfileError(message, detail) {
  }

  var ProfileTokenEncoder = /** @class */ /*#__PURE__*/ (function () {
      function ProfileTokenEncoder() {
          this.cache = createMap();
          this.index = 1;
          this.batchedMapping = this.mapping = Object.create(null);
      }
      ProfileTokenEncoder.prototype.text = function (str) {
          var cache = this.cache;
          var id = cache.get(str);
          if (id === undefined) {
              id = this.index++;
              cache.set(str, id);
              this.mapping[id] = this.batchedMapping[id] = str;
          }
          return id;
      };
      ProfileTokenEncoder.prototype.url = function (url) {
          var this$1 = this;

          var parts = (url + '').split(/\/(?=[^/])/);
          var partLen = parts.length;
          var value = Array(partLen);
          for (var index = 0; index < partLen; index += 1) {
              value[index] = this$1.text(parts[index]);
          }
          return value;
      };
      ProfileTokenEncoder.prototype.refresh = function () {
          this.mapping = this.batchedMapping;
      };
      ProfileTokenEncoder.prototype.serialize = function () {
          var mapping = this.mapping;
          this.mapping = Object.create(null);
          return mapping;
      };
      return ProfileTokenEncoder;
  }());

  var ProfilerSerializeEncoder = /** @class */ /*#__PURE__*/ (function () {
      function ProfilerSerializeEncoder() {
          this.token = new ProfileTokenEncoder();
      }
      ProfilerSerializeEncoder.prototype.setBeginTime = function (time) {
          this.beginTime = time;
          return this;
      };
      ProfilerSerializeEncoder.prototype.setPid = function (pid) {
          this.pid = pid;
      };
      ProfilerSerializeEncoder.prototype.timeStamp = function (time, basis) {
          if (basis === void 0) { basis = this.beginTime; }
          return Math.round((time - basis) / 1000);
      };
      ProfilerSerializeEncoder.prototype.text = function (text) {
          return this.token.text(text);
      };
      ProfilerSerializeEncoder.prototype.url = function (url) {
          return this.token.url(url);
      };
      ProfilerSerializeEncoder.prototype.eventName = function (eType, payload) {
          var text;
          switch (eType) {
              case 13 /* EProfileEventType.LifeCycle */: {
                  return encodeLifeCycle(payload);
              }
              case 14 /* EProfileEventType.TargetMessage */: {
                  var method = payload.method;
                  return this.text(method);
              }
              case 8 /* EProfileEventType.URLRequest */: {
                  var url = payload.url;
                  return this.url(url);
              }
              case 7 /* EProfileEventType.RendererAction */: {
                  return encodeRendererAction(payload);
              }
              case 12 /* EProfileEventType.UpdateBatching */: {
                  return encodeUpdateBatching(payload);
              }
              case 15 /* EProfileEventType.SetData */: {
                  return encodeSetData(payload);
              }
              case 16 /* EProfileEventType.CodeInjection */: {
                  var path = payload.path;
                  return this.url(path);
              }
              case 17 /* EProfileEventType.UserMethod */: {
                  var method = payload.method;
                  text = method;
                  break;
              }
              case 2 /* EProfileEventType.RequestSetTimeout */:
              case 3 /* EProfileEventType.RequestAnimationFrame */:
              case 10 /* EProfileEventType.AppStart */: {
                  return 0 /* IProfileSerializer.EventName.EType.RegardType */;
              }
              case 5 /* EProfileEventType.BridgeAsyncCall */:
              case 6 /* EProfileEventType.BridgeSyncCall */: {
                  var _a = payload, cacheHit = _a.cacheHit, method = _a.method;
                  text = (cacheHit ? 'cache.' : '') + method;
                  break;
              }
              case 11 /* EProfileEventType.BridgeAPIExecute */:
              case 9 /* EProfileEventType.PerfStub */: {
                  var name = payload.name;
                  text = name;
                  break;
              }
              case 1 /* EProfileEventType.EvaluateScript */: {
                  var scriptName = payload.scriptName;
                  text = scriptName;
                  break;
              }
          }
          if (text) {
              return this.text(text);
          }
      };
      ProfilerSerializeEncoder.prototype.serialize = function () {
          var _a;
          var result = [
              this.timeStamp(this.beginTime, 0),
              (_a = {},
                  _a[this.pid] = this.token.serialize(),
                  _a) ];
          return result;
      };
      return ProfilerSerializeEncoder;
  }());
  function encodeRendererAction(payload) {
      var action = payload.action, issuer = payload.issuer;
      return action === 2 /* EAppxWeb2MessageKey4S2CCallback.RenderMount */
          ? issuer
              ? 1 /* IProfileSerializer.EventName.EType.RendererAction_Mount_Request */
              : 2 /* IProfileSerializer.EventName.EType.RendererAction_Mount_Response */
          : issuer
              ? 3 /* IProfileSerializer.EventName.EType.RendererAction_Update_Request */
              : 4 /* IProfileSerializer.EventName.EType.RendererAction_Update_Response */;
  }
  function encodeUpdateBatching(payload) {
      return payload.phase === 'batching'
          ? 5 /* IProfileSerializer.EventName.EType.UpdateBatching_Batching */
          : 6 /* IProfileSerializer.EventName.EType.UpdateBatching_Flushing */;
  }
  function encodeSetData(payload) {
      return payload.phase === 1 /* EAppxCoreHelperSetDataType.SetData */
          ? 21 /* IProfileSerializer.EventName.EType.SetData */
          : 22 /* IProfileSerializer.EventName.EType.SetData_SpliceData */;
  }
  function encodeLifeCycle(payload) {
      var method = payload.method;
      switch (method) {
          case 'deriveDataFromProps':
              return 17 /* IProfileSerializer.EventName.EType.LifeCycle_deriveDataFromProps */;
          case 'didMount':
              return 18 /* IProfileSerializer.EventName.EType.LifeCycle_didMount */;
          case 'didUnmount':
              return 20 /* IProfileSerializer.EventName.EType.LifeCycle_didUnmount */;
          case 'didUpdate':
              return 19 /* IProfileSerializer.EventName.EType.LifeCycle_didUpdate */;
          case 'onError':
              return 13 /* IProfileSerializer.EventName.EType.LifeCycle_onError */;
          case 'onHide':
              return 10 /* IProfileSerializer.EventName.EType.LifeCycle_onHide */;
          case 'onInit':
              return 16 /* IProfileSerializer.EventName.EType.LifeCycle_onInit */;
          case 'onLaunch':
              return 7 /* IProfileSerializer.EventName.EType.LifeCycle_onLaunch */;
          case 'onLoad':
              return 8 /* IProfileSerializer.EventName.EType.LifeCycle_onLoad */;
          case 'onPageNotFound':
              return 14 /* IProfileSerializer.EventName.EType.LifeCycle_onPageNotFound */;
          case 'onReady':
              return 11 /* IProfileSerializer.EventName.EType.LifeCycle_onReady */;
          case 'onShow':
              return 9 /* IProfileSerializer.EventName.EType.LifeCycle_onShow */;
          case 'onUnload':
              return 12 /* IProfileSerializer.EventName.EType.LifeCycle_onUnload */;
          case 'ref':
              return 15 /* IProfileSerializer.EventName.EType.LifeCycle_ref */;
      }
      return method;
  }

  function mergeSerializedProfileInfo(a, b) {
      if (a) {
          var _a = b[0], basisTimeStamp = _a[0], nextPidToTokens = _a[1], nextTraceEvents = b[1], _b = b[2], nextStackURLs = _b[0], nextStackFrames = _b[1];
          var _c = a[0], _1 = _c[0], curPidToTokens = _c[1], curTraceEvents = a[1], _d = a[2], curStackURLs = _d[0], curStackFrames = _d[1];
          for (var _i = 0, _e = Object.keys(nextPidToTokens); _i < _e.length; _i++) {
              var key = _e[_i];
              var next = nextPidToTokens[key];
              curPidToTokens[key] = next
                  ? __assign(__assign({}, next), curPidToTokens[key]) : next;
          }
          return [
              [basisTimeStamp, curPidToTokens],
              curTraceEvents.concat(nextTraceEvents),
              [
                  __assign(__assign({}, curStackURLs), nextStackURLs),
                  __assign(__assign({}, curStackFrames), nextStackFrames) ] ];
      }
      return b;
  }

  var kRegExp4Android = /^\s{4}at\s(?:(.+)\s\()?([^(\s]+\/index(?:\.worker)?\.js)(?:\?\S*)?:(\d+):(\d+)\)?$/;
  var kRegExp4Safari = /^(.*)@(\S+\/index(?:\.worker)?\.js)(?:[?#]\S*)?:(\d+):(\d+)$/;
  var ProfileStackMapping = /** @class */ /*#__PURE__*/ (function () {
      function ProfileStackMapping(encoder) {
          this.encoder = encoder;
          /** 缓存 sourceURLs 的下标和 stackId */
          this.caches = Object.create(null);
          this.urlIndex = 0;
          this.frameIndex = 1;
          this.batchedSourceURLs = this.sourceURLs = Object.create(null);
          this.batchedFrames = this.frames = Object.create(null);
      }
      ProfileStackMapping.prototype.serialize = function () {
          var messageData = [this.sourceURLs, this.frames];
          this.sourceURLs = Object.create(null);
          this.frames = Object.create(null);
          return messageData;
      };
      ProfileStackMapping.prototype.refresh = function () {
          this.sourceURLs = this.batchedSourceURLs;
          this.frames = this.batchedFrames;
      };
      ProfileStackMapping.prototype.createCurrentStackId = function () {
          var this$1 = this;

          var stackId;
          var stackTraceLimit = Error.stackTraceLimit;
          Error.stackTraceLimit = 100;
          var stack = new Error().stack;
          Error.stackTraceLimit = stackTraceLimit;
          if (stack) {
              var stackList = stack.split('\n');
              var index = stackList.length;
              while (--index) {
                  var message = stackList[index];
                  var match = message.match(kRegExp4Android) || message.match(kRegExp4Safari);
                  if (match) {
                      stackId = this$1.getStackId(match[1], match[2], match[3], match[4], stackId);
                  }
              }
          }
          return stackId;
      };
      ProfileStackMapping.prototype.getStackId = function (callee, sourceURL, line, column, parentStackId) {
          var caches = this.caches;
          var sourceIndex = caches[sourceURL];
          if (!(sourceIndex >= 0)) {
              sourceIndex = caches[sourceURL] = this.urlIndex++;
              this.sourceURLs[sourceIndex] = this.batchedSourceURLs[sourceIndex] = this.encoder.url(sourceURL);
          }
          var cacheStackKey = [sourceURL, line, column, parentStackId].join(':');
          var stackId = caches[cacheStackKey];
          if (!stackId) {
              var stack = [];
              stack[0 /* IProfileSerializer.StackFrame.EKey.Line */] = Number(line);
              stack[1 /* IProfileSerializer.StackFrame.EKey.Column */] = Number(column);
              if (sourceIndex || callee || parentStackId) {
                  stack[2 /* IProfileSerializer.StackFrame.EKey.Parent */] = parentStackId || 0;
              }
              if (sourceIndex || callee) {
                  stack[3 /* IProfileSerializer.StackFrame.EKey.Callee */] = callee ? this.encoder.text(callee) : 0;
              }
              if (sourceIndex) {
                  stack[4 /* IProfileSerializer.StackFrame.EKey.SourceURL */] = sourceIndex;
              }
              stackId = caches[cacheStackKey] = this.frameIndex++;
              this.frames[stackId] = this.batchedFrames[stackId] = stack;
          }
          return stackId;
      };
      return ProfileStackMapping;
  }());

  var profiler = [null, null, null, null];
  function getHostProfiler() {
      return getProfiler(0 /* EProfileTaskType.Host */);
  }
  function getProfiler(rType) {
      if (!profiler[rType]) {
          profiler[rType] = new Profiler(rType);
      }
      return profiler[rType];
  }
  function getProfilerName(rType) {
      switch (rType) {
          case 3 /* EProfileTaskType.Client */:
              return 'Client';
          case 0 /* EProfileTaskType.Host */:
              return 'Host';
          case 1 /* EProfileTaskType.Native */:
              return 'Native';
          case 2 /* EProfileTaskType.Console */:
              return 'Console';
      }
  }
  var Profiler = /** @class */ /*#__PURE__*/ (function () {
      function Profiler(type) {
          this.type = type;
          this.beginTime = getPrecisionTimestamp();
          this.tasks = [];
          this.nonTaskEvents = [];
          this.taskStacks = [];
          this.encoder = new ProfilerSerializeEncoder();
          this.name = getProfilerName(type);
          this.connected = false;
          if (type !== 3 /* EProfileTaskType.Client */) {
              this.setPid(type);
              this.frameStacks = new ProfileStackMapping(this.encoder);
          }
      }
      Profiler.prototype.setName = function (name) {
          this.name = name;
      };
      Profiler.prototype.setPid = function (pid) {
          this.pid = pid;
          this.encoder.setPid(pid);
      };
      Profiler.prototype.addReporter = function (reporter) {
          this.reporter = reporter;
          if (reporter) {
              reporter.attachProfiler(this);
          }
      };
      Profiler.prototype.getReporter = function () {
          return this.reporter;
      };
      Profiler.prototype.createTask = function (tType, name, sourceEvent) {
          var task = new ProfileTask(this.pid, this.type, tType, name, sourceEvent);
          var top = this.getTopTask();
          if (top) {
              task.setParentTask(top);
          }
          this.tasks.push(task);
          this.taskStacks.push(task);
          return task;
      };
      Profiler.prototype.createNonTaskEvent = function (eType, payload, async, stackId) {
          // 直接找 ProfileTask 要 static
          var event = ProfileTask.createNonTaskEvent(this, eType, payload, async, stackId);
          this.nonTaskEvents.push(event);
          return event;
      };
      Profiler.prototype.createCrossTaskEvent = function (event) {
          return ProfileEvent.createCrossTaskEvent(event, this.pid);
      };
      Profiler.prototype.createTaskEvent = function (eType, payload) {
          var topTask = this.getTopTask();
          var frameStacks = this.frameStacks;
          var stackId;
          if (frameStacks) {
              stackId = frameStacks.createCurrentStackId();
          }
          if (topTask) {
              return topTask.createEvent(eType, payload, stackId);
          }
          // 别创建匿名任务
          // 会把一些正常的任务给吞了
          return this.createNonTaskEvent(eType, payload, false, stackId);
      };
      Profiler.prototype.finishTask = function (task, only) {
          var taskStacks = this.taskStacks;
          var index = taskStacks.indexOf(task);
          if (index >= 0) {
              if (only) {
                  taskStacks.splice(index, 1);
              }
              else {
                  taskStacks.length = index;
              }
          }
      };
      Profiler.prototype.serialize = function (basisTimeStamp, endTime) {
          var encoder = this.encoder.setBeginTime(basisTimeStamp);
          var descriptors = [];
          if (!this.connected) {
              this.connected = true;
              var pid = this.pid;
              var sort = [];
              var pname = [];
              var tname = [];
              sort[4 /* IProfileSerializer.Meta.EKey.Args */] = {
                  sort_index: pid >= 10 ? pid - 10 : pid + 10,
              };
              pname[4 /* IProfileSerializer.Meta.EKey.Args */] = {
                  name: this.name,
              };
              tname[4 /* IProfileSerializer.Meta.EKey.Args */] = {
                  name: 'JavaScript',
              };
              sort[1 /* IProfileSerializer.Meta.EKey.Name */] = 'process_sort_index';
              pname[1 /* IProfileSerializer.Meta.EKey.Name */] = 'process_name';
              tname[1 /* IProfileSerializer.Meta.EKey.Name */] = 'thread_name';
              sort[0 /* IProfileSerializer.Meta.EKey.Type */] = pname[0 /* IProfileSerializer.Meta.EKey.Type */] = tname[0 /* IProfileSerializer.Meta.EKey.Type */] = 4 /* IProfileSerializer.ESharedType.Meta */;
              sort[2 /* IProfileSerializer.Meta.EKey.ProcessId */] = pname[2 /* IProfileSerializer.Meta.EKey.ProcessId */] = tname[2 /* IProfileSerializer.Meta.EKey.ProcessId */] = pid;
              sort[3 /* IProfileSerializer.Meta.EKey.TimeStamp */] = pname[3 /* IProfileSerializer.Meta.EKey.TimeStamp */] = tname[3 /* IProfileSerializer.Meta.EKey.TimeStamp */] = encoder.timeStamp(this.beginTime);
              descriptors.push(sort, pname, tname);
          }
          var nextNonTaskEvents = [];
          var nextTasks = [];
          for (var _i = 0, _a = this.nonTaskEvents; _i < _a.length; _i++) {
              var taskEvent = _a[_i];
              if (taskEvent.isComplete() && (!endTime || taskEvent.beginTime <= endTime)) {
                  descriptors.push.apply(descriptors, taskEvent.serialize(encoder));
              }
              else {
                  nextNonTaskEvents.push(taskEvent);
              }
          }
          for (var _b = 0, _c = this.tasks; _b < _c.length; _b++) {
              var task = _c[_b];
              if (task.isComplete() && (!endTime || task.beginTime <= endTime)) {
                  descriptors.push.apply(descriptors, task.serialize(encoder));
              }
              else {
                  nextTasks.push(task);
              }
          }
          this.nonTaskEvents = nextNonTaskEvents;
          this.tasks = nextTasks;
          var frameStacks = this.frameStacks;
          var messageData = [
              encoder.serialize(),
              descriptors,
              frameStacks ? frameStacks.serialize() : [{}, {}] ];
          return messageData;
      };
      Profiler.prototype.isActivePage = function (viewId) {
          return viewId + '' === this.viewId;
      };
      Profiler.prototype.refresh = function (viewId) {
          if (this.connected) {
              this.connected = false;
              this.taskStacks.length = 0;
              this.nonTaskEvents = [];
              this.tasks = [];
              this.encoder.token.refresh();
              if (this.frameStacks) {
                  this.frameStacks.refresh();
              }
          }
          this.viewId = viewId + '';
      };
      Profiler.prototype.getTopTask = function () {
          var taskStacks = this.taskStacks;
          return taskStacks[taskStacks.length - 1];
      };
      return Profiler;
  }());

  var ProfileTask = /** @class */ /*#__PURE__*/ (function () {
      function ProfileTask(pid, rType, tType, name, source) {
          this.pid = pid;
          this.rType = rType;
          this.tType = tType;
          this.beginTime = -1;
          this.endTime = -1;
          this.events = [];
          this.taskId = getProfileUniqueIdentifier(rType, "t" /* EProfileIdType.Task */);
          this.name = name || '';
          if (source) {
              this.source = source;
              source.addFollowTask(this);
          }
      }
      ProfileTask.createNonTaskEvent = function (profiler, eType, payload, async, stackId) {
          return ProfileEvent.createEvent(profiler.pid, eType, profiler.type, payload, async ? 0 /* ETraceEventDescriptorType.Async */ : 2 /* ETraceEventDescriptorType.Instant */, stackId);
      };
      ProfileTask.prototype.setParentTask = function (task) {
          this.parentTaskId = task.taskId;
          this.parentTaskType = task.rType;
      };
      ProfileTask.prototype.createEvent = function (eType, payload, stackId) {
          var event = ProfileEvent.createEvent(this.pid, eType, this.rType, payload, 1 /* ETraceEventDescriptorType.Complete */, stackId);
          event.setBegin();
          event.setParentTask(this);
          this.events.push(event);
          return event;
      };
      ProfileTask.prototype.setBegin = function (beginTime) {
          if (beginTime === void 0) { beginTime = getPrecisionTimestamp(); }
          this.beginTime = beginTime;
      };
      ProfileTask.prototype.setComplete = function (endTime) {
          if (endTime === void 0) { endTime = getPrecisionTimestamp(); }
          this.endTime = endTime;
          for (var _i = 0, _a = this.events; _i < _a.length; _i++) {
              var event = _a[_i];
              if (!event.isComplete()) {
                  reportProfileError('INCOMPLETE_EVENT', {
                      e: event.getCrossThreadJSON(),
                  });
                  break;
              }
          }
      };
      ProfileTask.prototype.isComplete = function () {
          return this.endTime >= 0 && this.events.every(function (e) { return e.isComplete(); });
      };
      ProfileTask.prototype.serialize = function (encoder) {
          var _a = this, beginTime = _a.beginTime, source = _a.source, parentTaskId = _a.parentTaskId, parentTaskType = _a.parentTaskType, rType = _a.rType, pid = _a.pid;
          var descriptors = [];
          var complete = [];
          complete[2 /* IProfileSerializer.TaskComplete.EKey.TaskInvocationType */] = this
              .tType;
          complete[1 /* IProfileSerializer.TaskComplete.EKey.TaskType */] = this.rType;
          complete[3 /* IProfileSerializer.TaskComplete.EKey.Duration */] = encoder.timeStamp(this.endTime, beginTime);
          complete[4 /* IProfileSerializer.TaskComplete.EKey.Id */] = this.taskId;
          complete[5 /* IProfileSerializer.TaskComplete.EKey.Name */] = encoder.text(this.name);
          complete[0 /* IProfileSerializer.TaskComplete.EKey.Type */] = 0 /* IProfileSerializer.ESharedType.TaskComplete */;
          complete[6 /* IProfileSerializer.TaskComplete.EKey.TimeStamp */] = encoder.timeStamp(beginTime);
          if (parentTaskId || pid) {
              complete[7 /* IProfileSerializer.TaskComplete.EKey.ProcessId */] = pid;
              if (parentTaskId) {
                  complete[8 /* IProfileSerializer.TaskComplete.EKey.ParentTaskId */] = parentTaskId;
                  if (parentTaskType !== rType) {
                      complete[9 /* IProfileSerializer.TaskComplete.EKey.ParentTaskType */] = parentTaskType;
                  }
              }
          }
          descriptors.push(complete);
          if (source) {
              var crossThreadType = source.crossThreadType;
              if (crossThreadType === 0 /* EProfileEventCrossThreadType.SameThread */) {
                  // 相同线程，源事件自身会被序列化
                  // 所以这里只需要绘制 FlowStart
                  // 注意不要在源事件自身序列化时生成 FlowStart
                  // 因为不一定有呢
                  descriptors.push(source.serializeFlow(encoder, 5 /* IProfileSerializer.ESharedType.FlowStart */, source.rType, source.eventId, source.endTime));
              }
              else if (crossThreadType === 2 /* EProfileEventCrossThreadType.CrossThreadEnd */ && source.followTasks[0] === this) {
                  // 对于跨线程的源事件
                  // 在这里绘制结束时的 FlowEnd
                  descriptors.push.apply(descriptors, source.serialize(encoder));
              }
              descriptors.push(source.serializeFlow(encoder, 6 /* IProfileSerializer.ESharedType.FlowEnd */, this.rType, this.taskId, this.beginTime));
          }
          for (var _i = 0, _b = this.events; _i < _b.length; _i++) {
              var event = _b[_i];
              descriptors.push.apply(descriptors, event.serialize(encoder));
          }
          return descriptors;
      };
      return ProfileTask;
  }());

  var ZElement4Document = /** @class */ /*#__PURE__*/ (function () {
      function ZElement4Document(document, style) {
          this.eType = 1 /* EZRuntimeClientSideElementType.Element */;
          this.feature = 0;
          this.treeContext = {
              checkboxGroup: null,
              form: null,
              movableArea: null,
              pickerView: null,
              radioGroup: null,
              swiper: null,
          };
          this.ownerTargetId = 0;
          this.document = document;
          this.style = style || {};
          this.root = document.documentElement.body;
           var d = document.documentElement.createElement('div');
           d.setAttribute('className', 'hello widget');
           var t = document.documentElement.createTextNode('hello widget');
           t.textContent = 'test_gggin_text 2';
           d.appendChild(t);

           this.root.appendChild(d);

          //var scrollRoot = (this.root = document.createElement('scroller'));
          // scrollRoot.setAttr('className', 'a-page');
          // scrollRoot.setAttr('allowBounce', false);
          // scrollRoot.setAttr('bubble', 'true');
          // scrollRoot.setAttr('pageScrollRoot', true);
          // scrollRoot.setAttr('scrollDirection', 'vertical');
          // scrollRoot.setStyle('flex', 1);

          // debug$3(function(){ return "gggin scrollRoot: className" + scrollRoot.getAttribute('className'); });
          // debug$3(function(){ return "gggin scrollRoot: allowBounce" + scrollRoot.getAttribute('allowBounce'); });
          // debug$3(function(){ return "gggin scrollRoot: bubble" + scrollRoot.getAttribute('bubble'); });
          // debug$3(function(){ return "gggin scrollRoot: pageScrollRoot" + scrollRoot.getAttribute('pageScrollRoot'); });
          // debug$3(function(){ return "gggin scrollRoot: scrollDirection" + scrollRoot.getAttribute('scrollDirection'); });

          if (style) {
              var pageStyle = style['a-page'];
              var tinyPage = style['tiny-page'];
              if (pageStyle || tinyPage) {
                  scrollRoot.setStyles(__assign(__assign({}, pageStyle), tinyPage));
              }
          }
          /**
           * 由于 scrollRoot 算是 createBody 指令节点
           * 由于 createBody 指令携带的 children 不可识别
           * 需要在 scrollRoot 被插入完成后才能再插入其孩子
           */
      }
      ZElement4Document.prototype.mountDocument = function (body) {
          this.document.mountBody(this.root);
      };
      ZElement4Document.prototype.mountTabBar = function () { };
      ZElement4Document.prototype.getChildNodes = function () {
          return [];
      };
      ZElement4Document.prototype.setIsolation = function () { };
      ZElement4Document.prototype.setClassName = function (className) { };
      ZElement4Document.prototype.setStyleInline = function (style) { };
      ZElement4Document.prototype.insertBefore = function (child, anchor) {
          if (anchor) {
              this.root.insertBefore(child.root, anchor.root);
          }
          else {
              this.root.appendChild(child.root);
          }
          helperClientInsertBeforeLink(this, child, anchor);
      };
      ZElement4Document.prototype.appendChild = function (child) {
          this.root.appendChild(child.root);
          helperClientAppendChildLink(this, child);
      };
      ZElement4Document.prototype.setAttr = function (key, value) { };
      ZElement4Document.prototype.setId = function (value) { };
      ZElement4Document.prototype.updateTrackerAttr = function () { };
      ZElement4Document.prototype.initTrackerAttr = function () { };
      ZElement4Document.prototype.initDataset = function (dataset) { };
      ZElement4Document.prototype.updateDatasetPartial = function (dataset) { };
      ZElement4Document.prototype.updateDatasetAll = function (dataset) { };
      ZElement4Document.prototype.getDataset = function () { };
      ZElement4Document.prototype.setDataset = function (key, value) { };
      ZElement4Document.prototype.setAttrs = function (batchedAttrs, changedMap) {
          // ignore
      };
      ZElement4Document.prototype.setStyle = function (key, value) {
          // this.root.setStyle(key, value);
      };
      ZElement4Document.prototype.setStyles = function (batchedStyles) {
          // this.root.setStyles(batchedStyles);
      };
      ZElement4Document.prototype.createText = function (text) {
          return null;
      };
      ZElement4Document.prototype.createDocumentElement = function () {
          return this.document.createDocumentElement();
      };
      ZElement4Document.prototype.createElement = function (tag) {
          return this.document.createElement(tag);
      };
      ZElement4Document.prototype.createTextNode = function (text) {
          return this.document.documentElement.createTextNode(text);
      };
      ZElement4Document.prototype.createComment = function (text) {
          return {
              destroy: noop$4,
              eType: 0 /* EZRuntimeClientSideElementType.Comment */,
              nextSibling: null,
              parent: null,
              previousSibling: null,
              root: this.document.createComment(text || ''),
          };
      };
      ZElement4Document.prototype.cloneComment = function (comment) {
          var _a;
          return {
              destroy: noop$4,
              eType: 0 /* EZRuntimeClientSideElementType.Comment */,
              nextSibling: null,
              parent: null,
              previousSibling: null,
              root: this.document.createComment(((_a = comment === null || comment === void 0 ? void 0 : comment.root) === null || _a === void 0 ? void 0 : _a.textContent) || ''),
          };
      };
      ZElement4Document.prototype.willUpdateChildren = function () { };
      ZElement4Document.prototype.invokePropertiesChange = function () { };
      ZElement4Document.prototype.onEventHandler = function () {
          return false;
      };
      ZElement4Document.prototype.destroy = function () {
          if (this.document) {
              this.document.destroy();
              this.document = null;
          }
          this.root = null;
      };
      ZElement4Document.prototype.removeChild = function (child) {
          var root = child.root;
          child.destroy();
          helperClientRemoveChildLink(this, child);
          if (this.root === root.parentNode) {
              this.root.removeChild(root);
          }
      };
      ZElement4Document.prototype.updateEventBinding = function (userEventName, userEventIndex, method) { };
      ZElement4Document.prototype.addEventBinding = function () { };
      ZElement4Document.prototype.addInternalEvent = function () { };
      ZElement4Document.prototype.onError = function (ex, coordinator) {
          // nothing
      };
      ZElement4Document.prototype.initClassStyleProp = function (componentInstance, klassExp, styleExp, propsMapExp) { };
      ZElement4Document.prototype.hydrateClassStyleProp = function (componentInstance, klassExp, styleExp, propsMapExp) { };
      ZElement4Document.prototype.updateClassStyleProp = function (componentInstance, klassExp, klassChanged, styleExp, styleChanged, propsMapExp, propsChangedMap) { };
      ZElement4Document.prototype.getEventContext = function () { };
      ZElement4Document.prototype.removeInternalEvent = function () { };
      ZElement4Document.prototype.setScrollListener = function (fn) {
          this.root.addEvent('scroll', fn);
      };
      ZElement4Document.prototype.setScrollBottomListener = function (fn, bottomDistance) {
          this.root.addEvent('scrolltolower', fn);
      };
      ZElement4Document.prototype.setIdInternal = function (nodeId, newId, oldId) {
          var map = this.document.attrId2NodeIdMap;
          if (map && newId !== oldId) {
              if (oldId) {
                  delete map[oldId];
              }
              if (newId) {
                  map[newId] = nodeId;
              }
          }
      };
      ZElement4Document.prototype.addPageChangeListener = function (fn) { };
      ZElement4Document.prototype.notifyPageChange = function () { };
      ZElement4Document.prototype.notifyPageMount = function () { };
      ZElement4Document.prototype.setPageDataGetter = function () { };
      return ZElement4Document;
  }());
  function getZElement4Document(document, style) {
      return new ZElement4Document(document, style);
  }
  function noop$4() { }

  function extend(to, from) {
      // tslint:disable-next-line
      for (var key in from) {
          to[key] = from[key];
      }
      return to;
  }

  function noop$5() { }

  // tslint:disable no-bitwise forin
  function normalizeStyleInternal(style) {
      if (!style) {
          return;
      }
      if (typeof style !== 'string') {
          style = String(style);
      }
      // 先; 再 :
      var ret;
      // 如果包含 background-image
      if (style.indexOf('url') >= 0) {
          ret = parseInlineStyle(style);
      }
      else {
          ret = {};
          for (var _i = 0, _a = style.split(';'); _i < _a.length; _i++) {
              var stylePart = _a[_i];
              var matches = stylePart.match(/^\s*([\-\w]+)\s*\:(.*)$/);
              if (matches) {
                  var property = camelize4CSS(matches[1]);
                  var value = matches[2] || '';
                  ret[property] = value.trim();
              }
          }
      }
      return ret;
  }
  function clearStyleObject(targetStyleObject, currentStyle) {
      var modified;
      if (currentStyle) {
          for (var property in currentStyle) {
              modified = true;
              targetStyleObject[property] = '';
          }
      }
      return modified;
  }
  function setClassToStyleObject(className, stylesheet, styleObject) {
      var modified;
      if (stylesheet && className && className.split) {
          className.split(/\s+/).forEach(function (name) {
              var style = stylesheet[name];
              if (style) {
                  modified = true;
                  extend(styleObject, style);
              }
          });
      }
      return modified;
  }

  // export function getRuntimeProxy(
  //   component: IZRuntimeContextRequiredInstance4CubeClient
  // ): ISharedAppxFlexibleClientCoordinatorProxy {
  //   return component.root.option.runtime.proxy as ISharedAppxFlexibleClientCoordinatorProxy;
  // }
  function callRuntimeHostReadyTargetMethod(instance, method, arg0, callback) {
      getRuntimeProxyByOwnerPageId(instance).callHostReadyTargetMethod(instance.ownerTargetId, method, arg0, callback);
  }
  function getRuntimeProxyByOwnerPageId(instance) {
      {
          return getPageByOwnerId(instance.ownerPageId).option.runtime.proxy;
      }
  }

  // export type IZRuntimeElementInstanceUserEventHandler = ((e: IBaseEvent) => void) & {
  //   userEventStop?: boolean;
  //   userEventName?: string;
  //   userEventIndex?: number;
  //   internal?: false;
  // };
  // export type IZRuntimeElementInstanceInternalEventHandler = ((e: INativeEvent) => void) & {
  //   userEventStop?: void;
  //   userEventName?: void;
  //   userEventIndex?: void;
  //   internal?: true;
  // };
  // export type IZRuntimeElementInstanceEventHandler =
  //   | IZRuntimeElementInstanceUserEventHandler
  //   | IZRuntimeElementInstanceInternalEventHandler;
  var ZElement4Shared = /** @class */ /*#__PURE__*/ (function () {
      function ZElement4Shared() {
          this.unorderedChildren = [];
          this.eType = 1 /* EZRuntimeClientSideElementType.Element */;
      }
      ZElement4Shared.prototype.setIsolation = function (id) { };
      // private eventDynamicContextMap: IZRuntimeElementInstanceEventContext[];
      ZElement4Shared.prototype.getChildNodes = function () {
          return [];
      };
      ZElement4Shared.prototype.hydrateClassStyleProp = function (componentInstance, klassExp, styleExp, propsMapExp) {
          // nothing
      };
      ZElement4Shared.prototype.insertBefore = function (child, anchor) {
          if (anchor) {
              this.root.insertBefore(child.root, anchor.root);
          }
          else {
              this.root.appendChild(child.root);
          }
          helperClientInsertBeforeLink(this, child, anchor);
      };
      ZElement4Shared.prototype.appendChild = function (child) {
          this.root.appendChild(child.root);
          helperClientAppendChildLink(this, child);
      };
      ZElement4Shared.prototype.setAttr = function (key, value) {
          if (!key) {
              return;
          }
          // 只允许 id, role, data-, aria 能被提交序列化
          // 编译层已经判过了
          this.root.setAttr(key, value);
      };
      ZElement4Shared.prototype.initDataset = function (dataset) {
          var this$1 = this;

          var root = this.root;
          root.$$dataset = dataset;
          {
              // 往下设置成驼峰 data
              for (var key in dataset) {
                  if (dataset.hasOwnProperty(key)) {
                      var value = dataset[key];
                      if (typeof key === 'string' && key) {
                          this$1.root.setAttr("data-".concat(key.replace(/\B([A-Z])/g, '-$1').toLowerCase()), value);
                      }
                  }
              }
          }
      };
      ZElement4Shared.prototype.updateDatasetPartial = function (dataset) {
          var this$1 = this;

          var root = this.root;
          var $$oldDataset = root.$$dataset;
          root.$$dataset = __assign(__assign({}, $$oldDataset), dataset);
          /**
           * 用户不能删 dataset
           */
          {
              // 往下设置成驼峰 data
              for (var key in dataset) {
                  if (dataset.hasOwnProperty(key)) {
                      var value = dataset[key];
                      if (typeof key === 'string' && key) {
                          this$1.root.setAttr("data-".concat(key.replace(/\B([A-Z])/g, '-$1').toLowerCase()), value);
                      }
                  }
              }
          }
      };
      ZElement4Shared.prototype.updateDatasetAll = function (dataset) {
          var this$1 = this;

          var root = this.root;
          root.$$dataset = dataset;
          /**
           * 用户不能删 dataset
           */
          {
              // 往下设置成驼峰 data
              for (var key in dataset) {
                  if (dataset.hasOwnProperty(key)) {
                      var value = dataset[key];
                      if (typeof key === 'string' && key) {
                          this$1.root.setAttr("data-".concat(key.replace(/\B([A-Z])/g, '-$1').toLowerCase()), value);
                      }
                  }
              }
          }
      };
      ZElement4Shared.prototype.getDataset = function () {
          var root = this.root;
          return root && root.$$dataset;
      };
      ZElement4Shared.prototype.setDataset = function (key, value) {
          var root = this.root;
          if (!root.$$dataset) {
              root.$$dataset = {};
          }
          root.$$dataset[key] = value;
          {
              // 往下设置成驼峰 data
              if (typeof key === 'string' && key) {
                  this.root.setAttr("data-".concat(key.replace(/\B([A-Z])/g, '-$1').toLowerCase()), value);
              }
          }
      };
      ZElement4Shared.prototype.setAttrs = function (batchedAttrs, changedMap) {
          this.root.setAttrs(batchedAttrs);
      };
      ZElement4Shared.prototype.setId = function (value) { };
      ZElement4Shared.prototype.initTrackerAttr = function () { };
      ZElement4Shared.prototype.updateTrackerAttr = function () { };
      ZElement4Shared.prototype.setStyle = function (key, value) {
          this.root.setStyle(key, value);
      };
      ZElement4Shared.prototype.setStyles = function (batchedStyles) {
          this.root.setStyles(batchedStyles);
      };
      ZElement4Shared.prototype.setClassName = function (className) { };
      ZElement4Shared.prototype.setStyleInline = function (style) { };
      ZElement4Shared.prototype.removeChild = function (child) {
          this.root.removeChild(child.root);
          helperClientRemoveChildLink(this, child);
          child.destroy();
      };
      ZElement4Shared.prototype.destroy = function () {
          this.root = null;
          // this.eventHandler = null;
      };
      ZElement4Shared.prototype.initClassStyleProp = function (componentInstance, klassExp, styleExp, propsMapExp) {
          if (propsMapExp) {
              this.setAttrs(propsMapExp, propsMapExp);
          }
          return this.initClassStyle(componentInstance, klassExp, styleExp);
      };
      ZElement4Shared.prototype.updateClassStyleProp = function (componentInstance, klassExp, klassChanged, styleExp, styleChanged, propsMapExp, propsChangedMap) {
          if (propsChangedMap) {
              this.setAttrs(propsMapExp, propsChangedMap);
          }
          if (klassChanged || styleChanged) {
              return this.updateClassStyle(componentInstance, klassExp, klassChanged, styleExp, styleChanged);
          }
      };
      ZElement4Shared.prototype.addEventBinding = function (eventContext) {
          if (eventContext.method && !eventContext.binded) {
              eventContext.binded = true;
              this.addEventImpl(eventContext);
          }
      };
      ZElement4Shared.prototype.getEventContext = function (eventIndex, mType, method, componentInstance, eventName, stop, capture) {
          var eventContext;
          if (componentInstance) {
              var parentTarget = (componentInstance.type >= 2 /* EZRuntimeLinkedInstanceType.Component */
                  ? componentInstance
                  : componentInstance.option.parentTarget);
              eventContext = createEventContext4StringOrSJSFunction(mType, method, eventIndex, parentTarget.targetId, stop, eventName, this.getNativeEvent(eventName), capture);
          }
          else {
              eventContext = createEventContext4Legacy(method, eventIndex, stop, eventName, this.getNativeEvent(eventName));
          }
          var eventContexts = this.eventContexts;
          if (!eventContexts) {
              eventContexts = this.eventContexts = [];
          }
          if (eventContexts.length === eventIndex) {
              eventContexts.push(eventContext);
          }
          else {
              eventContexts[eventIndex] = eventContext;
          }
          return eventContext;
      };
      ZElement4Shared.prototype.addInternalEvent = function (nativeEventName, fn) {
          this.addEventImpl(createEventContext4Internal(fn, false, nativeEventName));
      };
      ZElement4Shared.prototype.removeInternalEvent = function (nativeEventName, fn) {
          var eventHandlers = this.eventHandlers;
          if (eventHandlers) {
              var eventFns = eventHandlers[nativeEventName];
              if (eventFns) {
                  var length = eventFns.length;
                  if (length > 1) {
                      eventHandlers[nativeEventName] = eventFns.filter(function (f) { return typeof f === 'number' || f.method !== fn; });
                  }
                  else if (length === 1) {
                      var context_1 = eventHandlers[nativeEventName][0];
                      if (typeof context_1 !== 'number') {
                          eventHandlers[nativeEventName].length = 0;
                          this.root.removeEvent(nativeEventName, this.onEventHandler);
                      }
                  }
              }
          }
      };
      ZElement4Shared.prototype.willUpdateChildren = function () { };
      ZElement4Shared.prototype.invokePropertiesChange = function () { };
      ZElement4Shared.prototype.invokeEventContext = function (eventContext, event, callback) {
          if (eventContext.mType === 0 /* EZRuntimeElementInstanceUserEventContextType.String */) {
              callRuntimeHostReadyTargetMethod(this, eventContext.method, event, callback);
          }
          else if (eventContext.mType === 1 /* EZRuntimeElementInstanceUserEventContextType.SJSFunction */) ;
          else if (eventContext.mType === 2 /* EZRuntimeElementInstanceUserEventContextType.LegacyFunction */) {
              eventContext.method(event);
          }
      };
      ZElement4Shared.prototype.onEventHandler = function (e) {
          if (!this.eventHandlers) {
              return false;
          }
          var eventHandlers = this.eventHandlers;
          var nativeEventName = e.type;
          if (!eventHandlers[nativeEventName]) {
              return false;
          }
          var eventContexts = this.eventContexts;
          var shouldStopPropagation;
          var userEventNames;
          var hasExternalEventHandler = false;
          var _loop_1 = function (handler) {
              if (typeof handler !== 'number') {
                  var shouldStopIterate = handler.method(e);
                  if (shouldStopIterate) {
                      return "break";
                  }
              }
              else {
                  if (!eventContexts) {
                      return "continue";
                  }
                  var eventContext_1 = eventContexts[handler];
                  if (!eventContext_1.method) {
                      // 如果是动态函数，并且当前 method 不存在，则不触发后续操作
                      debug$3(function () { return "[Component] handleEvent: ".concat(eventContext_1.ename, ":ignore"); });
                      return "continue";
                  }
                  var matchUserEventName4Handler_1 = eventContext_1.ename;
                  if (!userEventNames) {
                      var userEventNameMayBeArray = this_1.getUserEvent(nativeEventName, e);
                      userEventNames = Array.isArray(userEventNameMayBeArray) ? userEventNameMayBeArray : [userEventNameMayBeArray];
                  }
                  var _loop_2 = function (userEventName) {
                      debug$3(function () {
                          return /^\$/.test(String(userEventName))
                              ? ''
                              : "[Component] handleEvent: ".concat(userEventName && userEventName.toLowerCase(), ":").concat(matchUserEventName4Handler_1 === userEventName);
                      });
                      if (matchUserEventName4Handler_1 === userEventName) {
                          var event = this_1.getEvent(e, userEventName, nativeEventName);
                          if (event) {
                              hasExternalEventHandler = true;
                              this_1.invokeEventContext(eventContext_1, event);
                              if (!shouldStopPropagation && eventContext_1.stop) {
                                  shouldStopPropagation = true;
                              }
                          }
                      }
                  };
                  for (var _b = 0, userEventNames_1 = userEventNames; _b < userEventNames_1.length; _b++) {
                      var userEventName = userEventNames_1[_b];
                      _loop_2(userEventName);
                  }
              }
          };
          var this_1 = this;
          for (var _i = 0, _a = eventHandlers[nativeEventName]; _i < _a.length; _i++) {
              var handler = _a[_i];
              var state_1 = _loop_1(handler);
              if (state_1 === "break")
                  { break; }
          }
          if (shouldStopPropagation && e.stopPropagation) {
              e.stopPropagation();
          }
          return hasExternalEventHandler;
      };
      ZElement4Shared.prototype.addEventToElement = function (name, callback) {
          this.root.addEvent(name, callback);
      };
      ZElement4Shared.prototype.initClassStyle = function (componentInstance, klassExp, styleExp) {
          var prefixClassName = this.constructor.prefixClassName;
          if (prefixClassName) {
              klassExp = prefixClassName + (klassExp || '');
          }
          // 合并更新 class/style
          var stylesheet = componentInstance.document.style;
          var modified = false;
          var targetStyle = {};
          if (klassExp) {
              modified = setClassToStyleObject(klassExp, stylesheet, targetStyle) || modified;
              this.root.setAttr('className', klassExp);
          }
          if (styleExp) {
              var inlineStyle = normalizeStyleInternal(styleExp);
              this.root.inlineStyle = inlineStyle;
              if (inlineStyle) {
                  modified = true;
                  extend(targetStyle, inlineStyle);
              }
          }
          if (modified) {
              this.setStyles(targetStyle);
              return targetStyle;
          }
      };
      // klassChanged || styleChanged 才能进入
      ZElement4Shared.prototype.updateClassStyle = function (componentInstance, klassExp, klassChanged, styleExp, styleChanged, notEmitClassName) {
          var prefixClassName = this.constructor.prefixClassName;
          if (prefixClassName) {
              klassExp = prefixClassName + (klassExp || '');
          }
          // 合并更新 class/style
          var stylesheet = componentInstance.document.style;
          var modified = false;
          var targetStyle = {};
          modified = clearStyleObject(targetStyle, this.root.style) || modified;
          if (klassExp) {
              modified = setClassToStyleObject(klassExp, stylesheet, targetStyle) || modified;
          }
          if (klassChanged && !notEmitClassName) {
              this.root.setAttr('className', klassExp);
          }
          var inlineStyle;
          // inlineStyle 级别缓存
          if (styleChanged) {
              inlineStyle = normalizeStyleInternal(styleExp);
              this.root.inlineStyle = inlineStyle;
          }
          else {
              inlineStyle = this.root.inlineStyle;
          }
          if (inlineStyle) {
              modified = true;
              extend(targetStyle, inlineStyle);
          }
          if (modified) {
              this.setStyles(targetStyle);
              return targetStyle;
          }
      };
      ZElement4Shared.prototype.getNativeEvent = function (name) {
          var event2native = this.constructor.event2native;
          return (event2native && event2native[name]) || name;
      };
      ZElement4Shared.prototype.getUserEvent = function (name, e) {
          var native2event = this.constructor.native2event;
          return (native2event && native2event[name]) || name;
      };
      ZElement4Shared.prototype.addEventImpl = function (context) {
          var eventHandlers = this.eventHandlers;
          if (!eventHandlers) {
              this.onEventHandler = this.onEventHandler.bind(this);
              eventHandlers = this.eventHandlers = Object.create(null);
          }
          var nativeEventName = context.nname;
          var eventFns = eventHandlers[nativeEventName];
          if (eventFns) {
              if (context.mType === 3 /* EZRuntimeElementInstanceUserEventContextType.InternalFunction */) {
                  eventFns.unshift(context);
              }
              else {
                  eventFns.push(context.index);
              }
          }
          else {
              eventFns = eventHandlers[nativeEventName] = [
                  context.mType === 3 /* EZRuntimeElementInstanceUserEventContextType.InternalFunction */ ? context : context.index ];
          }
          if (eventFns.length === 1) {
              this.addEventToElement(nativeEventName, this.onEventHandler);
          }
      };
      return ZElement4Shared;
  }());

  function getEventTargetDetail(target, tagName) {
      return {
          dataset: normalizeEventTargetDataset(target),
          id: target.attr && target.attr.id,
          tagName: tagName,
      };
  }
  function normalizeEventTargetDataset(target) {
      return __assign({}, target.$$dataset);
  }
  function getEventTarget(nativeEventTarget, currentTargetDataset, targetDataset) {
      return {
          dataset: currentTargetDataset,
          id: nativeEventTarget.attr && nativeEventTarget.attr.id,
          tagName: null,
          targetDataset: targetDataset,
      };
  }
  function getEventCurrentTarget(nativeEventTarget, currentTargetDataset) {
      return {
          dataset: currentTargetDataset,
          id: nativeEventTarget.attr && nativeEventTarget.attr.id,
          tagName: null,
      };
  }
  function normalizeTouchEvent(nativeTouchEvent, type) {
      var targetDataset = normalizeEventTargetDataset(nativeTouchEvent.target);
      var currentTargetDataset = normalizeEventTargetDataset(nativeTouchEvent.currentTarget);
      var currentTarget = getEventCurrentTarget(nativeTouchEvent.target, currentTargetDataset);
      var target = getEventTarget(nativeTouchEvent.target, currentTargetDataset, targetDataset);
      var _a = nativeTouchEvent.changedTouches, changedTouches = _a === void 0 ? [] : _a;
      return {
          changedTouches: changedTouches.map(normalizeTouchList),
          currentTarget: currentTarget,
          target: target,
          timeStamp: nativeTouchEvent.timestamp,
          touches: nativeTouchEvent.changedTouches.map(normalizeTouchList),
          type: type,
      };
  }
  function normalizeFormEvent(nativeTarget, type, detail) {
      var targetDataset = normalizeEventTargetDataset(nativeTarget);
      var currentTarget = getEventCurrentTarget(nativeTarget, targetDataset);
      var target = getEventTarget(nativeTarget, targetDataset, targetDataset);
      return {
          currentTarget: currentTarget,
          detail: detail,
          target: target,
          timeStamp: Date.now(),
          type: type,
      };
  }
  function normalizeScrollEvent(nativeEvent, type) {
      var detail = {
          scrollHeight: 0,
          scrollLeft: 0,
          scrollTop: 0,
          scrollWidth: 0,
      };
      if (nativeEvent.contentSize) {
          detail.scrollWidth = nativeEvent.contentSize.width;
          detail.scrollHeight = nativeEvent.contentSize.height;
      }
      var contentOffset = normalizeScrollEventOffset(nativeEvent);
      if (contentOffset) {
          detail.scrollLeft = contentOffset.x;
          detail.scrollTop = contentOffset.y;
      }
      return normalizeCustomEvent(nativeEvent, type, detail);
  }
  function normalizeScrollEventOffset(nativeEvent) {
      var contentOffset = nativeEvent.contentOffset;
      if (contentOffset) {
          if (typeof contentOffset === 'string') {
              try {
                  contentOffset = JSON.parse(contentOffset);
              }
              catch (ex) {
                  contentOffset = {
                      x: 0,
                      y: 0,
                  };
              }
          }
      }
      return contentOffset;
  }
  function normalizeCustomEvent(nativeEvent, type, detail) {
      var targetDataset = normalizeEventTargetDataset(nativeEvent.target);
      var currentTargetDataset = normalizeEventTargetDataset(nativeEvent.currentTarget);
      var currentTarget = getEventCurrentTarget(nativeEvent.target, currentTargetDataset);
      var target = getEventTarget(nativeEvent.target, currentTargetDataset, targetDataset);
      return {
          currentTarget: currentTarget,
          detail: detail,
          target: target,
          timeStamp: nativeEvent.timestamp,
          type: type,
      };
  }
  function normalizeBaseEvent(nativeEvent, type) {
      var targetDataset = normalizeEventTargetDataset(nativeEvent.target);
      var currentTargetDataset = normalizeEventTargetDataset(nativeEvent.currentTarget);
      var currentTarget = getEventCurrentTarget(nativeEvent.target, currentTargetDataset);
      var target = getEventTarget(nativeEvent.target, currentTargetDataset, targetDataset);
      return {
          currentTarget: currentTarget,
          target: target,
          timeStamp: nativeEvent.timestamp,
          type: type,
      };
  }
  function normalizeTouchList(touch) {
      return {
          clientX: touch.screenX,
          clientY: touch.screenY,
          identifier: null,
          pageX: null,
          pageY: null,
      };
  }
  /**
   * 用于格式化 canvas touch 事件
   * @param nativeTouchEvent
   */
  function normalizeCanvasTouchEvent(nativeTouchEvent, type, dataset) {
      var detail = nativeTouchEvent.detail, currentTarget = nativeTouchEvent.currentTarget, target = nativeTouchEvent.target;
      var currentTargetDataset = __assign({}, dataset);
      return {
          changedTouches: (detail && detail.changedTouches) || [],
          currentTarget: {
              dataset: currentTargetDataset,
              id: currentTarget.attr && currentTarget.attr.id,
              tagName: 'canvas',
          },
          target: {
              dataset: currentTargetDataset,
              id: target.attr && target.attr.id,
              tagName: 'canvas',
              targetDataset: target === currentTarget ? currentTargetDataset : normalizeEventTargetDataset(target),
          },
          timeStamp: nativeTouchEvent.timestamp,
          touches: (detail && detail.touches) || [],
          type: type,
      };
  }
  function normalizeCanvasTapEvent(nativeEvent, type, dataset) {
      var detail = nativeEvent.detail, currentTarget = nativeEvent.currentTarget, target = nativeEvent.target;
      var currentTargetDataset = __assign({}, dataset);
      return {
          currentTarget: {
              dataset: currentTargetDataset,
              id: currentTarget.attr && currentTarget.attr.id,
              tagName: 'canvas',
          },
          detail: detail.detail,
          target: {
              dataset: currentTargetDataset,
              id: target.attr && target.attr.id,
              tagName: 'canvas',
              targetDataset: target === currentTarget ? currentTargetDataset : normalizeEventTargetDataset(target),
          },
          timeStamp: nativeEvent.timestamp,
          type: type,
      };
  }

  var kElementInstanceWithHoverableEvent4HoverStart = 'touchstart';
  var kElementInstanceWithHoverableEvent4HoverEnd = 'touchend';
  var kElementInstanceWithHoverableEvent4HoverCancel = 'touchcancel';
  function handlerHoverClassChanged(element, nextClass, force) {
      var previousClass = element.hoverClass;
      var shouldAddEvent = force
          ? !element.onHoverPressInHandler
          : nextClass !== previousClass && nextClass && !previousClass;
      var shouldRemoveEvent = force ? false : nextClass !== previousClass && !nextClass && previousClass;
      if (shouldAddEvent) {
          element.onHoverPressInHandler = handlerHoverPressIn.bind(null, element, force);
          element.onHoverPressOutHandler = handlerHoverPressOut.bind(null, element, force);
          element.addInternalEvent(kElementInstanceWithHoverableEvent4HoverStart, element.onHoverPressInHandler);
          element.addInternalEvent(kElementInstanceWithHoverableEvent4HoverEnd, element.onHoverPressOutHandler);
          element.addInternalEvent(kElementInstanceWithHoverableEvent4HoverCancel, element.onHoverPressOutHandler);
      }
      else if (shouldRemoveEvent) {
          element.removeInternalEvent(kElementInstanceWithHoverableEvent4HoverStart, element.onHoverPressInHandler);
          element.removeInternalEvent(kElementInstanceWithHoverableEvent4HoverEnd, element.onHoverPressOutHandler);
          element.removeInternalEvent(kElementInstanceWithHoverableEvent4HoverCancel, element.onHoverPressOutHandler);
          element.onHoverPressInHandler = null;
          element.onHoverPressOutHandler = null;
      }
      element.hoverClass = nextClass;
  }
  function handlerHoverPressIn(element, force) {
      if (!element.hoverClass && !force) {
          return;
      }
      if (element.hoverPressState !== 1 /* EComponentHoverableState.Idle */) {
          return;
      }
      element.hoverPressState = 2 /* EComponentHoverableState.PressPrepare */;
      var hoverStartTime = element.hoverStartTime;
      hoverStartTime = typeof hoverStartTime === 'string' ? parseInt(hoverStartTime, 10) : hoverStartTime;
      if (hoverStartTime > 0) {
          setTimeout(function () {
              if (element.hoverPressState === 2 /* EComponentHoverableState.PressPrepare */) {
                  element.hoverPressState = 3 /* EComponentHoverableState.PressActive */;
                  handlerHoverActiveChanged(element, true);
              }
          }, hoverStartTime);
      }
      else {
          element.hoverPressState = 3 /* EComponentHoverableState.PressActive */;
          handlerHoverActiveChanged(element, true);
      }
  }
  function handlerHoverActiveChanged(element, after) {
      if (after !== element.hoverActive) {
          element.applyHoverClass(after);
          element.hoverActive = !!after;
      }
  }
  function handlerHoverPressOut(element, force) {
      if (!element.hoverClass && !force) {
          return;
      }
      if (element.hoverPressState !== 3 /* EComponentHoverableState.PressActive */) {
          element.hoverPressState = 1 /* EComponentHoverableState.Idle */;
          handlerHoverActiveChanged(element, false);
          return;
      }
      var hoverStayTime = element.hoverStayTime;
      hoverStayTime = typeof hoverStayTime === 'string' ? parseInt(hoverStayTime, 10) : hoverStayTime;
      if (hoverStayTime) {
          setTimeout(function () {
              element.hoverPressState = 1 /* EComponentHoverableState.Idle */;
              handlerHoverActiveChanged(element, false);
          }, hoverStayTime);
      }
      else {
          element.hoverPressState = 1 /* EComponentHoverableState.Idle */;
          handlerHoverActiveChanged(element, false);
      }
  }

  function getZRuntimeElementInstanceTreeContext(instance) {
      var treeContext = instance.treeContext;
      if (treeContext) {
          return treeContext;
      }
      // Cube 还没有实现 checkboxGroup/pickerView/radioGroup/movableArea
      if (instance.parent) {
          switch (instance.tagOrder) {
              case 15 /* EZElementTagName.Form */:
                  return (instance.treeContext = {
                      checkboxGroup: null,
                      form: instance,
                      movableArea: null,
                      pickerView: null,
                      radioGroup: null,
                      swiper: null,
                  });
          }
          return (instance.treeContext = getZRuntimeElementInstanceTreeContext(instance.parent));
      }
      debug$3(function () { return '[Zephyr] getZRuntimeElementInstanceTreeContext: called before element inserted into document'; });
  }

  var vFormNameIdBase = 0;
  function getNextFormName() {
      return "__unknown_for_control_".concat(++vFormNameIdBase);
  }
  function handleFormChildInit(instance) {
      instance.name = instance.name || getNextFormName();
      var treeContext = getZRuntimeElementInstanceTreeContext(instance);
      var formInstance = treeContext && treeContext.form;
      if (formInstance) {
          var name = instance.name;
          formInstance.registerField(name, instance);
          formInstance.setFieldValue(name, instance.value);
      }
  }
  function handleFormChildUpdateValue(instance) {
      var treeContext = getZRuntimeElementInstanceTreeContext(instance);
      var formInstance = treeContext && treeContext.form;
      if (formInstance) {
          formInstance.setFieldValue(instance.name, instance.value);
      }
  }
  function handleFormChildDestroy(instance) {
      var treeContext = getZRuntimeElementInstanceTreeContext(instance);
      var formInstance = treeContext && treeContext.form;
      if (formInstance) {
          formInstance.removeField(instance.name);
      }
      instance.treeContext = null;
  }

  var kElementAppmarkedEditorAttribute4EditType = 'editType';
  var kElementAppmarkedEditorAttribute4MyApps = 'myApps';
  var kElementAppmarkedEditorAttribute4RecentApps = 'recentApps';
  var kElementAppmarkedEditorAttribute4AllCategoryApps = 'allCategoryApps';
  var kElementAppmarkedEditorAttribute4Title = 'title';
  var kElementAppmarkedEditorAttribute4TimeLimitAppId = 'timeLimitAppId';
  var kElementAppmarkedEditorAttribute4InterceptBack = 'interceptBack';
  var ZElement4AppmarketEditor = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4AppmarketEditor, _super);
      function ZElement4AppmarketEditor(component, feature) {
          var _this = _super.call(this) || this;
          _this.root = component.document.createElement('external-appmarket-editor');
          return _this;
      }
      ZElement4AppmarketEditor.create = function (component, feature) {
          return new ZElement4AppmarketEditor(component, feature);
      };
      ZElement4AppmarketEditor.prototype.setAttrs = function (attrs, changedMap) {
          var batchedAttrs = {};
          if (changedMap[kElementAppmarkedEditorAttribute4EditType]) {
              batchedAttrs[kElementAppmarkedEditorAttribute4EditType] = attrs[kElementAppmarkedEditorAttribute4EditType];
          }
          if (changedMap[kElementAppmarkedEditorAttribute4MyApps]) {
              batchedAttrs[kElementAppmarkedEditorAttribute4MyApps] = attrs[kElementAppmarkedEditorAttribute4MyApps];
          }
          if (changedMap[kElementAppmarkedEditorAttribute4RecentApps]) {
              batchedAttrs[kElementAppmarkedEditorAttribute4RecentApps] = attrs[kElementAppmarkedEditorAttribute4RecentApps];
          }
          if (changedMap[kElementAppmarkedEditorAttribute4AllCategoryApps]) {
              batchedAttrs[kElementAppmarkedEditorAttribute4AllCategoryApps] =
                  attrs[kElementAppmarkedEditorAttribute4AllCategoryApps];
          }
          if (changedMap[kElementAppmarkedEditorAttribute4Title]) {
              batchedAttrs[kElementAppmarkedEditorAttribute4Title] = attrs[kElementAppmarkedEditorAttribute4Title];
          }
          if (changedMap[kElementAppmarkedEditorAttribute4TimeLimitAppId]) {
              batchedAttrs[kElementAppmarkedEditorAttribute4TimeLimitAppId] =
                  attrs[kElementAppmarkedEditorAttribute4TimeLimitAppId];
          }
          if (changedMap[kElementAppmarkedEditorAttribute4InterceptBack]) {
              if (attrs[kElementAppmarkedEditorAttribute4InterceptBack]) {
                  var root = this.root;
                  if (typeof root.interceptBackKey === 'function') {
                      root.interceptBackKey();
                  }
              }
          }
          this.root.setAttrs(batchedAttrs);
          // 没有 hover-* 系列
          // 如果 dev 模式下，用于测试用例观测
          {
              this.root.setAttrs(attrs);
          }
      };
      ZElement4AppmarketEditor.prototype.getEvent = function (e, userEventName, nativeEventName) {
          switch (userEventName) {
              case 'editFinish':
                  var nativeDetail = e.detail;
                  return normalizeCustomEvent(e, userEventName, {
                      appIdList: nativeDetail && nativeDetail.appIdList,
                      isEdited: nativeDetail && nativeDetail.isEdited,
                  });
          }
      };
      return ZElement4AppmarketEditor;
  }(ZElement4Shared));

  function iterateChild4Element(parent, fn) {
      var child = parent.firstChild;
      while (child) {
          if (child.eType === 1 /* EZRuntimeClientSideElementType.Element */) {
              fn(child);
          }
          child = child.nextSibling;
      }
  }

  // tslint:disable no-bitwise
  var kElementButtonInternalEvent4ExtraTap = 'click';
  var kElementButtonStyleCache = [];
  var kElementButtonTextStyleCache = [];
  function getButtonStyle(type) {
      var cacheKey = type;
      if (kElementButtonStyleCache[cacheKey]) {
          return kElementButtonStyleCache[cacheKey];
      }
      // `${kStylePrefix}`,
      // `${kStylePrefix}-wrapper-style`,
      // `${kStylePrefix}-${this.cSize}-size-raw`,
      // this.cInternalHoverClass,
      // this.disabled ? `${kStylePrefix}-${this.cType}-disabled` : '',
      var ret = 'a-button a-button-wrapper-style ';
      if (type & 1 /* EComponentButtonStyleType.Mini */) {
          ret += 'a-button-mini-size-raw a-button-small ';
      }
      else {
          ret += 'a-button-default-size-raw ';
      }
      if (type & 32 /* EComponentButtonStyleType.HoverActive */) {
          if (type & 64 /* EComponentButtonStyleType.HasHoverClass */) ;
          else if (type & 2 /* EComponentButtonStyleType.Disabled */) ;
          else {
              if (type & 4 /* EComponentButtonStyleType.Primary */) {
                  ret += 'a-button-primary-highlight a-button-active ';
              }
              else if (type & 8 /* EComponentButtonStyleType.Ghost */) {
                  ret += 'a-button-ghost-highlight a-button-active ';
              }
              else if (type & 16 /* EComponentButtonStyleType.Warn */) {
                  ret += 'a-button-warn-highlight a-button-active ';
              }
              else {
                  ret += 'a-button-default-highlight a-button-active ';
              }
          }
      }
      else {
          if (type & 4 /* EComponentButtonStyleType.Primary */) {
              ret += 'a-button-primary ';
          }
          else if (type & 8 /* EComponentButtonStyleType.Ghost */) {
              ret += 'a-button-ghost ';
          }
          else if (type & 16 /* EComponentButtonStyleType.Warn */) {
              ret += 'a-button-warn ';
          }
          else {
              ret += 'a-button-default ';
          }
      }
      if (type & 2 /* EComponentButtonStyleType.Disabled */) {
          if (type & 4 /* EComponentButtonStyleType.Primary */) {
              ret += 'a-button-primary-disabled ';
          }
          else if (type & 8 /* EComponentButtonStyleType.Ghost */) {
              ret += 'a-button-ghost-disabled ';
          }
          else if (type & 16 /* EComponentButtonStyleType.Warn */) {
              ret += 'a-button-warn-disabled ';
          }
          else {
              ret += 'a-button-default-disabled ';
          }
      }
      kElementButtonStyleCache[cacheKey] = ret;
      return ret;
  }
  function getButtonTextStyle(type) {
      var cacheKey = type;
      if (kElementButtonTextStyleCache[cacheKey]) {
          return kElementButtonTextStyleCache[cacheKey];
      }
      // `${kStylePrefix}-${this.cSize}-size-text`,
      // this.pressIn ? `${kStylePrefix}-${this.cType}-highlight-text` : `${kStylePrefix}-${this.cType}-text`,
      // this.disabled ? `${kStylePrefix}-${this.cType}-disabled-text` : '',
      var ret = ' ';
      if (type & 1 /* EComponentButtonStyleType.Mini */) {
          ret += 'a-button-mini-size-raw-text ';
      }
      else {
          ret += 'a-button-default-size-raw-text ';
      }
      if (type & 32 /* EComponentButtonStyleType.HoverActive */) {
          if (type & 4 /* EComponentButtonStyleType.Primary */) {
              ret += 'a-button-primary-highlight-text ';
          }
          else if (type & 8 /* EComponentButtonStyleType.Ghost */) {
              ret += 'a-button-ghost-highlight-text ';
          }
          else if (type & 16 /* EComponentButtonStyleType.Warn */) {
              ret += 'a-button-warn-highlight-text ';
          }
          else {
              ret += 'a-button-default-highlight-text ';
          }
      }
      else {
          if (type & 4 /* EComponentButtonStyleType.Primary */) {
              ret += 'a-button-primary-text ';
          }
          else if (type & 8 /* EComponentButtonStyleType.Ghost */) {
              ret += 'a-button-ghost-text ';
          }
          else if (type & 16 /* EComponentButtonStyleType.Warn */) {
              ret += 'a-button-warn-text ';
          }
          else {
              ret += 'a-button-default-text ';
          }
      }
      if (type & 2 /* EComponentButtonStyleType.Disabled */) {
          if (type & 4 /* EComponentButtonStyleType.Primary */) {
              ret += 'a-button-primary-disabled-text ';
          }
          else if (type & 8 /* EComponentButtonStyleType.Ghost */) {
              ret += 'a-button-ghost-disabled-text ';
          }
          else if (type & 16 /* EComponentButtonStyleType.Warn */) {
              ret += 'a-button-warn-disabled-text ';
          }
          else {
              ret += 'a-button-default-disabled-text ';
          }
      }
      kElementButtonTextStyleCache[cacheKey] = ret;
      return ret;
  }
  var ZElement4Button = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4Button, _super);
      function ZElement4Button(component, feature, root, container) {
          var _this = _super.call(this) || this;
          /* IZRuntimeElementInstanceWithHoverable */
          _this.hoverPressState = 1 /* EComponentHoverableState.Idle */;
          _this.suffixClassName = '';
          _this.componentInstance = component;
          _this.feature = feature;
          _this.root = root;
          _this.container = container;
          handlerHoverClassChanged(_this, '', true);
          return _this;
      }
      ZElement4Button.create = function (component, feature) {
          var root = component.document.createElement('div');
          var container = component.document.createElement('div');
          container.setStyle('flexDirection', 'row');
          root.appendChild(container);
          return new ZElement4Button(component, feature, root, container);
      };
      ZElement4Button.prototype.initClassStyleProp = function (componentInstance, klassExp, styleExp, propsMapExp) {
          var nextType;
          if (propsMapExp) {
              nextType = this.processAttrs(propsMapExp, propsMapExp);
          }
          else {
              nextType = 0;
          }
          if (this.hoverClass) {
              nextType |= 64 /* EComponentButtonStyleType.HasHoverClass */;
          }
          this.type = nextType;
          this.prefixClassName = getButtonStyle(nextType);
          this.userClassName = klassExp ? klassExp : '';
          return this.initClassStyle(componentInstance, this.prefixClassName + this.userClassName, styleExp);
      };
      ZElement4Button.prototype.updateClassStyleProp = function (componentInstance, klassExp, klassChanged, styleExp, styleChanged, propsMapExp, propsChangedMap) {
          var nextType;
          if (propsChangedMap) {
              nextType = this.processAttrs(propsMapExp, propsChangedMap);
              if (this.hoverActive) {
                  nextType |= 32 /* EComponentButtonStyleType.HoverActive */;
              }
              if (this.hoverClass) {
                  nextType |= 64 /* EComponentButtonStyleType.HasHoverClass */;
              }
          }
          else {
              nextType = this.type;
          }
          var typeChanged = this.type !== nextType;
          var typeClassChanged = typeChanged || klassChanged;
          if (typeChanged) {
              this.prefixClassName = getButtonStyle(nextType);
              this.type = nextType;
          }
          if (klassChanged) {
              this.userClassName = klassExp ? klassExp : '';
          }
          if (typeClassChanged || styleChanged) {
              return this.updateClassStyle(componentInstance, this.prefixClassName + this.userClassName + this.suffixClassName, typeClassChanged, styleExp, styleChanged);
          }
      };
      ZElement4Button.prototype.processAttrs = function (attrs, changedMap) {
          if (changedMap["hoverStartTime" /* EElementButtonAttribute.HoverStartTime */]) {
              this.hoverStartTime = attrs["hoverStartTime" /* EElementButtonAttribute.HoverStartTime */];
          }
          if (changedMap["hoverStayTime" /* EElementButtonAttribute.HoverStayTime */]) {
              this.hoverStayTime = attrs["hoverStayTime" /* EElementButtonAttribute.HoverStayTime */];
          }
          if (changedMap["shareTarget" /* EElementButtonAttribute.ShareTarget */]) {
              this.shareTarget = attrs["shareTarget" /* EElementButtonAttribute.ShareTarget */];
          }
          var changedHoverClass = changedMap["hoverClass" /* EElementButtonAttribute.HoverClass */];
          if (changedHoverClass) {
              if (this.hoverStayTime === undefined) {
                  this.hoverStayTime = 70;
              }
              if (this.hoverStartTime === undefined) {
                  this.hoverStartTime = 20;
              }
              handlerHoverClassChanged(this, " ".concat(attrs["hoverClass" /* EElementButtonAttribute.HoverClass */]), true);
          }
          var changedFormType = changedMap["formType" /* EElementButtonAttribute.FormType */];
          var changedOpenType = changedMap["openType" /* EElementButtonAttribute.OpenType */];
          if (changedFormType) {
              this.formType = getComponentButtonFormType(attrs["formType" /* EElementButtonAttribute.FormType */]);
          }
          if (changedOpenType) {
              this.openType = getComponentButtonOpenType(attrs["openType" /* EElementButtonAttribute.OpenType */]);
          }
          if (changedOpenType || changedFormType) {
              if ((this.openType || this.formType) && !this.extraTypeListened) {
                  this.extraTypeListened = true;
                  this.onTap4Extra = this.onTap4Extra.bind(this);
                  this.addInternalEvent(kElementButtonInternalEvent4ExtraTap, this.onTap4Extra);
              }
          }
          var nextType = this.type;
          var changedSize = changedMap["size" /* EElementButtonAttribute.Size */];
          var changedType = changedMap["type" /* EElementButtonAttribute.Type */];
          var changedDisable = changedMap["disabled" /* EElementButtonAttribute.Disabled */];
          if (changedSize) {
              switch (attrs["size" /* EElementButtonAttribute.Size */]) {
                  case 'mini':
                      nextType |= 1 /* EComponentButtonStyleType.Mini */;
                      break;
                  default:
                      nextType &= 126 /* EComponentButtonStyleTypeRevert.Mini */;
                      break;
              }
          }
          if (changedType) {
              nextType &= 99 /* EComponentButtonStyleTypeRevert.Type */;
              switch (attrs["type" /* EElementButtonAttribute.Type */]) {
                  case 'primary':
                      nextType |= 4 /* EComponentButtonStyleType.Primary */;
                      break;
                  case 'ghost':
                      nextType |= 8 /* EComponentButtonStyleType.Ghost */;
                      break;
                  case 'warn':
                      nextType |= 16 /* EComponentButtonStyleType.Warn */;
                      break;
              }
          }
          if (changedDisable) {
              if (attrs["disabled" /* EElementButtonAttribute.Disabled */]) {
                  nextType |= 2 /* EComponentButtonStyleType.Disabled */;
              }
              else {
                  nextType &= 125 /* EComponentButtonStyleTypeRevert.Disabled */;
              }
          }
          return nextType;
      };
      ZElement4Button.prototype.applyHoverClass = function (active) {
          var _this = this;
          // 更新 suffixClassName
          if (active) {
              this.type |= 32 /* EComponentButtonStyleType.HoverActive */;
              this.type &= 63 /* EComponentButtonStyleTypeRevert.HasHoverClass */;
              if (this.hoverClass) {
                  this.type |= 64 /* EComponentButtonStyleType.HasHoverClass */;
              }
              this.suffixClassName = this.hoverClass;
          }
          else {
              this.type &= 95 /* EComponentButtonStyleTypeRevert.HoverActive */;
              this.type &= 63 /* EComponentButtonStyleTypeRevert.HasHoverClass */;
              if (this.hoverClass) {
                  this.type |= 64 /* EComponentButtonStyleType.HasHoverClass */;
              }
              this.suffixClassName = '';
          }
          this.prefixClassName = getButtonStyle(this.type);
          this.updateClassStyle(this.componentInstance, this.prefixClassName + this.userClassName + this.suffixClassName, true, '', false);
          iterateChild4Element(this, function (child) {
              _this.updateTextStyle(child, active);
          });
      };
      ZElement4Button.prototype.getEvent = function (e, userEventName, nativeEventName) {
          switch (userEventName) {
              case 'touchStart':
              case 'touchMove':
              case 'touchCancel':
              case 'touchEnd':
                  return normalizeTouchEvent(e, userEventName);
              case 'tap':
              case 'longTap':
                  return normalizeBaseEvent(e, userEventName);
          }
      };
      // @MARK 开始处理孩子节点的问题，并且处理 ControllerMode
      /**
       * Button 组件添加一个孩子
       * @param child
       */
      ZElement4Button.prototype.appendChild = function (child) {
          // if child is Text 且  autoInserted 则进行 class 动态下推
          this.updateTextStyle(child, this.hoverActive);
          this.container.appendChild(child.root);
          helperClientAppendChildLink(this, child);
      };
      ZElement4Button.prototype.insertBefore = function (child, anchor) {
          this.updateTextStyle(child, this.hoverActive);
          if (anchor) {
              this.container.insertBefore(child.root, anchor.root);
          }
          else {
              this.container.appendChild(child.root);
          }
          helperClientInsertBeforeLink(this, child, anchor);
      };
      ZElement4Button.prototype.onTap4Extra = function (e) {
          var _this = this;
          var treeContext = getZRuntimeElementInstanceTreeContext(this);
          if (treeContext) {
              var formInstance = treeContext.form;
              if (formInstance) {
                  var formType = this.formType;
                  if (formType === 1 /* EComponentButtonFormType.Submit */) {
                      var buttonDataset = normalizeEventTargetDataset(e.currentTarget);
                      formInstance.submit(buttonDataset);
                  }
                  else if (formType === 2 /* EComponentButtonFormType.Reset */) {
                      formInstance.reset();
                  }
              }
          }
          if (this.openType === 1 /* EComponentButtonOpenType.Share */) {
              var proxy_1 = getRuntimeProxyByOwnerPageId(this);
              if (proxy_1 &&
                  proxy_1.hasPublicMethod(4 /* EAppxWeb2MessagePayload4S2CCallbackRequestPayload4RenderMountPublicMethod.onShareAppMessage */) &&
                  !this.shareLock) {
                  this.shareLock = true;
                  var platformPromise = proxy_1.getPlatformPromise();
                  var platformSetTimeout_1 = proxy_1.getPlatformSetTimeout();
                  var sharePromise = new platformPromise(function (resolve, reject) {
                      // 这个以前就要改的，一直没改...
                      proxy_1.invokeHostPageMethod('pluginPrivateStartPageShare', {
                          detail: {
                              shareTarget: _this.shareTarget,
                          },
                          from: 'button',
                          target: getEventTargetDetail(e.target, 'button'),
                      }, resolve);
                  });
                  var delayPromise = new platformPromise(function (resolve) {
                      // 万一分享的回调无效，给一个兜底的
                      platformSetTimeout_1(function () {
                          resolve();
                      }, 1000);
                  });
                  platformPromise.race([sharePromise, delayPromise]).then(function () {
                      // 两者里任一完成后，解锁
                      _this.shareLock = false;
                  });
              }
          }
      };
      ZElement4Button.prototype.updateTextStyle = function (child, hoverActive) {
          if (child.feature & 1 /* EZRuntimeElementInstanceFeature.AutoInserted */) {
              var className = getButtonTextStyle(this.type) + (hoverActive ? this.hoverClass : '');
              if (!child.root.inlineStyle) {
                  child.root.inlineStyle = {
                      backgroundColor: '',
                  };
              }
              child.updateClassStyleProp(this.componentInstance, className, true, '', false, null, null);
          }
      };
      ZElement4Button.event2native = {
          longTap: 'longpress',
          tap: 'click',
          touchCancel: 'touchcancel',
          touchEnd: 'touchend',
          touchMove: 'touchmove',
          touchStart: 'touchstart',
      };
      ZElement4Button.native2event = {
          click: 'tap',
          longpress: 'longTap',
          touchcancel: 'touchCancel',
          touchend: 'touchEnd',
          touchmove: 'touchMove',
          touchstart: 'touchStart',
      };
      return ZElement4Button;
  }(ZElement4Shared));

  var ZElement4Canvas = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4Canvas, _super);
      function ZElement4Canvas(component, root, canvasElement) {
          var _this = _super.call(this) || this;
          _this.document = component.document;
          _this.root = root;
          _this.canvasElement = canvasElement;
          /**
           * 为了让自己在 update id 的时候可以去 setId
           */
          component.root.pushUpdatedQueue(_this);
          return _this;
      }
      ZElement4Canvas.create = function (component, feature) {
          var root = component.document.createElement('div');
          var canvasElement = component.document.createElement('external-canvas');
          canvasElement.setStyles({
              height: '100%',
              width: '100%',
          });
          root.appendChild(canvasElement);
          return new ZElement4Canvas(component, root, canvasElement);
      };
      /**
       * id 在这个方法 set 的
       * @param key
       * @param value
       */
      ZElement4Canvas.prototype.setAttr = function (key, value) {
          if (!key) {
              return;
          }
          else if (key === "id" /* EElementCanvasAttribute.Id */) {
              this.canvasElement.setAttr(key, value); // 更新 Attr
          }
          else {
              this.root.setAttr(key, value);
          }
      };
      ZElement4Canvas.prototype.setAttrs = function (batchedAttrs, changedMap) {
          var changedWidth = changedMap["width" /* EElementCanvasAttribute.Width */];
          var changedHeight = changedMap["height" /* EElementCanvasAttribute.Height */];
          var changedWidthAndHeight = changedMap["width" /* EElementCanvasAttribute.Width */] && changedMap["height" /* EElementCanvasAttribute.Height */];
          if (changedWidthAndHeight) {
              this.canvasElement.setAttrs({
                  height: batchedAttrs["height" /* EElementCanvasAttribute.Height */],
                  width: batchedAttrs["width" /* EElementCanvasAttribute.Width */],
              });
          }
          else if (changedHeight) {
              this.canvasElement.setAttrs({
                  height: batchedAttrs["height" /* EElementCanvasAttribute.Height */],
              });
          }
          else if (changedWidth) {
              this.canvasElement.setAttrs({
                  width: batchedAttrs["width" /* EElementCanvasAttribute.Width */],
              });
          }
      };
      ZElement4Canvas.prototype.getEvent = function (e, userEventName, nativeEventName) {
          switch (userEventName) {
              case 'touchStart':
              case 'touchMove':
              case 'touchCancel':
              case 'touchEnd':
                  return normalizeCanvasTouchEvent(e, userEventName, this.root.$$dataset);
              case 'tap':
              case 'longTap':
                  return normalizeCanvasTapEvent(e, userEventName, this.root.$$dataset);
              case 'ready':
                  return normalizeBaseEvent(e, userEventName);
          }
      };
      ZElement4Canvas.prototype.afterUpdate = function () {
          /**
           * 只有初始化的时候会触发一次
           */
          var canvasElementId = this.canvasElement.attr.id;
          var nodeId = this.canvasElement.nodeId;
          if (canvasElementId) {
              this.document.setIdInternal(nodeId, canvasElementId);
          }
      };
      ZElement4Canvas.prototype.addEventToElement = function (name, callback) {
          this.canvasElement.addEvent(name, callback);
      };
      ZElement4Canvas.prefixClassName = 'a-canvas ';
      ZElement4Canvas.event2native = {
          longTap: 'longtap',
          tap: 'click',
          touchCancel: 'touchcancel',
          touchEnd: 'touchend',
          touchMove: 'touchmove',
          touchStart: 'touchstart',
      };
      ZElement4Canvas.native2event = {
          click: 'tap',
          longtap: 'longTap',
          touchcancel: 'touchCancel',
          touchend: 'touchEnd',
          touchmove: 'touchMove',
          touchstart: 'touchStart',
      };
      return ZElement4Canvas;
  }(ZElement4Shared));

  function getZElement4UnknownConstructor(tag) {
      var ZElement4Error = /** @class */ /*#__PURE__*/ (function () {
          function ZElement4Error(component, feature, root) {
              this.eType = 1 /* EZRuntimeClientSideElementType.Element */;
              this.feature = 0;
              this.root = root;
          }
          ZElement4Error.create = function (component, feature) {
              var root = component.document.createElement('text');
              // root.setAttr('value', `未定义组件 <${tag}>`);
              return new ZElement4Error(component, feature, root);
          };
          ZElement4Error.prototype.getChildNodes = function () {
              return [];
          };
          ZElement4Error.prototype.setClassName = function (className) { };
          ZElement4Error.prototype.setIsolation = function () { };
          ZElement4Error.prototype.setStyleInline = function (style) { };
          ZElement4Error.prototype.insertBefore = function (child, anchor) { };
          ZElement4Error.prototype.appendChild = function (child) { };
          ZElement4Error.prototype.setAttr = function (key, value) { };
          ZElement4Error.prototype.setId = function (value) { };
          ZElement4Error.prototype.updateTrackerAttr = function () { };
          ZElement4Error.prototype.initTrackerAttr = function () { };
          ZElement4Error.prototype.setDataset = function (key, value) { };
          ZElement4Error.prototype.initDataset = function (dataset) { };
          ZElement4Error.prototype.updateDatasetPartial = function (dataset) { };
          ZElement4Error.prototype.updateDatasetAll = function (dataset) { };
          ZElement4Error.prototype.getDataset = function () { };
          ZElement4Error.prototype.setStyle = function (key, value) { };
          ZElement4Error.prototype.setAttrs = function (batchedAttrs, changedMap) { };
          ZElement4Error.prototype.setStyles = function (batchedStyles) { };
          ZElement4Error.prototype.willUpdateChildren = function () { };
          ZElement4Error.prototype.invokePropertiesChange = function () { };
          ZElement4Error.prototype.onEventHandler = function () {
              return false;
          };
          ZElement4Error.prototype.hydrateClassStyleProp = function (componentInstance, klassExp, styleExp, propsMapExp) { };
          ZElement4Error.prototype.initClassStyleProp = function (componentInstance, klassExp, styleExp, propsMapExp) { };
          ZElement4Error.prototype.updateClassStyleProp = function (componentInstance, klassExp, klassChanged, styleExp, styleChanged, propsMapExp, propsChangedMap) { };
          ZElement4Error.prototype.getEventContext = function () { };
          ZElement4Error.prototype.addEventBinding = function () { };
          ZElement4Error.prototype.addInternalEvent = function () { };
          ZElement4Error.prototype.removeInternalEvent = function () { };
          ZElement4Error.prototype.removeChild = function (child) {
              this.root.removeChild(child.root);
              child.destroy();
          };
          ZElement4Error.prototype.destroy = function () {
              this.root = null;
          };
          return ZElement4Error;
      }());
      return ZElement4Error;
  }

  var ZElement4Form = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4Form, _super);
      function ZElement4Form(component, root) {
          var _this = _super.call(this) || this;
          _this.tagOrder = 15 /* EZElementTagName.Form */;
          _this.fields = {};
          _this.fieldsValue = {};
          _this.root = root;
          return _this;
      }
      ZElement4Form.create = function (component, feature) {
          return new ZElement4Form(component, component.document.createElement('div'));
      };
      ZElement4Form.prototype.registerField = function (name, instance) {
          this.fields[name] = instance;
      };
      ZElement4Form.prototype.setFieldValue = function (name, value) {
          this.fieldsValue[name] = value;
      };
      ZElement4Form.prototype.removeField = function (name) {
          delete this.fieldsValue[name];
          delete this.fields[name];
      };
      ZElement4Form.prototype.submit = function (buttonDataset) {
          if (this.onSubmit) {
              var detail = {
                  value: this.fieldsValue,
              };
              var event = normalizeFormEvent(this.root, 'submit', detail);
              event.buttonTarget = {
                  dataset: buttonDataset || {},
              };
              this.invokeEventContext(this.onSubmit, event);
          }
      };
      ZElement4Form.prototype.reset = function () {
          var fields = this.fields;
          if (fields) {
              for (var _i = 0, _a = Object.keys(fields); _i < _a.length; _i++) {
                  var name = _a[_i];
                  fields[name].reset();
              }
          }
      };
      ZElement4Form.prototype.setAttrs = function () {
          // not necessary
      };
      ZElement4Form.prototype.addEventBinding = function (eventContext) {
          if (eventContext.ename === 'submit') {
              this.onSubmit = eventContext;
          }
          if (eventContext.ename === 'reset') {
              this.onReset = eventContext;
          }
      };
      ZElement4Form.prototype.getEvent = function (e, userEventName, nativeEventName) {
          return null;
      };
      ZElement4Form.prefixClassName = 'a-form ';
      ZElement4Form.event2native = {};
      ZElement4Form.native2event = {};
      return ZElement4Form;
  }(ZElement4Shared));

  var imageModeMapping = {
      aspectFill: 'cover',
      aspectFit: 'contain',
      scaleToFill: 'stretch',
  };
  var kElementImageAttribute4Resize = 'resize';
  var kElementImageAttribute4Placeholder = 'placeholder';
  var kElementImageEvent4Load = 'load';
  var kElementImageEvent4Error = 'error';
  function normalizeImageMode(value) {
      switch (value) {
          case "scaleToFill" /* EComponentImageMode.ScaleToFill */:
          case "aspectFill" /* EComponentImageMode.AspectFill */:
          case "aspectFit" /* EComponentImageMode.AspectFit */:
              return imageModeMapping[value];
          case "widthFix" /* EComponentImageMode.WidthFix */:
          case "top" /* EComponentImageMode.Top */:
          case "bottom" /* EComponentImageMode.Bottom */:
          case "center" /* EComponentImageMode.Center */:
          case "left" /* EComponentImageMode.Left */:
          case "right" /* EComponentImageMode.Right */:
          case "top left" /* EComponentImageMode.TopLeft */:
          case "top right" /* EComponentImageMode.TopRight */:
          case "bottom left" /* EComponentImageMode.BottomLeft */:
          case "bottom right" /* EComponentImageMode.BottomRight */:
          case "heightFix" /* EComponentImageMode.HeightFix */:
              return value;
          // 这里是为了对齐 web
          default:
              return "top left" /* EComponentImageMode.TopLeft */;
      }
  }
  var ZElement4Image = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4Image, _super);
      function ZElement4Image(component, root) {
          var _this = _super.call(this) || this;
          _this.root = root;
          return _this;
      }
      ZElement4Image.create = function (component, feature) {
          return new ZElement4Image(component, component.document.createElement('image'));
      };
      ZElement4Image.prototype.insertBefore = function (child, anchor) { };
      ZElement4Image.prototype.appendChild = function (child) { };
      ZElement4Image.prototype.setAttrs = function (attrs, changedMap) {
          var batchedAttrs = {};
          if (changedMap["mode" /* EElementImageAttribute.Mode */] !== undefined) {
              batchedAttrs[kElementImageAttribute4Resize] = normalizeImageMode(attrs["mode" /* EElementImageAttribute.Mode */]);
          }
          if (changedMap["src" /* EElementImageAttribute.Src */]) {
              batchedAttrs["src" /* EElementImageAttribute.Src */] = attrs["src" /* EElementImageAttribute.Src */];
          }
          if (changedMap["defaultSource" /* EElementImageAttribute.DefaultSource */]) {
              batchedAttrs[kElementImageAttribute4Placeholder] = attrs["defaultSource" /* EElementImageAttribute.DefaultSource */];
          }
          if (changedMap["lazyLoad" /* EElementImageAttribute.LazyLoad */]) {
              batchedAttrs["lazyLoad" /* EElementImageAttribute.LazyLoad */] = !!attrs["lazyLoad" /* EElementImageAttribute.LazyLoad */];
          }
          this.root.setAttrs(batchedAttrs);
      };
      ZElement4Image.prototype.getEvent = function (e, userEventName, nativeEventName) {
          var detail;
          if (userEventName === kElementImageEvent4Load) {
              var sizeInfo = e.size;
              if (sizeInfo) {
                  detail = {
                      height: sizeInfo.naturalHeight,
                      width: sizeInfo.naturalWidth,
                  };
              }
          }
          else if (userEventName === kElementImageEvent4Error) {
              detail = {
                  errMsg: 'unknown error',
              };
          }
          return normalizeCustomEvent(e, userEventName, detail);
      };
      ZElement4Image.prefixClassName = 'a-image ';
      ZElement4Image.event2native = {
          tap: 'click',
      };
      ZElement4Image.native2event = {
          click: 'tap',
      };
      return ZElement4Image;
  }(ZElement4Shared));

  var kSharedElementInputAttribute4InternalMaxLength = 'maxLength';
  var kSharedElementInputAttribute4InternalAutofocus = 'autofocus';
  var kSharedElementInputStyle4PlaceholderColor = 'placeholderColor';
  var kPlaceholderRegExp = /(?:^|;)\s*color\s*:\s*([#a-z0-9]+)\s*(?:;|$)/i;
  function getPlaceholderColor(placeholderStyle) {
      var exec = kPlaceholderRegExp.exec(placeholderStyle);
      return (exec && exec[1]) || '';
  }
  var ZElement4SharedInput = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4SharedInput, _super);
      function ZElement4SharedInput(component, root) {
          var _this = _super.call(this) || this;
          _this.value = '';
          _this.root = root;
          _super.prototype.addInternalEvent.call(_this, 'return', _this.onConfirm.bind(_this));
          _super.prototype.addInternalEvent.call(_this, 'input', _this.onInput.bind(_this));
          _super.prototype.addInternalEvent.call(_this, 'intentInput', _this.onIntentInput.bind(_this));
          component.root.pushUpdatedQueue(_this);
          return _this;
      }
      ZElement4SharedInput.prototype.afterUpdate = function () {
          handleFormChildInit(this);
      };
      ZElement4SharedInput.prototype.addEventBinding = function (eventContext) {
          if (eventContext.ename === 'intentInput' || eventContext.ename === 'change') {
              return;
          }
          if (eventContext.ename === 'input') {
              this.onUserInput = eventContext;
              return;
          }
          _super.prototype.addEventBinding.call(this, eventContext);
      };
      ZElement4SharedInput.prototype.initClassStyleProp = function (componentInstance, klassExp, styleExp, propsMapExp) {
          if (propsMapExp) {
              if (propsMapExp["focus" /* EElementInputAttribute.Focus */]) {
                  this.root.setAttr(kSharedElementInputAttribute4InternalAutofocus, true);
              }
              if (propsMapExp["controlled" /* EElementInputAttribute.Controlled */]) {
                  this.root.setAttr("controlled" /* EElementInputAttribute.Controlled */, true);
              }
          }
          if (!propsMapExp || propsMapExp["maxlength" /* EElementInputAttribute.Maxlength */] === undefined) {
              this.root.setAttr(kSharedElementInputAttribute4InternalMaxLength, 140);
          }
          return _super.prototype.initClassStyleProp.call(this, componentInstance, klassExp, styleExp, propsMapExp);
      };
      ZElement4SharedInput.prototype.reset = function () {
          this.value = '';
          this.root.setAttr("value" /* EElementInputAttribute.Value */, '');
      };
      ZElement4SharedInput.prototype.destroy = function () {
          handleFormChildDestroy(this);
          _super.prototype.destroy.call(this);
      };
      ZElement4SharedInput.prototype.getEvent = function (e, userEventName, nativeEventName) {
          var value = e.value;
          switch (userEventName) {
              case 'confirm':
              case 'focus':
              case 'blur':
              case 'input':
                  return normalizeCustomEvent(e, userEventName, {
                      value: value === undefined ? this.value : value,
                  });
          }
      };
      ZElement4SharedInput.prototype.onConfirm = function (e) {
          this.saveValue(e.value);
      };
      ZElement4SharedInput.prototype.onIntentInput = function (e) {
          if (this.onUserInput) {
              this.invokeEventContext(this.onUserInput, this.getEvent(e, 'input', e.type));
              // 现行对外文档声称可以 return 一个字符串替换输入框内容
              // 然而并没有实现。这里先保持行为一致
              // const value = this.onUserInput(this.getEvent(e, 'input', e.type));
              // if (typeof value === 'string') {
              //   this.root.setAttr(EElementInputAttribute.Value, value);
              //   this.saveValue(value);
              // }
          }
      };
      ZElement4SharedInput.prototype.onInput = function (e) {
          this.onConfirm(e);
          this.onIntentInput(e);
      };
      ZElement4SharedInput.prototype.processAttrs = function (batchedAttrs, changedMap) {
          var attrs = Object.create(null);
          if (changedMap["name" /* EElementInputAttribute.Name */] && !this.name) {
              this.name = batchedAttrs["name" /* EElementInputAttribute.Name */];
          }
          if (changedMap["disabled" /* EElementInputAttribute.Disabled */]) {
              attrs["disabled" /* EElementInputAttribute.Disabled */] = !!batchedAttrs["disabled" /* EElementInputAttribute.Disabled */];
          }
          if (changedMap["placeholder" /* EElementInputAttribute.Placeholder */]) {
              attrs["placeholder" /* EElementInputAttribute.Placeholder */] = batchedAttrs["placeholder" /* EElementInputAttribute.Placeholder */];
          }
          if (changedMap["maxlength" /* EElementInputAttribute.Maxlength */]) {
              attrs[kSharedElementInputAttribute4InternalMaxLength] = parseInt(batchedAttrs["maxlength" /* EElementInputAttribute.Maxlength */], 10);
          }
          if (changedMap["placeholderStyle" /* EElementInputAttribute.PlaceholderStyle */]) {
              this.setStyle(kSharedElementInputStyle4PlaceholderColor, getPlaceholderColor(batchedAttrs["placeholderStyle" /* EElementInputAttribute.PlaceholderStyle */]));
          }
          if (changedMap["controlled" /* EElementInputAttribute.Controlled */]) {
              attrs["controlled" /* EElementInputAttribute.Controlled */] = !!batchedAttrs["controlled" /* EElementInputAttribute.Controlled */];
          }
          // 初始化且 value 为 0 会有问题
          var valueChanged = changedMap["value" /* EElementInputAttribute.Value */] || changedMap["value" /* EElementInputAttribute.Value */] === 0;
          if (valueChanged) {
              attrs["value" /* EElementInputAttribute.Value */] = batchedAttrs["value" /* EElementInputAttribute.Value */];
              this.saveValue(batchedAttrs["value" /* EElementInputAttribute.Value */]);
          }
          // focus 仅支持聚焦，不支持设置为 false 失焦
          if (changedMap["focus" /* EElementInputAttribute.Focus */] && batchedAttrs["focus" /* EElementInputAttribute.Focus */]) {
              this.root.focus();
          }
          return attrs;
      };
      ZElement4SharedInput.prototype.saveValue = function (raw) {
          var value = raw == null ? '' : raw.toString();
          if (this.value !== value) {
              this.value = value;
              handleFormChildUpdateValue(this);
          }
      };
      ZElement4SharedInput.event2native = {
          confirm: 'return',
      };
      ZElement4SharedInput.native2event = {
          return: 'confirm',
      };
      return ZElement4SharedInput;
  }(ZElement4Shared));

  var kElementInputAttribute4InternalReturnKeyType = 'returnKeyType';
  function toInteger(value) {
      var int = parseInt(value, 10);
      return int > -1 ? int : -1;
  }
  var ZElement4Input = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4Input, _super);
      function ZElement4Input(component, root) {
          var _this = _super.call(this, component, root) || this;
          _this.selectionStart = -1;
          _this.selectionEnd = -1;
          _this.cursor = -1;
          _this.addInternalEvent('focus', _this.onFocus.bind(_this));
          return _this;
      }
      ZElement4Input.create = function (component, feature) {
          return new ZElement4Input(component, component.document.createElement('input'));
      };
      ZElement4Input.prototype.initClassStyleProp = function (componentInstance, klassExp, styleExp, propsMapExp) {
          if (propsMapExp) {
              this.selectionStart = toInteger(propsMapExp["selectionStart" /* EElementInputAttribute.SelectionStart */]);
              this.selectionEnd = toInteger(propsMapExp["selectionStart" /* EElementInputAttribute.SelectionStart */]);
              this.cursor = toInteger(propsMapExp["cursor" /* EElementInputAttribute.Cursor */]);
          }
          this.root.setAttr(kElementInputAttribute4InternalReturnKeyType, getComponentInputConfirmType(propsMapExp && propsMapExp["confirmType" /* EElementInputAttribute.ConfirmType */]));
          return _super.prototype.initClassStyleProp.call(this, componentInstance, klassExp, styleExp, propsMapExp);
      };
      ZElement4Input.prototype.setAttrs = function (batchedAttrs, changedMap) {
          var attrs = this.processAttrs(batchedAttrs, changedMap);
          // 实际不支持
          if (changedMap["randomNumber" /* EElementInputAttribute.RandomNumber */]) {
              attrs["randomNumber" /* EElementInputAttribute.RandomNumber */] = !!batchedAttrs["randomNumber" /* EElementInputAttribute.RandomNumber */];
          }
          // 实际只支持 text | number
          if (changedMap["type" /* EElementInputAttribute.Type */]) {
              attrs["type" /* EElementInputAttribute.Type */] = getComponentInputType(batchedAttrs["type" /* EElementInputAttribute.Type */]);
          }
          if (changedMap["password" /* EElementInputAttribute.Password */]) {
              attrs["password" /* EElementInputAttribute.Password */] = !!batchedAttrs["password" /* EElementInputAttribute.Password */];
          }
          if (changedMap["confirmType" /* EElementInputAttribute.ConfirmType */]) {
              attrs[kElementInputAttribute4InternalReturnKeyType] = getComponentInputConfirmType(batchedAttrs["confirmType" /* EElementInputAttribute.ConfirmType */]);
          }
          if (changedMap["confirmHold" /* EElementInputAttribute.ConfirmHold */]) {
              attrs["confirmHold" /* EElementInputAttribute.ConfirmHold */] = !!batchedAttrs["confirmHold" /* EElementInputAttribute.ConfirmHold */];
          }
          if (changedMap["cursor" /* EElementInputAttribute.Cursor */]) {
              this.cursor = toInteger(batchedAttrs["cursor" /* EElementInputAttribute.Cursor */]);
          }
          if (changedMap["selectionStart" /* EElementInputAttribute.SelectionStart */]) {
              this.selectionStart = toInteger(batchedAttrs["selectionStart" /* EElementInputAttribute.SelectionStart */]);
          }
          if (changedMap["selectionEnd" /* EElementInputAttribute.SelectionEnd */]) {
              this.selectionEnd = toInteger(batchedAttrs["selectionEnd" /* EElementInputAttribute.SelectionEnd */]);
          }
          this.root.setAttrs(attrs);
      };
      ZElement4Input.prototype.onFocus = function () {
          var root = this.root;
          if (root.setSelectionRange) {
              if (this.selectionStart > -1 && this.selectionEnd > -1) {
                  root.setSelectionRange(this.selectionStart, this.selectionEnd);
              }
              else if (this.cursor > -1) {
                  root.setSelectionRange(this.cursor, this.cursor);
              }
          }
      };
      ZElement4Input.prefixClassName = 'a-input ';
      return ZElement4Input;
  }(ZElement4SharedInput));

  var kElementMapAttribute4Latitude = 'latitude';
  var kElementMapAttribute4Longitude = 'longitude';
  var kElementMapAttribute4Scale = 'scale';
  var kElementMapAttribute4Markers = 'markers';
  var kElementMapAttribute4Polyline = 'polyline';
  var kElementMapAttribute4Circles = 'circles';
  var kElementMapAttribute4Controls = 'controls';
  var kElementMapAttribute4Polygon = 'polygon';
  var kElementMapAttribute4ShowLocation = 'showLocation';
  var kElementMapAttribute4IncludePoints = 'includePoints';
  var kElementMapAttribute4IncludePadding = 'includePadding';
  var kElementMapAttribute4GroundOverlays = 'groundOverlays';
  var kElementMapAttribute4TileOverlay = 'tileOverlay';
  var kElementMapAttribute4Setting = 'setting';
  var kElementMapAttribute4DefaultScale = 'defaultScale';
  var kElementMapDashedAttribute4ShowLocation = 'show-location';
  var kElementMapDashedAttribute4IncludePoints = 'include-points';
  var kElementMapDashedAttribute4IncludePadding = 'include-padding';
  var kElementMapDashedAttribute4GroundOverlays = 'ground-overlays';
  var kElementMapDashedAttribute4TileOverlay = 'tile-overlay';
  var ZElement4Map = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4Map, _super);
      function ZElement4Map(component, root) {
          var _this = _super.call(this) || this;
          _this.root = root;
          return _this;
      }
      ZElement4Map.create = function (component, feature) {
          return new ZElement4Map(component, component.document.createElement('external-map'));
      };
      ZElement4Map.prototype.getEvent = function (e, userEventName, nativeEventName) {
          switch (userEventName) {
              case 'markerTap':
              case 'calloutTap':
                  var marker = normalizeBaseEvent(e, userEventName);
                  var markerDetail = e.detail;
                  if (markerDetail) {
                      marker.latitude = markerDetail.latitude;
                      marker.longitude = markerDetail.longitude;
                      marker.markerId = markerDetail.markerId;
                  }
                  return marker;
              case 'controlTap':
                  var control = normalizeBaseEvent(e, userEventName);
                  var controlDetail = e.detail;
                  if (controlDetail) {
                      control.controlId = controlDetail.controlId;
                  }
                  return control;
              case 'regionChange':
                  var regionChangeDetail = e.detail;
                  var eventType = (regionChangeDetail && regionChangeDetail.type) || userEventName;
                  var regionChange = normalizeBaseEvent(e, eventType);
                  if (regionChangeDetail) {
                      regionChange.latitude = regionChangeDetail.latitude;
                      regionChange.longitude = regionChangeDetail.longitude;
                      regionChange.scale = regionChangeDetail.scale;
                  }
                  return regionChange;
              case 'tap':
                  var tap = normalizeBaseEvent(e, userEventName);
                  var tapDetail = e.detail;
                  if (tapDetail) {
                      tap.latitude = tapDetail.latitude;
                      tap.longitude = tapDetail.longitude;
                  }
                  return tap;
          }
      };
      ZElement4Map.prototype.initClassStyleProp = function (componentInstance, klassExp, styleExp, propsMapExp) {
          var scale = 16;
          var latitude = 39.9;
          var longitude = 116.39;
          var showLocation = false;
          if (propsMapExp) {
              if (propsMapExp[kElementMapAttribute4DefaultScale]) {
                  scale = propsMapExp[kElementMapAttribute4DefaultScale];
              }
              if (propsMapExp[kElementMapAttribute4Scale]) {
                  scale = propsMapExp[kElementMapAttribute4Scale];
              }
              if (propsMapExp[kElementMapAttribute4Latitude] === undefined) {
                  latitude = propsMapExp[kElementMapAttribute4Latitude];
              }
              if (propsMapExp[kElementMapAttribute4Longitude] === undefined) {
                  longitude = propsMapExp[kElementMapAttribute4Longitude];
              }
          }
          var root = this.root;
          root.setAttr(kElementMapAttribute4Latitude, latitude);
          root.setAttr(kElementMapAttribute4Longitude, longitude);
          root.setAttr(kElementMapAttribute4Scale, scale);
          root.setAttr(kElementMapDashedAttribute4ShowLocation, showLocation);
          return _super.prototype.initClassStyleProp.call(this, componentInstance, klassExp, styleExp, propsMapExp);
      };
      ZElement4Map.prototype.setAttrs = function (batchedAttrs, changedMap) {
          var attrs = {};
          if (changedMap[kElementMapAttribute4Latitude]) {
              attrs[kElementMapAttribute4Latitude] = batchedAttrs[kElementMapAttribute4Latitude];
          }
          if (changedMap[kElementMapAttribute4Longitude]) {
              attrs[kElementMapAttribute4Longitude] = batchedAttrs[kElementMapAttribute4Longitude];
          }
          if (changedMap[kElementMapAttribute4Scale]) {
              attrs[kElementMapAttribute4Scale] = batchedAttrs[kElementMapAttribute4Scale];
          }
          if (changedMap[kElementMapAttribute4ShowLocation]) {
              attrs[kElementMapDashedAttribute4ShowLocation] = batchedAttrs[kElementMapAttribute4ShowLocation];
          }
          if (changedMap[kElementMapAttribute4Markers]) {
              attrs[kElementMapAttribute4Markers] = batchedAttrs[kElementMapAttribute4Markers];
          }
          if (changedMap[kElementMapAttribute4Polyline]) {
              attrs[kElementMapAttribute4Polyline] = batchedAttrs[kElementMapAttribute4Polyline];
          }
          if (changedMap[kElementMapAttribute4Circles]) {
              attrs[kElementMapAttribute4Circles] = batchedAttrs[kElementMapAttribute4Circles];
          }
          if (changedMap[kElementMapAttribute4Controls]) {
              attrs[kElementMapAttribute4Controls] = batchedAttrs[kElementMapAttribute4Controls];
          }
          if (changedMap[kElementMapAttribute4Polygon]) {
              attrs[kElementMapAttribute4Polygon] = batchedAttrs[kElementMapAttribute4Polygon];
          }
          if (changedMap[kElementMapAttribute4IncludePoints]) {
              attrs[kElementMapDashedAttribute4IncludePoints] = batchedAttrs[kElementMapAttribute4IncludePoints];
          }
          if (changedMap[kElementMapAttribute4IncludePadding]) {
              attrs[kElementMapDashedAttribute4IncludePadding] = batchedAttrs[kElementMapAttribute4IncludePadding];
          }
          if (changedMap[kElementMapAttribute4GroundOverlays]) {
              attrs[kElementMapDashedAttribute4GroundOverlays] = batchedAttrs[kElementMapAttribute4GroundOverlays];
          }
          if (changedMap[kElementMapAttribute4TileOverlay]) {
              attrs[kElementMapDashedAttribute4TileOverlay] = batchedAttrs[kElementMapAttribute4TileOverlay];
          }
          if (changedMap[kElementMapAttribute4Setting]) {
              attrs[kElementMapAttribute4Setting] = batchedAttrs[kElementMapAttribute4Setting];
          }
          this.root.setAttrs(attrs);
      };
      ZElement4Map.event2native = {
          calloutTap: 'calloutTap',
          controlTap: 'controlTap',
          markerTap: 'markerTap',
          regionChange: 'regionChange',
          tap: 'tap',
      };
      ZElement4Map.native2event = {
          calloutTap: 'calloutTap',
          controlTap: 'controlTap',
          markerTap: 'markerTap',
          regionChange: 'regionChange',
          tap: 'tap',
      };
      return ZElement4Map;
  }(ZElement4Shared));

  var ZElement4MovableArea = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4MovableArea, _super);
      function ZElement4MovableArea(component, root) {
          var _this = _super.call(this) || this;
          _this.root = component.document.createElement('movable-area');
          return _this;
      }
      ZElement4MovableArea.create = function (component, feature) {
          return new ZElement4MovableArea(component, component.document.createElement('movable-area'));
      };
      ZElement4MovableArea.prototype.setAttrs = function (attrs, changedMap) { };
      ZElement4MovableArea.prototype.getEvent = function (e, userEventName, nativeEventName) {
          return null;
      };
      ZElement4MovableArea.prefixClassName = 'a-movable-area ';
      return ZElement4MovableArea;
  }(ZElement4Shared));

  var ZElement4MovableView = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4MovableView, _super);
      function ZElement4MovableView(component, root) {
          var _this = _super.call(this) || this;
          _this.root = root;
          return _this;
      }
      ZElement4MovableView.create = function (component, feature) {
          var root = component.document.createElement('movable-view');
          root.setAttr("direction" /* EElementMovableViewAttribute.Direction */, 'none');
          root.setAttr("x" /* EElementMovableViewAttribute.X */, 0);
          root.setAttr("y" /* EElementMovableViewAttribute.Y */, 0);
          root.setAttr("disabled" /* EElementMovableViewAttribute.Disabled */, false);
          return new ZElement4MovableView(component, root);
      };
      ZElement4MovableView.prototype.setAttrs = function (attrs, changedMap) {
          var root = this.root;
          if (changedMap["direction" /* EElementMovableViewAttribute.Direction */]) {
              root.setAttr("direction" /* EElementMovableViewAttribute.Direction */, attrs["direction" /* EElementMovableViewAttribute.Direction */]);
          }
          if (changedMap["disabled" /* EElementMovableViewAttribute.Disabled */]) {
              root.setAttr("disabled" /* EElementMovableViewAttribute.Disabled */, attrs["disabled" /* EElementMovableViewAttribute.Disabled */]);
          }
          if (changedMap["x" /* EElementMovableViewAttribute.X */]) {
              root.setAttr("x" /* EElementMovableViewAttribute.X */, attrs["x" /* EElementMovableViewAttribute.X */]);
          }
          if (changedMap["y" /* EElementMovableViewAttribute.Y */]) {
              root.setAttr("y" /* EElementMovableViewAttribute.Y */, attrs["y" /* EElementMovableViewAttribute.Y */]);
          }
      };
      ZElement4MovableView.prototype.getEvent = function (e, userEventName, nativeEventName) {
          var detail = e.detail;
          switch (userEventName) {
              case 'touchStart':
              case 'touchMove':
              case 'touchCancel':
              case 'touchEnd':
                  e.changedTouches = detail.changedTouches;
                  return normalizeTouchEvent(e, userEventName);
              case 'change':
              case 'changeEnd':
                  return normalizeCustomEvent(e, userEventName, {
                      source: detail.source,
                      x: detail.x,
                      y: detail.y,
                  });
          }
      };
      ZElement4MovableView.prefixClassName = 'a-movable-view ';
      ZElement4MovableView.event2native = {
          change: 'onChange',
          changeEnd: 'onChangeEnd',
          touchCancel: 'onTouchCancel',
          touchEnd: 'onTouchEnd',
          touchMove: 'onTouchMove',
          touchStart: 'onTouchStart',
      };
      ZElement4MovableView.native2event = {
          onChange: 'change',
          onChangeEnd: 'changeEnd',
          onTouchCancel: 'touchCancel',
          onTouchEnd: 'touchEnd',
          onTouchMove: 'touchMove',
          onTouchStart: 'touchStart',
      };
      return ZElement4MovableView;
  }(ZElement4Shared));

  var kElementNavigatorAttribute4OpenType = 'openType';
  var kElementNavigatorAttributeIndex4OpenType = 0;
  var kElementNavigatorAttribute4Url = 'url';
  var kElementNavigatorAttributeIndex4Url = 1;
  var kElementNavigatorAttribute4Delta = 'delta';
  var kElementNavigatorAttributeIndex4Delta = 2;
  var kElementNavigatorAttribute4Target = 'target';
  var kElementNavigatorAttributeIndex4Target = 3;
  var kElementNavigatorAttribute4AppId = 'appId';
  var kElementNavigatorAttributeIndex4AppId = 4;
  var ZElement4Navigator = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4Navigator, _super);
      function ZElement4Navigator(component, root) {
          var _this = _super.call(this) || this;
          _this.props = new Array(5);
          _this.root = root;
          _this.onTap4Navigator = _this.onTap4Navigator.bind(_this);
          _this.root.addEvent('click', _this.onTap4Navigator);
          return _this;
      }
      ZElement4Navigator.create = function (component, feature) {
          return new ZElement4Navigator(component, component.document.createElement('div'));
      };
      ZElement4Navigator.prototype.setAttrs = function (attrs, changedMap) {
          if (changedMap[kElementNavigatorAttribute4OpenType]) {
              this.props[kElementNavigatorAttributeIndex4OpenType] = attrs[kElementNavigatorAttribute4OpenType];
          }
          if (changedMap[kElementNavigatorAttribute4Url]) {
              this.props[kElementNavigatorAttributeIndex4Url] = attrs[kElementNavigatorAttribute4Url];
          }
          if (changedMap[kElementNavigatorAttribute4Delta]) {
              this.props[kElementNavigatorAttributeIndex4Delta] = attrs[kElementNavigatorAttribute4Delta];
          }
          if (changedMap[kElementNavigatorAttribute4Target]) {
              this.props[kElementNavigatorAttributeIndex4Target] = attrs[kElementNavigatorAttribute4Target];
          }
          if (changedMap[kElementNavigatorAttribute4AppId]) {
              this.props[kElementNavigatorAttributeIndex4AppId] = attrs[kElementNavigatorAttribute4AppId];
          }
      };
      ZElement4Navigator.prototype.addEventBinding = function () { };
      ZElement4Navigator.prototype.getEvent = function (e, userEventName, nativeEventName) {
          // switch (userEventName) {
          //   case 'tap':
          //     this.onTap4Navigator(e);
          //     break;
          // }
          // touch 用来 hover 功能
          // switch (userEventName) {
          //   case 'touchstart':
          //   case 'touchmove':
          //   case 'touchcancel':
          //   case 'touchend':
          //     return normalizeTouchEvent(e as INativeTouchEvent, userEventName);
          //   case 'tap':
          //   case 'longtap':
          //     return normalizeBaseEvent(e, userEventName);
          // }
      };
      ZElement4Navigator.prototype.onTap4Navigator = function (e) {
          var proxy = getRuntimeProxyByOwnerPageId(this);
          if (!proxy) {
              return;
          }
          var openType = this.props[kElementNavigatorAttributeIndex4OpenType];
          var target = this.props[kElementNavigatorAttributeIndex4Target];
          var appId = this.props[kElementNavigatorAttributeIndex4AppId];
          var url = this.props[kElementNavigatorAttributeIndex4Url];
          var delta = this.props[kElementNavigatorAttributeIndex4Delta];
          if (target === 'miniProgram' && appId) {
              // TODO: 暂时不支持
              return;
          }
          else if (openType === 'exit') {
              // TODO: 这个要不要改成 client， 1.0 是 client
              proxy.invokeHostBridgeCallProxy('exitApp', {}, kBridgeAppxDomain4Empty);
          }
          else {
              var apiName = 'navigateTo';
              switch (openType) {
                  case 'switchTab':
                  case 'reLaunch':
                  case 'navigateBack':
                  case 'navigateTo':
                      apiName = openType;
                      break;
                  case 'redirect':
                      apiName = 'redirectTo';
                      break;
              }
              if (url) {
                  // native 还不支持插件，先用 empty
                  proxy.invokeHostBridgeCallProxy(apiName, { url: url, delta: delta }, kBridgeAppxDomain4Empty);
              }
          }
      };
      ZElement4Navigator.event2native = {
          longtap: 'longpress',
          tap: 'click',
      };
      ZElement4Navigator.native2event = {
          click: 'tap',
          longpress: 'longtap',
      };
      return ZElement4Navigator;
  }(ZElement4Shared));

  var ZElement4PageMeta = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4PageMeta, _super);
      function ZElement4PageMeta(component, root) {
          var _this = _super.call(this) || this;
          _this.root = root;
          return _this;
      }
      ZElement4PageMeta.create = function (component, feature) {
          return new ZElement4PageMeta(component, component.document.createElement('div'));
      };
      ZElement4PageMeta.prototype.insertBefore = function (child, anchor) { };
      ZElement4PageMeta.prototype.appendChild = function (child) { };
      ZElement4PageMeta.prototype.removeChild = function (child) {
          child.destroy();
      };
      ZElement4PageMeta.prototype.getEvent = function (e, userEventName, nativeEventName) {
          return null;
      };
      return ZElement4PageMeta;
  }(ZElement4Shared));

  function getZElement4PlatformNodeConstructor(def) {
      var tag = def.tag, props = def.props, events = def.events;
      var ZElement4PlatformNode = /** @class */ /*#__PURE__*/ (function (_super) {
          __extends$1(ZElement4PlatformNode, _super);
          function ZElement4PlatformNode(component, root) {
              var _this = _super.call(this) || this;
              _this.root = root;
              return _this;
          }
          ZElement4PlatformNode.create = function (component, feature) {
              var root = component.document.createElement(tag);
              return new this(component, root);
          };
          ZElement4PlatformNode.prototype.setAttrs = function (batchedAttrs, changedMap) {
              // only update valid props
              var attrs = {};
              for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {
                  var prop = props_1[_i];
                  if (batchedAttrs.hasOwnProperty(prop)) {
                      attrs[prop] = batchedAttrs[prop];
                  }
              }
              this.root.setAttrs(attrs);
          };
          ZElement4PlatformNode.prototype.getEventContext = function (eventIndex, mType, method, componentInstance, eventName, stop, capture) {
              // only register valid event
              if (events[eventName]) {
                  return _super.prototype.getEventContext.call(this, eventIndex, mType, method, componentInstance, eventName, stop, capture);
              }
          };
          ZElement4PlatformNode.prototype.getEvent = function (e, userEventName, nativeEventName) {
              if (e.detail && typeof e.detail === 'object') {
                  return normalizeCustomEvent(e, nativeEventName, e.detail);
              }
              else {
                  return normalizeBaseEvent(e, nativeEventName);
              }
          };
          return ZElement4PlatformNode;
      }(ZElement4Shared));
      return ZElement4PlatformNode;
  }

  var kElementRichTextAttribute4Nodes = 'nodes';
  var kElementRichTextAttribute4Html = 'html';
  var kElementRichTextStyle4FontSize = 'fontSize';
  var kElementRichTextStyle4Color = 'color';
  var kElementRichTextStyle4LineHeight = 'lineHeight';
  function transformNodesToHtml(node) {
      var ret = '';
      if (node) {
          if (node.type === 'text') {
              ret = node.text;
          }
          else {
              var children = Array.isArray(node.children) ? node.children.map(transformNodesToHtml).join('') : '';
              var name = node.name;
              var attrs_1 = node.attrs;
              var attrStr = attrs_1
                  ? Object.keys(attrs_1)
                      .map(function (key) {
                      if (key) {
                          return " ".concat(key, "=").concat(JSON.stringify(attrs_1[key]));
                      }
                      else {
                          return '';
                      }
                  })
                      .join('')
                  : '';
              ret = "<".concat(name).concat(attrStr, ">").concat(children, "</").concat(name, ">");
          }
      }
      return ret;
  }
  var ZElement4RichText = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4RichText, _super);
      function ZElement4RichText(component, root, child) {
          var _this = _super.call(this) || this;
          _this.childFontSize = '';
          _this.childColor = '';
          _this.childLineHeight = '';
          _this.root = root;
          _this.child = child;
          return _this;
      }
      ZElement4RichText.create = function (component, feature) {
          var root = component.document.createElement('div');
          var child = component.document.createElement('external-richtext');
          root.appendChild(child);
          return new ZElement4RichText(component, root, child);
      };
      ZElement4RichText.prototype.initClassStyleProp = function (componentInstance, klassExp, styleExp, propsMapExp) {
          var targetStyleRecord = _super.prototype.initClassStyleProp.call(this, componentInstance, klassExp, styleExp, propsMapExp);
          if (targetStyleRecord) {
              // 开始下推
              var targetFontSize = targetStyleRecord[kElementRichTextStyle4FontSize];
              var targetColor = targetStyleRecord[kElementRichTextStyle4Color];
              var targetLineHeight = targetStyleRecord[kElementRichTextStyle4LineHeight];
              // 此时还没 mount, 可以多次提交
              if (targetFontSize) {
                  this.childFontSize = targetFontSize;
                  this.child.setStyle(kElementRichTextStyle4FontSize, targetFontSize);
              }
              if (targetColor) {
                  this.childColor = targetColor;
                  this.child.setStyle(kElementRichTextStyle4Color, targetColor);
              }
              if (targetLineHeight) {
                  this.childLineHeight = targetLineHeight;
                  this.child.setStyle(kElementRichTextStyle4LineHeight, targetLineHeight);
              }
          }
          return targetStyleRecord;
      };
      ZElement4RichText.prototype.updateClassStyleProp = function (componentInstance, klassExp, klassChanged, styleExp, styleChanged, propsMapExp, propsChangedMap) {
          // 收集
          var targetStyleRecord = _super.prototype.updateClassStyleProp.call(this, componentInstance, klassExp, klassChanged, styleExp, styleChanged, propsMapExp, propsChangedMap);
          if (targetStyleRecord) {
              var targetFontSize = targetStyleRecord[kElementRichTextStyle4FontSize];
              var targetColor = targetStyleRecord[kElementRichTextStyle4Color];
              var targetLineHeight = targetStyleRecord[kElementRichTextStyle4LineHeight];
              // 如果这两个属性 changed
              var changedFontSize = targetFontSize !== this.childFontSize;
              var changedColor = targetColor !== this.childColor;
              var changedLineHeight = targetLineHeight !== this.childLineHeight;
              var child = this.child;
              // 此时已经 mount，需要批量提交
              if (changedFontSize || changedColor || changedLineHeight) {
                  var styles = Object.create(null);
                  if (changedFontSize) {
                      styles[kElementRichTextStyle4FontSize] = targetFontSize;
                      this.childFontSize = targetFontSize;
                  }
                  if (changedColor) {
                      styles[kElementRichTextStyle4Color] = targetColor;
                      this.childColor = targetColor;
                  }
                  if (changedLineHeight) {
                      styles[kElementRichTextStyle4LineHeight] = targetLineHeight;
                      this.childLineHeight = targetLineHeight;
                  }
                  child.setStyles(styles);
              }
          }
          return targetStyleRecord;
      };
      ZElement4RichText.prototype.insertBefore = function (child, anchor) { };
      ZElement4RichText.prototype.appendChild = function (child) { };
      ZElement4RichText.prototype.setAttrs = function (attrs, changedMap) {
          var nodesChanged = changedMap[kElementRichTextAttribute4Nodes];
          var htmlChanged = changedMap[kElementRichTextAttribute4Html];
          // 属性更新完
          if (nodesChanged || htmlChanged) {
              var finalNodes = this.htmlNodes;
              var finalHtml = this.htmlText;
              if (nodesChanged) {
                  finalNodes = this.htmlNodes = attrs[kElementRichTextAttribute4Nodes];
              }
              if (htmlChanged) {
                  finalHtml = this.htmlText = attrs[kElementRichTextAttribute4Html];
              }
              var htmlEmitted = this.htmlEmitted;
              var htmlToBeEmitted = htmlEmitted;
              if (finalHtml) {
                  if (htmlChanged) {
                      htmlToBeEmitted = finalHtml;
                  }
              }
              else if (finalNodes) {
                  if (Array.isArray(finalNodes)) {
                      // 提交了一个空上来
                      htmlToBeEmitted = finalNodes.map(transformNodesToHtml).join('');
                  }
              }
              if (htmlToBeEmitted !== htmlEmitted) {
                  this.htmlEmitted = htmlToBeEmitted;
                  this.child.setAttr('text', htmlToBeEmitted);
              }
          }
      };
      ZElement4RichText.prototype.getEvent = function (e, userEventName, nativeEventName) {
          switch (userEventName) {
              case 'tap':
                  return normalizeBaseEvent(e, userEventName);
          }
      };
      ZElement4RichText.prefixClassName = 'a-rich-text ';
      ZElement4RichText.event2native = {
          tap: 'click',
      };
      ZElement4RichText.native2event = {
          click: 'tap',
      };
      return ZElement4RichText;
  }(ZElement4Shared));

  var kElementScrollViewAttribute4PageScrollRoot = 'pageScrollRoot';
  var kElementScrollViewAttribute4ShowScrollBar = 'showScrollBar';
  var kElementScrollViewAttribute4AllowBounce = 'allowBounce';
  var kElementScrollViewAttribute4AlwaysBounce = 'alwaysBounce';
  var kElementScrollViewAttribute4ScrollWithAnimation = 'scrollWithAnimation';
  var kElementScrollViewAttribute4ScrollAnimationDuration = 'scrollAnimationDuration';
  var kElementScrollViewAttribute4ScrollX = 'scrollX';
  var kElementScrollViewAttribute4ScrollDirection = 'scrollDirection';
  var kElementScrollViewAttribute4LowerThreshold = 'lowerThreshold';
  var kElementScrollViewAttribute4UpperThreshold = 'upperThreshold';
  var kElementScrollViewAttribute4ScrollTop = 'scrollTop';
  var kElementScrollViewAttribute4ScrollLeft = 'scrollLeft';
  function transformNumbericToPixelUnit(num) {
      if (!num && num !== 0) {
          return undefined;
      }
      var value = parseInt(num, 10);
      if (value === value) {
          // is not NaN
          return "".concat(value, "px");
      }
      else {
          return undefined;
      }
  }
  var ZElement4ScrollView = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4ScrollView, _super);
      function ZElement4ScrollView(component, root) {
          var _this = _super.call(this) || this;
          _this.scrollTop = null;
          _this.scrollLeft = null;
          _this.root = root;
          _this.direction = "vertical" /* EElementScrollViewAttribute4ScrollDirectionType.Vertical */;
          _this.page = component.root;
          return _this;
      }
      ZElement4ScrollView.create = function (component, feature) {
          var root = component.document.createElement('scroller');
          root.setAttr('allowBounce', true);
          root.setAttr('scrollDirection', 'vertical');
          root.setAttr('showScrollbar', false);
          return new ZElement4ScrollView(component, root);
      };
      ZElement4ScrollView.prototype.setAttrs = function (attrs, changedMap) {
          var root = this.root;
          if (changedMap[kElementScrollViewAttribute4PageScrollRoot]) {
              var value = !!attrs[kElementScrollViewAttribute4PageScrollRoot];
              root.setAttr(kElementScrollViewAttribute4PageScrollRoot, value);
              root.setAttr(kElementScrollViewAttribute4ShowScrollBar, value);
          }
          if (changedMap[kElementScrollViewAttribute4AllowBounce]) {
              var value = attrs[kElementScrollViewAttribute4AllowBounce];
              root.setAttr(kElementScrollViewAttribute4AllowBounce, !!value);
          }
          else {
              root.setAttr(kElementScrollViewAttribute4AllowBounce, true);
          }
          if (changedMap[kElementScrollViewAttribute4AlwaysBounce]) {
              root.setAttr(kElementScrollViewAttribute4AlwaysBounce, !!attrs[kElementScrollViewAttribute4AlwaysBounce]);
          }
          if (changedMap[kElementScrollViewAttribute4ScrollWithAnimation]) {
              root.setAttr(kElementScrollViewAttribute4ScrollWithAnimation, !!attrs[kElementScrollViewAttribute4ScrollWithAnimation]);
          }
          if (changedMap[kElementScrollViewAttribute4ScrollAnimationDuration]) {
              root.setAttr(kElementScrollViewAttribute4ScrollAnimationDuration, attrs[kElementScrollViewAttribute4ScrollAnimationDuration]);
          }
          var finalDirection = this.direction;
          var changedX = changedMap[kElementScrollViewAttribute4ScrollX];
          if (changedX) {
              if (attrs[kElementScrollViewAttribute4ScrollX]) {
                  // 即一旦 X 变更为 true，则一定强制设置 horizontal
                  finalDirection = "horizontal" /* EElementScrollViewAttribute4ScrollDirectionType.Horizontal */;
              }
              else {
                  // 关闭 ScrollX 自动降级到 Vertical
                  finalDirection = "vertical" /* EElementScrollViewAttribute4ScrollDirectionType.Vertical */;
              }
          }
          if (finalDirection !== this.direction) {
              this.direction = finalDirection;
              root.setAttr(kElementScrollViewAttribute4ScrollDirection, finalDirection);
          }
          if (changedMap[kElementScrollViewAttribute4LowerThreshold]) {
              root.setAttr(kElementScrollViewAttribute4LowerThreshold, transformNumbericToPixelUnit(attrs[kElementScrollViewAttribute4LowerThreshold]));
          }
          if (changedMap[kElementScrollViewAttribute4UpperThreshold]) {
              root.setAttr(kElementScrollViewAttribute4UpperThreshold, transformNumbericToPixelUnit(attrs[kElementScrollViewAttribute4UpperThreshold]));
          }
          var scrollTopChanged = changedMap[kElementScrollViewAttribute4ScrollTop];
          var scrollLeftChanged = changedMap[kElementScrollViewAttribute4ScrollLeft];
          if (scrollLeftChanged || scrollTopChanged) {
              this.pushQueue();
              if (scrollTopChanged) {
                  this.scrollTop = attrs[kElementScrollViewAttribute4ScrollTop];
              }
              if (scrollLeftChanged) {
                  this.scrollLeft = attrs[kElementScrollViewAttribute4ScrollLeft];
              }
          }
          // 一共这么多属性
          // [x] allowBounce,
          // [x] alwaysBounce,
          // [x] lowerThreshold:
          // [x] pageScrollRoot,
          // [x] scrollAnimationDuration:
          // [x] scrollDirection:
          // [x] scrollWithAnimation:
          // [x] showScrollbar:
          // [x] upperThreshold:
      };
      ZElement4ScrollView.prototype.afterUpdate = function () {
          /**
           * 过来了说明肯定有
           */
          if (this.scrollLeft !== null) {
              this.handleScrollLeft(this.scrollLeft);
              this.scrollLeft = null;
          }
          if (this.scrollTop !== null) {
              this.handleScrollTop(this.scrollTop);
              this.scrollTop = null;
          }
      };
      ZElement4ScrollView.prototype.getEvent = function (e, userEventName, nativeEventName) {
          if (userEventName === 'scroll') {
              return normalizeScrollEvent(e, nativeEventName);
          }
          else {
              return normalizeBaseEvent(e, userEventName);
          }
      };
      ZElement4ScrollView.prototype.pushQueue = function () {
          if (this.page) {
              this.page.pushUpdatedQueue(this);
          }
      };
      /**
       * 删掉 oldValue，diff 的操作在框架上做了
       * @param newValue
       */
      ZElement4ScrollView.prototype.handleScrollTop = function (newValue) {
          var root = this.root;
          if (root && root.scrollTop) {
              var value = parseInt(newValue, 10);
              if (value >= 0 && value === value) {
                  root.scrollTop("".concat(value, "px"));
              }
          }
      };
      /**
       * 删掉 oldValue，diff 的操作在框架上做了
       * @param newValue
       */
      ZElement4ScrollView.prototype.handleScrollLeft = function (newValue) {
          var root = this.root;
          if (root && root.scrollLeft) {
              var value = parseInt(newValue, 10);
              if (value >= 0 && value === value) {
                  root.scrollLeft("".concat(value, "px"));
              }
          }
      };
      ZElement4ScrollView.event2native = {
          scrollToLower: 'scrolltolower',
          scrollToUpper: 'scrolltoupper',
      };
      ZElement4ScrollView.native2event = {
          scrolltolower: 'scrollToLower',
          scrolltoupper: 'scrollToUpper',
      };
      ZElement4ScrollView.prefixClassName = 'a-scroll-view ';
      return ZElement4ScrollView;
  }(ZElement4Shared));

  var ZElement4Slider = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4Slider, _super);
      function ZElement4Slider(component, root) {
          var _this = _super.call(this) || this;
          _this.value = 0;
          _this.root = root;
          component.root.pushUpdatedQueue(_this);
          return _this;
      }
      ZElement4Slider.create = function (component, feature) {
          return new ZElement4Slider(component, component.document.createElement('external-slider'));
      };
      ZElement4Slider.prototype.reset = function () { };
      ZElement4Slider.prototype.afterUpdate = function () {
          handleFormChildInit(this);
      };
      ZElement4Slider.prototype.destroy = function () {
          handleFormChildDestroy(this);
          _super.prototype.destroy.call(this);
      };
      ZElement4Slider.prototype.setAttrs = function (attrs, changedMap) {
          var root = this.root;
          var valueChanged = changedMap["value" /* EElementSliderAttribute.Value */];
          var tempNumber;
          if (changedMap["name" /* EElementSliderAttribute.Name */] && !this.name) {
              this.name = attrs["name" /* EElementSliderAttribute.Name */];
          }
          if (valueChanged) {
              tempNumber = this.value = attrs["value" /* EElementSliderAttribute.Value */];
              root.setAttr("value" /* EElementSliderAttribute.Value */, tempNumber);
          }
          if (changedMap["min" /* EElementSliderAttribute.Min */]) {
              root.setAttr("min" /* EElementSliderAttribute.Min */, getDefaultValue4NumberFloat(attrs["min" /* EElementSliderAttribute.Min */], 0));
          }
          if (changedMap["max" /* EElementSliderAttribute.Max */]) {
              root.setAttr("max" /* EElementSliderAttribute.Max */, getDefaultValue4NumberFloat(attrs["max" /* EElementSliderAttribute.Max */], 100));
          }
          if (changedMap["step" /* EElementSliderAttribute.Step */]) {
              root.setAttr("step" /* EElementSliderAttribute.Step */, getDefaultValue4NumberInt(attrs["step" /* EElementSliderAttribute.Step */], 1));
          }
          if (changedMap["disabled" /* EElementSliderAttribute.Disabled */]) {
              root.setAttr("disabled" /* EElementSliderAttribute.Disabled */, !!attrs["disabled" /* EElementSliderAttribute.Disabled */]);
          }
          if (changedMap["showValue" /* EElementSliderAttribute.ShowValue */]) {
              root.setAttr("showValue" /* EElementSliderAttribute.ShowValue */, !!attrs["showValue" /* EElementSliderAttribute.ShowValue */]);
          }
          if (changedMap["activeColor" /* EElementSliderAttribute.ActiveColor */]) {
              root.setAttr("activeColor" /* EElementSliderAttribute.ActiveColor */, getDefaultValue(attrs["activeColor" /* EElementSliderAttribute.ActiveColor */], '#108ee9'));
          }
          if (changedMap["backgroundColor" /* EElementSliderAttribute.BackgroundColor */]) {
              root.setAttr("backgroundColor" /* EElementSliderAttribute.BackgroundColor */, getDefaultValue(attrs["backgroundColor" /* EElementSliderAttribute.BackgroundColor */], '#ddd'));
          }
          if (changedMap["trackSize" /* EElementSliderAttribute.TrackSize */]) {
              root.setAttr("trackSize" /* EElementSliderAttribute.TrackSize */, getDefaultValue4NumberFloat(attrs["trackSize" /* EElementSliderAttribute.TrackSize */], 4));
          }
          if (changedMap["handleSize" /* EElementSliderAttribute.HandleSize */]) {
              root.setAttr("handleSize" /* EElementSliderAttribute.HandleSize */, getDefaultValue4NumberFloat(attrs["handleSize" /* EElementSliderAttribute.HandleSize */], 22));
          }
          if (changedMap["handleColor" /* EElementSliderAttribute.HandleColor */]) {
              root.setAttr("handleColor" /* EElementSliderAttribute.HandleColor */, getDefaultValue(attrs["handleColor" /* EElementSliderAttribute.HandleColor */], '#fff'));
          }
          if (valueChanged) {
              handleFormChildUpdateValue(this);
          }
      };
      ZElement4Slider.prototype.getEvent = function (e, userEventName, nativeEventName) {
          // 只有 change, intentChange 会进来
          switch (userEventName) {
              case 'change':
              case 'changing':
                  var detail = e.detail;
                  return normalizeCustomEvent(e, userEventName, {
                      value: detail && detail.value,
                  });
          }
      };
      return ZElement4Slider;
  }(ZElement4Shared));

  var kElementSwiperAttribute4AutoPlay = 'autoPlay';
  var kElementSwiperAttribute4EnableAcceleration = 'enableAcceleration';
  var kElementSwiperAttribute4Index = 'index';
  var kElementSwiperAttribute4Infinite = 'infinite';
  var kElementSwiperAttribute4Scrollable = 'scrollable';
  var kElementSwiperAttribute4ShowIndicators = 'showIndicators';
  var ZElement4Swiper = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4Swiper, _super);
      function ZElement4Swiper(component, root) {
          var _this = _super.call(this) || this;
          _this.root = root;
          return _this;
      }
      ZElement4Swiper.create = function (component, feature) {
          var root = component.document.createElement('slider');
          root.setAttr(kElementSwiperAttribute4Scrollable, true);
          root.setAttr(kElementSwiperAttribute4AutoPlay, false);
          root.setAttr(kElementSwiperAttribute4Infinite, false);
          return new ZElement4Swiper(component, root);
      };
      ZElement4Swiper.prototype.setAttrs = function (attrs, changedMap) {
          var initial = attrs === changedMap;
          var batchedAttrs = {};
          // 这两个值需要初始值 客户端默认值与小程序规范不相同
          if (initial) {
              batchedAttrs["duration" /* EElementSwiperAttribute.Duration */] = 500;
              batchedAttrs["interval" /* EElementSwiperAttribute.Interval */] = 5000;
          }
          if (changedMap["autoplay" /* EElementSwiperAttribute.Autoplay */]) {
              batchedAttrs[kElementSwiperAttribute4AutoPlay] = !!attrs["autoplay" /* EElementSwiperAttribute.Autoplay */];
          }
          if (changedMap["duration" /* EElementSwiperAttribute.Duration */] !== undefined) {
              batchedAttrs["duration" /* EElementSwiperAttribute.Duration */] = getDefaultValue4NumberInt(attrs["duration" /* EElementSwiperAttribute.Duration */], 500);
          }
          // 默认值 false
          if (changedMap["acceleration" /* EElementSwiperAttribute.Acceleration */]) {
              batchedAttrs[kElementSwiperAttribute4EnableAcceleration] = !!attrs["acceleration" /* EElementSwiperAttribute.Acceleration */];
          }
          if (changedMap["current" /* EElementSwiperAttribute.Current */]) {
              batchedAttrs[kElementSwiperAttribute4Index] = attrs["current" /* EElementSwiperAttribute.Current */];
          }
          if (changedMap["circular" /* EElementSwiperAttribute.Circular */]) {
              batchedAttrs[kElementSwiperAttribute4Infinite] = !!attrs["circular" /* EElementSwiperAttribute.Circular */];
          }
          if (changedMap["interval" /* EElementSwiperAttribute.Interval */] !== undefined) {
              batchedAttrs["interval" /* EElementSwiperAttribute.Interval */] = getDefaultValue4NumberInt(attrs["interval" /* EElementSwiperAttribute.Interval */], 5000);
          }
          if (changedMap["nextMargin" /* EElementSwiperAttribute.NextMargin */]) {
              batchedAttrs["nextMargin" /* EElementSwiperAttribute.NextMargin */] = attrs["nextMargin" /* EElementSwiperAttribute.NextMargin */];
          }
          if (changedMap["previousMargin" /* EElementSwiperAttribute.PreviousMargin */]) {
              batchedAttrs["previousMargin" /* EElementSwiperAttribute.PreviousMargin */] = attrs["previousMargin" /* EElementSwiperAttribute.PreviousMargin */];
          }
          if (changedMap["indicatorDots" /* EElementSwiperAttribute.IndicatorDots */]) {
              batchedAttrs[kElementSwiperAttribute4ShowIndicators] = !!attrs["indicatorDots" /* EElementSwiperAttribute.IndicatorDots */];
          }
          if (changedMap["indicatorColor" /* EElementSwiperAttribute.IndicatorColor */]) {
              batchedAttrs["indicatorColor" /* EElementSwiperAttribute.IndicatorColor */] = attrs["indicatorColor" /* EElementSwiperAttribute.IndicatorColor */];
          }
          if (changedMap["indicatorActiveColor" /* EElementSwiperAttribute.IndicatorActiveColor */]) {
              batchedAttrs["indicatorActiveColor" /* EElementSwiperAttribute.IndicatorActiveColor */] = attrs["indicatorActiveColor" /* EElementSwiperAttribute.IndicatorActiveColor */];
          }
          if (changedMap["vertical" /* EElementSwiperAttribute.Vertical */]) {
              batchedAttrs["vertical" /* EElementSwiperAttribute.Vertical */] = !!attrs["vertical" /* EElementSwiperAttribute.Vertical */];
          }
          if (changedMap["disableTouch" /* EElementSwiperAttribute.DisableTouch */]) {
              batchedAttrs[kElementSwiperAttribute4Scrollable] = !attrs["disableTouch" /* EElementSwiperAttribute.DisableTouch */];
          }
          this.root.setAttrs(batchedAttrs);
      };
      ZElement4Swiper.prototype.getEvent = function (e, userEventName, nativeEventName) {
          switch (userEventName) {
              case 'change':
                  return normalizeCustomEvent(e, userEventName, {
                      current: e.index,
                  });
          }
      };
      ZElement4Swiper.prefixClassName = 'a-swiper ';
      return ZElement4Swiper;
  }(ZElement4Shared));

  var ZElement4SwiperItem = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4SwiperItem, _super);
      function ZElement4SwiperItem(component, root) {
          var _this = _super.call(this) || this;
          _this.root = root;
          return _this;
      }
      ZElement4SwiperItem.create = function (component, feature) {
          return new ZElement4SwiperItem(component, component.document.createElement('div'));
      };
      ZElement4SwiperItem.prototype.getEvent = function (e, userEventName, nativeEventName) {
          return null;
      };
      return ZElement4SwiperItem;
  }(ZElement4Shared));

  var kElementSwitchAttribute4Checked = 'checked';
  var kElementSwitchAttribute4Disabled = 'disabled';
  var kElementSwitchAttribute4Color = 'color';
  var kElementSwitchAttribute4Controlled = 'controlled';
  var ZElement4Switch = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4Switch, _super);
      function ZElement4Switch(component, root) {
          var _this = _super.call(this) || this;
          _this.value = false;
          _this.root = root;
          component.root.pushUpdatedQueue(_this);
          return _this;
      }
      ZElement4Switch.create = function (component, feature) {
          return new ZElement4Switch(component, component.document.createElement('external-switch'));
      };
      ZElement4Switch.prototype.reset = function () { };
      ZElement4Switch.prototype.afterUpdate = function () {
          handleFormChildInit(this);
      };
      ZElement4Switch.prototype.destroy = function () {
          handleFormChildDestroy(this);
          _super.prototype.destroy.call(this);
      };
      ZElement4Switch.prototype.initClassStyleProp = function (componentInstance, klassExp, styleExp, propsMapExp) {
          var returnStyle = _super.prototype.initClassStyleProp.call(this, componentInstance, klassExp, styleExp, propsMapExp);
          this.ensureChangeListener();
          return returnStyle;
      };
      ZElement4Switch.prototype.updateClassStyleProp = function (componentInstance, klassExp, klassChanged, styleExp, styleChanged, propsMapExp, propsChangedMap) {
          var returnStyle = _super.prototype.updateClassStyleProp.call(this, componentInstance, klassExp, klassChanged, styleExp, styleChanged, propsMapExp, propsChangedMap);
          this.ensureChangeListener();
          return returnStyle;
      };
      ZElement4Switch.prototype.setAttrs = function (attrs, changedMap) {
          var root = this.root;
          var checkedChanged = changedMap[kElementSwitchAttribute4Checked];
          var tempBoolean;
          if (changedMap["name" /* EElementSwitchAttribute.Name */] && !this.name) {
              this.name = attrs["name" /* EElementSwitchAttribute.Name */];
          }
          if (checkedChanged) {
              tempBoolean = this.value = !!attrs[kElementSwitchAttribute4Checked];
              root.setAttr(kElementSwitchAttribute4Checked, tempBoolean);
          }
          if (changedMap[kElementSwitchAttribute4Disabled]) {
              root.setAttr(kElementSwitchAttribute4Disabled, !!attrs[kElementSwitchAttribute4Disabled]);
          }
          if (changedMap[kElementSwitchAttribute4Color]) {
              root.setAttr(kElementSwitchAttribute4Color, attrs[kElementSwitchAttribute4Color]);
          }
          var controlledChanged = changedMap[kElementSwitchAttribute4Controlled];
          if (controlledChanged) {
              tempBoolean = this.controlled = !!attrs[kElementSwitchAttribute4Controlled];
              root.setAttr(kElementSwitchAttribute4Controlled, tempBoolean);
          }
          if (controlledChanged || checkedChanged) {
              handleFormChildUpdateValue(this);
          }
      };
      ZElement4Switch.prototype.addEventBinding = function (eventContext) {
          if (eventContext.ename === 'change') {
              this.onUserChange = eventContext;
          }
      };
      ZElement4Switch.prototype.getEvent = function (e, userEventName, nativeEventName) {
          // 只有 change, intentChange 会进来
          var detail = e.detail;
          return normalizeCustomEvent(e, 'change', {
              value: !!(detail && detail.value),
          });
      };
      ZElement4Switch.prototype.ensureChangeListener = function () {
          if (this.controlled) {
              if (!this.onIntentChangeListened) {
                  this.onIntentChangeListened = true;
                  this.onIntentChange = this.onIntentChange.bind(this);
                  _super.prototype.addInternalEvent.call(this, 'intentChange', this.onIntentChange);
              }
          }
          else {
              if (!this.onChangeListened) {
                  this.onChangeListened = true;
                  this.onChange = this.onChange.bind(this);
                  _super.prototype.addInternalEvent.call(this, 'change', this.onChange);
              }
          }
      };
      ZElement4Switch.prototype.onChange = function (e) {
          // 再做一下同步 form 的操作
          this.value = e.detail.value;
          handleFormChildUpdateValue(this);
          if (this.onUserChange) {
              this.invokeEventContext(this.onUserChange, this.getEvent(e, 'change', e.type));
          }
      };
      ZElement4Switch.prototype.onIntentChange = function (e) {
          if (this.onUserChange) {
              this.invokeEventContext(this.onUserChange, this.getEvent(e, 'change', e.type));
          }
      };
      return ZElement4Switch;
  }(ZElement4Shared));

  // 对齐web 带换行的<text>自动加这个类
  var kElementTextClassNoSpace = ' a-text-no-space';
  var ZElement4Text = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4Text, _super);
      function ZElement4Text(component, feature, root) {
          var _this = _super.call(this) || this;
          if (feature) {
              _this.feature = feature;
          }
          _this.root = root;
          return _this;
      }
      ZElement4Text.create = function (component, feature) {
          return new ZElement4Text(component, feature, component.document.createElement('text'));
      };
      ZElement4Text.prototype.insertBefore = function (child, anchor) { };
      ZElement4Text.prototype.appendChild = function (child) { };
      ZElement4Text.prototype.initClassStyleProp = function (componentInstance, klassExp, styleExp, propsMapExp) {
          if (!this.space) {
              // 对齐web 带换行的<text>自动加这个类
              klassExp += kElementTextClassNoSpace;
          }
          return _super.prototype.initClassStyleProp.call(this, componentInstance, klassExp, styleExp, propsMapExp);
      };
      ZElement4Text.prototype.setAttr = function (name, value) {
          if (name === "value" /* EElementTextAttribute.Value */) {
              // this.root.setAttr("value" /* EElementTextAttribute.Value */, normalizeTextContent(value));
              this.root.firstChild.textContent = normalizeTextContent(value);
          }
          else {
              _super.prototype.setAttr.call(this, name, value);
          }
      };
      ZElement4Text.prototype.setAttrs = function (attrs, changedMap) {
          var spaceChanged = changedMap["space" /* EElementTextAttribute.Space */];
          var decodeChanged = changedMap["decode" /* EElementTextAttribute.Decode */];
          var valueChanged = changedMap["value" /* EElementTextAttribute.Value */];
          var numberOfLinesChanged = changedMap["numberOfLines" /* EElementTextAttribute.NumberOfLines */];
          if (spaceChanged) {
              this.space = getTextSpaceType(attrs["space" /* EElementTextAttribute.Space */]);
          }
          if (decodeChanged) {
              this.decode = !!attrs["decode" /* EElementTextAttribute.Decode */];
          }
          var textChanged;
          var textContent;
          if (valueChanged) {
              var text = this.root.firstChild.textContent;
              textChanged = true;
              textContent = normalizeTextContent(text, this.space, this.decode);
              // this.root.setAttr(EElementTextAttribute.Value, normalizeTextContent(text, this.space, this.decode));
              this.root.firstChild.textContent = textContent;
          }
          else if (spaceChanged || decodeChanged) {
              var oldText = this.text;
              var newText = normalizeTextContent(oldText, this.space, this.decode);
              if (newText !== oldText) {
                  this.text = newText;
                  textChanged = true;
                  textContent = newText;
              }
          }
          if (numberOfLinesChanged || textChanged) {
              var batchedAttrs = {};
              if (textChanged) {
                  //batchedAttrs["value" /* EElementTextAttribute.Value */] = textContent;
                  this.root.firstChild.textContent = textContent;
              }
              if (numberOfLinesChanged) {
                  batchedAttrs["numberOfLines" /* EElementTextAttribute.NumberOfLines */] = attrs["numberOfLines" /* EElementTextAttribute.NumberOfLines */];
              }
              this.root.setAttrs(batchedAttrs);
          }
      };
      ZElement4Text.prototype.getEvent = function (e, userEventName, nativeEventName) {
          return normalizeBaseEvent(e, userEventName);
      };
      ZElement4Text.event2native = {
          tap: 'click',
      };
      ZElement4Text.native2event = {
          click: 'tap',
      };
      ZElement4Text.prefixClassName = 'a-text ';
      return ZElement4Text;
  }(ZElement4Shared));

  var ZElement4Textarea = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4Textarea, _super);
      function ZElement4Textarea(component, root) {
          var _this = _super.call(this, component, root) || this;
          _this.root.setAttr("showCount" /* EElementTextareaAttribute.ShowCount */, true);
          return _this;
      }
      ZElement4Textarea.create = function (component, feature) {
          return new ZElement4Textarea(component, component.document.createElement('textarea'));
      };
      ZElement4Textarea.prototype.initClassStyleProp = function (componentInstance, klassExp, styleExp, propsMapExp) {
          this.root.setAttr("showCount" /* EElementTextareaAttribute.ShowCount */, !propsMapExp || !!propsMapExp["showCount" /* EElementTextareaAttribute.ShowCount */]);
          return _super.prototype.initClassStyleProp.call(this, componentInstance, klassExp, styleExp, propsMapExp);
      };
      ZElement4Textarea.prototype.setAttrs = function (batchedAttrs, changedMap) {
          var attrs = this.processAttrs(batchedAttrs, changedMap);
          if (changedMap["autoHeight" /* EElementTextareaAttribute.AutoHeight */]) {
              attrs["autoHeight" /* EElementTextareaAttribute.AutoHeight */] = !!batchedAttrs["autoHeight" /* EElementTextareaAttribute.AutoHeight */];
          }
          if (changedMap["showCount" /* EElementTextareaAttribute.ShowCount */]) {
              attrs["showCount" /* EElementTextareaAttribute.ShowCount */] = !!batchedAttrs["showCount" /* EElementTextareaAttribute.ShowCount */];
          }
          this.root.setAttrs(attrs);
      };
      ZElement4Textarea.prefixClassName = 'a-textarea ';
      return ZElement4Textarea;
  }(ZElement4SharedInput));

  var ZElement4TextNest = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4TextNest, _super);
      function ZElement4TextNest(component, feature, root) {
          var _this = _super.call(this) || this;
          if (feature) {
              _this.feature = feature;
          }
          _this.root = root;
          return _this;
      }
      ZElement4TextNest.create = function (component, feature) {
          // cube 临时给飞猪hack 因为text节点不支持挂子节点，所以对于textnest的实现是块元素
          return new ZElement4TextNest(component, feature, component.document.createElement('div'));
      };
      // 这里暂时留着 后续客户端根据自动包裹打的标识向上查找属性
      ZElement4TextNest.prototype.setAttr = function (name, value) {
          if (name === "value" /* EElementTextAttribute.Value */) {
              this.root.setAttr("value" /* EElementTextAttribute.Value */, normalizeTextContent(value));
          }
          else {
              _super.prototype.setAttr.call(this, name, value);
          }
      };
      ZElement4TextNest.prototype.setAttrs = function (attrs, changedMap) {
          var spaceChanged = changedMap["space" /* EElementTextAttribute.Space */];
          var decodeChanged = changedMap["decode" /* EElementTextAttribute.Decode */];
          var valueChanged = changedMap["value" /* EElementTextAttribute.Value */];
          var numberOfLinesChanged = changedMap["numberOfLines" /* EElementTextAttribute.NumberOfLines */];
          if (spaceChanged) {
              this.space = getTextSpaceType(attrs["space" /* EElementTextAttribute.Space */]);
          }
          if (decodeChanged) {
              this.decode = !!attrs["decode" /* EElementTextAttribute.Decode */];
          }
          var textChanged;
          var textContent;
          if (valueChanged) {
              var text = (this.text = attrs["value" /* EElementTextAttribute.Value */]);
              textChanged = true;
              textContent = normalizeTextContent(text, this.space, this.decode);
              // this.root.setAttr(EElementTextAttribute.Value, normalizeTextContent(text, this.space, this.decode));
          }
          else if (spaceChanged || decodeChanged) {
              var oldText = this.text;
              var newText = normalizeTextContent(oldText, this.space, this.decode);
              if (newText !== oldText) {
                  this.text = newText;
                  textChanged = true;
                  textContent = newText;
              }
          }
          if (numberOfLinesChanged || textChanged) {
              var batchedAttrs = {};
              if (textChanged) {
                  batchedAttrs["value" /* EElementTextAttribute.Value */] = textContent;
              }
              if (numberOfLinesChanged) {
                  batchedAttrs["numberOfLines" /* EElementTextAttribute.NumberOfLines */] = attrs["numberOfLines" /* EElementTextAttribute.NumberOfLines */];
              }
              this.root.setAttrs(batchedAttrs);
          }
      };
      ZElement4TextNest.prototype.getEvent = function (e, userEventName, nativeEventName) {
          return normalizeBaseEvent(e, userEventName);
      };
      ZElement4TextNest.prefixClassName = 'a-textnest a-text ';
      ZElement4TextNest.event2native = {
          tap: 'click',
      };
      ZElement4TextNest.native2event = {
          click: 'tap',
      };
      return ZElement4TextNest;
  }(ZElement4Shared));

  function getInitialValue() {
      var _a;
      return _a = {},
          _a["posterSize" /* EElementVideoAttribute.PosterSize */] = kElementVideoDefaultValue4PosterSize,
          _a["objectFit" /* EElementVideoAttribute.ObjectFit */] = "contain" /* EElementVideoObjectFit.Contain */,
          _a["initialTime" /* EElementVideoAttribute.InitialTime */] = 0,
          _a["duration" /* EElementVideoAttribute.Duration */] = 0,
          _a["controls" /* EElementVideoAttribute.Controls */] = true,
          _a["autoplay" /* EElementVideoAttribute.Autoplay */] = false,
          _a["loop" /* EElementVideoAttribute.Loop */] = false,
          _a["muted" /* EElementVideoAttribute.Muted */] = false,
          _a["showFullscreenBtn" /* EElementVideoAttribute.ShowFullScreenBtn */] = true,
          _a["showPlayBtn" /* EElementVideoAttribute.ShowPlayBtn */] = true,
          _a["showCenterPlayBtn" /* EElementVideoAttribute.ShowCenterPlayBtn */] = true,
          _a["showMuteBtn" /* EElementVideoAttribute.ShowMuteBtn */] = true,
          _a["showThinProgressBar" /* EElementVideoAttribute.ShowThinProgressBar */] = false,
          _a["enableProgressGesture" /* EElementVideoAttribute.EnableProgressGesture */] = true,
          _a["mobilenetHintType" /* EElementVideoAttribute.MobilenetHintType */] = 1,
          _a["floatingMode" /* EElementVideoAttribute.FloatingMode */] = 'none',
          _a;
  }
  var ZElement4Video = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4Video, _super);
      function ZElement4Video(component, root) {
          var _this = _super.call(this) || this;
          _this.root = root;
          return _this;
      }
      ZElement4Video.create = function (component, feature) {
          var root = component.document.createElement('video');
          return new ZElement4Video(component, root);
      };
      ZElement4Video.prototype.setAttrs = function (attrs, changedMap) {
          var initial = attrs === changedMap;
          var batchedAttrs = initial ? getInitialValue() : {};
          if (changedMap["src" /* EElementVideoAttribute.Src */]) {
              batchedAttrs["src" /* EElementVideoAttribute.Src */] = attrs["src" /* EElementVideoAttribute.Src */];
          }
          if (changedMap["poster" /* EElementVideoAttribute.Poster */]) {
              batchedAttrs["poster" /* EElementVideoAttribute.Poster */] = attrs["poster" /* EElementVideoAttribute.Poster */];
          }
          if (changedMap["posterSize" /* EElementVideoAttribute.PosterSize */]) {
              batchedAttrs["posterSize" /* EElementVideoAttribute.PosterSize */] = attrs["posterSize" /* EElementVideoAttribute.PosterSize */];
          }
          if (changedMap["objectFit" /* EElementVideoAttribute.ObjectFit */]) {
              batchedAttrs["objectFit" /* EElementVideoAttribute.ObjectFit */] = attrs["objectFit" /* EElementVideoAttribute.ObjectFit */];
          }
          if (changedMap["initialTime" /* EElementVideoAttribute.InitialTime */]) {
              batchedAttrs["initialTime" /* EElementVideoAttribute.InitialTime */] = attrs["initialTime" /* EElementVideoAttribute.InitialTime */];
          }
          if (changedMap["duration" /* EElementVideoAttribute.Duration */]) {
              batchedAttrs["duration" /* EElementVideoAttribute.Duration */] = attrs["duration" /* EElementVideoAttribute.Duration */];
          }
          if (changedMap["controls" /* EElementVideoAttribute.Controls */] !== undefined) {
              batchedAttrs["controls" /* EElementVideoAttribute.Controls */] = !!attrs["controls" /* EElementVideoAttribute.Controls */];
          }
          if (changedMap["autoplay" /* EElementVideoAttribute.Autoplay */]) {
              batchedAttrs["autoplay" /* EElementVideoAttribute.Autoplay */] = !!attrs["autoplay" /* EElementVideoAttribute.Autoplay */];
          }
          if (changedMap["direction" /* EElementVideoAttribute.Direction */]) {
              batchedAttrs["direction" /* EElementVideoAttribute.Direction */] = attrs["direction" /* EElementVideoAttribute.Direction */];
          }
          if (changedMap["loop" /* EElementVideoAttribute.Loop */]) {
              batchedAttrs["loop" /* EElementVideoAttribute.Loop */] = !!attrs["loop" /* EElementVideoAttribute.Loop */];
          }
          if (changedMap["muted" /* EElementVideoAttribute.Muted */]) {
              batchedAttrs["muted" /* EElementVideoAttribute.Muted */] = !!attrs["muted" /* EElementVideoAttribute.Muted */];
          }
          if (changedMap["showFullscreenBtn" /* EElementVideoAttribute.ShowFullScreenBtn */] !== undefined) {
              batchedAttrs["showFullscreenBtn" /* EElementVideoAttribute.ShowFullScreenBtn */] = !!attrs["showFullscreenBtn" /* EElementVideoAttribute.ShowFullScreenBtn */];
          }
          if (changedMap["showPlayBtn" /* EElementVideoAttribute.ShowPlayBtn */] !== undefined) {
              batchedAttrs["showPlayBtn" /* EElementVideoAttribute.ShowPlayBtn */] = !!attrs["showPlayBtn" /* EElementVideoAttribute.ShowPlayBtn */];
          }
          if (changedMap["showCenterPlayBtn" /* EElementVideoAttribute.ShowCenterPlayBtn */] !== undefined) {
              batchedAttrs["showCenterPlayBtn" /* EElementVideoAttribute.ShowCenterPlayBtn */] = !!attrs["showCenterPlayBtn" /* EElementVideoAttribute.ShowCenterPlayBtn */];
          }
          if (changedMap["showThinProgressBar" /* EElementVideoAttribute.ShowThinProgressBar */]) {
              batchedAttrs["showThinProgressBar" /* EElementVideoAttribute.ShowThinProgressBar */] = !!attrs["showThinProgressBar" /* EElementVideoAttribute.ShowThinProgressBar */];
          }
          if (changedMap["enableProgressGesture" /* EElementVideoAttribute.EnableProgressGesture */] !== undefined) {
              batchedAttrs["enableProgressGesture" /* EElementVideoAttribute.EnableProgressGesture */] = !!attrs["enableProgressGesture" /* EElementVideoAttribute.EnableProgressGesture */];
          }
          if (changedMap["mobilenetHintType" /* EElementVideoAttribute.MobilenetHintType */] !== undefined) {
              batchedAttrs["mobilenetHintType" /* EElementVideoAttribute.MobilenetHintType */] = +attrs["mobilenetHintType" /* EElementVideoAttribute.MobilenetHintType */];
          }
          if (changedMap["floatingMode" /* EElementVideoAttribute.FloatingMode */]) {
              batchedAttrs["floatingMode" /* EElementVideoAttribute.FloatingMode */] = attrs["floatingMode" /* EElementVideoAttribute.FloatingMode */];
          }
          this.root.setAttrs(batchedAttrs);
      };
      ZElement4Video.prototype.getEvent = function (e, userEventName, nativeEventName) {
          var payload = getEventPayload4Video(userEventName, void 0, e.detail);
          if (payload) {
              return normalizeCustomEvent(e, userEventName, payload);
          }
      };
      ZElement4Video.event2native = {
          tap: 'click',
      };
      ZElement4Video.native2event = {
          click: 'tap',
      };
      ZElement4Video.prefixClassName = 'a-video ';
      return ZElement4Video;
  }(ZElement4Shared));

  var ZElement4View = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4View, _super);
      function ZElement4View(component, root) {
          var _this = _super.call(this) || this;
          _this.root = root;
          return _this;
      }
      ZElement4View.create = function (component, feature) {
          return new ZElement4View(component, component.document.createElement('div'));
      };
      ZElement4View.prototype.setAttrs = function (attrs, changedMap) {
          // 没有 hover-* 系列
          // 如果 dev 模式下，用于测试用例观测
          {
              this.root.setAttrs(attrs);
          }
      };
      ZElement4View.prototype.getEvent = function (e, userEventName, nativeEventName) {
          switch (userEventName) {
              case 'touchStart':
              case 'touchMove':
              case 'touchCancel':
              case 'touchEnd':
                  return normalizeTouchEvent(e, userEventName);
              case 'tap':
              case 'longTap':
                  return normalizeBaseEvent(e, userEventName);
          }
      };
      ZElement4View.event2native = {
          longTap: 'longpress',
          tap: 'click',
          touchCancel: 'touchcancel',
          touchEnd: 'touchend',
          touchMove: 'touchmove',
          touchStart: 'touchstart',
      };
      ZElement4View.native2event = {
          click: 'tap',
          longpress: 'longTap',
          touchcancel: 'touchCancel',
          touchend: 'touchEnd',
          touchmove: 'touchMove',
          touchstart: 'touchStart',
      };
      ZElement4View.prefixClassName = 'a-view ';
      return ZElement4View;
  }(ZElement4Shared));

  function performAnimation($el, state, currentAnimation, $requireModule) {
      if (state.prevAnimation !== currentAnimation) {
          debug$3(function () { return "[Component:Animation] change: ".concat(currentAnimation); });
          // 先把老动画清理一下，再执行
          clearPreviousAnimation(state);
          if (currentAnimation) {
              performCurrentAnimation($el, state, $requireModule('animation'), currentAnimation);
              // 如果之前不存在，立即启动一次animation执行，并存起来
              state.prevAnimation = currentAnimation;
          }
      }
      else if (currentAnimation) {
          // 动画相同，不做处理
          debug$3(function () { return "[Component:Animation] not-change: ".concat(currentAnimation); });
      }
  }
  function performCurrentAnimation($el, state, $animation, animations) {
      debug$3(function () { return "[Component:Animation] $el.style ".concat(JSON.stringify($el.style.transform)); });
      // 如何获取到 el
      // 分别启动的一堆定时器，干
      // 不要启动这么多定时器，一个动画完成后再发起一个新的动画
      var parsedAnimations = [];
      try {
          parsedAnimations = JSON.parse(animations);
          // performAnimationBatch($el, state, $animation, parsedAnimations);
          performAnimationIndex($el, state, $animation, parsedAnimations, 0);
      }
      catch (ex) { }
  }
  function performAnimationIndex($el, state, $animation, animations, index) {
      if (index >= animations.length) {
          return;
      }
      debug$3(function () { return "[APPX] animation: ".concat(index, "/").concat(animations.length); });
      var animation = animations[index];
      var payload = {
          delay: animation[0 /* ESharedAnimationStepIndex.config */][2 /* ESharedAnimationConfigIndex.delay */],
          duration: animation[0 /* ESharedAnimationStepIndex.config */][0 /* ESharedAnimationConfigIndex.duration */],
          needLayout: true,
          styles: normalizeAnimationStyle(state, animation),
          timingFunction: animation[0 /* ESharedAnimationStepIndex.config */][1 /* ESharedAnimationConfigIndex.timingFunction */],
      };
      state.animationTimer = true;
      $animation.transition($el, payload, function (result) {
          if (!state.animationTimer) {
              return;
          }
          if (result && result.success) {
              debug$3(function () { return "[APPX] animation: ".concat(index, ": success"); });
              performAnimationIndex($el, state, $animation, animations, index + 1);
          }
          else {
              debug$3(function () { return "[APPX] animation: ".concat(index, ": fail"); });
          }
      });
  }
  function normalizeAnimationStyle(state, animation) {
      var style = {
          transform: ' ',
      };
      for (var _i = 0, _a = animation[1 /* ESharedAnimationStepIndex.animation */]; _i < _a.length; _i++) {
          var action = _a[_i];
          var name = action[0];
          var arg1 = action[1];
          var arg2 = action[2];
          switch (name) {
              case 2 /* ESharedAnimationCommandIndex.width */:
                  style.width = arg1;
                  break;
              case 3 /* ESharedAnimationCommandIndex.height */:
                  style.height = arg1;
                  break;
              case 13 /* ESharedAnimationCommandIndex.top */:
                  style.top = arg1;
                  break;
              case 14 /* ESharedAnimationCommandIndex.left */:
                  style.left = arg1;
                  break;
              case 15 /* ESharedAnimationCommandIndex.bottom */:
                  style.bottom = arg1;
                  break;
              case 16 /* ESharedAnimationCommandIndex.right */:
                  style.right = arg1;
                  break;
              case 0 /* ESharedAnimationCommandIndex.opacity */:
                  style.opacity = arg1;
                  break;
              case 1 /* ESharedAnimationCommandIndex.backgroundColor */:
                  style.backgroundColor = arg1;
                  break;
              case 4 /* ESharedAnimationCommandIndex.rotate */:
                  applyTransform(style, 'rotate', "(".concat(arg1, ")"));
                  break;
              case 5 /* ESharedAnimationCommandIndex.rotateX */:
                  applyTransform(style, 'rotateX', "(".concat(arg1, ")"));
                  break;
              case 6 /* ESharedAnimationCommandIndex.rotateY */:
                  applyTransform(style, 'rotateY', "(".concat(arg1, ")"));
                  break;
              case 11 /* ESharedAnimationCommandIndex.translateX */:
                  applyTransform(style, 'translateX', "(".concat(arg1, ")"));
                  break;
              case 12 /* ESharedAnimationCommandIndex.translateY */:
                  applyTransform(style, 'translateY', "(".concat(arg1, ")"));
                  break;
              case 8 /* ESharedAnimationCommandIndex.scaleX */:
                  applyTransform(style, 'scaleX', "(".concat(arg1, ")"));
                  break;
              case 9 /* ESharedAnimationCommandIndex.scaleY */:
                  applyTransform(style, 'scaleY', "(".concat(arg1, ")"));
                  break;
              case 10 /* ESharedAnimationCommandIndex.translate */:
                  applyTransform(style, 'translate', "(".concat(arg1, ", ").concat(arg2, ")"));
                  break;
              case 7 /* ESharedAnimationCommandIndex.scale */:
                  applyTransform(style, 'scale', "(".concat(arg1, ", ").concat(arg2, ")"));
                  break;
          }
      }
      // state.prevTransform = style.transform;
      debug$3(function () { return "[Component] animation:style: ".concat(JSON.stringify(style)); });
      return style;
  }
  function applyTransform(style, name, value) {
      // style.transform
      // 跟APPX保持一致先把老的重复的name移除掉
      // 保证所有 transform 都是 'func\(...args\)\s' 形式，保持尾部空格方便判定
      style.transform = style.transform.replace(new RegExp(name + '\\([^)]+\\) ', 'gi'), '');
      style.transform += "".concat(name).concat(value, " ");
      return style;
  }
  function clearPreviousAnimation(state) {
      state.animationTimer = false;
  }

  var kElementViewAttribute4Hidden = 'hidden';
  var kElementViewAttribute4Animation = 'animation';
  var kElementViewAttribute4HoverClass = 'hoverClass';
  var kElementViewAttribute4HoverStartTime = 'hoverStartTime';
  var kElementViewAttribute4HoverStayTime = 'hoverStayTime';
  var kElementViewAttribute4DisableScroll = 'disableScroll';
  var kElementViewFirstAppearEvents = ['appear', 'firstAppear'];
  var kElementViewNonFirstAppearEvents = ['appear'];
  var ZElement4ViewState = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZElement4ViewState, _super);
      function ZElement4ViewState(component, root) {
          var _this = _super.call(this) || this;
          /* IZRuntimeElementInstanceWithHoverable */
          _this.hoverPressState = 1 /* EComponentHoverableState.Idle */;
          _this.root = root;
          _this.componentInstance = component;
          return _this;
      }
      ZElement4ViewState.create = function (component, feature) {
          return new ZElement4ViewState(component, component.document.createElement('div'));
      };
      ZElement4ViewState.prototype.initClassStyleProp = function (componentInstance, klassExp, styleExp, propsMapExp) {
          var hasHoverClass;
          if (propsMapExp) {
              this.processAttrs(propsMapExp, propsMapExp);
              hasHoverClass = propsMapExp[kElementViewAttribute4HoverClass] !== undefined;
          }
          if (hasHoverClass) {
              // 记录一下用户 klassExp
              if (klassExp) {
                  this.userClassName = klassExp;
              }
              this.suffixClassName = '';
          }
          return this.initClassStyle(componentInstance, klassExp, styleExp);
      };
      ZElement4ViewState.prototype.updateClassStyleProp = function (componentInstance, klassExp, klassChanged, styleExp, styleChanged, propsMapExp, propsChangedMap) {
          var hasHoverClass;
          if (propsChangedMap) {
              this.processAttrs(propsMapExp, propsChangedMap);
              hasHoverClass = propsMapExp[kElementViewAttribute4HoverClass] !== undefined;
          }
          if (hasHoverClass) {
              this.userClassName = klassExp;
              var suffixClassName = this.suffixClassName;
              klassExp = klassExp + suffixClassName;
              klassChanged = true;
          }
          if (klassChanged || styleChanged) {
              return this.updateClassStyle(componentInstance, klassExp, klassChanged, styleExp, styleChanged);
          }
      };
      ZElement4ViewState.prototype.processAttrs = function (attrs, changedMap) {
          if (changedMap[kElementViewAttribute4HoverStartTime]) {
              this.hoverStartTime = attrs[kElementViewAttribute4HoverStartTime];
          }
          if (changedMap[kElementViewAttribute4HoverStayTime]) {
              this.hoverStayTime = attrs[kElementViewAttribute4HoverStayTime];
          }
          if (changedMap[kElementViewAttribute4HoverClass]) {
              var hoverClass = attrs[kElementViewAttribute4HoverClass];
              if (this.hoverStayTime === undefined) {
                  this.hoverStayTime = 100;
              }
              if (this.hoverStartTime === undefined) {
                  this.hoverStartTime = 130;
              }
              handlerHoverClassChanged(this, " ".concat(hoverClass));
          }
          if (changedMap[kElementViewAttribute4Animation]) {
              var bridge = this.componentInstance.root.option.bridge;
              if (bridge) {
                  if (!this.animationState) {
                      this.animationState = {};
                  }
                  performAnimation(this.root, this.animationState, attrs[kElementViewAttribute4Animation], bridge.requireModule);
              }
          }
          if (changedMap[kElementViewAttribute4Hidden]) {
              this.root.setAttr(kElementViewAttribute4Hidden, !!attrs[kElementViewAttribute4Hidden]);
          }
          if (changedMap[kElementViewAttribute4DisableScroll]) {
              console.log('should call cube');
          }
          // ignore
          // 如果 dev 模式下，用于测试用例观测
          {
              this.root.setAttrs(__assign(__assign({}, attrs), { animation: undefined, hoverClass: undefined, hoverStartTime: undefined, hoverStayTime: undefined }));
          }
      };
      ZElement4ViewState.prototype.applyHoverClass = function (active) {
          if (active) {
              this.suffixClassName = this.hoverClass;
          }
          else {
              this.suffixClassName = '';
          }
          var userClassName = this.userClassName || '';
          this.updateClassStyle(this.componentInstance, userClassName + this.suffixClassName, true, '', false, true);
      };
      ZElement4ViewState.prototype.getEvent = function (e, userEventName, nativeEventName) {
          switch (userEventName) {
              case 'touchStart':
              case 'touchMove':
              case 'touchCancel':
              case 'touchEnd':
                  return normalizeTouchEvent(e, userEventName);
              case 'tap':
              case 'longTap':
              case 'firstAppear':
              case 'appear':
              case 'disappear':
                  return normalizeBaseEvent(e, userEventName);
              case 'transitionEnd':
                  if (e.animationStep === 'end') {
                      return normalizeBaseEvent(e, userEventName);
                  }
          }
      };
      ZElement4ViewState.prototype.getUserEvent = function (nativeEventName, e) {
          if (nativeEventName === 'viewappear') {
              // 是否需要添加 onFirstAppear 事件
              if (!this.viewAppeared) {
                  this.viewAppeared = true;
                  return kElementViewFirstAppearEvents;
              }
              else {
                  return kElementViewNonFirstAppearEvents;
              }
          }
          else {
              return _super.prototype.getUserEvent.call(this, nativeEventName, e);
          }
      };
      ZElement4ViewState.prototype.setAttrs = function (batchedAttrs, changedMap) {
          _super.prototype.setAttrs.call(this, batchedAttrs, changedMap);
      };
      ZElement4ViewState.event2native = {
          appear: 'viewappear',
          disappear: 'viewdisappear',
          firstAppear: 'viewappear',
          longTap: 'longpress',
          tap: 'click',
          touchCancel: 'touchcancel',
          touchEnd: 'touchend',
          touchMove: 'touchmove',
          touchStart: 'touchstart',
          transitionEnd: 'CSSTransition',
      };
      ZElement4ViewState.native2event = {
          click: 'tap',
          longpress: 'longTap',
          touchcancel: 'touchCancel',
          touchend: 'touchEnd',
          touchmove: 'touchMove',
          touchstart: 'touchStart',
          viewdisappear: 'disappear',
          // viewappear 通过 getEvent 来映射返回
          // viewappear: appear/firstAppear
      };
      ZElement4ViewState.prefixClassName = 'a-view ';
      return ZElement4ViewState;
  }(ZElement4Shared));

  var kMap4TagFactory2Name;
  var kMap4TagFactory = {
      canvas: ZElement4Canvas,
      viewstate: ZElement4ViewState,
      view: ZElement4View,
      text: ZElement4Text,
      image: ZElement4Image,
      'scroll-view': ZElement4ScrollView,
      swiper: ZElement4Swiper,
      'swiper-item': ZElement4SwiperItem,
      navigator: ZElement4Navigator,
      button: ZElement4Button,
      'rich-text': ZElement4RichText,
      form: ZElement4Form,
      switch: ZElement4Switch,
      map: ZElement4Map,
      input: ZElement4Input,
      textarea: ZElement4Textarea,
      'appmarket-editor': ZElement4AppmarketEditor,
      'movable-area': ZElement4MovableArea,
      'movable-view': ZElement4MovableView,
      'page-meta': ZElement4PageMeta,
      slider: ZElement4Slider,
      video: ZElement4Video,
  };
  var kMap4Number2BizTagFactory = [];
  var kMap4Number2TagFactory = getElementFactoryOrderedList(ZElement4View, ZElement4ViewState, ZElement4Text, ZElement4TextNest, ZElement4Image, ZElement4ScrollView, ZElement4Button, ZElement4Input, ZElement4Swiper, ZElement4SwiperItem, ZElement4Navigator, ZElement4RichText, null, // checkbox
  null, // checkboxgroup
  ZElement4Form, ZElement4Switch, ZElement4Textarea, ZElement4Canvas, null, // radiogroup
  null, // radio
  null, // icon
  ZElement4Map, null, // progress
  ZElement4Slider, // slider
  null, // pickerview
  null, // pickerviewcolumn
  null, // picker
  null, // lottie
  null, // webview
  ZElement4MovableView, ZElement4MovableArea, null, // audio
  ZElement4Video, // video
  null, // label
  null, // coverview
  null, // coverimage
  ZElement4AppmarketEditor, null, // contact-button,
  null, // ad
  null, // live-player
  null, // livepusher
  null, // aicamera
  null, // camera
  null, // lifestyle
  null, // cdp
  null, // ar
  null, // rtc-room
  ZElement4PageMeta, // page-meta,
  null, null, null, // match-media
  null // page-container
  );
  var kUnknownElementMap = Object.create(null);
  function getTagNameByConstructor(factory) {
      switch (factory) {
          case ZElement4ViewState:
              return 'view';
          case ZElement4Document:
              return 'page';
      }
      if (!kMap4TagFactory2Name) {
          kMap4TagFactory2Name = createWeakMap();
      }
      if (kMap4TagFactory2Name.has(factory)) {
          return kMap4TagFactory2Name.get(factory);
      }
      else {
          for (var _i = 0, _a = Object.keys(kMap4TagFactory); _i < _a.length; _i++) {
              var name = _a[_i];
              kMap4TagFactory2Name.set(kMap4TagFactory[name], name);
              if (kMap4TagFactory[name] === factory) {
                  return name;
              }
          }
          var unknownName = "unknown:".concat(factory && factory.name);
          kMap4TagFactory2Name.set(factory, unknownName);
          return unknownName;
      }
  }
  function registerPlatformElement(elementDefs) {
      for (var _i = 0, elementDefs_1 = elementDefs; _i < elementDefs_1.length; _i++) {
          var def = elementDefs_1[_i];
          if (!kMap4TagFactory[def.tag]) {
              kMap4TagFactory[def.tag] = getZElement4PlatformNodeConstructor(def);
          }
      }
  }
  function getElementByStringTag(tag) {
      if (kMap4TagFactory[tag]) {
          return kMap4TagFactory[tag];
      }
      else {
          if (!kUnknownElementMap[tag]) {
              kUnknownElementMap[tag] = getZElement4UnknownConstructor();
          }
          return kUnknownElementMap[tag];
      }
  }
  function getElementByNumberTag(numberTag, stringTag) {
      var factory = kMap4Number2TagFactory[numberTag];
      if (factory) {
          return factory;
      }
      else {
          if (!numberTag && stringTag) {
              var maybeStringFactory = getElementByStringTag(stringTag);
              if (maybeStringFactory) {
                  return maybeStringFactory;
              }
          }
          stringTag = stringTag || "".concat(numberTag);
          if (!kUnknownElementMap[stringTag]) {
              kUnknownElementMap[stringTag] = getZElement4UnknownConstructor();
          }
          return kUnknownElementMap[stringTag];
      }
  }
  function getBizElementByNumberTag(numberTag, stringTag) {
      var factory = kMap4Number2BizTagFactory[numberTag];
      if (factory) {
          return factory;
      }
      else {
          stringTag = stringTag || "biz-".concat(numberTag);
          if (!kUnknownElementMap[stringTag]) {
              kUnknownElementMap[stringTag] = getZElement4UnknownConstructor();
          }
          return kUnknownElementMap[stringTag];
      }
  }

  function normalizeStyle4ExtractType(styleExp, target, 
  // extract: undefined 不存在需要处理的逻辑
  // extract: 1 string rpx 不处理
  // extract: 2 string 需要添加 px, rpx, 驼峰
  // extract: 3 string|object 相比 1 需要额外考虑 object 展开
  extract) {
      if (extract) {
          if (target.cachedNormalizedStyle !== styleExp) {
              switch (extract) {
                  case 1 /* EZephyrStyleExtractType.StringWithRpxMaybe */:
                      target.cachedNormalizedStyleString = styleExp;
                      break;
                  case 2 /* EZephyrStyleExtractType.StringWithCamelRpxNumber */:
                      // TODO camelize 和 px
                      target.cachedNormalizedStyleString = styleExp;
                      break;
                  case 3 /* EZephyrStyleExtractType.StringOrObject */:
                      target.cachedNormalizedStyleString = normalizeInlineStyleObject(styleExp);
                      break;
              }
              target.cachedNormalizedStyle = styleExp;
          }
          styleExp = target.cachedNormalizedStyleString;
      }
      return styleExp ? styleExp : '';
  }
  function normalizeInlineStyleObject(styleExp) {
      if (styleExp && typeof styleExp === 'object') {
          // 如果是数组，不处理
          var ret = '';
          var hyphenatedKey = void 0;
          var value = void 0;
          for (var _i = 0, _a = Object.keys(styleExp); _i < _a.length; _i++) {
              var key = _a[_i];
              hyphenatedKey = hyphenate(key);
              value = styleExp[key];
              if (!value && value !== 0) {
                  // 同 runtime-web 改动
                  continue;
              }
              if (!isWebUnitlessNumberProperty(hyphenatedKey) &&
                  (typeof value === 'number' || reStyleNormalizeIsValidNumber.test(value))) {
                  value = "".concat(value, "px");
              }
              ret += "".concat(hyphenatedKey, ": ").concat(value, "; ");
          }
          return ret;
      }
      return styleExp + '';
  }

  // tslint:disable no-bitwise forin
  var pureHelper = /*#__PURE__*/ getHelper();
  var helper$1 = pureHelper;
  function getHelper() {
      var _a;
      setZRuntimeLinkedInstance4ContextImpl(ContextConstructor4ClientSide);
      return _a = {},
          _a["ip" /* ECompilerRuntimeHelperSymbol.InitSlotProvider */] = helperInitSlotProvider,
          _a["iP" /* ECompilerRuntimeHelperSymbol.InitDynamicSlotProvider */] = helperInitDynamicSlotProvider,
          _a["cs" /* ECompilerRuntimeHelperSymbol.CreateSlotContent */] = helperCreateSlotContent,
          _a["us" /* ECompilerRuntimeHelperSymbol.UpdateSlotContent */] = helperUpdateSlotContent,
          _a["uS" /* ECompilerRuntimeHelperSymbol.UpdateSlotProvider */] = helperUpdateSlotProvider,
          _a["dS" /* ECompilerRuntimeHelperSymbol.DestroySlotProvider */] = helperDestroySlotProvider,
          _a["l" /* ECompilerRuntimeHelperSymbol.InitializeComponent */] = helperInitializeComponent,
          _a["c" /* ECompilerRuntimeHelperSymbol.CreateComponent */] = helperCreateComponent,
          _a["p" /* ECompilerRuntimeHelperSymbol.ComponentSetProps */] = helperComponentSetProps,
          _a["s" /* ECompilerRuntimeHelperSymbol.ComponentReceiveOnlySlot */] = helperComponentReceiveOnlySlot,
          _a["o" /* ECompilerRuntimeHelperSymbol.DestroyComponent */] = helperDestroyComponent4Client,
          _a["m" /* ECompilerRuntimeHelperSymbol.MountComponent */] = helperMountComponent4Client,
          _a["e" /* ECompilerRuntimeHelperSymbol.CreateElement */] = function (componentInstance, tag, flag, feature) {
              var elementInstance = tag.create(componentInstance, feature);
              elementInstance.ownerPageId = componentInstance.root.ownerId;
              elementInstance.ownerTargetId = (componentInstance.type >= 2 /* EZRuntimeLinkedInstanceType.Component */
                  ? componentInstance
                  : componentInstance.option.parentTarget).targetId;
              return elementInstance;
          },
          _a["i" /* ECompilerRuntimeHelperSymbol.DocumentInsert */] = helperClientInsertBefore,
          _a["j" /* ECompilerRuntimeHelperSymbol.DocumentInsertAnchor */] = helperDocumentInsertAnchor,
          _a["r" /* ECompilerRuntimeHelperSymbol.ElementRemove */] = helperClientRemoveChild,
          _a["d" /* ECompilerRuntimeHelperSymbol.ElementDestroyButNotRemove */] = function (target) {
              target.destroy();
          },
          _a["a" /* ECompilerRuntimeHelperSymbol.DocumentAppend */] = helperClientAppendChild,
          _a["f" /* ECompilerRuntimeHelperSymbol.TextNormalize */] = function (variable) {
              if (variable || variable === 0 || variable === false) {
                  return '' + variable;
              }
              else {
                  return '';
              }
          },
          _a["n" /* ECompilerRuntimeHelperSymbol.TextElementSetContent */] = function (node, exp) {
              node.setAttr('value', exp);
              // node.firstChild.textContent = exp;
          },
          _a["ea" /* ECompilerRuntimeHelperSymbol.ElementSetAttribute */] = function (node, attrName, exp) {
              node.setAttr(attrName, exp);
          },
          _a["ec" /* ECompilerRuntimeHelperSymbol.ElementChangeProp */] = noop$5,
          _a["it" /* ECompilerRuntimeHelperSymbol.ElementInitTrackerAttribute */] = function (target, attrFlag, attrKeyValueArray) {
              return null;
          },
          _a["et" /* ECompilerRuntimeHelperSymbol.ElementSetTrackerAttribute */] = function (target, updatedAttrFlag, attrKeyValueArray, changedArray) {
              return null;
          },
          _a["x" /* ECompilerRuntimeHelperSymbol.ElementInitAttributeClassStyleAndProp */] = function (target, componentInstance, klassExp, styleExp, propsMapExp, extract) {
              styleExp = normalizeStyle4ExtractType(styleExp, target, extract);
              target.initClassStyleProp(componentInstance, klassExp, styleExp, propsMapExp || undefined);
          },
          _a["X" /* ECompilerRuntimeHelperSymbol.ElementUpdateAttributeClassStyleAndProp */] = function (target, componentInstance, klassExp, klassChanged, styleExp, styleChanged, propsMapExp, propsChangedMap, extract, childrenDirty) {
              styleExp = normalizeStyle4ExtractType(styleExp, target, extract);
              target.updateClassStyleProp(componentInstance, klassExp, klassChanged, styleExp, styleChanged, propsMapExp || undefined, propsChangedMap);
              if (childrenDirty) {
                  target.willUpdateChildren();
              }
          },
          _a["y" /* ECompilerRuntimeHelperSymbol.ElementUpdateAttributeClassOnlyAndProp */] = function (target, componentInstance, klassExp, klassChanged, propsMapExp, propsChangedMap) {
              target.updateClassStyleProp(componentInstance, klassExp, klassChanged, '', false, propsMapExp || undefined, propsChangedMap);
          },
          _a["Y" /* ECompilerRuntimeHelperSymbol.ElementUpdateAttributeStyleOnlyAndProp */] = function (target, componentInstance, styleExp, styleChanged, propsMapExp, propsChangedMap) {
              target.updateClassStyleProp(componentInstance, '', false, styleExp, styleChanged, propsMapExp || undefined, propsChangedMap);
          },
          _a["w" /* ECompilerRuntimeHelperSymbol.ElementUpdateAttributeNoneAndProp */] = function (target, componentInstance, propsMapExp, propsChangedMap) {
              target.updateClassStyleProp(componentInstance, '', false, '', false, propsMapExp || undefined, propsChangedMap);
          },
          _a["b" /* ECompilerRuntimeHelperSymbol.InitBlock */] = function (fn, component, context) {
              if (fn) {
                  return fn(component, context);
              }
          },
          _a["v" /* ECompilerRuntimeHelperSymbol.ElementAddEvent4Compatible */] = function (target, name, fn, stop) {
              var eventContext = target.getEventContext(target.eventContexts ? target.eventContexts.length : 0, 2 /* EZRuntimeElementInstanceUserEventContextType.LegacyFunction */, fn, undefined, name, stop, false);
              if (eventContext) {
                  target.addEventBinding(eventContext);
              }
          },
          _a["k" /* ECompilerRuntimeHelperSymbol.ElementAddEventBinding */] = function (target, name, nameIndex, method, componentInstance, flag) {
              // tslint:disable no-bitwise
              var stop = (flag & 1 /* EZephyrCompilerEventExtraInfoFlag.Stop */);
              var capture = !!(flag & 4 /* EZephyrCompilerEventExtraInfoFlag.Capture */);
              // tslint:enable no-bitwise
              var eventContext = target.getEventContext(nameIndex, typeof method === 'function'
                  ? 1 /* EZRuntimeElementInstanceUserEventContextType.SJSFunction */
                  : 0 /* EZRuntimeElementInstanceUserEventContextType.String */, method, componentInstance, name, stop, capture);
              if (eventContext) {
                  target.addEventBinding(eventContext);
              }
          },
          _a["K" /* ECompilerRuntimeHelperSymbol.ElementUpdateEventBinding */] = function (target, name, nameIndex, method) {
              var eventContextMap = target.eventContexts;
              var eventContext = eventContextMap && eventContextMap[nameIndex];
              if (eventContext) {
                  eventContext.mType =
                      typeof method === 'function'
                          ? 1 /* EZRuntimeElementInstanceUserEventContextType.SJSFunction */
                          : 0 /* EZRuntimeElementInstanceUserEventContextType.String */;
                  eventContext.method = method;
                  target.addEventBinding(eventContext);
              }
          },
          _a["M" /* ECompilerRuntimeHelperSymbol.CallMethod */] = function (componentInstance, method, arg) {
              if (!method) {
                  return;
              }
              if (componentInstance.type >= 2 /* EZRuntimeLinkedInstanceType.Component */) {
                  componentInstance.callMethod(method, arg, null);
              }
              else {
                  componentInstance.option.parentTarget.callMethod(method, arg, null);
              }
          },
          _a["V" /* ECompilerRuntimeHelperSymbol.CallEvent */] = helperCallEvent,
          _a["H" /* ECompilerRuntimeHelperSymbol.DestroyBlockAnchor */] = helperDestroyBlockAnchor,
          _a["h" /* ECompilerRuntimeHelperSymbol.CreateBlockAnchor */] = helperCreateBlockAnchor,
          _a["de" /* ECompilerRuntimeHelperSymbol.DestroyBlocks4EachContainer */] = helperDestroyBlocks4EachContainer,
          _a["uE" /* ECompilerRuntimeHelperSymbol.UpdateBlocks4EachContainerWithItemDiff */] = helperUpdateBlocks4EachContainerWithItemDiff,
          _a["ue" /* ECompilerRuntimeHelperSymbol.UpdateBlocks4EachContainer */] = helperUpdateBlocks4EachContainer,
          _a["ut" /* ECompilerRuntimeHelperSymbol.UpdateBlock4TemplateUseContainer */] = helperUpdateBlock4TemplateUseContainer,
          _a["gt" /* ECompilerRuntimeHelperSymbol.GetBlock4TemplateUseContainer */] = helperGetBlock4TemplateUseContainer,
          _a["gi" /* ECompilerRuntimeHelperSymbol.GetBlock4IncludeContainer */] = helperGetBlock4IncludeContainer,
          _a["cI" /* ECompilerRuntimeHelperSymbol.ContextRequiredInitBlock */] = helperContextRequiredInitBlock,
          _a["cC" /* ECompilerRuntimeHelperSymbol.ContextRequiredCreateBlock */] = helperContextRequiredCreateBlock,
          _a["cB" /* ECompilerRuntimeHelperSymbol.ContextRequiredCreateBlock4Compatible */] = helperContextRequiredCreateBlock4Compatible,
          _a["cM" /* ECompilerRuntimeHelperSymbol.ContextRequiredMountBlock */] = helperContextRequiredMountBlock,
          _a["cU" /* ECompilerRuntimeHelperSymbol.ContextRequiredUpdateBlock */] = helperContextRequiredUpdateBlock,
          _a["cD" /* ECompilerRuntimeHelperSymbol.ContextRequiredDestroyBlock */] = helperContextRequiredDestroyBlock,
          _a["t" /* ECompilerRuntimeHelperSymbol.CreateWebText */] = function (componentInstance, text) {
              var wrapTextTag = componentInstance.document.createTextNode(text);
              //wrapTextTag.setAttr('value', text);
              // cube 对自动包裹元素计算样式继承关系的时候需要个标识用来区分是否继承父元素样式
              //wrapTextTag.setAttr('textAutoInserted', true);
              var ref = {
                  destroy: noop$5,
                  eType: 2 /* EZRuntimeClientSideElementType.PureText */,
                  formattedText: null,
                  nextSibling: null,
                  parent: null,
                  previousSibling: null,
                  root: wrapTextTag,
                  text: text,
              };
              return ref;
          },
          _a["N" /* ECompilerRuntimeHelperSymbol.WebTextSetContent */] = function (node, exp) {
              node.text = exp;
              node.root.firstChild.textContent = exp;
          },
          _a["R" /* ECompilerRuntimeHelperSymbol.RemoveWebText */] = helperClientRemoveChild,
          _a["D" /* ECompilerRuntimeHelperSymbol.DestroyButNotRemoveWebText */] = function (target) { },
          _a["I" /* ECompilerRuntimeHelperSymbol.DocumentInsert4WebText */] = helperClientInsertBefore,
          _a["A" /* ECompilerRuntimeHelperSymbol.DocumentAppend4WebText */] = helperClientAppendChild,
          _a["g" /* ECompilerRuntimeHelperSymbol.ElementInitSetAttributeDataset */] = helperInitDataset,
          _a["G" /* ECompilerRuntimeHelperSymbol.ElementUpdateSetAttributeDatasetPartial */] = helperUpdateDatasetPartial,
          _a["Q" /* ECompilerRuntimeHelperSymbol.ElementUpdateSetAttributeDatasetAll */] = helperUpdateDatasetAll,
          _a["$C" /* ECompilerRuntimeHelperSymbol.ConditionContainerFactoryCreate */] = helperConditionContainerFactoryCreate,
          _a["$PC" /* ECompilerRuntimeHelperSymbol.DeprecatedConditionContainerFactoryCreate4PlaceholderComponent */] = helperConditionContainerFactoryCreate4PlaceholderComponent,
          _a["$B" /* ECompilerRuntimeHelperSymbol.BypassContainerFactoryCreate */] = helperBypassContainerFactoryCreate,
          _a["$P" /* ECompilerRuntimeHelperSymbol.PlaceholderSwitchDefine */] = helperPlaceholderSwitchDefine,
          _a["$E" /* ECompilerRuntimeHelperSymbol.EachContainerFactoryCreate */] = function (getEachIteratorFactory, iterateValue, iterateIndex, getIterateContext, iterateContextDepList, iterateContextAndChildrenDepList, isVirtualDynamicSlot, getIterateKey) {
              return helperEachContainerFactoryCreate(getEachIteratorFactory, iterateValue, iterateIndex, getIterateContext, iterateContextDepList, iterateContextAndChildrenDepList, isVirtualDynamicSlot, undefined /* TODO getIterateKey 等 native 确认无问题再放开 */);
          },
          _a["$T" /* ECompilerRuntimeHelperSymbol.TemplateUseContainerFactoryCreate */] = helperTemplateUseContainerFactoryCreate,
          _a["ie" /* ECompilerRuntimeHelperSymbol.ElementInitEventHandlerMap */] = function (componentInstance, event) { },
          _a["ed" /* ECompilerRuntimeHelperSymbol.ElementUpdateEventAndDataset */] = function (componentInstance, event) { },
          _a["E" /* ECompilerRuntimeHelperSymbol.HydrateClaimElement */] = function (parentNodesContext, componentInstance, tag, flag, feature) {
              return null;
          },
          _a["L" /* ECompilerRuntimeHelperSymbol.HydrateClaimChildren */] = function (node) {
              return null;
          },
          _a["u" /* ECompilerRuntimeHelperSymbol.HydrateGetTarget */] = function (context) {
              return null;
          },
          _a["W" /* ECompilerRuntimeHelperSymbol.ElementHydrateAttributeClassStyleAndProp */] = function (target, componentInstance, klassExp, styleExp, propsMapExp, extract) {
              return null;
          },
          _a["T" /* ECompilerRuntimeHelperSymbol.HydrateWebText */] = function (parentNodesContext, componentInstance, text) {
              return null;
          },
          _a["F" /* ECompilerRuntimeHelperSymbol.HydrateBlockAnchor */] = function (parentNodesContext, componentInstance) {
              return null;
          },
          _a["cL" /* ECompilerRuntimeHelperSymbol.ContextRequiredLinkBlock */] = function (parentNodesContext, contextInstance) {
              return null;
          },
          _a["J" /* ECompilerRuntimeHelperSymbol.HydrateClearChildren */] = function (parentNodesContext) { },
          _a["q" /* ECompilerRuntimeHelperSymbol.LinkComponent */] = function (parentNodesContext, componentInstance, props, propKeys, nonEventCount, refMethod) { },
          _a["$D" /* ECompilerRuntimeHelperSymbol.DynamicComponentBlockFactoryCreate */] = helper4DynamicComponentBlockCreateFactory,
          _a["dl" /* ECompilerRuntimeHelperSymbol.InitializeDynamicComponent */] = helper4InitializeDynamicComponent,
          _a["ls" /* ECompilerRuntimeHelperSymbol.HydrateSlotContent */] = function (parentNodesContext, componentInstance, slotName, fn, fallbackContext, scopeContext, slotNameDynamic) {
              return null;
          },
          _a["z" /* ECompilerRuntimeHelperSymbol.RuntimeFeatureFlag */] = 0 /* ERuntimeSupportedFlag.NONE */,
          _a;
  }

  function getCanIUse4ZephyrNative() {
      return {
          button: {
              'open-type': {
                  share: 1,
              },
          },
          canvas: 1,
          view: {
              onAppear: 1,
              onDisappear: 1,
              onFirstAppear: 1,
              onTransitionEnd: 1,
          },
      };
  }

  // tslint:disable object-literal-sort-keys
  var Button = {
      'a-button-container': {
          flexDirection: 'row',
      },
      'a-button-wrapper-style': {
          alignItems: 'center',
          justifyContent: 'center',
          borderRadius: 5,
          borderWidth: 2,
      },
      'a-button-default-size-raw': {
          height: 94,
          paddingLeft: 30,
          paddingRight: 30,
      },
      'a-button-mini-size-raw': {
          height: 55,
          paddingLeft: 18,
          paddingRight: 18,
      },
      'a-button-default-size-raw-text': {
          fontSize: 36,
      },
      'a-button-mini-size-raw-text': {
          fontSize: 28,
      },
      /* default */
      'a-button-default-text': {
          color: '#000000',
      },
      'a-button-default-highlight-text': {
          color: 'rgba(0,0,0,0.3)',
      },
      'a-button-default-disabled-text': {
          color: 'rgba(0,0,0,0.6)',
      },
      'a-button-default': {
          backgroundColor: '#ffffff',
          borderColor: '#dddddd',
      },
      'a-button-default-highlight': {
          backgroundColor: '#dddddd',
          borderColor: '#dddddd',
      },
      'a-button-default-disabled': {
          backgroundColor: 'rgba(255,255,255,0.6)',
      },
      /* primary */
      'a-button-primary-text': {
          color: '#FFFFFF',
      },
      'a-button-primary-highlight-text': {
          color: 'rgba(255,255,255,0.3)',
      },
      'a-button-primary-disabled-text': {
          color: 'rgba(255,255,255,0.6)',
      },
      'a-button-primary': {
          backgroundColor: '#108ee9',
          borderColor: '#108ee9',
      },
      'a-button-primary-highlight': {
          backgroundColor: '#1284d6',
          borderColor: '#108ee9',
      },
      'a-button-primary-disabled': {
          backgroundColor: 'rgba(16,142,232,0.6)',
          borderWidth: 0,
      },
      /* warn */
      'a-button-warn-text': {
          color: '#fff',
      },
      'a-button-warn-highlight-text': {
          color: 'rgba(255,255,255,0.3)',
      },
      'a-button-warn-disabled-text': {
          color: 'rgba(255,255,255,0.6)',
      },
      'a-button-warn': {
          backgroundColor: '#e94f4f',
          borderColor: '#e94f4f',
      },
      'a-button-warn-highlight': {
          backgroundColor: '#ea3c3c',
          borderColor: '#e94f4f',
      },
      'a-button-warn-disabled': {
          backgroundColor: 'rgba(233,79,79,0.4)',
          borderWidth: 0,
      },
      /* ghost */
      'a-button-ghost-text': {
          color: '#108ee9',
      },
      'a-button-ghost-highlight-text': {
          color: '#ffffff',
      },
      'a-button-ghost-disabled-text': {
          color: '#cccccc',
      },
      'a-button-ghost': {
          borderColor: '#108ee9',
      },
      'a-button-ghost-highlight': {
          backgroundColor: '#0b71ba',
          borderColor: '#108ee9',
      },
      'a-button-ghost-disabled': {
          backgroundColor: '#dddddd',
          borderWidth: 0,
      },
  };

  var sharedComponentStyle;
  function getComponentStyle() {
      if (!sharedComponentStyle) {
          sharedComponentStyle = buildComponentStyle();
      }
      return sharedComponentStyle;
  }
  function buildComponentStyle() {
      return __assign(__assign({}, Button), { 'a-progress': {
              alignItems: 'center',
              flexDirection: 'row',
          }, 'a-progress-bar': {
              backgroundColor: '#108ee9',
              height: '6px',
              width: '0',
          }, 'a-progress-container': {
              backgroundColor: '#eeeeee',
              flex: '1',
              flexDirection: 'row',
          }, 'a-progress-info': {
              marginLeft: '8px',
              textAlign: 'right',
              lineHeight: '14px',
              fontSize: '12px',
              color: '#000000',
          }, 'a-input': {
              backgroundColor: 'rgb(255,255,255)',
              color: 'rgb(0,0,0)',
              fontSize: 40,
              height: 80,
              marginLeft: 0,
              paddingLeft: 15,
              width: 750,
          }, 'a-textarea': {
              backgroundColor: 'rgb(255,255,255)',
              color: 'rgb(0,0,0)',
              fontSize: 40,
              height: 80,
              marginLeft: 0,
              paddingLeft: 15,
              width: 750,
          }, 'a-page': {
              flex: 1,
          }, 'a-movable-area': {
              // movable-area 默认长宽是10px
              width: '10px',
              height: '10px',
          } });
  }

  // tslint:disable object-literal-sort-keys
  var cubeFrameworkStyle;
  function getFrameworkStyle() {
      if (!cubeFrameworkStyle) {
          cubeFrameworkStyle = buildFrameworkStyle();
      }
      return cubeFrameworkStyle;
  }
  function buildFrameworkStyle() {
      return {
          ':root': {
              lineHeight: 1.2,
          },
          '.a-icon': {
              display: 'inline-block',
              fontSize: '0',
          },
          '.a-text-space': {
              whiteSpace: 'pre-wrap',
          },
          '.a-text-no-space': {
              whiteSpace: 'pre-line',
          },
          '.a-text[data-auto-inserted]': {
              backgroundColor: 'transparent',
          },
          '.a-button': {
              display: 'block',
              outline: '0',
              boxSizing: 'border-box',
              padding: '0',
              textAlign: 'center',
              fontSize: '18px',
              height: '47px',
              lineHeight: '47px',
              borderRadius: '2px',
              overflow: 'hidden',
              textOverflow: 'ellipsis',
              wordBreak: 'break-word',
              whiteSpace: 'nowrap',
              color: '#000',
              backgroundColor: '#fff',
              border: '1px solid #eee',
          },
          '.a-button.a-button-active': {
              backgroundColor: '#ddd',
              color: 'rgba(0, 0, 0, 0.3)',
          },
          '.a-button-disabled,.a-button-disabled-fix.a-button-disabled': {
              backgroundColor: 'rgba(255, 255, 255, 0.6)',
              color: 'rgba(0, 0, 0, 0.6)',
          },
          '.a-button-default-disabled': {
              backgroundColor: 'rgba(255, 255, 255, 0.6)',
              color: 'rgba(0, 0, 0, 0.6)',
          },
          '.a-button-primary': {
              color: '#fff',
              backgroundColor: '#108ee9',
              borderColor: '#108ee9',
          },
          '.a-button.a-button-primary-highlight.a-button-active,.a-button-primary.a-button-active': {
              color: 'rgba(255, 255, 255, 0.3)',
              backgroundColor: '#0b71ba',
              borderColor: '#108ee9',
          },
          '.a-button-primary.a-button-disabled': {
              border: '0',
              color: 'rgba(255, 255, 255, 0.6)',
              backgroundColor: '#9fd2f6',
          },
          '.a-button-primary-disabled': {
              color: 'rgba(255, 255, 255, 0.6)',
              backgroundColor: '#9fd2f6',
              border: '0',
          },
          '.a-button-warn': {
              color: '#fff',
              backgroundColor: '#e94f4f',
              borderColor: '#e94f4f',
          },
          '.a-button.a-button-warn-highlight.a-button-active,.a-button-warn.a-button-active': {
              color: 'rgba(255, 255, 255, 0.3)',
              backgroundColor: '#ea3c3c',
              borderColor: '#e94f4f',
          },
          '.a-button-warn.a-button-disabled': {
              color: 'rgba(255, 255, 255, 0.6)',
              backgroundColor: 'rgba(233, 79, 79, 0.4)',
              borderWidth: 0,
          },
          '.a-button-warn-disabled': {
              color: 'rgba(255, 255, 255, 0.6)',
              backgroundColor: 'rgba(233, 79, 79, 0.4)',
              borderWidth: 0,
          },
          '.a-button-ghost': {
              color: '#108ee9',
              backgroundColor: 'transparent',
              borderColor: '#108ee9',
          },
          '.a-button.a-button-ghost-highlight.a-button-active,.a-button-ghost.a-button-active': {
              color: '#fff',
              backgroundColor: '#0b71ba',
              borderColor: '#108ee9',
          },
          '.a-button-ghost.a-button-disabled': {
              color: '#ccc',
              backgroundColor: '#ddd',
              border: 0,
          },
          '.a-button-ghost-disabled': {
              color: '#ccc',
              backgroundColor: '#ddd',
              border: 0,
          },
          '.a-button-small': {
              display: 'inline-block',
              fontSize: '14px',
              minWidth: '48px',
              height: '26px',
              lineHeight: '24px',
              padding: '0 4px',
          },
          '.a-image': {
              backgroundRepeat: 'no-repeat',
              display: 'inline-block',
              overflow: 'hidden',
              fontSize: '0',
              width: '300px',
              height: '225px',
          },
          '.a-image-lazy-load': {
              backgroundColor: '#ffffff03',
          },
          '.a-input': {
              display: 'inline-block',
              backgroundColor: '#fff',
              padding: '2px 5px',
              color: '#000',
              fontSize: '17px',
              height: '25px',
              boxSizing: 'content-box',
          },
          '.a-textarea': {
              position: 'relative',
              backgroundColor: '#fff',
              padding: '2px 5px',
              color: '#000',
              fontSize: '17px',
              height: '42px',
              lineHeight: '1.4',
          },
          '.a-progress': {
              alignItems: 'center',
              display: 'flex',
          },
          '.a-progress-bar': {
              height: '0',
              borderBottom: '4px solid #108ee9',
              transition: 'all 0.3s linear 0s',
          },
          '.a-progress-container': {
              flex: '1',
          },
          '.a-progress-info': {
              marginLeft: '10px',
          },
          '.a-page': {
              minHeight: '100vh',
          },
          '.a-movable-area': {
              position: 'relative',
              width: '10px',
              height: '10px',
          },
          'a-swiper': {
              boxSizing: 'border-box',
              position: 'relative',
              display: 'block',
              visibility: 'visible',
              overflow: 'hidden',
              width: '100%',
              height: '150px',
          },
          // 飞猪text嵌套slot text节点暂不支持appendChild因此临时用div解决的
          '.a-textnest': {
              display: 'inline-block',
          },
      };
  }

  var sharedZRuntime = getZRuntimeImpl();
  function getZRuntimeImpl() {
      var _a;
      var zruntime;
      var getDebugProxy = function () {
          return new ZRuntimeDebugProxy(zruntime, {
              tagConverter: getTagNameByConstructor,
          });
      };
      zruntime = (_a = {
              PageConstructor: PageConstructor4ClientSide,
              SlotBlockConstructor: SlotBlockConstructor4ClientSide,
              TargetConstructor: TargetConstructorSlotLazy4ClientSide,
              createSlotProvider4Immediate: createSlotProvider4Immediate,
              createSlotProvider4Lazy: createSlotProvider4Lazy,
              disableElement: noop$5,
              enableFeature: enableZephyrRuntimeFeature,
              enableScalableStyle: noop$5,
              getDebugProxy: getDebugProxy,
              getdocument: getZElement4Document,
              normalizeStyleSheetText: function (css) { return css; },
              prepareContextFreeEnvironment: null,
              registerElementExternalParams: noop$5,
              registerPlatformElement: registerPlatformElement,
              setDeveloperConsole: noop$5,
              setElementUsageReporter: noop$5,
              setErrorReporter: noop$5,
              setInsideRuntime: setZephyrInsideFeatureRuntime,
              setPlatformAnimationFrameImpl: noop$5,
              setPlatformIntersectionObserverImpl: noop$5,
              setPlatformTimeoutImpl: noop$5,
              setTracertErrorReporter: noop$5,
              setUnexpectedBehaviorReporter: noop$5
          },
          _a["g" /* ECompilerRuntimeContextSymbol.GetElementByStringTag */] = getElementByStringTag,
          _a["e" /* ECompilerRuntimeContextSymbol.GetElementByNumberTag */] = getElementByNumberTag,
          _a["b" /* ECompilerRuntimeContextSymbol.GetBizElementByNumberTag */] = getBizElementByNumberTag,
          _a["h" /* ECompilerRuntimeContextSymbol.Helper */] = helper$1,
          _a);
      return zruntime;
  }
  function getZRuntime() {
      return sharedZRuntime;
  }

  // 注释都留着，等测试都通过了再删
  var bizAppId = '20000021';
  function deleteAB(opt) {
      if (opt.a) {
          delete opt.a;
      }
      if (opt.b) {
          delete opt.b;
      }
  }
  function makeOpt(opt, a, b) {
      return {
          appId: bizAppId,
          param: __assign({ a: a, b: b }, opt),
      };
  }
  var chooseAddress = {
      b: function (opt) {
          return {
              name: 'shopping-address',
              param: JSON.stringify({
                  sceneCode: 'TINY-APP',
              }),
          };
      },
      m: 'startBizService',
      topNS: true,
  };
  var getAddress = {
      d: function (opt, resolve) {
          var _this = this;
          this.callInternalAPI('getBusinessAuth', {
              scopeNicks: ['aliaddress'],
          }, function (res) {
              if (res &&
                  res.authSuccessScopes &&
                  res.authSuccessScopes.length &&
                  res.authSuccessScopes.indexOf('aliaddress') > -1) {
                  _this.callScopedBridge('startBizService', {
                      name: 'shopping-address',
                      param: JSON.stringify({
                          sceneCode: 'TINY-APP',
                          mode: 'openJsapi',
                      }),
                  }, resolve);
              }
              else {
                  resolve({
                      error: 4,
                      errorMessage: '无权调用该接口',
                  });
              }
          });
      },
      topNS: true,
  };
  var openCardList = {
      b: function (opt) {
          deleteAB(opt);
          return makeOpt(opt, 'lb', 'm');
      },
      m: 'startApp',
      // callback: false,
      topNS: true,
  };
  var openVoucherList = {
      b: function (opt) {
          deleteAB(opt);
          return makeOpt(opt, 'lb', 'c');
      },
      m: 'startApp',
      // callback: false,
      topNS: true,
  };
  var openTicketList = {
      b: function (opt) {
          deleteAB(opt);
          return makeOpt(opt, 'lb', 't');
      },
      m: 'startApp',
      // callback: false,
      topNS: true,
  };
  var openCardDetail = {
      b: function (opt) {
          mapping(opt, {
              passId: 'p',
          });
          if (opt.b) {
              delete opt.b;
          }
          return {
              appId: bizAppId,
              param: __assign({ b: 'm' }, opt),
          };
      },
      m: 'startApp',
      // callback: false,
      topNS: true,
  };
  var openVoucherDetail = {
      b: function (opt) {
          mapping(opt, {
              passId: 'p',
          });
          if (opt.b) {
              delete opt.b;
          }
          return {
              appId: bizAppId,
              param: __assign({ b: 'c' }, opt),
          };
      },
      m: 'startApp',
      // callback: false,
      topNS: true,
  };
  var openTicketDetail = {
      b: function (opt) {
          mapping(opt, { passId: 'p' });
          if (opt.b) {
              delete opt.b;
          }
          return { appId: bizAppId, param: __assign({ b: 't' }, opt) };
      },
      m: 'startApp',
      // callback: false,
      topNS: true,
  };
  var openMerchantCardList = {
      b: function (opt) {
          deleteAB(opt);
          return makeOpt(opt, 'lb', 'm');
      },
      m: 'startApp',
      // callback: false,
      topNS: true,
  };
  var openMerchantVoucherList = {
      b: function (opt) {
          deleteAB(opt);
          return makeOpt(opt, 'lb', 'c');
      },
      m: 'startApp',
      // callback: false,
      topNS: true,
  };
  var openMerchantTicketList = {
      b: function (opt) {
          deleteAB(opt);
          return makeOpt(opt, 'lb', 't');
      },
      m: 'startApp',
      // callback: false,
      topNS: true,
  };
  var openKBVoucherDetail = {
      b: function (opt) {
          if (opt.target) {
              delete opt.target;
          }
          if (opt.type) {
              delete opt.type;
          }
          return { appId: '20000238', param: __assign({ target: 'commodity', type: 'market' }, opt) };
      },
      m: 'startApp',
      // callback: false,
      topNS: true,
  };
  var navigateToCouponDetail = {
      a: function (res) {
          if (res.resultStatus) {
              switch (res.resultStatus) {
                  case '9000':
                      break;
                  case '6001':
                      res.errorMessage = res.errMsg || '用户取消操作';
                      res.error = '6001';
                      break;
                  case '6002':
                      res.errorMessage = res.errMsg || '网络异常';
                      res.error = '6002';
                      break;
                  case '4000':
                      res.errorMessage = res.errMsg || '系统异常';
                      res.error = '4000';
                      break;
                  default:
                      res.errorMessage = res.errMsg || '未知异常';
                      res.error = res.resultStatus;
                      break;
              }
              delete res.resultStatus;
              if (res.errMsg) {
                  delete res.errMsg;
              }
          }
      },
      b: function (opt) {
          return {
              name: 'coupon-detail',
              param: JSON.stringify(opt),
          };
      },
      m: 'startBizService',
      topNS: true,
  };
  var paySignCenter = {
      b: function (opt) {
          return {
              name: 'deduct',
              param: JSON.stringify({
                  sign_params: opt.signStr,
              }),
          };
      },
      m: 'startBizService',
      topNS: true,
  };
  var zmCreditBorrow = {
      b: function (opt) {
          return {
              name: 'zm-borrow',
              param: JSON.stringify(__assign({}, opt)),
          };
      },
      m: 'startBizService',
      topNS: true,
  };
  var textRiskIdentification = {
      topNS: true,
  };
  var openCarService = {
      v: function (opt) {
          if (!('serviceId' in opt)) {
              return {
                  error: 2,
                  errorMessage: 'serviceId is required',
              };
          }
          else if (typeof opt.serviceId === 'number') {
              return {
                  error: 2,
                  errorMessage: "serviceId is 'String' type",
              };
          }
      },
      b: function (opt) {
          switch (opt.serviceId) {
              case '0': // 保养服务
                  opt.serviceId = 'CARLIFE016';
                  break;
              case '1': // 爱车估值
                  opt.serviceId = 'CARLIFE020';
                  break;
              case '2': // 加油充值
                  opt.serviceId = 'CARLIFE011';
                  break;
          }
      },
      d: function (opt, resolve) {
          var _this = this;
          var doOpenCarService = function (addressCode, serviceId) {
              var url = "https://mycar-vbizplatformsit.alipay-eco.com/vbizplatform/category/index?cityCode=".concat(addressCode, "&serviceId=").concat(serviceId);
              _this.callScopedBridge('startApp', {
                  appId: '20000919',
                  param: {
                      url: url,
                  },
              });
          };
          if (opt.addressCode) {
              doOpenCarService(opt.addressCode, opt.serviceId);
          }
          else {
              this.callDefaultBridge('getCurrentLocation', {
                  bizType: this.getEnvAppId(),
                  cacheTimeout: 3600,
                  requestType: 1,
              }, function (res) {
                  if (res.error) {
                      res.error = 2;
                      res.errorMessage = 'addressCode is required';
                      resolve(res);
                  }
                  else {
                      doOpenCarService(res.cityAdcode, opt.serviceId);
                  }
              });
          }
      },
      topNS: true,
  };
  var openChatWindow = {
      v: function (opt) {
          if (!('userId' in opt)) {
              return {
                  error: 2,
                  errorMessage: 'userId is required',
              };
          }
          else if (typeof opt.userId !== 'string') {
              return {
                  error: 2,
                  errorMessage: "userId is 'String' type",
              };
          }
      },
      b: function (opt) {
          return {
              appId: '20000167',
              param: {
                  returnAppId: 'back',
                  tUserId: opt.userId,
                  tUserType: '1',
              },
          };
      },
      m: 'startApp',
      topNS: true,
  };
  var startZMCreditRent = {
      b: function (opt) {
          return {
              name: 'credit-rent',
              param: JSON.stringify(__assign({ creditRentType: 'rent' }, opt)),
          };
      },
      m: 'startBizService',
      topNS: true,
  };
  var zmRentTransition = {
      b: function (opt) {
          return {
              name: 'rent-transition',
              param: JSON.stringify(__assign({ creditRentType: 'signPay' }, opt)),
          };
      },
      m: 'startBizService',
      topNS: true,
  };
  var chooseInvoiceTitle = {
      d: function (opt, resolve) {
          this.callScopedBridge('startBizService', {
              name: 'invoice-title',
              param: JSON.stringify(opt),
          }, resolve);
      },
      topNS: true,
  };
  var zmFreeDeposit = {
      d: function (opt, resolve) {
          this.callScopedBridge('startBizService', {
              name: 'zmep-freedeposit',
              param: JSON.stringify(opt),
          }, resolve);
      },
      topNS: true,
  };
  function checkPermission(callBridge, url, cb) {
      var reg = /^(\w+):\/\//;
      callBridge('configService.getConfig', {
          configKey: 'APPX_OPENTAOBAO_IN_BROWSER',
      }, function (res) {
          var perError = {
              error: 4,
              errorMessage: '无权调用该接口',
          };
          if (res.configKey) {
              var config = void 0;
              try {
                  config = JSON.parse(res.configKey);
              }
              catch (e) {
                  console.error(e);
              }
              var hasPermission = false;
              if (Array.isArray(config)) {
                  if (url) {
                      var urlMatch = url.match(reg);
                      var scheme = urlMatch && urlMatch[1];
                      if ((scheme && config.indexOf(scheme) > -1) || config.indexOf('*') > -1) {
                          hasPermission = true;
                      }
                  }
              }
              if (hasPermission) {
                  cb({ success: true });
              }
              else {
                  cb(perError);
              }
              // 拉不到开关值，认为是有权限
          }
          else {
              cb({ success: true });
          }
      });
  }
  var openTaobao = {
      d: function (finalOpt, resolve) {
          var _this = this;
          var isLite = finalOpt.isLite;
          this.callDefaultBridge('isInstalledApp', {
              packagename: isLite ? 'com.taobao.litetao' : 'com.taobao.taobao',
              scheme: isLite ? 'taobaolite://' : 'taobao://',
          }, function (result) { return __awaiter(_this, void 0, void 0, function () {
              var url, login, hasPermission, downloadUrl;
              var _this = this;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          url = finalOpt.url;
                          login = finalOpt.login;
                          if (!('installed' in result)) { return [3 /*break*/, 2]; }
                          return [4 /*yield*/, new Promise(function (resolve) {
                                  return checkPermission(_this.callDefaultBridge.bind(_this), finalOpt.url, resolve);
                              })];
                      case 1:
                          hasPermission = _a.sent();
                          if (hasPermission.error) {
                              return [2 /*return*/];
                          }
                          if (result.installed) {
                              if (login) {
                                  this.callDefaultBridge('getLoginToken', {}, function (res) {
                                      var loginToken = null;
                                      var encrypted = false;
                                      if ('token' in res && res.token !== '') {
                                          loginToken = res.token;
                                          encrypted = res.encrypted;
                                      }
                                      if (loginToken) {
                                          url += "&loginToken=".concat(loginToken, "&tokenEncrypted=").concat(encrypted);
                                      }
                                      _this.callDefaultBridge('openInBrowser', {
                                          url: url,
                                      });
                                  });
                              }
                              else {
                                  this.callDefaultBridge('openInBrowser', {
                                      url: url,
                                  });
                              }
                          }
                          else {
                              downloadUrl = isLite
                                  ? 'https://pages.tmall.com/wow/sale/act/download-page-new'
                                  : 'https://h5.m.taobao.com/bcec/downloadTaobao.html';
                              this.callDefaultBridge('openInBrowser', {
                                  url: "".concat(downloadUrl).concat(typeof finalOpt.extraQuery === 'string' ? "?".concat(finalOpt.extraQuery) : ''),
                              });
                          }
                          _a.label = 2;
                      case 2: return [2 /*return*/];
                  }
              });
          }); });
      },
      topNS: true,
  };
  // tslint:disable-next-line
  var __openLifePayment = {
      // 暂时不开放
      v: function (opt) {
          if (!('instId' in opt)) {
              return {
                  error: 2,
                  errorMessage: 'addressCode and instId is required',
              };
          }
          else if (typeof opt.addressCode === 'number' || typeof opt.instId === 'number') {
              return {
                  error: 2,
                  errorMessage: "addressCode and instId is 'String' type",
              };
          }
      },
      d: function (opt, resolve) {
          var _this = this;
          var doOpenLifePayment = function (addressCode, cityName, instId) {
              var url = "/www/setNewAccount.htm?subBizType=ELECTRIC&adcode=".concat(addressCode, "&city=").concat(cityName, "&instId=").concat(instId);
              _this.callScopedBridge('startApp', {
                  appId: '20000193',
                  param: {
                      url: url,
                  },
              });
          };
          if (opt.addressCode && opt.cityName) {
              doOpenLifePayment(opt.addressCode, opt.cityName, opt.instId);
          }
          else {
              this.callDefaultBridge('getCurrentLocation', {
                  bizType: this.getEnvAppId(),
                  cacheTimeout: 3600,
                  requestType: 1,
              }, function (res) {
                  if (res.error) {
                      res.error = 2;
                      res.errorMessage = 'addressCode is required';
                      resolve(res);
                  }
                  else {
                      doOpenLifePayment(res.cityAdcode, encodeURIComponent(res.city), opt.instId);
                  }
              });
          }
      },
      topNS: true,
  };

  var cancelFollowLifestyle = {
      m: 'removeFollow',
  };
  var isFollowLifestyle = {
      m: 'getPPFollowStatus',
      b: function (opt) {
          opt.publicIds = [opt.publicId];
      },
      a: function (res, opt) {
          var publicId = opt.publicId;
          res.followed = res[publicId] && res[publicId] === 'followed';
      },
  };
  var openURL = {
      m: 'navigateToAlipayPage',
      v: function (opt) {
          if (!/^(https?|alipays):\/\//i.test(opt.url)) {
              return {
                  error: 2,
                  errorMessage: '参数无效',
              };
          }
      },
      b: function (opt) {
          return { path: opt.url };
      },
      a: function (res) {
          if (res.error == 2) {
              res.error = 60002;
              res.errorMessage = '目标地址不在白名单';
          }
          else if (res.errorMsg) {
              res.errorMessage = res.errorMsg;
          }
          delete res.errorMsg;
      },
  };
  var openAlipayApp = {
      m: 'navigateToAlipayPage',
      b: function (opt) {
          var appCode = opt.appCode, appParams = opt.appParams;
          return { appCode: appCode, appParams: appParams };
      },
      a: function (res) {
          if (res.error == 2) {
              res.errorMessage = '参数无效';
          }
          else if (res.errorMsg) {
              res.errorMessage = res.errorMsg;
          }
          delete res.errorMsg;
      },
  };
  var navigateToAlipayPage = {};
  var preventCheat = {
      d: function (finalOpt, resolve) {
          this.callScopedBridge('tinyRpc', {
              type: 'riskgo',
              requestData: [
                  {
                      pid: finalOpt.pid || '',
                      appId: this.getEnvAppId() || '',
                      biz_context: Object.assign({}, finalOpt.bizContext || {}),
                  } ],
          }, resolve);
      },
  };
  var nsf = {
      d: function (finalOpt, resolve) {
          this.callScopedBridge('tinyRpc', {
              type: 'riskgo',
              requestData: [
                  {
                      pid: finalOpt.pid || '',
                      appId: this.getEnvAppId() || '',
                      biz_context: Object.assign({}, finalOpt.bizContext || {}, { service: 'nsf' }),
                  } ],
          }, resolve);
      },
  };
  var imgRisk = {
      d: function (finalOpt, resolve) {
          this.callScopedBridge('tinyRpc', {
              type: 'riskgo',
              requestData: [
                  {
                      pid: finalOpt.pid || '',
                      appId: this.getEnvAppId() || '',
                      biz_context: Object.assign({}, finalOpt.bizContext || {}, { service: 'img_risk_infosec' }),
                  } ],
          }, resolve);
      },
  };
  var imgRiskCallback = {
      d: function (finalOpt, resolve) {
          this.callScopedBridge('tinyRpc', {
              type: 'riskgo',
              requestData: [
                  {
                      pid: finalOpt.pid || '',
                      appId: this.getEnvAppId() || '',
                      biz_context: Object.assign({}, finalOpt.bizContext || {}, { service: 'img_risk_infosec' }),
                  } ],
          }, resolve);
      },
  };
  var xnnOcr = {
      d: function (finalOpt, resolve) {
          this.callScopedBridge('startBizService', {
              name: 'xnn-ocr',
              param: JSON.stringify(finalOpt),
          }, resolve);
      },
  };
  var navigateToFinance = {
      d: function (opt) {
          opt.appId = this.getEnvAppId();
          this.callInternalAPI('startApp', {
              appId: '68687205',
              param: {
                  url: "/www/index.html?options=".concat(encodeURIComponent(JSON.stringify(opt))),
              },
          });
      },
  };
  var subscribeMsgbox = {};

  var updateAlipayClient = {};

  var getVerifyEnvData = {
      d: function (_opt, resolve) {
          this.callScopedBridge('verifyIdentity', {
              action: 'getEnvData',
          }, resolve);
      },
      a: function (res) {
          if (res.actionResult) {
              try {
                  var actionResult = JSON.parse(res.actionResult);
                  Object.assign(res, actionResult);
                  delete res.actionResult;
                  delete res.action;
              }
              catch (e) {
                  res = {
                      error: 0,
                      errorMessage: '获取核身环境异常',
                  };
              }
          }
          else {
              res = {
                  error: 0,
                  errorMessage: '获取核身环境异常',
              };
          }
      },
  };
  var startVerifyIdentity = {
      d: function (opt, cb) {
          var params = {
              verifyId: opt.verifyId,
              verifyType: opt.verifyType,
          };
          if (opt.moduleData) {
              params.moduleData = opt.moduleData;
          }
          this.callScopedBridge('verifyIdentity', params, cb);
      },
      a: function (res) {
          if (res && res.code === '1000') {
              delete res.code;
          }
          else {
              mapping(res, {
                  code: 'error',
              });
              res.errorMessage = '调用核身流程异常';
          }
      },
  };

  var iotCreateService = {
      topNS: true,
  };
  var iotCheckService = {
      topNS: true,
  };

  var openOtherApplication = {};

  function handleResponse(callback, result, isStr) {
      if (typeof callback !== 'function') {
          return;
      }
      if (result && result.status === 'success') {
          if (result.data) {
              if (isStr) {
                  callback(result.data);
              }
              else {
                  try {
                      var data = JSON.parse(result.data);
                      callback(data);
                  }
                  catch (e) {
                      callback({ err: '解析失败', response: result.data });
                  }
              }
          }
          else
              { callback({ err: '容器返回空' }); }
      }
      else
          { callback({ err: '容器异常' }); }
  }
  function fillspm(spmAPos, spmBPos, spmId) {
      if (spmId === void 0) { spmId = ''; }
      var spmArr = spmId.split('.');
      if (spmArr.length > 2) {
          return spmId;
      }
      return "".concat(spmAPos, ".").concat(spmBPos, ".").concat(spmId);
  }
  function strToObj(str, spliter) {
      if (spliter === void 0) { spliter = '^'; }
      if (typeof str !== 'string') {
          return null;
      }
      var strList = str.split(spliter);
      if (str.indexOf('=') === -1) {
          // FIXME
          return strList;
      }
      var strLen = strList.length;
      var strItem;
      var strItemList;
      var result = {};
      for (var strIdx = 0; strIdx < strLen; strIdx++) {
          strItem = strList[strIdx];
          if (strItem) {
              strItemList = strItem.split('=');
              result[strItemList[0]] = strItemList[1] || '';
          }
      }
      return result;
  }
  var TracertTa = /** @class */ /*#__PURE__*/ (function () {
      function TracertTa(_option) {
          this._option = _option;
          this.bizType = 'common';
          this.logLevel = 2;
          this.chInfo = '';
          this.scm = '';
          this.url = '';
          this.mdata = {};
          this.debug = false;
          this.autoLogPv = false;
          this.isTraced = false;
          this.trace = false;
          this.ready = false;
          // 未准备好时候的缓存数组
          this.apiCacheList = [];
          this.calledLogPv = false;
          if (!_option.spmAPos && !_option.spmBPos) {
              throw new Error('实例化Tracert失败，SPM缺失');
          }
          // 保持 assign ，避免业务挂了别的东西上来被丢了
          objectAssign(this, _option);
      }
      TracertTa.prototype._setParams = function (actionType, params, scmId) {
          if (params === void 0) { params = {}; }
          if (!params)
              { return; }
          var pageParams = {};
          var extraParams = {};
          if (typeof params === 'string') {
              // 老接口格式设置chinfo与scm参数
              pageParams.chinfo = params || '';
              pageParams.scm = scmId || '';
          }
          if (typeof params === 'object') {
              // 新接口同名，通过统一params设置
              var _a = params.newChinfo, newChinfo = _a === void 0 ? '' : _a, _b = params.chinfo, chinfo = _b === void 0 ? '' : _b, _c = params.entityId, entityId = _c === void 0 ? '' : _c, _d = params.scm, scm = _d === void 0 ? '' : _d, _e = params.tracestep, tracestep = _e === void 0 ? 3 : _e, isforce = params.isforce;
              if (newChinfo)
                  { pageParams.newChinfo = newChinfo; } // 流量位名称
              if (chinfo)
                  { pageParams.chinfo = chinfo; } // 渠道名称
              pageParams.scm = entityId || scm || ''; // 投放内容
              extraParams.tracestep = tracestep; // 透传步数，缺省为3
              if (isforce)
                  { extraParams.isforce = '1'; }
          }
          getCallBridge(this)('handleLoggingAction', __assign({ actionType: actionType, data: JSON.stringify(pageParams) }, extraParams));
      };
      TracertTa.prototype._setChinfoChain = function (actionType, params) {
          if (params === void 0) { params = {}; }
          var data = {};
          var newChinfo = params.newChinfo || '';
          var chInfo = params.chInfo || params.chinfo || '';
          var scm = params.entityId || params.scm || '';
          if (newChinfo)
              { data.newChinfo = newChinfo; }
          if (chInfo)
              { data.chinfo = chInfo; }
          if (scm)
              { data.scm = scm; }
          getCallBridge(this)('handleLoggingAction', {
              actionType: actionType,
              data: JSON.stringify(data),
              type: params.type || 'click',
          });
      };
      TracertTa.prototype._setNewChinfo = function (actionType, params) {
          if (params === void 0) { params = {}; }
          var pageParams = {};
          var _a = params.newChinfo, newChinfo = _a === void 0 ? '' : _a, _b = params.scm, scm = _b === void 0 ? '' : _b;
          if (newChinfo) {
              pageParams.newChinfo = newChinfo; // 流量位名称
              if (scm)
                  { pageParams.scm = scm; } // 投放内容
              getCallBridge(this)('handleLoggingAction', {
                  actionType: actionType,
                  params: pageParams,
              });
          }
      };
      TracertTa.prototype._init = function (result) {
          var url = result.url, uepReportDataSwitch = result.uepReportDataSwitch, appVersion = result.appVersion, version = result.version, appId = result.appId, ap_framework_scheme = result.ap_framework_scheme, query = result.query;
          // 获取需要的启动参数
          var chInfo = result.chInfo || result.chinfo || this.getValueOfUrl('chInfo', url) || this.getValueOfUrl('chinfo', url) || '';
          var scm = result.scm || this.getValueOfUrl('scm', url) || '';
          var trace = !!(result.trace || this.getValueOfUrl('trace', url) || '');
          // 存储需要的参数, 同时将Tracert置为可以运行的状态
          this.set({
              chInfo: this.chInfo || chInfo,
              scm: this.scm || scm,
              trace: trace,
              ready: true,
              uepReportDataSwitch: uepReportDataSwitch,
              appVersion: version || appVersion || '',
              appId: appId,
              apFrameworkScheme: ap_framework_scheme,
              query: query,
              url: url,
          });
      };
      TracertTa.prototype.getValueOfUrl = function (name, url) {
          var result = '';
          try {
              var pattern = new RegExp("(?=\\?|\\&|\\b|^)".concat(name, "\\=(.+?)(?=\\&|$)"));
              var execResult = pattern.exec(url);
              result = execResult ? "".concat(execResult[1]) : '';
              result = decodeURIComponent(result);
          }
          catch (e) {
              // if (console) {
              //   console.warn('解析启动参数中的URL失败');
              // }
          }
          return result;
      };
      TracertTa.prototype.init = function (runtime) {
          var _this = this;
          var uepReportDataSwitch = runtime.getUepReportDataSwitch();
          if (runtime.shouldUseStartupParamsAsync()) {
              runtime.getStartupParamsAsync(function (startupParams) {
                  _this._init(__assign(__assign({}, startupParams), { uepReportDataSwitch: uepReportDataSwitch }));
                  for (var _i = 0, _a = _this.apiCacheList; _i < _a.length; _i++) {
                      var _b = _a[_i], fn = _b[0], args = _b[1];
                      _this.call.apply(_this, __spreadArray$1([fn], args, false));
                  }
              });
          }
          else {
              this._init(__assign(__assign({}, runtime.getStartupParamsSync()), { uepReportDataSwitch: uepReportDataSwitch }));
          }
      };
      TracertTa.prototype.get = function (key) {
          return this[key];
      };
      TracertTa.prototype.set = function (opt) {
          if (opt === void 0) { opt = {}; }
          var options = opt;
          // mdata 为特殊参数 制作合并不做替换
          if (typeof options.mdata === 'object') {
              options.mdata = __assign(__assign({}, this.mdata), options.mdata);
          }
          objectAssign(this, opt);
      };
      TracertTa.prototype.start = function (opt) {
          if (opt === void 0) { opt = {}; }
          this.set(opt);
          // 判断logpv
          if (this.autoLogPv) {
              this.call('logPv');
          }
      };
      TracertTa.prototype.logPv = function (options) {
          var _this = this;
          this.call('send', 'reportData', function () {
              var _a = _this, spmAPos = _a.spmAPos, spmBPos = _a.spmBPos, bizType = _a.bizType, url = _a.url, mdata = _a.mdata, chInfo = _a.chInfo;
              var obj = {
                  spm: {
                      bizType: bizType,
                      url: url,
                      chInfo: chInfo,
                      isSPM: true,
                      spmId: "".concat(spmAPos, ".").concat(spmBPos),
                  },
                  spmDetail: __assign(__assign({ chInfo: chInfo, timestamp: Date.now() }, mdata), options),
              };
              return obj;
          });
          this.calledLogPv = true;
      };
      TracertTa.prototype.click = function (spmId, options, extraParams) {
          var _this = this;
          this.call('send', 'remoteLog', function () {
              var _a = _this, chInfo = _a.chInfo, bizType = _a.bizType, logLevel = _a.logLevel, url = _a.url, mdata = _a.mdata;
              var obj = {
                  type: 'monitor',
                  bizType: bizType,
                  logLevel: logLevel,
                  param1: url,
                  param4: __assign(__assign({ chInfo: chInfo }, mdata), options),
                  actionId: 'clicked',
                  spmId: fillspm(_this.spmAPos, _this.spmBPos, spmId),
              };
              if (extraParams && typeof extraParams === 'object' && extraParams.param5) {
                  obj.param5 = extraParams.param5;
                  obj.newScm = extraParams.newScm;
              }
              return obj;
          });
      };
      TracertTa.prototype.expo = function (spmId, options, extraParams) {
          var _this = this;
          this.call('send', 'remoteLog', function () {
              var _a = _this, chInfo = _a.chInfo, bizType = _a.bizType, logLevel = _a.logLevel, url = _a.url, mdata = _a.mdata;
              var obj = {
                  type: 'monitor',
                  bizType: bizType,
                  logLevel: logLevel,
                  param1: url,
                  param4: __assign(__assign({ chInfo: chInfo }, mdata), options),
                  actionId: 'exposure',
                  spmId: fillspm(_this.spmAPos, _this.spmBPos, spmId),
              };
              if (extraParams && typeof extraParams === 'object' && extraParams.param5) {
                  obj.param5 = extraParams.param5;
                  obj.newScm = extraParams.newScm;
              }
              return obj;
          });
      };
      TracertTa.prototype.send = function (fn, getOption) {
          var _a = this, debug = _a.debug, uepReportDataSwitch = _a.uepReportDataSwitch;
          var options = (getOption.call(this) || {});
          if (debug && console) {
              console.log(fn, options);
          }
          if (fn === 'remoteLog') {
              // 新增 scm 和 eventTime 字段，scm 从 param5 中解析
              var typedOptions = options;
              if (typedOptions.param5) {
                  typedOptions.scm = strToObj(typedOptions.param5);
              }
              typedOptions.eventTime = Date.now();
          }
          if (!uepReportDataSwitch) {
              if (fn === 'reportData') {
                  getCallBridge(this)('pageMonitor', { actionType: 'end' });
              }
              getCallBridge(this)(fn, options);
              // 若为页面埋点，初始化全引导
              if (fn === 'reportData') {
                  this.call('checkFullLinkParams');
              }
              return;
          }
          if (fn === 'reportData') {
              this.call('reportUEPData', options);
              this.call('checkFullLinkParams');
              return;
          }
          this.call('handleUEPEvent', options);
      };
      TracertTa.prototype.handleUEPEvent = function (params) {
          var type = params.type, _a = params.actionId, actionId = _a === void 0 ? type : _a;
          var param4Obj = typeof params.param4 === 'string'
              ? strToObj(params.param4)
              : typeof params.param4 === 'object'
                  ? params.param4
                  : null;
          var uep = {
              type: actionId === "clicked" /* ETracertTaEventType.CLICK */ ? 'click' : actionId,
              timestamp: params.eventTime,
              spm: params.spmId,
              scm: params.newScm || params.scm,
              params: __assign({}, param4Obj),
              bizCode: params.bizType,
              combineType: 'manual',
          };
          delete params.newScm;
          getCallBridge(this)('handleUEPEvent', { combineEventArray: [__assign(__assign({}, params), { uep: uep })] });
      };
      TracertTa.prototype.reportUEPData = function (options) {
          var _a = this, appVersion = _a.appVersion, appId = _a.appId, apFrameworkScheme = _a.apFrameworkScheme, query = _a.query;
          var spm = options.spm, spmDetail = options.spmDetail;
          var _params = __assign(__assign({}, options), { type: 'tiny', update: !this.calledLogPv, uep: {
                  timestamp: Date.now(),
                  url: spm.url,
                  spm: spm.spmId,
                  bizCode: spm.bizType,
                  appVersion: appVersion,
                  appId: appId,
                  combineType: 'manual',
                  sdkParams: {
                      sdkVersion: kAppxVersion,
                      scheme: apFrameworkScheme,
                      query: query,
                  },
                  params: spmDetail,
              } });
          // logPv(_params,this);
          getCallBridge(this)('reportUEPData', _params);
      };
      /**
       * 通用唤起方法, 可以唤起Tracert所有方法，用于管理生命周期
       */
      TracertTa.prototype.call = function (method) {
          var arguments$1 = arguments;

          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments$1[_i];
          }
          var result = null;
          if (!this.ready) {
              // 页面没加载完成，缓存
              this.apiCacheList.push([method, args]);
          }
          else if (this[method] && typeof this[method] === 'function') {
              try {
                  var fn = this[method];
                  result = fn.apply(this, args);
              }
              catch (e) {
                  var methodName = method === 'send' ? args[0] : method;
                  getCallRenderMethod(this)('reportTracertErrorToYuyan', [
                      {
                          mode: 'TA',
                          type: methodName,
                          message: e.message,
                          spma: this.spmAPos,
                          spmb: this.spmBPos,
                      } ], function () { });
              }
          }
          return result;
      };
      TracertTa.prototype.checkFullLinkParams = function () {
          var _this = this;
          var _a = this, trace = _a.trace, isTraced = _a.isTraced, chinfo = _a.chInfo, scm = _a.scm;
          if (trace && !isTraced) {
              getCallBridge(this)('handleLoggingAction', {
                  actionType: 'setPageParams',
                  data: JSON.stringify({ chinfo: chinfo, scm: scm }),
              }, function () {
                  _this.set({ isTraced: true });
              });
          }
      };
      TracertTa.prototype.expoContent = function (spmId, scm, newChinfo, params, newScm) {
          if (spmId === void 0) { spmId = ''; }
          if (scm === void 0) { scm = ''; }
          if (newChinfo === void 0) { newChinfo = ''; }
          if (params === void 0) { params = {}; }
          if (newScm === void 0) { newScm = ''; }
          this.expo(spmId, params, { param5: "newChinfo=".concat(newChinfo, "^scm=").concat(scm || newScm), newScm: newScm });
      };
      TracertTa.prototype.clickContent = function (spmId, scm, newChinfo, params, newScm) {
          if (spmId === void 0) { spmId = ''; }
          if (scm === void 0) { scm = ''; }
          if (newChinfo === void 0) { newChinfo = ''; }
          if (params === void 0) { params = {}; }
          if (newScm === void 0) { newScm = ''; }
          this.click(spmId, params, { param5: "newChinfo=".concat(newChinfo, "^scm=").concat(scm || newScm), newScm: newScm });
      };
      TracertTa.prototype.setPageParams = function (params, scm) {
          this._setParams('setPageParams', params, scm);
      };
      TracertTa.prototype.setNextPageParams = function (params) {
          this._setParams('setNextPageParams', params);
      };
      TracertTa.prototype.appendChinfo = function (params) {
          if (params === void 0) { params = {}; }
          this._setChinfoChain('appendChinfo', params);
      };
      TracertTa.prototype.updateChinfo = function (params) {
          if (params === void 0) { params = {}; }
          this._setChinfoChain('updateChinfo', params);
      };
      TracertTa.prototype.getChinfoChain = function (callback, options) {
          var params = {
              actionType: 'getChinfoChain',
          };
          if (typeof options === 'boolean' && options) {
              params.isFiltered = '1';
          }
          if (typeof options === 'object') {
              if (options.isFirst) {
                  params.actionType = 'getFirstChinfo';
              }
              else if (options.isFiltered) {
                  params.isFiltered = '1';
              }
          }
          getCallBridge(this)('handleLoggingAction', params, function (result) {
              handleResponse(callback, result);
          });
      };
      TracertTa.prototype.getChinfoChainUUID = function (callback, options) {
          if (options === void 0) { options = {}; }
          var params = { actionType: 'getChinfoChainUUID' };
          if (options.isFiltered)
              { params.isFiltered = '1'; }
          if (options.bizName)
              { params.bizName = options.bizName; }
          getCallBridge(this)('handleLoggingAction', params, function (result) {
              handleResponse(callback, result, true);
          });
      };
      TracertTa.prototype.getCurrentPageParams = function (callback) {
          getCallBridge(this)('handleLoggingAction', {
              actionType: 'getCurrentPageParams',
          }, function (result) {
              handleResponse(callback, result);
          });
      };
      TracertTa.prototype.setCurrentPageNewChinfo = function (params) {
          if (params === void 0) { params = {}; }
          this._setNewChinfo('setCurrentPageNewChinfo', params);
      };
      TracertTa.prototype.setNextPageNewChinfo = function (params) {
          if (params === void 0) { params = {}; }
          this._setNewChinfo('setNextPageNewChinfo', params);
      };
      TracertTa.prototype.callRenderMethod = function (method, option, callback) {
          this.invokeRenderMethod(method, option, callback);
      };
      TracertTa.prototype.callBridge = function (method, option, callback) {
          this.invokeBridgeAsync(method, option, callback);
      };
      return TracertTa;
  }());
  function getCallBridge(instance) {
      return instance.callBridge;
  }
  function getCallRenderMethod(instance) {
      return instance.callRenderMethod;
  }

  function createTracertInstance(runtimeAPI, option) {
      var instance = new TracertTa(option);
      instance['callBridge'] = instance['callBridge'].bind(runtimeAPI);
      instance['callRenderMethod'] = instance['callRenderMethod'].bind(runtimeAPI);
      var init = instance.init.bind(instance, runtimeAPI);
      instance.init = init;
      init();
      return instance;
  }

  function createPendingCallbacks() {
      return {
          startupParams: undefined,
          callbacks: [],
      };
  }
  var createTracert = {
      fnOptionIndex: false,
      fn: function (config) {
          // 生成 tracert
          var callContext = this;
          var extraInfos = this.getBridgeExtraInfo();
          var runtimeEnv = callContext.runtime().getEnv();
          var alipayVersionSequence = runtimeEnv.alipayVersionSequence;
          var isIOS = this.getEnvPlatformIOS();
          var tracertTa = createTracertInstance({
              getStartupParamsAsync: function (callback) {
                  var pendingCallbacks = extraInfos.tracertAsyncStartupParams;
                  if (!pendingCallbacks) {
                      pendingCallbacks = extraInfos.tracertAsyncStartupParams = createPendingCallbacks();
                  }
                  if (pendingCallbacks.startupParams) {
                      callback(__assign({}, pendingCallbacks.startupParams));
                  }
                  else {
                      pendingCallbacks.callbacks.push(callback);
                      callContext.callDefaultBridge('getStartupParams', {}, function (result) {
                          pendingCallbacks.startupParams = result;
                          for (var _i = 0, _a = pendingCallbacks.callbacks; _i < _a.length; _i++) {
                              var cb = _a[_i];
                              cb(__assign({}, result));
                          }
                      });
                  }
              },
              getStartupParamsSync: function () {
                  return __assign({}, runtimeEnv.originalStartupParams);
              },
              invokeBridgeAsync: function (method, option, callback) {
                  callContext.callDefaultBridge(method, option, callback);
              },
              shouldUseStartupParamsAsync: function () {
                  return isIOS && alipayVersionSequence <= 10002023 /* EBridgeAlipayVersionSequence.v_10_2_23 */;
              },
              invokeRenderMethod: function (method, option, callback) {
                  var instance = callContext.runtime().getNav().getTopInstance();
                  if (instance) {
                      instance.invokeRenderMethod(method, option, callback);
                  }
              },
              getUepReportDataSwitch: function () {
                  var switchManager = callContext.runtime().getSwitchManager();
                  return (switchManager && switchManager.get("uepReportDataSwitch" /* ESharedAppxSwitchManagerName.Uep */));
              },
          }, config);
          return tracertTa;
      },
  };

  var reportServiceEvent = {
      d: function (serviceEventOption, resolve) {
          var nav = this.runtime().getNav();
          var page = nav.getTopInstance();
          if (!page) {
              resolve({
                  error: 1,
                  errorMessage: 'page is not existed when execute reportServiceEvent',
              });
              return;
          }
          this.callInternalAPI('handleLoggingAction', {
              actionType: 'reportTorchEvent',
              params: {
                  bizName: 'service',
                  convType: '10348',
                  extData: __assign(__assign({}, serviceEventOption), { appId: this.getEnvAppId(), path: nav.getTopPagePath(), query: page.getQuery() }),
              },
          }, function (res) {
              if (res && res.error) {
                  resolve(res);
                  return;
              }
              resolve({});
          });
      },
  };

  /**
   * @example
   * ```js
   * my.ap.reportUIError({
   *   title: string,
   *   message: string,
   *   extInfo: Record<string, unknown>
   * })
   * ```
   */
  var reportUIError = {
      m: 'remoteLog',
      b: function (option) {
          var extInfo = option.extInfo, errorMessage = option.message, errorTitle = option.title;
          var param = __assign({ bizCode: 'developer', errorMessage: errorMessage, errorPageCode: '7002', errorTitle: errorTitle }, (typeof extInfo === 'object' ? extInfo : {}));
          var paramKeyValues = Object.keys(param)
              .map(function (k) { return "".concat(k, "=").concat(encodeURIComponent(param[k])); })
              .join('^');
          var finalParams = {
              actionId: 'exposure',
              bizType: 'H5Exception',
              param1: paramKeyValues,
              param2: '',
              param3: '',
              param4: '',
              seedId: 'PageErrorUI',
              type: 'error',
          };
          return finalParams;
      },
  };

  var openCreditEvaluation = {
      d: function (opts, resolve) {
          this.callDefaultBridge('startBizService', {
              name: 'openCreditEvaluation',
              param: JSON.stringify(opts),
          }, resolve);
      },
  };

  var kCacheTimeout4GetSystemInfo =  60000;
  var cacheOfGetSystemInfo = {
      key: 'jsApi_systemInfo',
      public: true,
      get: function (persistInfo, finalOption) {
          // 不是首页 或者 needCache 为 false，不走缓存流程
          if (!finalOption.isAppFirstPage || finalOption.needCache === false) {
              return;
          }
          if (!persistInfo.refreshTime) {
              persistInfo.refreshTime = Date.now();
          }
          if (persistInfo.cache && Date.now() - persistInfo.refreshTime < kCacheTimeout4GetSystemInfo) {
              return __assign({}, persistInfo.cache);
          }
      },
      update: function (persistInfo, finalOption, rawResult) {
          if (rawResult && typeof rawResult === 'object' && !('error' in rawResult)) {
              // 有效数据才进行缓存
              persistInfo.cache = __assign({}, rawResult);
              persistInfo.refreshTime = Date.now();
          }
      },
  };

  var cacheOfGetUserInfo = {
      key: 'jsApi_userInfo',
      public: true,
      get: function (persistInfo, finalOption) {
          if (persistInfo.cache) {
              return __assign({}, persistInfo.cache);
          }
      },
      update: function (persistInfo, finalOption, rawResult) {
          if (rawResult && typeof rawResult === 'object' && !('error' in rawResult)) {
              // 有效数据才进行缓存
              persistInfo.cache = __assign({}, rawResult);
          }
      },
  };

  var tradePay = {
      topNS: true,
  };
  var getUserInfo = {
      a: function (res) {
          mapping(res, {
              iconUrl: 'avatar',
          });
      },
      cache: cacheOfGetUserInfo,
      topNS: true,
  };
  var getAuthCode = {
      b: function (opt) {
          var _this = this;
          if (typeof opt.scopes === 'string') {
              opt.scopeNicks = [opt.scopes];
          }
          else if (Array.isArray(opt.scopes)) {
              opt.scopeNicks = opt.scopes;
          }
          else {
              opt.scopeNicks = ["auth_base" /* EGetAuthorizeScopeNicks.auth_base */];
          }
          delete opt.scopes;
          ifIsMiniProgramEnv(function () {
              var authCodeAPlusMapping = _this.runtime()
                  .getSwitchManager()
                  .get("authCodeMapping4Aplus" /* ESharedAppxSwitchManagerName.AuthCodeMapping4Aplus */);
              /**
               * 转换原则, 示例 authCodeAPlusMapping = {enable:true,mapping:{'USER_INFO':'auth_user'}}
               * - 如果只存在 USER_INFO, 不存在 auth_user, 那入参转为 auth_user, 出参转回 USER_INFO
               * - 如果存在 USER_INFO, 也存在 auth_user, 那入参只留 auth_user, 出参同时保留 USER_INFO 和 auth_user
               */
              if (authCodeAPlusMapping && authCodeAPlusMapping.enable && authCodeAPlusMapping.mapping) {
                  // 本期，必须开关读到才做转换（以免翻车），后面再改成默认开
                  var mapping_1 = authCodeAPlusMapping.mapping;
                  var finalScopNicks = [];
                  var reverseMappingInfo = void 0;
                  for (var _i = 0, _a = opt.scopeNicks; _i < _a.length; _i++) {
                      var scope = _a[_i];
                      // mapping 需要映射 USER_INFO
                      var hasMappingSource = Object.prototype.hasOwnProperty.call(mapping_1, scope);
                      if (hasMappingSource) {
                          var mappedTarget = mapping_1[scope];
                          // auth_user 是否也存在
                          var hasMappedTarget = opt.scopeNicks.indexOf(mappedTarget) >= 0;
                          if (!reverseMappingInfo) {
                              reverseMappingInfo = _this["_AuthCodeReverseMappingInfo" /* EBridgeContextPrivateKey.AuthCodeReverseMappingInfo */] = {};
                          }
                          reverseMappingInfo[mappedTarget] = {
                              mappingSource: scope,
                              hasMappedTarget: hasMappedTarget,
                          };
                          finalScopNicks.push(mappedTarget);
                      }
                      else {
                          // 不是命中配置，写入
                          finalScopNicks.push(scope);
                      }
                  }
                  opt.scopeNicks = finalScopNicks;
              }
          });
      },
      a: function (res) {
          var _this = this;
          mapping(res, {
              authcode: 'authCode',
          });
          ifIsMiniProgramEnv(function () {
              var reverseMappingInfo = _this["_AuthCodeReverseMappingInfo" /* EBridgeContextPrivateKey.AuthCodeReverseMappingInfo */];
              if (reverseMappingInfo) {
                  var authSuccessScopes = res.authSuccessScopes;
                  if (Array.isArray(authSuccessScopes)) {
                      var finalSuccessScopes = [];
                      for (var _i = 0, authSuccessScopes_1 = authSuccessScopes; _i < authSuccessScopes_1.length; _i++) {
                          var scope = authSuccessScopes_1[_i];
                          // scope == auth_user，不会存在 USER_INFO 被映射掉了
                          var shouldReverse = Object.prototype.hasOwnProperty.call(reverseMappingInfo, scope);
                          if (shouldReverse) {
                              var info = reverseMappingInfo[scope];
                              // 追加写入 USER_INFO
                              finalSuccessScopes.push(info.mappingSource);
                              if (info.hasMappedTarget) {
                                  // auth_user 也存在，也需要写入
                                  finalSuccessScopes.push(scope);
                              }
                          }
                          else {
                              // 不需要处理
                              finalSuccessScopes.push(scope);
                          }
                      }
                      res.authSuccessScopes = finalSuccessScopes;
                  }
                  var authErrorScopes = res.authErrorScopes;
                  if (authErrorScopes && typeof authErrorScopes === 'object') {
                      var finalErrorScopes = {};
                      for (var _a = 0, _b = Object.keys(authErrorScopes); _a < _b.length; _a++) {
                          var scope = _b[_a];
                          // scope == auth_user，不会存在 USER_INFO 被映射掉了
                          var shouldReverse = Object.prototype.hasOwnProperty.call(reverseMappingInfo, scope);
                          if (shouldReverse) {
                              var info = reverseMappingInfo[scope];
                              // 追加写入 USER_INFO
                              finalErrorScopes[info.mappingSource] = authErrorScopes[scope];
                              if (info.hasMappedTarget) {
                                  // auth_user 也存在，也需要写入
                                  finalErrorScopes[scope] = authErrorScopes[scope];
                              }
                          }
                          else {
                              // 不需要处理，保持 auth_user
                              finalErrorScopes[scope] = authErrorScopes[scope];
                          }
                      }
                      res.authErrorScopes = finalErrorScopes;
                  }
              }
          });
      },
      topNS: true,
  };
  var getAuthUserInfo = {
      a: function (res) {
          mapping(res, {
              nick: 'nickName',
              userAvatar: 'avatar',
          });
      },
      topNS: true,
  };
  var startZMVerify = {
      d: function (opt, cb) {
          this.callScopedBridge('startBizService', {
              name: 'zm-service',
              param: JSON.stringify({
                  bizNo: opt.bizNo,
                  zmType: 'zm-verify',
              }),
          }, cb);
      },
      topNS: true,
  };
  var ARScan = {
      d: function (opt, cb) {
          this.callScopedBridge('startApp', {
              appId: '10000007',
              param: {
                  clientVersion: '10.0.8',
                  selectedTab: 'ar',
                  showOthers: 'YES',
              },
          }, cb);
      },
      topNS: true,
  };
  var addCardAuth = {
      d: function (opt, cb) {
          this.callScopedBridge('startBizService', {
              name: 'add-card',
              param: JSON.stringify({
                  url: opt.url,
              }),
          }, cb);
      },
      topNS: true,
  };
  var openSetting = {
      topNS: true,
  };
  var getSetting = {
      topNS: true,
  };
  var startAPVerify = {
      d: function (opt, resolve) {
          this.callScopedBridge('startBizService', {
              name: 'open-certify',
              param: JSON.stringify(opt),
          }, resolve);
      },
      topNS: true,
  };
  var openCustomerService = {
      d: function (opt, resolve) {
          var tntInstId = opt.tntInstId, scene = opt.scene, alipayCardNo = opt.alipayCardNo, extInfo = opt.extInfo;
          if (!!tntInstId && !!scene) {
              this.callInternalAPI('startApp', {
                  appId: '2017112000050756',
                  param: {
                      page: "pages/cschat/cschat?tntInstId=".concat(tntInstId, "&scene=").concat(scene, "&alipayCardNo=").concat(alipayCardNo, "&extInfo=").concat(encodeURIComponent(extInfo)),
                  },
              }, resolve);
          }
          else {
              resolve({
                  error: 1,
                  errorMessage: '必填参数缺失',
              });
          }
      },
      topNS: true,
  };
  var getConfigService = {
      m: 'configService.getConfig',
      topNS: true,
  };
  var authorize = {
      b: function (opt) {
          if (typeof opt.scopes === 'string') {
              opt.scopeNicks = [opt.scopes];
          }
          else if (Array.isArray(opt.scopes)) {
              opt.scopeNicks = opt.scopes;
          }
          delete opt.scopes;
      },
      d: function (opt, cb) {
          this.callScopedBridge('getAuthorize', opt, cb);
      },
      topNS: true,
  };

  var ocr = {
      topNS: true,
  };



  var API4AP = {
      __proto__: null,
      chooseAddress: chooseAddress,
      getAddress: getAddress,
      openCardList: openCardList,
      openVoucherList: openVoucherList,
      openTicketList: openTicketList,
      openCardDetail: openCardDetail,
      openVoucherDetail: openVoucherDetail,
      openTicketDetail: openTicketDetail,
      openMerchantCardList: openMerchantCardList,
      openMerchantVoucherList: openMerchantVoucherList,
      openMerchantTicketList: openMerchantTicketList,
      openKBVoucherDetail: openKBVoucherDetail,
      navigateToCouponDetail: navigateToCouponDetail,
      paySignCenter: paySignCenter,
      zmCreditBorrow: zmCreditBorrow,
      textRiskIdentification: textRiskIdentification,
      openCarService: openCarService,
      openChatWindow: openChatWindow,
      startZMCreditRent: startZMCreditRent,
      zmRentTransition: zmRentTransition,
      chooseInvoiceTitle: chooseInvoiceTitle,
      zmFreeDeposit: zmFreeDeposit,
      openTaobao: openTaobao,
      __openLifePayment: __openLifePayment,
      cancelFollowLifestyle: cancelFollowLifestyle,
      isFollowLifestyle: isFollowLifestyle,
      openURL: openURL,
      openAlipayApp: openAlipayApp,
      navigateToAlipayPage: navigateToAlipayPage,
      preventCheat: preventCheat,
      nsf: nsf,
      imgRisk: imgRisk,
      imgRiskCallback: imgRiskCallback,
      xnnOcr: xnnOcr,
      navigateToFinance: navigateToFinance,
      subscribeMsgbox: subscribeMsgbox,
      updateAlipayClient: updateAlipayClient,
      getVerifyEnvData: getVerifyEnvData,
      startVerifyIdentity: startVerifyIdentity,
      iotCreateService: iotCreateService,
      iotCheckService: iotCheckService,
      openOtherApplication: openOtherApplication,
      createTracert: createTracert,
      reportServiceEvent: reportServiceEvent,
      reportUIError: reportUIError,
      openCreditEvaluation: openCreditEvaluation,
      tradePay: tradePay,
      getUserInfo: getUserInfo,
      getAuthCode: getAuthCode,
      getAuthUserInfo: getAuthUserInfo,
      startZMVerify: startZMVerify,
      ARScan: ARScan,
      addCardAuth: addCardAuth,
      openSetting: openSetting,
      getSetting: getSetting,
      startAPVerify: startAPVerify,
      openCustomerService: openCustomerService,
      getConfigService: getConfigService,
      authorize: authorize,
      ocr: ocr
  };

  var getSpecialEditionStateSync = {
      d: function () {
          var _a = this.runtime().getEnv().originalStartupParams.isSpecialEdition, isSpecialEdition = _a === void 0 ? '' : _a;
          if (isSpecialEdition === 'true') {
              return {
                  isSpecialEdition: true,
              };
          }
          return {
              isSpecialEdition: false,
          };
      },
  };



  var API4APSync = {
      __proto__: null,
      getSpecialEditionStateSync: getSpecialEditionStateSync
  };



  var API4APRoot = {
      __proto__: null,
      tradePay: tradePay,
      getUserInfo: getUserInfo,
      getAuthCode: getAuthCode,
      getAuthUserInfo: getAuthUserInfo,
      startZMVerify: startZMVerify,
      ARScan: ARScan,
      addCardAuth: addCardAuth,
      openSetting: openSetting,
      getSetting: getSetting,
      startAPVerify: startAPVerify,
      openCustomerService: openCustomerService,
      getConfigService: getConfigService,
      authorize: authorize,
      ocr: ocr,
      iotCreateService: iotCreateService,
      iotCheckService: iotCheckService,
      chooseAddress: chooseAddress,
      getAddress: getAddress,
      openCardList: openCardList,
      openVoucherList: openVoucherList,
      openTicketList: openTicketList,
      openCardDetail: openCardDetail,
      openVoucherDetail: openVoucherDetail,
      openTicketDetail: openTicketDetail,
      openMerchantCardList: openMerchantCardList,
      openMerchantVoucherList: openMerchantVoucherList,
      openMerchantTicketList: openMerchantTicketList,
      openKBVoucherDetail: openKBVoucherDetail,
      navigateToCouponDetail: navigateToCouponDetail,
      paySignCenter: paySignCenter,
      zmCreditBorrow: zmCreditBorrow,
      textRiskIdentification: textRiskIdentification,
      openCarService: openCarService,
      openChatWindow: openChatWindow,
      startZMCreditRent: startZMCreditRent,
      zmRentTransition: zmRentTransition,
      chooseInvoiceTitle: chooseInvoiceTitle,
      zmFreeDeposit: zmFreeDeposit,
      openTaobao: openTaobao,
      __openLifePayment: __openLifePayment,
      openOtherApplication: openOtherApplication
  };

  var showActionSheet = {
      m: 'actionSheet',
      v: function (opt) {
          if (!opt.items) {
              return {
                  error: '99',
                  errorMessage: 'items is required!',
              };
          }
      },
      b: function (opt) {
          mapping(opt, {
              cancelButtonText: 'cancelBtn%s',
              items: 'btns',
          });
          // 把按钮字段转成字符串，非字符串会导致钱包闪退
          if (Array.isArray(opt.btns)) {
              var btns = opt.btns;
              opt.btns = [];
              btns.forEach(function (item) { return opt.btns.push(item + ''); });
          }
          // 把取消按钮字段转成字符串，非字符串会导致 actionSheet 全屏
          if (!opt.cancelBtn) {
              opt.cancelBtn = '取消';
          }
      },
      a: function (res, opt) {
          if (Array.isArray(opt.btns) && res.index === opt.btns.length) {
              res.index = -1;
          }
      },
  };

  var kMediaBusiness = 'apm-h5';
  function handleResultSuccess(res, mappingError, successValue) {
      if (!('error' in res) && res.success === successValue) {
          res.error = mappingError;
      }
      delete res.success;
      return res;
  }
  // tslint:disable object-literal-sort-keys
  var startRecord = {
      m: 'startAudioRecord',
      b: function (opt) {
          var finalOpt = opt || {};
          mapping(finalOpt, {
              maxDuration: 'maxRecordTime%f',
              minDuration: 'minRecordTime%f',
          }, {
              maxDuration: opt.maxDuration || 60,
              minDuration: opt.minDuration || 1,
          });
          finalOpt.business = kMediaBusiness;
          return finalOpt;
      },
      a: function (res) {
          mapping(res, {
              // 不要改它们的顺序！！
              // 改了就崩了！！
              tempFilePath: 'apFilePath',
              identifier: 'apFilePath',
          });
      },
  };
  var stopRecord = {
      m: 'stopAudioRecord',
  };
  var cancelRecord = {
      m: 'cancelAudioRecord',
  };
  var playVoice = {
      m: 'startPlayAudio',
      b: function (opt) {
          mapping(opt, {
              filePath: 'identifier',
          });
          opt.business = kMediaBusiness;
      },
      a: function (res) {
          /**
           * @description 客户端代码均表示不存在 identifier 反馈字段
           */
          mapping(res, {
              identifier: 'filePath',
          });
      },
  };
  var pauseVoice = {
      m: 'pauseAudioPlay',
  };
  var resumeVoice = {
      m: 'resumeAudioPlay',
  };
  var stopVoice = {
      m: 'stopAudioPlay',
  };
  var playBackgroundAudio = {
      b: function (opt) {
          mapping(opt, {
              url: 'audioDataUrl%s',
              title: 'audioName%s',
              singer: 'singerName%s',
              describe: 'audioDescribe%s',
              logo: 'audioLogoURL%s',
              cover: 'coverImgUrl%s',
          });
          opt.business = kMediaBusiness;
      },
      a: function (res) {
          mapping(res, {
              describe: 'errorMessage',
          });
          handleResultSuccess(res, 12, 0);
      },
  };
  var pauseBackgroundAudio = {
      a: function (res) {
          mapping(res, {
              describe: 'errorMessage',
          });
          handleResultSuccess(res, 12, 0);
      },
  };
  var stopBackgroundAudio = {
      a: function (res) {
          /**
           * @description 客户端代码均表示不存在 describe 字段
           */
          mapping(res, {
              describe: 'errorMessage',
          });
          handleResultSuccess(res, 12, 0);
      },
  };
  var seekBackgroundAudio = {
      b: function (opt) {
          opt.business = kMediaBusiness;
          opt.position = toType('%f', opt.position);
      },
      a: function (res) {
          mapping(res, {
              describe: 'errorMessage',
          });
          handleResultSuccess(res, 12, 0);
      },
  };
  var getBackgroundAudioPlayerState = {
      a: function (res) {
          mapping(res, {
              audioDataUrl: 'url',
              describe: 'errorMessage',
          });
          handleResultSuccess(res, 12, 0);
      },
  };
  var BridgeBackgroundAudioManager = /** @class */ /*#__PURE__*/ (function () {
      function BridgeBackgroundAudioManager(context) {
          this.lastStatus = 2 /* EBridgeBackgroundAudioStatus.Stop */;
          this.context = context;
          this.getTaskIdFromEvent = this.getTaskIdFromEvent.bind(this);
          this.getPayloadFromEvent = this.getPayloadFromEvent.bind(this);
      }
      BridgeBackgroundAudioManager.prototype.getTaskIdFromEvent = function (event) {
          if (event && event.data) {
              var status = event.data.status;
              switch (status) {
                  case 0 /* EBridgeBackgroundAudioStatus.Pause */:
                  case 1 /* EBridgeBackgroundAudioStatus.Play */:
                  case 2 /* EBridgeBackgroundAudioStatus.Stop */:
                      if (status !== this.lastStatus) {
                          this.lastStatus = status;
                          return [status];
                      }
              }
          }
          return [];
      };
      BridgeBackgroundAudioManager.prototype.getPayloadFromEvent = function () {
          return {};
      };
      BridgeBackgroundAudioManager.prototype.startMonitor = function (status, cb) {
          var runtime = this.context.runtime();
          if (runtime) {
              var bridge = runtime.getBridge();
              if (bridge) {
                  this.context.callDefaultBridge('startMonitorBackgroundAudio');
                  bridge.event.taskManager.addMatcher('getBackgroundAudioPlayedStateInfo', status, cb, this.getTaskIdFromEvent, this.getPayloadFromEvent);
              }
          }
      };
      BridgeBackgroundAudioManager.prototype.stopMonitor = function (status, cb) {
          var runtime = this.context.runtime();
          if (runtime) {
              var bridge = runtime.getBridge();
              if (bridge) {
                  // 不需要，只解除 taskManager 内绑定，订阅不关闭
                  // bridge.callBridge('stopMonitorBackgroundAudio');
                  bridge.event.taskManager.removeMatcher('getBackgroundAudioPlayedStateInfo', status, cb);
              }
          }
      };
      return BridgeBackgroundAudioManager;
  }());
  function getBridgeBackgroundAudioManager(context) {
      var runtime = context.runtime();
      if (runtime) {
          var bridge = runtime.getBridge();
          if (bridge) {
              var manager = bridge.extraInfo["backgroundAudioPrivateManager" /* EBridgeExtraInfoKey.backgroundAudioPrivateManager */];
              if (!manager) {
                  manager = bridge.extraInfo["backgroundAudioPrivateManager" /* EBridgeExtraInfoKey.backgroundAudioPrivateManager */] = new BridgeBackgroundAudioManager(context);
              }
              return manager;
          }
      }
  }
  var onBackgroundAudioPlay = {
      fnOptionIndex: false,
      fn: function (cb) {
          if (typeof cb === 'function') {
              var manager = getBridgeBackgroundAudioManager(this);
              if (manager) {
                  manager.startMonitor(1 /* EBridgeBackgroundAudioStatus.Play */, cb);
              }
          }
      },
  };
  var offBackgroundAudioPlay = {
      fnOptionIndex: false,
      fn: function (cb) {
          if (typeof cb === 'function') {
              var manager = getBridgeBackgroundAudioManager(this);
              if (manager) {
                  manager.stopMonitor(1 /* EBridgeBackgroundAudioStatus.Play */, cb);
              }
          }
      },
  };
  var onBackgroundAudioPause = {
      fnOptionIndex: false,
      fn: function (cb) {
          if (typeof cb === 'function') {
              var manager = getBridgeBackgroundAudioManager(this);
              if (manager) {
                  manager.startMonitor(0 /* EBridgeBackgroundAudioStatus.Pause */, cb);
              }
          }
      },
  };
  var offBackgroundAudioPause = {
      fnOptionIndex: false,
      fn: function (cb) {
          if (typeof cb === 'function') {
              var manager = getBridgeBackgroundAudioManager(this);
              if (manager) {
                  manager.stopMonitor(0 /* EBridgeBackgroundAudioStatus.Pause */, cb);
              }
          }
      },
  };
  var onBackgroundAudioStop = {
      fnOptionIndex: false,
      fn: function (cb) {
          if (typeof cb === 'function') {
              var manager = getBridgeBackgroundAudioManager(this);
              if (manager) {
                  manager.startMonitor(2 /* EBridgeBackgroundAudioStatus.Stop */, cb);
              }
          }
      },
  };
  var offBackgroundAudioStop = {
      fnOptionIndex: false,
      fn: function (cb) {
          if (typeof cb === 'function') {
              var manager = getBridgeBackgroundAudioManager(this);
              if (manager) {
                  manager.stopMonitor(2 /* EBridgeBackgroundAudioStatus.Stop */, cb);
              }
          }
      },
  };

  function transformAdvertisData(devices) {
      if (devices) {
          devices.forEach(function (val) {
              val.advertisData = val.manufacturerData;
          });
      }
  }
  var openBluetoothAdapter = {};
  var closeBluetoothAdapter = {};
  var getBluetoothAdapterState = {};
  var startBluetoothDevicesDiscovery = {};
  var stopBluetoothDevicesDiscovery = {};
  var getBluetoothDevices = {
      a: function (res) {
          transformAdvertisData(res.devices);
      },
  };
  var getConnectedBluetoothDevices = {
      a: function (res) {
          transformAdvertisData(res.devices);
      },
  };
  var connectBLEDevice = {};
  var disconnectBLEDevice = {};
  var writeBLECharacteristicValue = {};
  var readBLECharacteristicValue = {};
  var notifyBLECharacteristicValueChange = {};
  var getBLEDeviceServices = {};
  var getBLEDeviceCharacteristics = {};
  var onBLECharacteristicValueChange = {
      // 真正的事件名，会把首字母自动转成小写，因此这里使用 map 可避免这个问题
      m: 'BLECharacteristicValueChange',
  };
  var offBLECharacteristicValueChange = {
      m: 'BLECharacteristicValueChange',
  };
  var onBluetoothAdapterStateChange = {};
  var offBluetoothAdapterStateChange = {};
  var onBLEConnectionStateChanged = {
      m: 'BLEConnectionStateChanged',
  };
  var offBLEConnectionStateChanged = {
      m: 'BLEConnectionStateChanged',
  };
  var onBluetoothDeviceFound = {
      a: function (res) {
          res.advertisData = res.manufacturerData;
      },
  };
  var offBluetoothDeviceFound = {};
  var startBeaconDiscovery = {};
  var stopBeaconDiscovery = {};
  var getBeacons = {};
  var onBeaconUpdate = {
      m: 'beaconUpdate',
  };
  var offBeaconUpdate = {
      m: 'beaconUpdate',
  };
  var onBeaconServiceChange = {
      m: 'beaconServiceChange',
  };
  var offBeaconServiceChange = {
      m: 'beaconServiceChange',
  };
  var openBLEPeripheral = {};
  var closeBLEPeripheral = {};
  var addPeripheralService = {};
  var removePeripheralService = {};
  var updateCharacteristic = {};
  var startBLEAdvertising = {};
  var stopBLEAdvertising = {};
  var onCharacteristicRead = {};
  var offCharacteristicRead = {};
  var onCharacteristicWrite = {};
  var offCharacteristicWrite = {};
  var onCharacteristicDidSubscribe = {};
  var offCharacteristicDidSubscribe = {};
  var onCharacteristicDidUnsubscribe = {};
  var offCharacteristicDidUnsubscribe = {};

  // tslint:disable object-literal-sort-keys
  var alert = {
      b: function (opt) {
          return mapping(opt, {
              buttonText: 'button%s',
              content: 'message%s',
          });
      },
  };
  var showLoading = {
      b: function (opt) {
          return mapping(opt, {
              content: 'text%s', // 因为最后调用接口时真正入参是 text
          });
      },
      d: function (finalOption, resolve) {
          this.callScopedBridge('showLoading', finalOption, resolve, this.optionPageViewId);
      },
  };
  var hideLoading = {
      d: function (finalOption, resolve) {
          this.callScopedBridge('hideLoading', finalOption, resolve, this.optionPageViewId);
      },
  };
  var multiLevelSelect = {
      m: 'beehiveMultilevelSelect',
  };
  var prompt = {
      b: function (opt) {
          opt.message = opt.message || '请输入内容';
          opt.okButtonText = opt.okButtonText || '确定';
          opt.cancelButtonText = opt.cancelButtonText || '取消';
          mapping(opt, {
              cancelButtonText: 'cancelButton%s',
              okButtonText: 'okButton%s',
          });
      },
  };
  var stopPullDownRefresh = {
      d: function (_, resolve) {
          var viewId = this.optionPageViewId;
          this.callScopedBridge('restorePullToRefresh', { viewId: viewId }, undefined, viewId);
          resolve({});
      },
      m: 'restorePullToRefresh',
  };
  var hideKeyboard = {
      noPromise: true,
      d: function (rest, resolve) {
          if (rest === void 0) { rest = {}; }
          var pageInstance = this.getPageInstance();
          if (this.getEnvOnlyCube() ||
              (pageInstance && pageInstance.getEngineType() === 2 /* ESharedAppxPageEngineType.CubeEngine */)) {
              // cube native 下
              if (this.getEnvPlatformAndroid()) {
                  if (pageInstance) {
                      pageInstance.invokeRenderMethod("hideKeyboard" /* ESharedAppxPageRenderMethod.HideKeyboard */, [], function (error, result) {
                          if (error) {
                              resolve({
                                  success: false,
                                  reason: error,
                              });
                          }
                          else {
                              resolve({
                                  success: true,
                              });
                          }
                      });
                  }
              }
              else {
                  this.callScopedBridge('hideKeyboard', rest, resolve);
              }
          }
          else {
              // web 下
              this.callInternalAPI('hideCustomKeyBoard', rest);
              if (pageInstance) {
                  pageInstance.invokeRenderMethod("hideKeyboard" /* ESharedAppxPageRenderMethod.HideKeyboard */, []);
              }
          }
      },
  };
  var setBackgroundColor = {};
  var setBackgroundTextStyle = {};
  var setBackButton = {};
  var setBackgroundImage = {};
  var removeBackgroundImage = {};
  var setLocatedCity = {};
  var onLocatedComplete = {};
  var offLocatedComplete = {};
  var setCanPullDown = {};
  var startPullDownRefresh = {};
  var setTransparentTitle = {};
  var setViewTop = {
      m: 'setWebViewTop',
  };
  var showAuthGuide = {
      b: function (opt) {
          opt.bizType = 'AppletPG';
          opt.source = this.getEnvAppId();
      },
  };
  var optionsSelect = {
      m: 'beehiveOptionsPicker',
  };
  var showBackToHomepage = {
      b: function (opt) {
          opt.isHomePage = !this.runtime().getNav().needBackHome();
      },
  };
  var hideBackHome = {
      m: 'hideOptionMenuItem',
      b: function (opt) {
          opt.scope = 'single';
          opt.name = 'backToHome';
      },
  };
  var setCustomPopMenu = {
      b: function (opt) {
          var viewId = this.runtime().getNav().getTopViewId();
          opt.viewId = viewId;
      },
  };
  /**
   * getExtConfigSync 与 getExtConfig 返回结构不同
   * getExtConfig返回结果比同步方法多一层{ data }
   */
  var kBridgeExtraInfoKey4GetExtConfig = 'AppExtConfigCache4getExtConfig';
  var getExtConfig = {
      d: function (_opt, resolve) {
          var runtime = this.runtime();
          var bridge = runtime.getBridge();
          var extInfo = bridge.extraInfo;
          if (runtime.getEnv().originalStartupParams.templateApp) {
              if (extInfo[kBridgeExtraInfoKey4GetExtConfig]) {
                  resolve({
                      data: extInfo[kBridgeExtraInfoKey4GetExtConfig],
                  });
              }
              else {
                  this.callInternalAPI('getExtConfig', {}, function (res) {
                      if (res.error) {
                          resolve(res);
                      }
                      else {
                          extInfo[kBridgeExtraInfoKey4GetExtConfig] = res.data;
                          resolve(res);
                      }
                  });
              }
          }
          else {
              resolve({ data: runtime.getMeta().getAppExt() });
          }
      },
  };
  function getLaunchOptionEmpty(callContext) {
      var extraInfo = callContext.getBridgeExtraInfo();
      var launchOptionEmpty = extraInfo["launchOptionsEmpty" /* EBridgeExtraInfoKey.launchOptionsEmpty */];
      if (!launchOptionEmpty) {
          launchOptionEmpty = extraInfo["launchOptionsEmpty" /* EBridgeExtraInfoKey.launchOptionsEmpty */] = {
          // 保持和 1.0 一样的行为，同一个空对象
          };
      }
      return launchOptionEmpty;
  }
  var getLaunchOptionsSync = {
      fnOptionIndex: false,
      fn: function () {
          var app = this.runtime().getApp();
          if (app) {
              return app.getLaunchOptions();
          }
          return getLaunchOptionEmpty(this);
      },
  };
  var getEnterOptionsSync = {
      fnOptionIndex: false,
      fn: function () {
          var app = this.runtime().getApp();
          if (app) {
              return app.getResumeOptions() || app.getLaunchOptions();
          }
          return getLaunchOptionEmpty(this);
      },
  };
  /**
   * getExtConfigSync 与 getExtConfig 返回结构不同
   * getExtConfig返回结果比同步方法多一层{ data }
   */
  var getExtConfigSync = {
      fnOptionIndex: false,
      fn: function () {
          var runtime = this.runtime();
          var bridge = runtime.getBridge();
          var extInfo = bridge.extraInfo;
          if (runtime.getEnv().originalStartupParams.templateApp) {
              if (!extInfo[kBridgeExtraInfoKey4GetExtConfig]) {
                  var res = this.callInternalAPISync('getExtConfig', {});
                  if (res.error) {
                      extInfo[kBridgeExtraInfoKey4GetExtConfig] = null;
                  }
                  else {
                      extInfo[kBridgeExtraInfoKey4GetExtConfig] = res.data;
                  }
              }
              return extInfo[kBridgeExtraInfoKey4GetExtConfig];
          }
          var meta = runtime.getMeta();
          return meta.getAppExt();
      },
  };
  var getAppIdSync = {
      fnOptionIndex: false,
      fn: function () {
          return {
              appId: this.runtime().getEnv().startupParams.appId,
          };
      },
  };
  var onAppShow = {
      fnOptionIndex: false,
      fn: function (callback) {
          if (typeof callback === 'function') {
              var ret = this.runtime()
                  .getTypedEventManager()
                  .addEventListener(1 /* ESharedAppxInternalEvent.AppWillShow */, callback, true);
              return ret;
          }
          else {
              return {
                  remove: function () { },
              };
          }
      },
  };
  var offAppShow = {
      fnOptionIndex: false,
      fn: function (callback) {
          if (typeof callback === 'function') {
              this.runtime().getTypedEventManager().removeEventListener(1 /* ESharedAppxInternalEvent.AppWillShow */, callback);
          }
      },
  };
  var onAppHide = {
      fnOptionIndex: false,
      fn: function (callback) {
          if (typeof callback === 'function') {
              var ret = this.runtime()
                  .getTypedEventManager()
                  .addEventListener(2 /* ESharedAppxInternalEvent.AppWillHide */, callback, true);
              return ret;
          }
          else {
              return {
                  remove: function () { },
              };
          }
      },
  };
  var offAppHide = {
      fnOptionIndex: false,
      fn: function (callback) {
          if (typeof callback === 'function') {
              this.runtime().getTypedEventManager().removeEventListener(2 /* ESharedAppxInternalEvent.AppWillHide */, callback);
          }
      },
  };
  var onUnhandledRejection = {
      fnOptionIndex: false,
      fn: function (callback) {
          if (typeof callback === 'function') {
              var ret = this.runtime()
                  .getTypedEventManager()
                  .addEventListener(5 /* ESharedAppxInternalEvent.AppDidUnhandledRejection */, callback, true);
              return ret;
          }
          else {
              return {
                  remove: function () { },
              };
          }
      },
  };
  var offUnhandledRejection = {
      fnOptionIndex: false,
      fn: function (callback) {
          if (typeof callback === 'function') {
              this.runtime()
                  .getTypedEventManager()
                  .removeEventListener(5 /* ESharedAppxInternalEvent.AppDidUnhandledRejection */, callback);
          }
      },
  };
  var onError = {
      fnOptionIndex: false,
      fn: function (callback) {
          if (typeof callback === 'function') {
              var ret = this.runtime()
                  .getTypedEventManager()
                  .addEventListener(4 /* ESharedAppxInternalEvent.AppDidError */, callback, true);
              return ret;
          }
          else {
              return {
                  remove: function () { },
              };
          }
      },
  };
  var offError = {
      fnOptionIndex: false,
      fn: function (callback) {
          if (typeof callback === 'function') {
              this.runtime().getTypedEventManager().removeEventListener(4 /* ESharedAppxInternalEvent.AppDidError */, callback);
          }
      },
  };
  // export const getExtConfig = ({ success = noop, complete = noop, fail = noop }) => {
  //   if (getStartupParams().templateApp) {
  //     if (nativeExtConfig) {
  //       success({
  //         data: nativeExtConfig,
  //       });
  //       complete({
  //         data: nativeExtConfig,
  //       });
  //       return nativeExtConfig;
  //     }
  //     callInternalAPI('getExtConfig', {}, res => {
  //       if (res.error) {
  //         fail(res);
  //       } else {
  //         nativeExtConfig = res.data;
  //         success(res);
  //       }
  //       complete(res);
  //     });
  //   } else {
  //     const data = getBundledConfig();
  //     success({ data });
  //     complete({ data });
  //   }
  // };
  var base64ToArrayBuffer$1 = {
      fnOptionIndex: false,
      fn: function (base64) {
          if (base64 === void 0) { base64 = ''; }
          return base64ToArrayBuffer(base64);
      },
  };
  var arrayBufferToBase64$1 = {
      fnOptionIndex: false,
      fn: function (arrayBuffer) {
          if (arrayBuffer) {
              return arrayBufferToBase64(arrayBuffer);
          }
          else {
              return '';
          }
      },
  };

  var confirm = {
      b: function (opt) {
          return mapping(opt, {
              cancelButtonText: 'cancelButton%s',
              confirmButtonText: 'okButton%s',
              content: 'message%s',
          });
      },
      a: function (res) {
          return mapping(res, {
              ok: 'confirm', // 更改之前返回值里的 ok 为 confirm
          });
      },
  };

  function endsWith(str, suffix) {
      return str && str.slice(0 - suffix.length) === suffix;
  }
  function commaCount(str) {
      var m = str.match(/:/g);
      if (!m) {
          return 0;
      }
      return m.length;
  }
  function removeSS(str) {
      return str.replace(/:\d+$/, '');
  }
  // tslint:disable object-literal-sort-keys variable-name
  var datePicker = {
      b: function (opt) {
          function addSS() {
              ['beginDate', 'minDate', 'maxDate'].forEach(function (f) {
                  if (opt[f]) {
                      if (commaCount(opt[f]) === 1) {
                          opt[f] += ':00';
                      }
                  }
              });
          }
          mapping(opt, {
              format: 'mode',
              currentDate: 'beginDate',
              startDate: 'minDate',
              endDate: 'maxDate',
          });
          switch (opt.mode) {
              case 'HH:mm:ss':
                  opt.mode = 0;
                  break;
              case 'HH:mm':
                  opt.mode = 0;
                  addSS();
                  break;
              case 'yyyy-MM-dd':
                  opt.mode = 1;
                  break;
              case 'yyyy-MM-dd HH:mm:ss':
                  opt.mode = 2;
                  break;
              case 'yyyy-MM-dd HH:mm':
                  opt.mode = 2;
                  addSS();
                  break;
              case 'yyyy-MM':
                  opt.mode = 3;
                  break;
              case 'yyyy':
                  opt.mode = 4;
                  break;
              default:
                  opt.mode = 1;
          }
      },
      a: function (res, _opt, opt) {
          if (typeof res.date === 'string') {
              if (endsWith(opt.format, ':mm')) {
                  if (commaCount(res.date) === 2) {
                      res.date = removeSS(res.date);
                  }
              }
              // 返回格式为yyyy-MM-dd
              res.date = res.date.replace(/\//g, '-').trim();
          }
      },
  };

  var defaultInterval = 0.5;
  var getNetworkType = {
      a: function (res) {
          if (res.networkInfo) {
              res.networkType = res.networkInfo.toUpperCase();
          }
      },
  };
  var vibrate = {};
  var choosePhoneContact = {
      m: 'contact',
  };
  var chooseAlipayContact = {
      m: 'chooseContact',
      b: function (opt) {
          var multi = 'multi';
          var single = 'single';
          if (!opt.count) {
              opt.count = 1;
          }
          if (opt.count === 1) {
              opt.type = single;
          }
          else {
              opt.type = multi;
              if (opt.count <= 0 || opt.count > 10) {
                  opt.multiMax = 10;
              }
              else {
                  opt.multiMax = opt.count;
              }
          }
          delete opt.count;
      },
      a: function (res) {
          if (Array.isArray(res.contacts)) {
              res.contacts.forEach(function (contact) {
                  mapping(contact, {
                      headImageUrl: 'avatar',
                      name: 'realName',
                  });
                  delete contact.from;
              });
          }
      },
  };
  var chooseContact = {
      m: 'APSocialNebulaPlugin.selectContactJSAPI',
      b: function (opt) {
          mapping(opt, {
              chooseType: 'type',
              includeMe: 'withMe',
              multiChooseMax: 'multiMax',
              multiChooseMaxTips: 'multiMaxTips',
          });
          if (!opt.type) {
              opt.type = 'multi';
          }
          opt.model = 'friend';
          switch (opt.includeMobileContactMode) {
              case 'known':
                  // 包含双向手机联系人
                  opt.showKnownMobileContact = true;
                  break;
              case 'all':
                  // 包含所有手机联系人
                  opt.showMobileContact = true;
                  break;
          }
      },
      a: function (res) {
          if (res.contactsDicArray && res.contactsDicArray.length > 0) {
              // tslint:disable prefer-for-of object-literal-sort-keys
              for (var i = 0; i < res.contactsDicArray.length; ++i) {
                  mapping(res.contactsDicArray[i], {
                      headUrl: 'avatar',
                      phoneString: 'mobile',
                      name: 'realName',
                      userID: 'userId',
                  });
                  delete res.contactsDicArray[i].account;
              }
          }
      },
  };
  var watchShake = {};
  var makePhoneCall = {
      d: function (opt, cb) {
          this.callInternalAPI('makePhoneCall', opt, cb);
      },
  };
  var setClipboard = {};
  var getClipboard = {};
  var scan = {
      b: function (opt) {
          var actionTypes = ['scanAndRpc', 'scan', 'scanAndRoute', 'route'];
          if (!opt.actionType) {
              opt.actionType = opt.needPath === true ? 'scanAndRpc' : 'scan';
          }
          if (actionTypes.indexOf(opt.actionType) < 0) {
              opt.actionType = 'scan';
          }
          opt.type = opt.type || 'qr';
          mapping(opt, {
              onlyFromCamera: 'hideAlbum',
          });
      },
      a: function (res) {
          // 没有 = charSet
          // 有 = path 10.1.32
          if (res.codeContent) {
              res.code = res.codeContent;
          }
          mapping(res, {
              codeContent: 'result',
              codeType: 'scanType',
          });
      },
  };
  var getServerTime = {};
  var getScreenBrightness = {};
  // const brightnessData = {
  //   initialized: false,
  //   changed: false,
  //   origiBrightness: 0,
  //   newBrightness: 0,
  // };
  // const initBrightness = () => {
  //   if (brightnessData.initialized) {
  //     return;
  //   }
  //   const foreground = () => {
  //     if (brightnessData.changed) {
  //       callBridge('setScreenBrightness', {
  //         brightness: brightnessData.newBrightness,
  //       });
  //     }
  //   };
  //   const background = () => {
  //     if (brightnessData.changed) {
  //       callBridge('setScreenBrightness', {
  //         brightness: brightnessData.origiBrightness,
  //       });
  //     }
  //   };
  //   EventHub.addListener('foreground', foreground);
  //   EventHub.addListener('background', background);
  //   callBridge('getScreenBrightness', {}, res => {
  //     if (res.brightness) {
  //       // 初始化
  //       brightnessData.initialized = true;
  //       brightnessData.origiBrightness = res.brightness;
  //       brightnessData.newBrightness = res.brightness;
  //     }
  //   });
  // };
  var setScreenBrightness = {};
  // tslint:disable variable-name
  // export const setScreenBrightness: IBridgeAPITypedInfo<MiniAPI.setScreenBrightness> = {
  //   b(opt: any) {
  //     if (typeof opt.brightness === 'number') {
  //       initBrightness();
  //     }
  //   },
  //   a(res: any, _opt: any, opt: any) {
  //     if (!('error' in res)) {
  //       brightnessData.changed = true;
  //       brightnessData.newBrightness = opt.brightness;
  //     }
  //   },
  // }
  // tslint:enable variable-name
  var setKeepScreenOn = {
      b: function (opt) {
          opt.actionType = opt.keepScreenOn ? 'disable' : 'enable';
      },
      d: function (opt, resolve) {
          this.callDefaultBridge('setScreenAutolock', opt, resolve);
      },
  };
  // export const SDKVersion: IBridgeAPITypedInfo<MiniAPI.SDKVersion> = {}; // 暂时跳过，待续
  var addPhoneContact = {};
  var onGyroscopeChange = {
      start: function () {
          var _a;
          var extraInfo = this.runtime().getBridge().extraInfo;
          // 没主动执行过 my.startGyroscope
          if (!extraInfo["startGyroscopeExecuted" /* EBridgeExtraInfoKey.startGyroscopeExecuted */]) {
              this.callDefaultBridge('watchShake', (_a = {},
                  _a["monitorGyroscope" /* EWatchShakeType.monitorGyroscope */] = true,
                  _a.interval = defaultInterval,
                  _a));
          }
      },
  };
  var offGyroscopeChange = {
      end: function () {
          var _a;
          var extraInfo = this.runtime().getBridge().extraInfo;
          // 开发者执行了 my.startGyroscope，所以不能再依赖事件监听的end钩子
          if (!extraInfo["startGyroscopeExecuted" /* EBridgeExtraInfoKey.startGyroscopeExecuted */]) {
              this.callDefaultBridge('watchShake', (_a = {}, _a["monitorGyroscope" /* EWatchShakeType.monitorGyroscope */] = false, _a));
          }
      },
  };
  var onAccelerometerChange = {
      start: function () {
          var _a;
          var extraInfo = this.runtime().getBridge().extraInfo;
          if (!extraInfo["startAccelerometerExecuted" /* EBridgeExtraInfoKey.startAccelerometerExecuted */]) {
              this.callDefaultBridge('watchShake', (_a = {},
                  _a["monitorAccelerometer" /* EWatchShakeType.monitorAccelerometer */] = true,
                  _a.interval = defaultInterval,
                  _a));
          }
      },
      a: function (evt) {
          var res = {};
          mapping(res, {
              timestamp: 'timestamp%d',
              x: 'x',
              y: 'y',
              z: 'z',
          }, typeof evt.data === 'object' ? evt.data : evt);
          return res;
      },
  };
  var offAccelerometerChange = {
      end: function () {
          var _a;
          var extraInfo = this.runtime().getBridge().extraInfo;
          if (!extraInfo["startAccelerometerExecuted" /* EBridgeExtraInfoKey.startAccelerometerExecuted */]) {
              this.callDefaultBridge('watchShake', (_a = {}, _a["monitorAccelerometer" /* EWatchShakeType.monitorAccelerometer */] = false, _a));
          }
      },
  };
  var onCompassChange = {
      start: function () {
          var _a;
          var extraInfo = this.runtime().getBridge().extraInfo;
          if (!extraInfo["startCompassExecuted" /* EBridgeExtraInfoKey.startCompassExecuted */]) {
              this.callDefaultBridge('watchShake', (_a = {},
                  _a["monitorCompass" /* EWatchShakeType.monitorCompass */] = true,
                  _a.interval = defaultInterval,
                  _a));
          }
      },
      a: function (evt) {
          var res = {};
          mapping(res, {
              direction: 'direction%d',
              timestamp: 'timestamp%d',
          }, typeof evt.data === 'object' ? evt.data : evt);
          return res;
      },
  };
  var offCompassChange = {
      end: function () {
          var _a;
          var extraInfo = this.runtime().getBridge().extraInfo;
          if (!extraInfo["startCompassExecuted" /* EBridgeExtraInfoKey.startCompassExecuted */]) {
              this.callDefaultBridge('watchShake', (_a = {}, _a["monitorCompass" /* EWatchShakeType.monitorCompass */] = false, _a));
          }
      },
  };
  var rsa = {};
  var sendSMS = {
      a: function (res) {
          if (res.status) {
              switch (res.status) {
                  case 'Success':
                      res = {};
                      break;
                  case 'Failed':
                      res.error = 21;
                      res.errorMessage = '发送失败';
                      break;
                  case 'Canceled':
                      res.error = 22;
                      res.errorMessage = '用户取消发送';
                      break;
              }
              delete res.status;
          }
      },
  };
  var startWifi = {};
  var stopWifi = {};
  var connectWifi = {};
  var getWifiList = {};
  var setWifiList = {};
  var getConnectedWifi = {};
  var onGetWifiList = {};
  var offGetWifiList = {};
  var onWifiConnected = {};
  var offWifiConnected = {};
  var onMemoryWarning = {
      start: function () {
          this.callDefaultBridge('startMonitorMemoryWarning', {});
      },
  };
  var offMemoryWarning = {
      end: function () {
          this.callDefaultBridge('stopMonitorMemoryWarning', {});
      },
  };
  var vibrateLong = {};
  var vibrateShort = {};
  var getHCEState = {};
  var startHCE = {};
  var stopHCE = {};
  var onHCEMessage = {};
  var offHCEMessage = {};
  var sendHCEMessage = {};
  var getBatteryInfo = {
      m: 'getBatteryInfo',
  };
  var onDeviceMotionChange = {
      start: function () {
          this.callDefaultBridge('startDeviceMotionListening', {
              interval: 'ui',
          });
      },
  };
  var offDeviceMotionChange = {
      end: function () {
          this.callDefaultBridge('stopDeviceMotionListening');
      },
  };
  var getDeviceInfo = {};
  var getTitleColor = {
      a: function (res) {
          if (res && res.color) {
              var color = res.color.toString(16);
              if (color.length === 8) {
                  var alpha = color.slice(0, 2);
                  var rgb = color.slice(2);
                  color = rgb + alpha;
              }
              res.color = '#' + color;
          }
      },
  };
  var registerSSID = {
      a: function (finalResult) {
          if (this.runtime().getEnv().isAndroid && finalResult && finalResult.error === 1) {
              finalResult.errorMessage = 'registerSSID is only avaliable on iOS platform';
          }
      },
  };
  var unregisterSSID = {
      a: function (finalResult) {
          if (this.runtime().getEnv().isAndroid && finalResult && finalResult.error === 1) {
              finalResult.errorMessage = 'unregisterSSID is only avaliable on iOS platform';
          }
      },
  };
  var getCarrierName = {};
  var isSystemRoot = {};
  var seNFCServiceIsv = {
      m: 'virtualServiceH5PluginIsv',
  };
  var menuButtonBoundingClientRectItems = [
      'width',
      'height',
      'left',
      'top',
      'right',
      'bottom',
      'optionMenuWidth',
      'optionMenuHeight',
      'optionMenuLeft',
      'optionMenuTop',
      'optionMenuRight',
      'optionMenuBottom' ];
  var getMenuButtonBoundingClientRect = {
      fn: function () {
          var res = this.callDefaultBridgeSync('getMenuButtonBoundingClientRect');
          if (res &&
              (/* a_getMenuButtonBoundingClientRect_25_4:true */ true) &&
              this.runtime().getEnv().isAndroid) {
              // https://baiyan.alipay.com/task/153501
              // https://yuque.antfin.com/appxng/review/bwtb1w
              // 通过获取ua里dpr（worker侧只有Android才有效）来对JSAPI的返回值做纠正
              // e.g ua: "Dalvik/2.1.0 (Linux; U; Android 10; ELE-AL00 Build/HUAWEIELE-AL00) Chrome/69.0.3497.100 UWS/3.18.0.31 Mobile Safari/537.36 UCBS/3.18.0.31 Region/CN AlipayDefined(nt:WIFI,ws:360|0|2.0) AliApp(AP/10.2.28.7001) AlipayClient/10.2.28.7001 Language/zh-Hans isConcaveScreen/true ProductType/dev Ariver/1.0.0"
              var ua = this.runtime().getEnv().userAgent;
              var defined = ua.match(/AlipayDefined\((\S*)\)/);
              var ws = defined && defined[1] && defined[1].match(/ws:(\S+\|(\S+\|(\d+?\.\d+)))/);
              var dpr = ws && ws[3] && parseFloat(ws[3]);
              if (dpr !== undefined && dpr !== 0) {
                  // 某些小程序，可能禁用了胶囊按钮 移除了收藏按钮等，则会导致某些字段并不会返回，所以需要先检测字段是否存在
                  for (var _i = 0, menuButtonBoundingClientRectItems_1 = menuButtonBoundingClientRectItems; _i < menuButtonBoundingClientRectItems_1.length; _i++) {
                      var item = menuButtonBoundingClientRectItems_1[_i];
                      if (res[item] !== undefined) {
                          // 所有数字类字段全部除dpr后再四舍五入取整
                          res[item] = Math.round(res[item] / dpr);
                      }
                  }
              }
          }
          return res;
      },
      fnOptionIndex: false,
  };
  var exit = {
      m: "exitTinyApp" /* NativeAPI.exitTinyApp */,
  };
  var getAuthStatus = {};
  var regionPicker = {};
  var setScreenOrientation = {};
  var getScreenOrientation = {};
  var getDeviceID = {};

  var getRunScene = {};

  var onUserCaptureScreen = {
      m: 'screenshotbyuser',
      b: function () {
          if (this.getEnvPlatformAndroid()) {
              this.callDefaultBridge('addScreenshotListener');
          }
      },
  };
  var offUserCaptureScreen = {
      m: 'screenshotbyuser',
  };
  var onTitleCloseClick = {};
  var offTitleCloseClick = {};
  var onTitleMoreClick = {};
  var offTitleMoreClick = {};

  var isFavorite = {
      a: function (res) {
          if (res.error) {
              // 不展示网关等错误信息，统一错误码为-1
              res.error = -1;
              delete res.errorMessage;
          }
          else {
              // 只返回isFavorite: true/false
              delete res.success;
              delete res.resultCode;
              delete res.resultMsg;
              mapping(res, {
                  hasKeep: 'isFavorite',
              });
          }
      },
      d: function (finalOpt, cb) {
          this.callScopedBridge('queryIsFavorite', {}, cb);
      },
  };
  var addToFavorite = {
      b: function (opt) {
          opt.callSource = 'developer';
      },
      a: function (res) {
          // 只返回success: true/false
          delete res.resultMsg;
          delete res.resultCode;
      },
      m: 'add2Favorite',
  };
  var removeFromFavorite = {
      d: function (_opt, cb) {
          this.callScopedBridge('cancelKeepFavorite', {}, cb);
      },
      a: function (res) {
          if (res.error) {
              // 不展示网关等错误信息，统一错误码为-1
              res.error = -1;
              delete res.errorMessage;
          }
          else {
              // success回调只显示success: true/false
              delete res.resultCode;
              delete res.resultMsg;
          }
      },
  };
  var onFavorite = {};
  var offFavorite = {};
  var onInternalFavorite = {
      start: function () {
          this.callDefaultBridge('favoriteNotify', {
              action: 'addFavoriteNotification',
          });
      },
  };
  var offInternalFavorite = {
      end: function () {
          this.callDefaultBridge('favoriteNotify', {
              action: 'removeFavoriteNotification',
          });
      },
  };
  var isCollected = {
      a: function (res) {
          if (res.error) {
              res.error = -1;
          }
          else {
              delete res.success;
              delete res.resultCode;
              delete res.resultMsg;
              mapping(res, {
                  hasKeep: 'isCollected',
              });
          }
      },
      d: function (_opt, cb) {
          this.callScopedBridge('isCollected', {}, cb);
      },
  };
  var canFavorite = {};

  var saveFile = {};
  var removeSavedFile = {};
  var getSavedFileInfo = {};
  var getSavedFileList = {};
  var getFileInfo = {};
  var openDocument = {};

  function callInternal4AppxRpc(context, method, opt, resolve, standard) {
      var success = opt.success, fail = opt.fail, complete = opt.complete, restOpt = __rest(opt, ["success", "fail", "complete"]);
      if (restOpt.protocols && restOpt.protocolParams === undefined) {
          restOpt.protocolParams = restOpt.protocols;
          delete restOpt.protocols;
      }
      context.callInternalAPI('appxrpc', {
          operationType: standard ? "com.alipay.openapi.jsapi.standard.invoke" /* ESharedRPCOperationType.STANDARD_INVOKE */ : "com.alipay.openapi.jsapi.invoke" /* ESharedRPCOperationType.INVOKE */,
          requestData: [
              __assign(__assign({}, restOpt), { method: method, appId: context.getEnvAppId() }) ],
      }, resolve);
  }
  var getOpenUserInfo = {
      d: function (finalOpt, resolve) {
          callInternal4AppxRpc(this, 'getOpenUserInfo', finalOpt, resolve);
      },
  };
  var getOpenUserData = {};
  var getPhoneNumber = {
      d: function (finalOpt, resolve) {
          callInternal4AppxRpc(this, 'getPhoneNumber', finalOpt, resolve);
      },
  };
  var getIDNumber = {
      d: function (finalOpt, resolve) {
          callInternal4AppxRpc(this, 'getIDNumber', finalOpt, resolve);
      },
  };
  var getCustomOpenUserInfo = {
      d: function (finalOpt, resolve) {
          var protocols = finalOpt.protocols, scope = finalOpt.scope, rest = __rest(finalOpt, ["protocols", "scope"]);
          callInternal4AppxRpc(this, 'my.shareUserInfo', __assign(__assign({}, rest), { protocols: __assign(__assign({}, protocols), { scopes: scope }), protocolParams: undefined }), resolve, true);
      },
  };

  function invokeCallbackByCount(context, arg0) {
      context.count++;
      context.args.push(arg0);
      if (context.count === context.limited) {
          context.callback(context.args);
      }
  }
  function invokeCallbackWithErrorFilter(unionCallback, args) {
      for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {
          var arg0 = args_1[_i];
          if (arg0 && ('error' in arg0 || 'errorMessage' in arg0)) {
              unionCallback({
                  error: arg0.error,
                  errorMessage: arg0.errorMessage || 'error',
                  status: 'error',
              });
              return;
          }
      }
      unionCallback({
          status: 'loaded',
      });
  }
  var loadFontFace = {
      noPromise: true,
      d: function (option, resolve) {
          var _this = this;
          if (option === void 0) { option = {}; }
          var runtime = this.runtime();
          if (runtime) {
              var page_1 = this.getPageInstance();
              var switchManager = runtime.getSwitchManager();
              var shouldInvokeCanvasFontLoad = option.nativeCanvas !== false &&
                  page_1.getEngineType() === 1 /* ESharedAppxPageEngineType.WebEngine */ &&
                  (insideFeatureRuntimeVersion >= /* a_loadFontFace_2_6_2:10.2.0 */ 10002000) &&
                  switchManager &&
                  !switchManager.get("disableLoadFontFaceLoadCanvasFont" /* ESharedAppxSwitchManagerName.DisableLoadFontFaceLoadCanvasFont */);
              var callbackContext = {
                  args: [],
                  callback: invokeCallbackWithErrorFilter.bind(null, resolve),
                  count: 0,
                  limited: shouldInvokeCanvasFontLoad ? 2 : 1,
              };
              var callback_1 = invokeCallbackByCount.bind(null, callbackContext);
              page_1.invokeRenderMethod("loadFontFace" /* ESharedAppxPageRenderMethod.LoadFontFace */, [option], function (error) {
                  if (error) {
                      callback_1({
                          error: 10,
                          status: 'error',
                      });
                  }
                  else {
                      callback_1({
                          status: 'loaded',
                      });
                      // 注册全局共享的页面状态
                      page_1.registerRequirement(1 /* EAppxWeb2MessageRequirementType.EnsureFontFace */, option, _this.appxDomain, option.global);
                  }
              });
              if (shouldInvokeCanvasFontLoad) {
                  // source 移除 url 左右匹配
                  var cleanMatchResult = "".concat(option.source).match(/url\(("|')?([^)]+?)\1\)/);
                  if (cleanMatchResult) {
                      this.callInternalAPI('loadCanvasFontFace', {
                          family: option.family,
                          source: cleanMatchResult[2],
                      }, callback_1);
                  }
                  else {
                      callback_1({
                          error: 10,
                          status: 'error',
                      });
                  }
              }
          }
      },
  };

  var chooseCityTask = {
      state: function () {
          return {
              locatedCityId: undefined,
          };
      },
      proto: {
          onLocatedComplete: {
              feature: function () {
                  return (insideFeatureRuntimeVersion >= /* a_chooseCity_task_2_8_0:10.2.70 */ 10002070);
              },
              a: function (res) {
                  var state = this.getState();
                  var longitude = res.longitude, latitude = res.latitude, locatedCityId = res.locatedCityId;
                  state.locatedCityId = locatedCityId;
                  return {
                      longitude: longitude,
                      latitude: latitude,
                  };
              },
          },
          offLocatedComplete: {
              feature: function () {
                  return (insideFeatureRuntimeVersion >= /* a_chooseCity_task_2_8_0:10.2.70 */ 10002070);
              },
          },
          setLocatedCity: {
              feature: function () {
                  return (insideFeatureRuntimeVersion >= /* a_chooseCity_task_2_8_0:10.2.70 */ 10002070);
              },
              d: function (opt, resolve) {
                  var state = this.getState();
                  if (state.locatedCityId) {
                      this.callScopedBridge("setLocatedCity" /* NativeAPI.setLocatedCity */, __assign(__assign({}, opt), { locatedCityId: state.locatedCityId }), resolve);
                  }
                  else {
                      resolve({
                          error: 14,
                          errorMessage: '请等chooseCityTask.onLocatedComplete触发后再调用chooseCityTask.setLocatedCity',
                      });
                  }
              },
          },
      },
  };

  var getLocation = {
      m: 'getCurrentLocation',
      b: function (opt, _) {
          mapping(opt, {
              accuracy: 'horizontalAccuracy',
              type: 'requestType',
          });
          if (!opt.requestType) {
              opt.requestType = 0;
              opt.useDefault = true;
          }
          opt.bizType = opt.bizType ? "".concat(this.getEnvAppId(), "-").concat(opt.bizType) : this.getEnvAppId();
          if (this.getEnvPlatformAndroid()) {
              if (typeof opt.isHighAccuracy === 'undefined') {
                  opt.isHighAccuracy = true;
              }
              if (typeof opt.isNeedSpeed === 'undefined') {
                  opt.isNeedSpeed = true;
              }
          }
      },
      a: function (res) {
          /**
           * @description 以下参数在最新客户端已不存在，且不在对外透出文档中
           */
          mapping(res, {
              adcode: 'adCode',
              citycode: 'cityCode',
          });
          if (!res.city && res.province) {
              res.city = res.province;
          }
          if (res.latitude) {
              res.latitude += '';
          }
          if (res.longitude) {
              res.longitude += '';
          }
          if (res.accuracy) {
              res.accuracy += '';
              res.horizontalAccuracy = res.accuracy;
          }
          delete res.speed;
      },
  };
  var openLocation = {
      b: function (opt) {
          opt.scale = opt.scale || 15; // 默认缩放15级
          opt.hidden = '1';
      },
  };
  var chooseLocation = {
      m: 'beehiveGetPOI',
      b: function (opt) {
          opt.sendBtnText = '选择';
      },
      a: function (res) {
          if (res.error) {
              return;
          }
          if (res.poiId) {
              // 只有一个的时候
              res.address = res.snippet;
              res.name = res.title;
          }
          else {
              if (this.getEnvPlatformAndroid()) {
                  // 只管ios
                  res.address = res.snippet;
              }
              else {
                  res.address = res.title;
              }
              res.name = res.address;
          }
          delete res.snippet;
          delete res.title;
          if (res.latLonPoint) {
              res.latitude = res.latLonPoint.latitude;
              res.longitude = res.latLonPoint.longitude;
              delete res.latLonPoint;
          }
      },
  };
  var chooseCity = {
      m: 'getCities',
      returnProto: function () {
          return this.callProtoAPI(chooseCityTask, []);
      },
      b: function (opt) {
          var customCities;
          var customHotCities;
          var customHistoryCities;
          mapping(opt, {
              cities: 'customCities',
              hotCities: 'customHotCities',
              showHotCities: 'needHotCity',
          });
          // 显示定位城市
          if (opt.showLocatedCity === true) {
              opt.currentCity = '';
              opt.adcode = '';
          }
          else {
              delete opt.currentCity;
              delete opt.adcode;
          }
          delete opt.showLocatedCity;
          // 自定义城市
          customCities = opt.customCities;
          if (opt.customCities) {
              opt.customCities = mapArray(customCities);
          }
          // 自定义热门城市
          customHotCities = opt.customHotCities;
          if (opt.customHotCities) {
              opt.customHotCities = mapArray(customHotCities);
          }
          // 自定义历史记录城市
          customHistoryCities = opt.customHistoryCities;
          if (opt.customHistoryCities) {
              opt.customHistoryCities = mapArray(customHistoryCities);
          }
          function mapArray(arr) {
              var tempArr;
              if (Array.isArray(arr)) {
                  tempArr = [];
                  arr.forEach(function (city) {
                      tempArr.push(mapping({}, {
                          adCode: 'adcode%s',
                          city: 'name',
                          spell: 'pinyin',
                      }, city));
                  });
                  arr = tempArr;
              }
              return arr;
          }
      },
      a: function (res) {
          mapping(res, {
              adcode: 'adCode',
          });
      },
  };
  var reGeoCode = {};
  var geoCode = {};
  var calculateRoute = {};
  var onContinuousLocation = {
      e: function () {
          return this.getEnvPlatformAndroid()
              ? "newContinuousLocation" /* EBridgeContinuousLocationMethod.AndroidEvent */
              : "continuousLocation" /* EBridgeContinuousLocationMethod.DefaultEvent */;
      },
  };
  var offContinuousLocation = {
      e: function () {
          return this.getEnvPlatformAndroid()
              ? "newContinuousLocation" /* EBridgeContinuousLocationMethod.AndroidEvent */
              : "continuousLocation" /* EBridgeContinuousLocationMethod.DefaultEvent */;
      },
  };
  var startContinuousLocation = {
      d: function (opt, cb) {
          this.callScopedBridge(this.getEnvPlatformAndroid()
              ? "startNewContinuousLocation" /* EBridgeContinuousLocationMethod.AndroidStart */
              : "startContinuousLocation" /* EBridgeContinuousLocationMethod.DefaultStart */, opt, cb);
      },
  };
  var stopContinuousLocation = {
      d: function (opt, cb) {
          this.callScopedBridge(this.getEnvPlatformAndroid()
              ? "stopNewContinuousLocation" /* EBridgeContinuousLocationMethod.AndroidStop */
              : "stopContinuousLocation" /* EBridgeContinuousLocationMethod.DefaultStop */, opt, cb);
      },
  };

  // tslint:disable object-literal-sort-keys
  var chooseImage = {
      b: function (opt) {
          opt.count = opt.count || 1;
          if (typeof opt.sourceType === 'string') {
              opt.sourceType = [opt.sourceType];
          }
      },
      a: function (res) {
          mapping(res, {
              errorCode: 'error',
              errorDesc: 'errorMessage',
              localIds: 'apFilePaths',
              tempFilePaths: 'apFilePaths',
          });
          // android 返回字符串
          if (typeof res.apFilePaths === 'string') {
              res.apFilePaths = JSON.parse(res.apFilePaths);
          }
          res.tempFilePaths = res.apFilePaths;
      },
  };
  var previewImage = {
      m: 'imageViewer',
      b: function (opt) {
          mapping(opt, {
              current: 'init%d',
              enableSavePhoto: 'enablesavephoto',
          });
          // 处理默认索引
          if (!opt.init) {
              opt.init = 0;
          }
          // 处理图片链接
          opt.images = [];
          (opt.urls || []).forEach(function (url) {
              opt.images.push({
                  u: url,
              });
          });
          delete opt.urls;
      },
  };
  var chooseVideo = {
      b: function (opt) {
          if (typeof opt.sourceType === 'string') {
              opt.sourceType = [opt.sourceType];
          }
          if (typeof opt.camera === 'string') {
              opt.camera = [opt.camera];
          }
      },
      a: function (res) {
          mapping(res, {
              errorCode: 'error',
              errorDesc: 'errorMessage',
              msg: 'errorMessage',
              localId: 'apFilePath',
              tempFilePath: 'apFilePath',
              tempFile: 'apFilePath',
          });
          if (res.apFilePath) {
              res.tempFilePath = res.apFilePath;
          }
          // ios和android都统一返回filePath
          if (!res.filePath) {
              res.filePath = res.apFilePath || res.tempFilePath;
          }
          switch (res.error) {
              case 0: // ios 成功
                  delete res.error;
                  break;
              case 1: // ios 参数出错
                  res.error = 2; // 通用参数无效
                  break;
              case 2: // ios 用户取消
                  res.error = 10; // android 用户取消
                  break;
              case 3: // ios 操作失败
                  res.error = 11; // android 操作失败
                  break;
              case 4: // ios 数据处理失败
                  res.error = 12;
                  break;
          }
      },
  };
  var saveImage = {
      b: function (opt) {
          mapping(opt, {
              url: 'src',
          });
          // 支持用户设置 showActionSheet
          return __assign({ showActionSheet: false, cusHandleResult: true }, opt);
      },
  };
  var getImageInfo = {};
  var compressImage = {
      b: function (opt) {
          // fix appx/af-appx#1179
          if (opt && typeof opt === 'object' && 'data' in opt) {
              delete opt.data;
          }
          if (opt && typeof opt === 'object' && 'dataType' in opt) {
              delete opt.dataType;
          }
      },
  };
  var getAvailableAudioSources = {};
  var saveVideoToPhotosAlbum = {};
  var generateImageFromCode = {};
  var saveImageToPhotosAlbum = {};
  var textToSpeech = {};
  var chooseFileFromDisk = {};

  // tslint:disable variable-name object-literal-sort-keys
  var showNavigationBarLoading = {
      m: 'showTitleLoading',
  };
  var hideNavigationBarLoading = {
      m: 'hideTitleLoading',
  };
  var setNavigationBar = {
      v: function (opt) {
          /**
           * 前景色只支持 #000000 和 #FFFFFF
           */
          if (typeof opt.frontColor !== 'undefined') {
              var transformedFrontColor = toType('%c', opt.frontColor);
              if (transformedFrontColor !== 16777215 /* EFrontColorValidValue.White */ &&
                  transformedFrontColor !== 0 /* EFrontColorValidValue.Black */) {
                  return {
                      error: 2,
                      errorMessage: "frontColor \u53C2\u6570 ".concat(opt.frontColor, " \u989C\u8272\u503C\u4E0D\u5408\u6CD5"),
                  };
              }
          }
      },
      b: function (opt) {
          // JSAPI 名称太长又多次引用，不利于代码压缩，固单独记录
          var st = 'setTitle';
          var stc = 'setTitleColor';
          var sblc = 'setBarBottomLineColor';
          var optionPageViewId = this.optionPageViewId;
          var _opt;
          if (optionPageViewId) {
              _opt = {
                  setTitle: { viewId: optionPageViewId },
                  setTitleColor: { viewId: optionPageViewId },
                  setBarBottomLineColor: { viewId: optionPageViewId },
              };
          }
          else {
              _opt = {
                  setTitle: {},
                  setTitleColor: {},
                  setBarBottomLineColor: {},
              };
          }
          // 映射不同 JSAPI 的入参
          _opt[st] = mapping(_opt[st], {
              title: 'title%s',
              image: 'image%b', // 处理 image 为 base64 的情况，为 native 移除格式头
          }, opt);
          _opt[stc] = mapping(_opt[stc], {
              backgroundColor: 'color%c',
              reset: 'reset',
              frontColor: 'frontColor%c',
          }, opt);
          _opt[sblc] = mapping(_opt[sblc], {
              borderBottomColor: 'color%c',
          }, opt);
          return _opt;
      },
      d: function (_opt, resolve) {
          var st = 'setTitle';
          var stc = 'setTitleColor';
          var sblc = 'setBarBottomLineColor';
          var res = {};
          // setTitle
          if (objectKeys$1(_opt[st]).length !== 0) {
              this.callDefaultBridge(st, _opt[st], undefined, this.optionPageViewId);
          }
          // setBarBottomLineColor
          if (objectKeys$1(_opt[sblc]).length !== 0) {
              if (isNaN(_opt[sblc].color)) {
                  res.error = 2;
                  res.errorMessage = '颜色值不合法';
              }
              else {
                  this.callDefaultBridge(sblc, _opt[sblc], undefined, this.optionPageViewId);
              }
          }
          // setTitleColor
          if (objectKeys$1(_opt[stc]).length !== 0) {
              if (isNaN(_opt[stc].color) && !_opt[stc].reset) {
                  res.error = 2;
                  res.errorMessage = '颜色值不合法';
                  resolve(res);
              }
              else {
                  this.callDefaultBridge(stc, _opt[stc], function (result) {
                      res = __assign(__assign({}, result), res);
                      resolve(res);
                  }, this.optionPageViewId);
              }
          }
          else {
              // setTitle 和 setBarBottomLineColor 本身没有回调
              // 为保持接口一致性要模拟一个异步回调
              resolve(res);
          }
      },
  };

  // c, p方法待续
  function addBase64Head(base64, mimeType) {
      // 如果已经以 data: 开头，则不加 base64 头
      if (base64 && base64.startsWith && base64.startsWith('data:')) {
          return base64;
      }
      if (base64 && mimeType) {
          base64 = "data:".concat(mimeType, ";base64,") + base64;
      }
      return base64;
  }
  function stringUrl(params) {
      return stringify(params);
  }
  function buildUrl(url, params) {
      var query = params || '';
      if (typeof params === 'object') {
          query = stringUrl(params);
      }
      if (query === '') {
          return url;
      }
      if (!/\?/.test(url)) {
          query = '?' + query;
      }
      else if (!/&$/.test(url) && !/\?$/.test(url)) {
          query = '&' + query;
      }
      return url + query;
  }
  function _isLocalId(localId) {
      return /^[a-z0-9|]+$/i.test(localId);
  }
  function isFormUrlEncode(contentType) {
      return /^application\/x-www-form-urlencoded\b/i.test(contentType);
  }
  function map(fn, obj) {
      var realData = {};
      for (var _i = 0, _a = objectKeys$1(obj); _i < _a.length; _i++) {
          var key = _a[_i];
          realData[key] = fn(obj[key]);
      }
      return realData;
  }
  function transformUrlData(contentType, data) {
      var realData = data;
      if (isFormUrlEncode(contentType) && typeof data === 'object') {
          realData = map(function (value) { return (typeof value === 'object' ? JSON.stringify(value) : value); }, data);
      }
      return realData;
  }
  function buildHeader(originalHeaders) {
      var androidHeaders = [];
      var headers = objectKeys$1(originalHeaders);
      for (var _i = 0, headers_1 = headers; _i < headers_1.length; _i++) {
          var header = headers_1[_i];
          var androidHeader = {};
          androidHeader[header] = originalHeaders[header];
          androidHeaders.push(androidHeader);
      }
      return androidHeaders;
  }
  function transformData(contentType, data) {
      if (typeof data === 'undefined') {
          data = '';
      }
      else {
          if ('string' != typeof data) {
              if (isFormUrlEncode(contentType)) {
                  data = stringUrl(data);
              }
              else if (/^application\/json\b/i.test(contentType)) {
                  data = JSON.stringify(data);
              }
              else {
                  data = 'object' === typeof data ? JSON.stringify(data) : data.toString();
              }
          }
      }
      return data;
  }
  var rpc = {
      allowAbort: true,
      d: function (opt, cb) {
          var prefetchId = opt && opt.prefetchId;
          if (prefetchId) {
              var runtime = this.runtime();
              var enablePrefetchAPI = runtime.getEnv().originalStartupParams.enablePrefetchAPI;
              if (enablePrefetchAPI === 'YES' || enablePrefetchAPI === 'yes') {
                  var kernel = runtime.getKernel();
                  var extraInfo = runtime.getBridge().extraInfo;
                  var persistedInfo = extraInfo.kRpcPrefetchLog || (extraInfo.kRpcPrefetchLog = []);
                  var data_1 = kernel.__BRIDGE_GET_PREFETCH_DATA__(prefetchId);
                  kernel.__BRIDGE_REMOVE_PREFETCH_DATA__(prefetchId);
                  debug$2(function () { return '[APPX][JSAPI] rpc prefetch id: ' + prefetchId; });
                  debug$2(function () { return '[APPX][JSAPI] rpc prefetch request: ' + JSON.stringify(opt); });
                  debug$2(function () { return '[APPX][JSAPI] rpc prefetch response: ' + JSON.stringify(data_1); });
                  if (data_1) {
                      cb(data_1);
                      persistedInfo.push(prefetchId + ':1');
                      return;
                  }
                  else {
                      persistedInfo.push(prefetchId + ':0');
                  }
              }
          }
          // appx 这个竟然没加 domain？？
          this.callScopedBridge('rpc', opt, cb);
      },
  };
  var request = {
      allowAbort: true,
      t: true,
      /**
       * 接口可直接传入一个字符串（opt.url）
       * 参数 opt.data 支持对象，会转成 queryString
       * 入参改造 opt.dataType => opt.responseType，
       * opt.dataType 支持 json|text|base64，json 时会对返回数据调用一次 JSON.parse
       */
      b: function (opt) {
          opt.requestTaskId = this.taskId;
          var get = 'GET';
          // method 默认 'GET'
          opt.method = (opt.method || get).toUpperCase();
          /**
           * https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html
           * 微信request入参分析
           * dataType: 返回的数据格式 枚举值有 json | 其它，值为json时，会对结果做一次JSON.parse
           * responseType: 响应的数据类型 枚举值有 text | arraybuffer
           * https://baiyan.antfin.com/task/152098?bqlKey=277a5c5
           * 上述白雁里的case，开发者只传入{ responseType: 'arraybuffer' } 不传dataType
           * 为了兼容直接从微信转过来的代码使用姿势，在不设置dataTyp 且responseType值为arraybuffer/text时 做定向处理
           */
          // wx.request.responseType 的合法值只有text | arraybuffer
          if (opt.dataType === undefined && (opt.responseType === 'arraybuffer' || opt.responseType === 'text')) {
              var _a = this.runtime()
                  .getBehaviorManager()
                  .get("requestBehaviors" /* ESharedAppxSwitchManagerName.RequestBehaviors */, 0 /* ESharedAppxSwitchManagerValue4RequestAPIIndex.ResponseType */), standard = _a.standard, report = _a.report;
              // 只能配开关，才会有report
              if (report) {
                  report("request.dataType is undefined and has request.responseType", {
                      url: opt.url,
                      responseType: opt.responseType,
                  });
              }
              if (standard) {
                  opt.dataType = opt.responseType;
              }
              else {
                  // 保持原样
                  // dataType 默认 'json'
                  opt.dataType = (opt.dataType || 'json').toLowerCase();
                  opt.responseType = opt.dataType;
              }
          }
          else {
              // dataType 默认 'json'
              opt.dataType = (opt.dataType || 'json').toLowerCase();
              opt.responseType = opt.dataType;
          }
          // 处理 responseType，非 base64 全当 text 对待
          opt.responseType = opt.responseType !== 'base64' && opt.responseType !== 'arraybuffer' ? 'text' : opt.responseType;
          // 处理 contentType，并强制 headers 为 object
          var headers = (opt.headers = opt.headers || {});
          var contentType = (headers['content-type'] =
              headers['content-type'] || headers['Content-Type'] || 'application/json');
          // 处理 android headers 转换为 JSONArray 格式
          if (this.getEnvPlatformAndroid()) {
              opt.headers = buildHeader(opt.headers);
          }
          // 处理 GET 时，手动拼装上 queryString
          if (opt.method === get) {
              // const { closeAssembleParams } = this.runtime().getEnv().originalStartupParams;
              // if (closeAssembleParams !== true) {
              opt.hasAssembleParams = true;
              opt.url = buildUrl(opt.url, transformUrlData(contentType, opt.data));
              // }
          }
          else if (opt.method === 'DELETE') {
              opt.hasAssembleParams = false;
          }
          if (typeof opt.data !== 'string' && isArrayBuffer(opt.data)) ;
          else {
              opt.data = transformData(contentType, opt.data);
          }
      },
      a: function (res, opt) {
          switch (opt.dataType) {
              // 处理 json
              case 'json':
                  if (res.data) {
                      try {
                          res.data = JSON.parse(res.data);
                      }
                      catch (e) {
                          if (res.error === undefined || res.error === 0) {
                              res.error = 14;
                              res.errorMessage = 'JSON parse data error';
                          }
                      }
                  }
                  break;
              // 处理 base64
              case 'base64':
                  if (res.data && res.headers) {
                      res.data = addBase64Head(res.data, res.headers['Content-Type'] || res.headers['content-type']);
                  }
                  break;
              // 处理 arraybuffer
              case 'arraybuffer':
                  if (res.data && !isArrayBuffer(res.data)) {
                      try {
                          res.data = base64ToArrayBuffer(res.data);
                      }
                      catch (e) {
                          if (res.error === undefined || res.error === 0) {
                              res.error = 14;
                              res.errorMessage = 'parse arraybuffer data error';
                          }
                      }
                  }
                  break;
          }
          // 处理错误
          if ('status' in res) {
              var status = res.status + '';
              if (/^[45]/.test(status)) {
                  if (res.error === undefined || res.error === 0) {
                      res.error = 19;
                      res.errorMessage = 'http status error';
                  }
              }
          }
      },
      c: function () {
          this.callScopedBridge('operateRequestTask', {
              operationType: 'abort',
              requestTaskId: this.taskId,
          });
      },
  };
  var httpRequest = {
      allowAbort: true,
      /**
       * 接口可直接传入一个字符串（opt.url）
       * 参数 opt.data 支持对象，会转成 queryString
       * 入参改造 opt.dataType => opt.responseType，
       * opt.dataType 支持 json|text|base64，json 时会对返回数据调用一次 JSON.parse
       */
      b: function (opt) {
          var get = 'GET';
          // method 默认 'GET'
          opt.method = (opt.method || get).toUpperCase();
          // dataType 默认 'json'
          opt.dataType = (opt.dataType || 'json').toLowerCase();
          opt.responseType = opt.dataType;
          // 强制 headers 为 object
          opt.headers = opt.headers || {};
          // 如果 data 是对象，则转成 queryString，
          if (typeof opt.data === 'object') {
              var headers = opt.headers;
              var contentType = headers['Content-Type'] || headers['content-type'];
              if (/^application\/json\b/i.test(contentType) && opt.method === 'POST') {
                  opt.data = JSON.stringify(opt.data);
              }
              else {
                  if (opt.method === get) {
                      opt.data = stringUrl(transformUrlData(contentType, opt.data));
                  }
                  else {
                      opt.data = stringUrl(opt.data);
                  }
              }
          }
          // 所以要处理 GET 时，手动拼装上 queryString
          if (opt.method === get && typeof opt.data === 'string') {
              opt.url = buildUrl(opt.url, opt.data);
          }
          // 处理 responseType，非 base64 全当 text 对待
          opt.responseType = opt.responseType !== 'base64' ? 'text' : 'base64';
          // 处理 android headers 转换为 JSONArray 格式
          if (this.getEnvPlatformAndroid()) {
              opt.headers = buildHeader(opt.headers);
          }
      },
      a: function (res, opt) {
          // 处理 json
          if (opt.dataType === 'json' && res.data) {
              try {
                  res.data = JSON.parse(res.data);
              }
              catch (e) {
                  res.error = 14;
                  res.errorMessage = 'JSON parse data error';
                  return;
              }
          }
          // 处理 base64
          if (opt.dataType === 'base64' && res.data && res.headers) {
              res.data = addBase64Head(res.data, res.headers['Content-Type'] || res.headers['content-type']);
          }
          // 处理错误
          if ('status' in res) {
              var status = res.status + '';
              if (/^[45]/.test(status)) {
                  res.error = 19;
                  res.errorMessage = 'http status error';
              }
          }
      },
  };
  var uploadFile = {
      allowAbort: true,
      progress: {
          key: 'uploadTask',
          getPayload: function (userEvent) {
              var _a = userEvent.data, _ = _a.uploadTaskId, rest = __rest(_a, ["uploadTaskId"]);
              return rest;
          },
          getTaskId: function (userEvent) {
              return [userEvent.data.uploadTaskId];
          },
      },
      t: true,
      b: function (opt) {
          opt.uploadTaskId = this.taskId;
          mapping(opt, {
              fileName: 'name',
              fileType: 'type',
              headers: 'header',
          });
          if (_isLocalId(opt.filePath)) {
              opt.localId = opt.filePath;
              delete opt.filePath;
          }
      },
      a: function (res) {
          if (res.error === 2) {
              res.error = 11;
          }
      },
      c: function () {
          this.callScopedBridge('operateUploadTask', {
              operationType: 'abort',
              uploadTaskId: this.taskId,
          });
      },
  };
  var uploadFileToAliCloud = {
      allowAbort: true,
      progress: {
          key: 'uploadTask',
          getPayload: function (userEvent) {
              var _a = userEvent.data, _ = _a.uploadTaskId, rest = __rest(_a, ["uploadTaskId"]);
              return rest;
          },
          getTaskId: function (userEvent) {
              return [userEvent.data.uploadTaskId];
          },
      },
      t: true,
      b: function (opt) {
          opt.uploadTaskId = this.taskId;
      },
      c: function () {
          this.callScopedBridge('operateUploadTask', {
              operationType: 'abort',
              uploadTaskId: this.taskId,
          });
      },
  };
  var downloadFile = {
      progress: {
          key: 'downloadTask',
          getPayload: function (userEvent) {
              var _a = userEvent.data, _ = _a.downloadTaskId, rest = __rest(_a, ["downloadTaskId"]);
              return rest;
          },
          getTaskId: function (userEvent) {
              return [userEvent.data.downloadTaskId];
          },
      },
      t: true,
      allowAbort: true,
      b: function (opt) {
          opt.downloadTaskId = this.taskId;
          /**
           *插件需要加上 plugin_isolation 否则，获取文件时会有权限问题
           * 1. 宿主加不加此参数，插件都获取不到文件
           * 2. 插件只有加此参数，才能正常通过 getFileInfo 获取文件
           */
          if (this.isMiniExtension) {
              opt.plugin_isolation = 'true';
          }
          /**
           * @description 经考证，客户端无 headers 参数
           */
          mapping(opt, {
              headers: 'header',
          });
      },
      a: function (res) {
          mapping(res, {
              errorCode: 'error',
              tempFilePath: 'apFilePath',
          });
          // 对齐微信，返回值暴露tempFilePath字段
          if (res.apFilePath) {
              res.tempFilePath = res.apFilePath;
          }
      },
      c: function () {
          // c for cancel
          this.callScopedBridge('operateDownloadTask', {
              downloadTaskId: this.taskId,
              operationType: 'abort',
          });
      },
  };
  var onNetworkStatusChange = {
      m: 'h5NetworkChange',
      a: function (res) {
          delete res.NBPageUrl;
      },
  };
  var offNetworkStatusChange = {
      m: 'h5NetworkChange',
  };
  var sendMtop = {};
  var getTBCode = {};
  var setTBSessionInfo = {};
  var getTBSessionInfo = {};
  var openRpc = {
      d: function (opt, resolve) {
          if (opt.protocols && opt.protocolParams === undefined) {
              opt.protocolParams = opt.protocols;
              delete opt.protocols;
          }
          this.callInternalAPI('appxrpc', __assign({ operationType: "com.alipay.openapi.jsapi.invoke" /* ESharedRPCOperationType.INVOKE */ }, opt), resolve);
      },
  };

  function getNavigateToMiniProgramOptions(appId, config, enableQuery) {
      var referrerInfo = {
          appId: appId,
      };
      var param = {};
      if (config.path) {
          param.page = config.path;
      }
      if (config.extraData) {
          referrerInfo.extraData = config.extraData;
      }
      param.referrerInfo = JSON.stringify(referrerInfo);
      if (enableQuery && config.query && typeof config.query === 'object') {
          param.query = stringify(__assign(__assign({}, config.query), { __queryObjectFromNavigateToMiniProgram__: 1 }));
      }
      var options = __assign(__assign({ appId: config.appId }, config), { param: param });
      // 使用 联调设置 方案: https://opendocs.alipay.com/mini/ide/integration-testing 明确不开放envVersion
      // const versions = ['develop', 'trial', 'release', 'examine'];
      // if (config.envVersion && versions.indexOf(config.envVersion) !== -1) {
      //   options.envVersion = config.envVersion;
      // }
      return options;
  }
  /**
   * 打开半屏小程序
   * 入参和 navigateToMiniProgram 保持一致
   */
  var openEmbeddedMiniProgram = {
      d: function (opt, cb) {
          this.callDefaultBridge('openEmbeddedMiniProgram', getNavigateToMiniProgramOptions(this.getEnvAppId(), opt, true), cb);
      },
  };

  var navigateToMiniProgram = {
      d: function (opt, cb) {
          // 默认支持query参数
          var enableQuery = this.runtime().getSwitchManager().get("NavigateToMiniProgramQuery" /* ESharedAppxSwitchManagerName.NavigateToMiniProgramQuery */) !== 0;
          this.callDefaultBridge('navigateToMiniProgram', getNavigateToMiniProgramOptions(this.getEnvAppId(), opt, enableQuery), cb);
      },
  };
  var navigateBackMiniProgram = {
      d: function (finalOpt, resolve) {
          var runtime = this.runtime();
          var lastAppId = runtime.getApp().getLaunchOptionReferrerInfoLastAppId(true);
          if (lastAppId) {
              var referrerInfo = {
                  _back: 1,
                  appId: this.getEnvAppId(),
              };
              if (finalOpt && finalOpt.extraData) {
                  referrerInfo.extraData = finalOpt.extraData;
              }
              var params = {
                  appId: lastAppId,
                  param: {
                      referrerInfo: JSON.stringify(referrerInfo),
                  },
              };
              if (runtime.getEnv().platform !== 'android') {
                  params.closeCurrentApp = true;
              }
              else if (runtime.getSwitchManager().get("fixNavigateBackMiniProgram245" /* ESharedAppxSwitchManagerName.FixNavigateBackMiniProgram */)) {
                  params.chInfo = 'ch_backfromtinyapp';
              }
              this.callDefaultBridge('navigateBackMiniProgram', params, resolve);
          }
          else {
              resolve({
                  error: 60001,
                  errorMessage: '调用无效。当前小程序不是由其他小程序打开',
              });
          }
      },
  };

  var hideAddToDesktopMenu = {
      m: 'hideOptionMenuItem',
      b: function (opt) {
          opt.scope = 'single';
          opt.name = 'add2Desktop';
      },
  };
  var hideAllAddToDesktopMenu = {
      m: 'hideOptionMenuItem',
      b: function (opt) {
          opt.scope = 'all';
          opt.name = 'add2Desktop';
      },
  };
  var hideFavoriteMenu = {
      m: 'hideOptionMenuItem',
      b: function (opt) {
          opt.scope = 'single';
          opt.name = 'favorite';
      },
  };
  var hideAllFavoriteMenu = {
      m: 'hideOptionMenuItem',
      b: function (opt) {
          opt.scope = 'all';
          opt.name = 'favorite';
      },
  };

  // shareToChannel原始版
  // function shareToChannel() {
  //   callBridge('shareToChannel', opts, cb);
  // }
  var hideShareMenu = {};
  var showSharePanel = {
      fnOptionIndex: 0,
      fn: function () {
          var page = this.runtime().getNav().getTopInstance();
          if (page.plugin.share) {
              page.plugin.share.startPageShare({ from: 'code' });
          }
      },
  };

  var setStorage = {
      m: 'setTinyLocalStorage',
      b: function (opt) {
          opt.value = JSON.stringify({ APDataStorage: opt.data });
          opt.data = opt.value;
          opt.key = String(opt.key);
          opt.type = 'user';
      },
      cache: {
          key: 'jsApi_tinyLocalStorage',
          set: function (persistInfo, option) {
              if (!persistInfo.cache) {
                  persistInfo.cache = {};
              }
              persistInfo.cache[option.key] = {
                  data: option.data,
              };
          },
      },
  };
  var getStorage = {
      m: 'getTinyLocalStorage',
      cache: {
          key: 'jsApi_tinyLocalStorage',
          get: function (persistInfo, option) {
              // 保证一定是新对象
              if (!persistInfo.cache) {
                  persistInfo.cache = {};
              }
              var rawResult = persistInfo.cache[option.key];
              if (rawResult && typeof rawResult === 'object') {
                  if (rawResult.data) {
                      // 避免原型链
                      return {
                          success: true,
                          data: rawResult.data,
                      };
                  }
                  else if (rawResult.error === 11) {
                      // 查无此 key 的近端拦截
                      return {
                          success: false,
                          error: 11,
                      };
                  }
              }
          },
          update: function (persistInfo, option, result) {
              if (!persistInfo.cache) {
                  persistInfo.cache = {};
              }
              if (result.data) {
                  persistInfo.cache[option.key] = {
                      data: result.data,
                  };
              }
              else if (result.error === 11) {
                  // 查无此 key 的记录
                  persistInfo.cache[option.key] = {
                      error: 11,
                  };
              }
          },
      },
      b: function (opt) {
          opt.key = String(opt.key);
          opt.type = 'user';
          var runtime = this.runtime();
          var nav = runtime.getNav();
          opt.isAppFirstPage = nav.isFirstPage();
      },
      a: function (res) {
          if (res.error === 11) {
              res.data = null;
              delete res.error;
              delete res.errorMessage;
              delete res.success;
          }
          if (res.data) {
              var data = JSON.parse(res.data);
              res.data = data.APDataStorage;
          }
      },
  };
  var removeStorage = {
      m: 'removeTinyLocalStorage',
      b: function (opt) {
          opt.key = String(opt.key);
          opt.type = 'user';
      },
      cache: {
          key: 'jsApi_tinyLocalStorage',
          set: function (persistInfo, option) {
              if (!persistInfo.cache) {
                  persistInfo.cache = {};
              }
              // 这里不存储 { error: 11 }
              // 开发者主动 remove 后再调用强制向下打穿
              persistInfo.cache[option.key] = null;
          },
      },
  };
  var clearStorage = {
      m: 'clearTinyLocalStorage',
      b: function (opt) {
          opt.type = 'user';
      },
      cache: {
          key: 'jsApi_tinyLocalStorage',
          set: function (persistInfo, option) {
              persistInfo.cache = {};
          },
      },
  };
  var getStorageInfo = {
      m: 'getTinyLocalStorageInfo',
  };

  var showToast = {
      m: 'toast',
  };
  var hideToast = {};

  function getTaskIdFromWebSocketEvent(event, taskContext) {
      var data = event.data || {};
      return [data.socketTaskID];
  }
  function getPayloadFromWebSocketEvent(event) {
      return event;
  }
  var BridgeWebSocketTask = /** @class */ /*#__PURE__*/ (function () {
      function BridgeWebSocketTask(appId, getRuntime, callScopedBridge) {
          this.type = 'SocketTask';
          var runtime = getRuntime();
          var bridge = runtime.getBridge();
          var extraInfo = bridge.extraInfo;
          if (!extraInfo["socketTaskIdBase" /* EBridgeExtraInfoKey.socketTaskIdBase */]) {
              extraInfo["socketTaskIdBase" /* EBridgeExtraInfoKey.socketTaskIdBase */] = 1;
          }
          else {
              ++extraInfo["socketTaskIdBase" /* EBridgeExtraInfoKey.socketTaskIdBase */];
          }
          var taskId = extraInfo["socketTaskIdBase" /* EBridgeExtraInfoKey.socketTaskIdBase */];
          this.id = String(taskId);
          var getEvent = function () { return getRuntime().getBridge().event; };
          this._getParams = this.__getParams.bind(this, appId);
          this.__doAction = this.___doAction.bind(this, callScopedBridge);
          this._listen = this.__listen.bind(this, getEvent);
          this._unListen = this.__unListen.bind(this, getEvent);
      }
      BridgeWebSocketTask.prototype.__getParams = function (appId) {
          return {
              bizIdentifier: appId,
              socketTaskID: this.id,
          };
      };
      BridgeWebSocketTask.prototype.__listen = function (getEventManager, eventName, callback) {
          getEventManager().taskManager.addMatcher(eventName, this.id, callback, getTaskIdFromWebSocketEvent, getPayloadFromWebSocketEvent);
      };
      BridgeWebSocketTask.prototype.__unListen = function (getEventManager, eventName, callback) {
          getEventManager().taskManager.removeMatcher(eventName, this.id, callback);
      };
      BridgeWebSocketTask.prototype.___doAction = function (callScopedBridge, opt, method) {
          var _a = opt || {}, success = _a.success, fail = _a.fail, complete = _a.complete, rest = __rest(_a, ["success", "fail", "complete"]);
          var callback = extractBridgeCallback(success, fail, complete, true);
          callScopedBridge(method, __assign(__assign({}, rest), this._getParams()), callback);
      };
      BridgeWebSocketTask.prototype.send = function (opt) {
          this.__doAction(opt, 'sendSocketMessage');
      };
      BridgeWebSocketTask.prototype.close = function (opt) {
          this.__doAction(opt, 'closeSocket');
      };
      BridgeWebSocketTask.prototype.onClose = function (handler) {
          this._listen('onSocketTaskClose', handler);
      };
      BridgeWebSocketTask.prototype.offClose = function (handler) {
          this._unListen('onSocketTaskClose', handler);
      };
      BridgeWebSocketTask.prototype.onError = function (handler) {
          this._listen('onSocketTaskError', handler);
      };
      BridgeWebSocketTask.prototype.offError = function (handler) {
          this._unListen('onSocketTaskError', handler);
      };
      BridgeWebSocketTask.prototype.onMessage = function (handler) {
          this._listen('onSocketTaskMessage', handler);
      };
      BridgeWebSocketTask.prototype.offMessage = function (handler) {
          this._unListen('onSocketTaskMessage', handler);
      };
      BridgeWebSocketTask.prototype.onOpen = function (handler) {
          this._listen('onSocketTaskOpen', handler);
      };
      BridgeWebSocketTask.prototype.offOpen = function (handler) {
          this._unListen('onSocketTaskOpen', handler);
      };
      return BridgeWebSocketTask;
  }());
  var connectSocket = {
      fnOptionIndex: 0,
      fn: function (opt) {
          var success = opt.success, fail = opt.fail, complete = opt.complete, rest = __rest(opt, ["success", "fail", "complete"]);
          var callback = extractBridgeCallback(success, fail, complete, true);
          if (!opt.multiple) {
              this.callScopedBridge('connectSocket', __assign({}, opt), callback);
          }
          else {
              var task = new BridgeWebSocketTask(this.getEnvAppId(), this.runtime, this.callScopedBridge.bind(this));
              this.callScopedBridge('connectSocket', __assign(__assign({}, rest), task._getParams()), callback);
              return task;
          }
      },
  };
  var sendSocketMessage = {};
  var closeSocket = {};
  var onSocketOpen = {};
  var offSocketOpen = {};
  var onSocketMessage = {};
  var offSocketMessage = {};
  var onSocketError = {};
  var offSocketError = {};
  var onSocketClose = {};
  var offSocketClose = {};

  var hideDebugVersion = {
      fnOptionIndex: false,
      fn: function (hide) {
          if (hide === void 0) { hide = true; }
          this.runtime().getLogger().hideDebugVersion(hide);
      },
  };

  var isSpeechRecognizeAvailable = {
      m: 'isSpeechAvailable',
  };
  var startSpeechRecognize = {
      m: 'startSpeech',
  };
  var stopSpeechRecognize = {
      m: 'stopSpeech',
  };
  var onSpeechRecognizeResult = {};
  var offSpeechRecognizeResult = {};
  var onSpeechRecognizeError = {};
  var offSpeechRecognizeError = {};

  var preloadCanvasImage = {
      a: function (finalResult) {
          var data = finalResult.data;
          if (data) {
              var ret_1 = {
                  loaded: {},
                  failed: {},
              };
              data.forEach(function (img) {
                  if (img.id === -1) {
                      ret_1.failed[img.url] = img;
                  }
                  else {
                      ret_1.loaded[img.url] = img;
                  }
              });
              return ret_1;
          }
          else {
              return {
                  loaded: {},
                  failed: {},
              };
          }
      },
  };

  var kJSAPI4HandleLoggingAction = 'handleLoggingAction';
  var reportAnalytics = {
      fnOptionIndex: false,
      fn: function (eventName, data) {
          var _a = this.runtime().getEnv()
              .originalStartupParams, appId = _a.appId, chInfo = _a.chInfo, _b = _a.cdpchinfo, cdpchinfo = _b === void 0 ? '' : _b, _c = _a.scm, scm = _c === void 0 ? '' : _c;
          var param4 = __assign(__assign({}, data), { SDKVersion: kAppxVersion, appId: appId, cdpchinfo: cdpchinfo, chInfo: chInfo, scm: scm });
          if (this.isMiniExtension) {
              param4._host_appId = appId;
              param4.appId = this.appxDomain.value;
          }
          this.callDefaultBridge('remoteLog', {
              spmId: eventName,
              param4: escapeLogParams(param4),
              type: 'behavior',
              bizType: this.getEnvAppBiz(),
              actionId: 'event',
              logLevel: 1,
          });
          // TODO: emit到new-tracker逻辑等埋点NPM包模块合并再实现
      },
  };
  var reportCustomEvent = {
      fnOptionIndex: false,
      fn: function (eventId, _extData) {
          var extData = __assign({}, _extData);
          var bizType;
          if (extData.bizType) {
              // 如果传入 bizType，antLogCategory 则不再设置
              delete extData.antLogCategory;
              bizType = extData.bizType;
          }
          else {
              extData.antLogCategory = "tinyapp-group-default" /* ESharedAntLogCatgory.Basic */;
              bizType = this.getEnvAppBiz();
          }
          this.callInternalAPI(kJSAPI4HandleLoggingAction, {
              actionType: "reportEvent" /* EActionType4HandleLoggingAction.ReportEvent */,
              params: {
                  eventId: eventId,
                  bizType: bizType,
                  extData: extData,
              },
              // https://aone.alipay.com/req/28788255
              logLevel: [1, 2, 3].indexOf(_extData.logLevel) > -1 ? _extData.logLevel : 2,
          });
      },
  };
  var getChinfoChain = {
      d: function (_, resolve) {
          this.callInternalAPI(kJSAPI4HandleLoggingAction, {
              actionType: "getChinfoChain" /* EActionType4HandleLoggingAction.GetChinfoChain */,
          }, function (res) {
              if (res && res.data) {
                  resolve(JSON.parse(res.data));
              }
              else {
                  resolve(res);
              }
          });
      },
      noPromise: true,
  };
  var appendChinfoChain = {
      d: function (opt, resolve) {
          var chinfo = opt.chinfo, scm = opt.scm;
          this.callInternalAPI(kJSAPI4HandleLoggingAction, {
              actionType: "appendChinfoChain" /* EActionType4HandleLoggingAction.AppendChinfoChain */,
              data: JSON.stringify({ chinfo: chinfo, scm: scm }),
          }, resolve);
      },
      noPromise: true,
  };

  var setOptionMenu = {
      d: function (opt, resolve) {
          var setOptionMenuKey;
          var showOptionMenuKey;
          var isAndroid = this.getEnvPlatformAndroid();
          if (!isAndroid) {
              setOptionMenuKey = 'setTAOptionMenu';
              showOptionMenuKey = 'showTAOptionMenu';
          }
          else {
              setOptionMenuKey = 'setOptionMenu';
              showOptionMenuKey = 'showOptionMenu';
          }
          this.callInternalAPI(setOptionMenuKey, __assign(__assign({}, opt), { bizType: 'tiny', __appxDomain: kBridgeAppxDomain4Appx.value }));
          this.callInternalAPI(showOptionMenuKey, { viewId: opt.viewId, __appxDomain: kBridgeAppxDomain4Appx.value });
      },
  };

  function pageScrollToErrorCodeToMessage(code) {
      switch (code) {
          case "1" /* ESharedPageScrollToErrorCode.InvalidParams */:
              return 'need scrollTop or selector';
          default:
              return 'unknown';
      }
  }
  var pageScrollTo = {
      d: function (opt, resolve) {
          if (opt === void 0) { opt = {}; }
          var pageInstance = this.runtime().getNav().getTopInstance();
          if (pageInstance) {
              pageInstance.invokeRenderMethod("pageScrollTo" /* ESharedAppxPageRenderMethod.PageScrollTo */, [opt], function (error, result) {
                  if (error) {
                      var errorCode = parseInt(error.message);
                      resolve({
                          error: errorCode,
                          errorMessage: pageScrollToErrorCodeToMessage(errorCode.toString()),
                      });
                  }
                  else {
                      resolve(result);
                  }
              });
          }
      },
  };

  var RUN_DATA_SPORT_SYS_ERROR = {
      error: 1001,
      errorMessage: '系统繁忙',
  };
  var RUN_DATA_SPORT_AUTH_ERROR = {
      error: 1003,
      errorMessage: '未授权支付宝应用计步权限',
  };
  var RUN_DATA_SPORT_SUPPORT_ERROR = {
      error: 1004,
      errorMessage: '用户设备不支持计步',
  };
  var RUN_DATA_SPORT_CLOSE_ERROR = {
      error: 1005,
      errorMessage: '用户未开通支付宝运动功能',
  };
  var kMyRunDataAppResume = 'appResume';
  var kMyRunDataBizId = 'merchant';
  var kMyRunDataAppId = 'miniapp';
  var cachedMyRunDataTimezoneId = '';
  var BridgeContext4MyRunData = /** @class */ /*#__PURE__*/ (function () {
      function BridgeContext4MyRunData(context, opt, resolve) {
          this.opt = opt;
          this.resolve = resolve;
          this.curAppId = context.getEnvAppId();
          var startupParams = context.runtime().getEnv().originalStartupParams;
          this.useNativeStep = startupParams['appXNativeStep'];
          this.context = context;
          this.isAndroid = context.getEnvPlatformAndroid();
          this.guideOpenStepCallback = this.guideOpenStepCallback.bind(this);
          this.schemeToAlipaySportsSettingCallback = this.schemeToAlipaySportsSettingCallback.bind(this);
      }
      BridgeContext4MyRunData.prototype.guideOpenStepCallback = function () {
          if (!this.doOpened) {
              this.querySwitchAuth(true);
          }
      };
      BridgeContext4MyRunData.prototype.schemeToAlipaySportsSettingCallback = function () {
          if (!this.doSettingOpened) {
              this.querySystemAuthorize(true);
          }
      };
      // 1、唤起授权
      BridgeContext4MyRunData.prototype.perform = function () {
          var _this = this;
          if (this.useNativeStep) {
              this.context.callInternalAPI('getRunData', __assign({ showTip: true }, this.opt), this.resolve);
              return;
          }
          this.context.callInternalAPI('getBusinessAuth', {
              scopeNicks: ['alipaysports'],
          }, function (res) {
              if (res &&
                  res.authSuccessScopes &&
                  res.authSuccessScopes.length &&
                  res.authSuccessScopes.indexOf('alipaysports') > -1) {
                  _this.querySwitchAuth();
              }
              else {
                  _this.resolve(RUN_DATA_SPORT_AUTH_ERROR);
              }
          });
      };
      // 2、检查运动账号是否开启
      BridgeContext4MyRunData.prototype.querySwitchAuth = function (opened) {
          var _this = this;
          var bridge = this.context.runtime().getBridge();
          if (opened) {
              this.doOpened = true;
              bridge.event.removeEventListener('appResume', 0 /* EBridgeEventCustomTypeContext.Raw */, this.guideOpenStepCallback);
          }
          this.context.callInternalAPI('appxrpc', {
              operationType: 'alipay.sportsprod.cooperation.data.querySwitchAuth',
              requestData: [
                  {
                      bizId: kMyRunDataBizId,
                      appId: kMyRunDataAppId,
                  } ],
              headers: {},
          }, function (res) {
              var switchStatus = res.switchStatus;
              if (switchStatus === 'OPEN') {
                  _this.queryDataSource();
                  return;
              }
              if (!_this.doOpened && (switchStatus === 'CLOSED' || switchStatus === 'NON_OPEN')) {
                  // 唤起开通页面
                  var appInfo = _this.context.callDefaultBridgeSync('getAppInfo', {
                      appId: _this.curAppId,
                      stageCode: '',
                  });
                  _this.context.callInternalAPI('startApp', {
                      appId: '20000869',
                      param: {
                          url: '/www/open.htm?sourceName=' + kMyRunDataAppId,
                          startMultApp: 'YES',
                          canPullDown: 'NO',
                          showOptionMenu: 'NO',
                          cAppName: appInfo.name,
                          cAppId: kMyRunDataAppId,
                          cBizId: kMyRunDataBizId,
                      },
                      closeCurrentApp: false,
                      appClearTop: false,
                  });
                  bridge.event.addEventListener(kMyRunDataAppResume, 0 /* EBridgeEventCustomTypeContext.Raw */, _this.guideOpenStepCallback);
                  return;
              }
              _this.resolve(RUN_DATA_SPORT_CLOSE_ERROR);
          });
      };
      // 3、检测是否有支持计步的设备
      BridgeContext4MyRunData.prototype.queryDataSource = function () {
          var _this = this;
          this.context.callInternalAPI('healthKitRequest', {
              requestType: 'isAvailable',
          }, function (res) {
              if (res && res.timezoneId) {
                  cachedMyRunDataTimezoneId = res.timezoneId;
              }
              if (res && res.available) {
                  if (_this.isAndroid) {
                      _this.queryStepDailyCount();
                  }
                  else {
                      _this.querySystemAuthorize();
                  }
                  return;
              }
              if (_this.isAndroid) {
                  _this.resolve(RUN_DATA_SPORT_SUPPORT_ERROR);
                  return;
              }
              // 查询数据来源(支持设备)
              _this.context.callInternalAPI('appxrpc', {
                  operationType: 'alipay.sportsprod.cooperation.data.queryDataSource',
                  requestData: [
                      {
                          bizId: kMyRunDataBizId,
                          appId: kMyRunDataAppId,
                      } ],
                  headers: {},
              }, function (res) {
                  if (res.isSuccess && res.dataSourceVos && res.dataSourceVos.length) {
                      _this.querySystemAuthorize();
                  }
                  else {
                      _this.resolve(RUN_DATA_SPORT_SUPPORT_ERROR);
                  }
              });
          });
      };
      BridgeContext4MyRunData.prototype.querySystemAuthorize = function (settingOpened) {
          var _this = this;
          var bridge = this.context.runtime().getBridge();
          if (settingOpened) {
              this.doSettingOpened = true;
              bridge.event.removeEventListener(kMyRunDataAppResume, 0 /* EBridgeEventCustomTypeContext.Raw */, this.schemeToAlipaySportsSettingCallback);
          }
          // 检测系统计步相关权限
          this.context.callInternalAPI('healthKitRequest', {
              requestType: 'hasStepCountAuthorization',
          }, function (res) {
              if (res && res.authorizationStatus === 'authorizationStatusSharingAuthorized') {
                  _this.queryStepDailyCount();
                  return;
              }
              if (settingOpened) {
                  _this.resolve(RUN_DATA_SPORT_AUTH_ERROR);
                  return;
              }
              // 转到系统设置界面
              _this.context.callInternalAPI('healthKitRequest', {
                  requestType: 'schemeToAlipaySportsSetting',
              });
              bridge.event.addEventListener(kMyRunDataAppResume, 0 /* EBridgeEventCustomTypeContext.Raw */, _this.schemeToAlipaySportsSettingCallback);
          });
      };
      // 4、查询步数
      BridgeContext4MyRunData.prototype.queryStepDailyCount = function () {
          var _this = this;
          var opt = this.opt;
          var countDate = (opt && opt.countDate) || '';
          var timeZone = (opt && opt.timeZone) || cachedMyRunDataTimezoneId;
          this.context.callInternalAPI('appxrpc', {
              operationType: 'com.alipay.openapi.jsapi.invoke',
              requestData: [
                  {
                      appId: this.curAppId,
                      method: 'my.queryStepDailyCount',
                      bizContent: {
                          countDate: countDate,
                          timeZone: timeZone,
                      },
                  } ],
          }, function (res) {
              if (res && res.response) {
                  var payload = void 0;
                  try {
                      payload = JSON.parse(res.response);
                  }
                  catch (e) {
                      payload = RUN_DATA_SPORT_SYS_ERROR;
                  }
                  _this.resolve(payload);
              }
              else {
                  _this.resolve(RUN_DATA_SPORT_SYS_ERROR);
              }
          });
      };
      return BridgeContext4MyRunData;
  }());
  var getRunData = {
      d: function (opt, resolve) {
          var context = new BridgeContext4MyRunData(this, opt, resolve);
          context.perform();
      },
  };

  function isMiniService(env) {
      return env.startupParams.framework_sceneId === 'miniService';
  }
  function getSourceId(env) {
      return isMiniService(env) ? env.startupParams.appId : undefined;
  }
  function getTaskIdFromEvent(event) {
      return [event.data.serviceId];
  }
  function getPayloadFromEvent(event) {
      var _a = event.data, action = _a.action, data = _a.data, error = _a.error, _b = _a.errorMessage, errorMessage = _b === void 0 ? '' : _b;
      return {
          action: action,
          data: data,
          error: error,
          errorMessage: errorMessage,
      };
  }
  var navigateToMiniService = {
      noPromise: true,
      d: function (opt, resolve) {
          var runtime = this.runtime();
          var referrerInfo = {
              appId: this.getEnvAppId(),
              sourceServiceId: getSourceId(runtime.getEnv()),
              data: opt.extraData,
          };
          var taskManager = runtime.getBridge().event.taskManager;
          var taskId = opt.serviceId;
          taskManager.addMatcher('onMiniServiceMessage', taskId, function (res) {
              taskManager.removeMatcher('onMiniServiceMessage', taskId);
              resolve(res);
          }, getTaskIdFromEvent, getPayloadFromEvent);
          this.callScopedBridge('navigateToMiniService', {
              serviceId: opt.serviceId,
              servicePage: opt.servicePage,
              params: {
                  referrerInfo: JSON.stringify(referrerInfo),
              },
          });
      },
  };
  var startMiniService = {
      d: function (opt, resolve) {
          var runtime = this.runtime();
          var parentAppId = opt.parentAppId, sourceId = opt.sourceId;
          parentAppId = parentAppId || this.getEnvAppId();
          sourceId = sourceId || getSourceId(runtime.getEnv());
          var referrerInfo = {
              appId: parentAppId,
              sourceServiceId: sourceId,
              data: opt.extraData,
          };
          var taskManager = runtime.getBridge().event.taskManager;
          var taskId = opt.serviceId;
          taskManager.addMatcher('onMiniServiceMessage', taskId, function (res) {
              taskManager.removeMatcher('onMiniServiceMessage', taskId);
              resolve(res);
          }, getTaskIdFromEvent, getPayloadFromEvent);
          this.callInternalAPI('startMiniService', {
              serviceId: opt.serviceId,
              servicePage: opt.servicePage,
              parentAppId: parentAppId,
              sourceId: sourceId,
              params: {
                  referrerInfo: JSON.stringify(referrerInfo),
              },
          });
      },
  };
  var navigateBackFromMiniService = {
      noPromise: true,
      d: function (opt, resolve) {
          if (opt === void 0) { opt = {}; }
          this.callScopedBridge('navigateBackFromMiniService', {
              data: opt,
          }, resolve);
      },
  };

  var reportBizReady = {
      b: function (opt) {
          var now = typeof opt.availableTime === 'number' ? opt.availableTime : Date.now();
          opt.data = [
              {
                  name: 'availableTime',
                  value: '' + now,
              } ];
          delete opt.availableTime;
      },
      d: function (finalOpt, resolve) {
          var isIOS = this.getEnvPlatformIOS();
          var method = isIOS ? 'h5Monitor' : 'monitorH5Performance';
          this.callScopedBridge(method, finalOpt, resolve);
      },
  };
  var getVisitToken = {
      d: function (finalOpt, resolve) {
          this.callInternalAPI('appxrpc', {
              operationType: 'com.alipay.openapi.jsapi.standard.invoke',
              requestData: [
                  {
                      method: 'my.getVisitToken',
                      bizContent: {
                          token_type: finalOpt.tokenType,
                      },
                  } ],
          }, resolve);
      },
  };

  var MultipleWorkerConstructorImpl;
  function getMultipleWorkerConstructor() {
      var BridgeMultipleWorker = /** @class */ /*#__PURE__*/ (function () {
          function BridgeMultipleWorker(id, callContext) {
              this.id = id;
              var callScopedBridge = callContext.callScopedBridge.bind(callContext);
              var getEvent = function () { return callContext.runtime().getBridge().event; };
              this.postMessage = this._post.bind(this, callContext.getEnvAppId(), callScopedBridge);
              this.terminate = this._terminate.bind(this, callContext.getEnvAppId(), callScopedBridge, getEvent);
              this.onMessage = this._listen.bind(this, getEvent, 'multiWorkerMessage');
              this.offMessage = this._unListen.bind(this, getEvent, 'multiWorkerMessage');
          }
          BridgeMultipleWorker.prototype._post = function (appId, callScopedBridge, message) {
              callScopedBridge('multiWorkerPostMessage', {
                  message: message,
                  bizIdentifier: appId,
                  workerId: this.id,
              });
          };
          BridgeMultipleWorker.prototype._terminate = function (appId, callScopedBridge, getEventManager) {
              callScopedBridge('multiWorkerTerminate', {
                  bizIdentifier: appId,
                  workerId: this.id,
              });
              getEventManager().taskManager.removeMatcher('multiWorkerMessage', this.id);
          };
          BridgeMultipleWorker.prototype._listen = function (getEventManager, methodName, callback) {
              getEventManager().taskManager.addMatcher(methodName, this.id, callback, getWorkerIdFromEvent, getPayloadFromWorkerEvent);
          };
          BridgeMultipleWorker.prototype._unListen = function (getEventManager, methodName, callback) {
              getEventManager().taskManager.removeMatcher(methodName, this.id, callback);
          };
          return BridgeMultipleWorker;
      }());
      function getWorkerIdFromEvent(event) {
          var data = event.data || {};
          if (data.workerId !== undefined) {
              return ["".concat(data.workerId)];
          }
          else {
              // 严格依赖socketId
              return [];
          }
      }
      function getPayloadFromWorkerEvent(event) {
          var data = event.data || {};
          return data.message;
      }
      return BridgeMultipleWorker;
  }
  var createWorker = {
      fnOptionIndex: false,
      fn: function (url) {
          var kernel = this.runtime().getKernel();
          var nativeCreateWorker = kernel.getFrameworkContextSymbol('__nativeCreateWorker__');
          if (typeof nativeCreateWorker === 'function') {
              return nativeCreateWorker({
                  scriptPath: url,
                  __appxDomain: this.appxDomain.value,
              });
          }
          if (!MultipleWorkerConstructorImpl) {
              MultipleWorkerConstructorImpl = getMultipleWorkerConstructor();
          }
          var extraInfo = this.getBridgeExtraInfo();
          if (!extraInfo["multipleWorkerIdbase" /* EBridgeExtraInfoKey.multipleWorkerIdbase */]) {
              extraInfo["multipleWorkerIdbase" /* EBridgeExtraInfoKey.multipleWorkerIdbase */] = 0;
          }
          var workerId = extraInfo["multipleWorkerIdbase" /* EBridgeExtraInfoKey.multipleWorkerIdbase */]++;
          var worker = new MultipleWorkerConstructorImpl("".concat(workerId), this);
          this.callScopedBridge('createWorker', {
              scriptPath: url,
              bizIdentifier: this.getEnvAppId(),
              workerId: workerId,
          });
          return worker;
      },
  };

  function callBridge4SubscribeMsg(callInternalAPI, opt) {
      return getHasSubscribedEntityIds(callInternalAPI, opt)
          .then(function (_a) {
          var hasSubscribedEntityIds = _a.hasSubscribedEntityIds, hasUnsubscribedEntityIds = _a.hasUnsubscribedEntityIds;
          return new Promise(function (resolve) {
              callInternalAPI('APSocialNebulaPlugin.subscribeMsg', opt, function (result) {
                  var success = result.success, errorCode = result.errorCode;
                  var obj = getsubscribedEntityIdsFromResult(result);
                  var _a = obj.subscribedEntityIds, subscribedEntityIds = _a === void 0 ? [] : _a, _b = obj.unsubscribedEntityIds, unsubscribedEntityIds = _b === void 0 ? [] : _b;
                  var _c = obj.newRst, newRst = _c === void 0 ? {} : _c;
                  if (!result.show) {
                      subscribedEntityIds = hasSubscribedEntityIds;
                      unsubscribedEntityIds = hasUnsubscribedEntityIds;
                  }
                  var callbackRes;
                  if (success) {
                      callbackRes = __assign({ behavior: 'subscribe', keep: false, refuse: result.reject || false, result: {
                              currentSubscribedEntityIds: subscribedEntityIds.filter(function (x) { return !hasSubscribedEntityIds.includes(x); }),
                              subscribeEntityIds: subscribedEntityIds,
                              subscribedEntityIds: subscribedEntityIds,
                              unsubscribedEntityIds: unsubscribedEntityIds,
                          }, stat: 'ok' }, newRst);
                  }
                  else if (!success && errorCode === 11) {
                      subscribedEntityIds = hasSubscribedEntityIds;
                      unsubscribedEntityIds = opt.entityIds.filter(function (x) { return !hasSubscribedEntityIds.includes(x); });
                      callbackRes = __assign({ behavior: 'cancel', error: 11, errorCode: 11, errorMessage: '用户取消订阅', keep: false, refuse: result.reject || false, result: {
                              currentSubscribedEntityIds: [],
                              entityList: opt.entityIds,
                              subscribedEntityIds: subscribedEntityIds,
                              unsubscribedEntityIds: unsubscribedEntityIds,
                          }, stat: 'ok', success: false }, newRst);
                      subscribedEntityIds.forEach(function (x) { return (callbackRes[x] = 'accept'); });
                      unsubscribedEntityIds.forEach(function (x) { return (callbackRes[x] = 'reject'); });
                  }
                  else {
                      callbackRes = __assign({ behavior: '', error: errorCode || -1, errorCode: errorCode || -1, errorMessage: result.errorMessage || '订阅失败', keep: false, refuse: result.reject || false, result: {}, stat: 'failed', success: false }, newRst);
                  }
                  resolve(callbackRes || result);
              });
          });
      })
          .catch(function (error) {
          var errorRes = {
              behavior: '',
              error: 10,
              errorCode: 10,
              errorMessage: '系统异常',
              keep: false,
              refuse: false,
              result: {},
              show: false,
              stat: 'failed',
              success: false,
          };
          return errorRes;
      });
  }
  function getsubscribedEntityIdsFromResult(result) {
      var subscribedEntityIds = [];
      var unsubscribedEntityIds = [];
      var newRst = {};
      for (var _i = 0, _a = Object.keys(result); _i < _a.length; _i++) {
          var key = _a[_i];
          if (result[key] === 'accept') {
              subscribedEntityIds.push(key);
          }
          else if (result[key] === 'reject') {
              unsubscribedEntityIds.push(key);
          }
          if (key !== 'errorCode' && key !== 'errorMessage' && key !== 'reject' && key !== 'aboveContent') {
              newRst[key] = result[key];
          }
      }
      return {
          newRst: newRst,
          subscribedEntityIds: subscribedEntityIds,
          unsubscribedEntityIds: unsubscribedEntityIds,
      };
  }
  function getHasSubscribedEntityIds(callInternalAPI, opt) {
      return new Promise(function (resolve) {
          callInternalAPI('appxrpc', {
              headers: {},
              operationType: 'alipay.lifemsgprod.message.querySubscribeEntityList',
              requestData: [
                  {
                      bizType: 'template',
                      clientType: 'tinyapp',
                      entityIds: opt.entityIds,
                      ownerId: opt.appId,
                      serialNo: Math.random().toString(36).slice(2),
                      thirdTypeAppId: opt.thirdTypeAppId,
                      version: '2.0.0',
                  } ],
          }, function (res) {
              var hasSubscribedEntityIds = [];
              var hasUnsubscribedEntityIds = [];
              if (res.success && res.resultCode === 200) {
                  res.data.entityList.forEach(function (v) {
                      if (v.show === false) {
                          v.subscribeState === '1'
                              ? hasSubscribedEntityIds.push(v.entityId)
                              : hasUnsubscribedEntityIds.push(v.entityId);
                      }
                  });
              }
              resolve({ hasSubscribedEntityIds: hasSubscribedEntityIds, hasUnsubscribedEntityIds: hasUnsubscribedEntityIds });
          });
      });
  }

  var requestSubscribeMessage = {
      d: function (opt, resolve) {
          var _a, _b;
          var runtime = this.runtime();
          var pageInstance = runtime.getNav().getTopInstance();
          var startupParams = runtime.getEnv().originalStartupParams;
          var disableSubscribeMsgJSAPI = runtime
              .getSwitchManager()
              .get("disableSubscribeMsgJSAPI" /* ESharedAppxSwitchManagerName.DisableSubscribeMsgJSAPI */);
          var _c = opt.aboveContent, aboveContent = _c === void 0 ? false : _c;
          var nativeWebview = ((_a = pageInstance.elementUsage) === null || _a === void 0 ? void 0 : _a.webview.alive) && !((_b = pageInstance.elementUsage) === null || _b === void 0 ? void 0 : _b.webview.allowOverlay);
          //消息订阅jsapi方式： 消息订阅jsapi的开关 disableSubscribeMsgJSAPI 关闭 && 客户端版本 >= 10.2.56
          if (!disableSubscribeMsgJSAPI && (insideFeatureRuntimeVersion >= /* a_requestSubscribeMessage_jsapi_2_7_15:10.2.56 */ 10002056)) {
              if (nativeWebview || aboveContent) {
                  if (!opt.appId) {
                      opt.appId = startupParams.appId;
                  }
                  return callBridge4SubscribeMsg(this.callInternalAPI.bind(this), opt)
                      .then(function (callbackRes) {
                      resolve(callbackRes);
                  })
                      .catch(function (error) {
                      var errorRes = {
                          behavior: '',
                          error: 10,
                          errorCode: 10,
                          errorMessage: '系统异常',
                          keep: false,
                          refuse: false,
                          result: {},
                          show: false,
                          stat: 'failed',
                          success: false,
                      };
                      resolve(errorRes);
                  });
              }
          }
          //消息订阅web方式
          if (pageInstance) {
              pageInstance.invokeRenderMethod("msgSubscribe" /* ESharedAppxPageRenderMethod.MsgSubscribe */, [opt], function (error, result) {
                  if (error) {
                      // 暂无用
                      resolve({
                          error: 10,
                          errorMessage: error.message,
                      });
                  }
                  else {
                      // 有可能实际有 error
                      return resolve(result);
                  }
              });
          }
      },
  };

  function createSystemInfoProxy4Android(target, userAgent, startupParams, getResponseAsync, getResponseSync, disableGetWidthFromUA) {
      var response;
      var cache = Object.create(null);
      function tryFetchResponse(target, reason) {
          if (!response) {
              var res = getResponseSync(reason);
              if (res) {
                  response = __assign(__assign({}, res), cache);
              }
              else {
                  response = __assign({ error: 999, errorMessage: "System Error: Return ".concat(res) }, cache);
              }
              Object.assign(target, response);
          }
          return response;
      }
      getResponseAsync(function (res) {
          if (res && !response) {
              response = __assign(__assign({}, res), cache);
              Object.assign(target, response);
              debug$2(function () { return "[APPX][SystemInfo] responseproxy async hit"; });
          }
          else {
              debug$2(function () { return "[APPX][SystemInfo] responseproxy async drop"; });
          }
      });
      return {
          defineProperty: function (target, p, attributes) {
              return Reflect.defineProperty(tryFetchResponse(target, 'defineProperty'), p, attributes);
          },
          deleteProperty: function (target, p) {
              return Reflect.deleteProperty(tryFetchResponse(target, 'deleteProperty'), p);
          },
          getOwnPropertyDescriptor: function (target, p) {
              return Reflect.getOwnPropertyDescriptor(tryFetchResponse(target, 'getOwnPropertyDescriptor'), p);
          },
          isExtensible: function (target) {
              return Reflect.isExtensible(tryFetchResponse(target, 'isExtensible'));
          },
          preventExtensions: function (target) {
              return Reflect.preventExtensions(tryFetchResponse(target, 'preventExtensions'));
          },
          getPrototypeOf: function (target) {
              return Reflect.getPrototypeOf(tryFetchResponse(target, 'getPrototypeOf'));
          },
          setPrototypeOf: function (target, v) {
              return Reflect.setPrototypeOf(tryFetchResponse(target, 'setPrototypeOf'), v);
          },
          has: function (target, p) {
              return Reflect.has(tryFetchResponse(target, "has:".concat(typeof p === 'symbol' ? p.toString() : p)), p);
          },
          get: function (target, p) {
              if (p === '__proto__') {
                  return Object.prototype;
              }
              if (p === 'constructor') {
                  return Object;
              }
              if (response) {
                  return response[p];
              }
              if (p in cache) {
                  return cache[p];
              }
              switch (p) {
                  case "app" /* ESystemInfoProperty.app */:
                      return 'alipay';
                  case "isIphoneXSeries" /* ESystemInfoProperty.isIphoneXSeries */:
                      return false;
                  case "platform" /* ESystemInfoProperty.platform */:
                      return 'Android';
                  case "platformType" /* ESystemInfoProperty.platformType */:
                      return 'ap';
                  case "titleBarHeight" /* ESystemInfoProperty.titleBarHeight */:
                      return 48;
                  case "language" /* ESystemInfoProperty.language */:
                  case "pixelRatio" /* ESystemInfoProperty.pixelRatio */:
                  case "screenWidth" /* ESystemInfoProperty.screenWidth */:
                  case "version" /* ESystemInfoProperty.version */:
                  case "system" /* ESystemInfoProperty.system */:
                  case "windowWidth" /* ESystemInfoProperty.windowWidth */: {
                      // 看 UA 是否存在
                      var info = getUserAgentInfo(userAgent, disableGetWidthFromUA);
                      if (info[p]) {
                          return info[p];
                      }
                      break;
                  }
                  case "apiLevel" /* ESystemInfoProperty.apiLevel */:
                  case "model" /* ESystemInfoProperty.model */:
                  case "brand" /* ESystemInfoProperty.brand */:
                  case "statusBarHeight" /* ESystemInfoProperty.statusBarHeight */:
                      {
                          // 看 _preset_systeminfo 数据
                          var info = getPreset(startupParams);
                          if (info[p]) {
                              return info[p];
                          }
                      }
                      break;
              }
              var str = p;
              if (typeof p === 'symbol') {
                  if (typeof Symbol === 'function' && p === Symbol.toStringTag) {
                      return 'Object';
                  }
                  str = p.toString();
              }
              debug$2(function () { return "[APPX][SystemInfo] responseproxy miss by ".concat(str); });
              return tryFetchResponse(target, "get:".concat(str))[p];
          },
          ownKeys: function (target) {
              return Reflect.ownKeys(tryFetchResponse(target, 'ownKeys'));
          },
          set: function (target, p, v) {
              if (response) {
                  response[p] = v;
                  target[p] = v;
              }
              else {
                  cache[p] = v;
              }
              return true;
          },
      };
  }
  /**
   *
   * @param startupParams
   * @example {
   *   _preset_systeminfo: "{"build_board":"sdm845","build_manufacturer":"OnePlus","build_model":"ONEPLUS A6000","build_sdk_int":29,"statusBarHeight":30.47619,"titleBarHeight":48}"
   * }
   */
  function getPreset(startupParams) {
      var ret = {};
      if (startupParams && startupParams._preset_systeminfo) {
          try {
              var _a = JSON.parse(startupParams._preset_systeminfo), build_brand = _a.build_brand, build_manufacturer = _a.build_manufacturer, build_model = _a.build_model, build_sdk_int = _a.build_sdk_int, statusBarHeight = _a.statusBarHeight;
              if (typeof build_manufacturer === 'string' && typeof build_model === 'string') {
                  ret.model = "".concat(build_manufacturer, " ").concat(build_model);
              }
              if (typeof build_sdk_int === 'number') {
                  ret.apiLevel = build_sdk_int;
              }
              if (typeof build_brand === 'string') {
                  ret.brand = build_brand;
              }
              if (typeof statusBarHeight === 'number') {
                  ret.statusBarHeight = Math.floor(statusBarHeight);
              }
          }
          catch (_) { }
      }
      return ret;
  }
  /**
   *
   * @param ua
   * @example "Mozilla/5.0 (Linux; U; Android 10; zh-CN; ONEPLUS A6000 Build/QKQ1.190716.003) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/69.0.3497.100 UWS/3.22.2.17 Mobile Safari/537.36 UCBS/3.22.2.19_210719105448 Region/CN AlipayDefined(nt:WIFI,ws:411|0|2.625) AliApp(AP/10.2.30.7001) AlipayClient/10.2.30.7001 Language/zh-Hans isConcaveScreen/true ProductType/dev Ariver/1.0.0"
   * @returns
   */
  function getUserAgentInfo(ua, disableGetWidthFromUA) {
      var ret = {};
      // Language/zh-Hans
      var langMatch = ua.match(/Language\/(\S+)/);
      if (langMatch) {
          ret.language = langMatch[1];
      }
      // AlipayDefined(nt:WIFI,ws:360|0|3.0)
      var screenMatch = ua.match(/AlipayDefined\(.*ws:(\d+(?:\.\d+)?)\|(\d+(?:\.\d+)?)\|(\d+(?:\.\d+)?)/);
      if (screenMatch) {
          var pixelRatio = parseFloat(screenMatch[3]);
          var width = parseInt(screenMatch[1]);
          if (!isNaN(pixelRatio)) {
              ret.pixelRatio = pixelRatio;
              if (!isNaN(width) && !disableGetWidthFromUA) {
                  ret.windowWidth = width;
                  ret.screenWidth = Math.floor(width * pixelRatio + 0.5);
              }
          }
      }
      // AlipayClient/10.2.28.1769
      var versionMatch = ua.match(/AlipayClient\/(\S+)/);
      if (versionMatch) {
          ret.version = versionMatch[1];
      }
      var androidSystemMatch = ua.match(/;\s?Android\s(\d+);/);
      if (androidSystemMatch) {
          ret.system = androidSystemMatch[1];
      }
      return ret;
  }

  var getSystemInfo = {
      m: 'getSystemInfo',
      cache: cacheOfGetSystemInfo,
      b: function (option) {
          var runtime = this.runtime();
          var nav = runtime.getNav();
          option.isAppFirstPage = nav.isFirstPage();
      },
      a: function (res) {
          afterProcess4SystemInfo(res);
      },
      responseProxy: function (finalOption, getResponseSync, getResponseAsync) {
          if (typeof Proxy === 'undefined') {
              // 不支持 Proxy 时关闭代理
              return;
          }
          // iOS 先不搞， Devtool + Proxy + mutex 死锁了。。
          var factory = this.getEnvPlatformAndroid() ? createSystemInfoProxy4Android : undefined;
          if (!factory) {
              return;
          }
          var runtime = this.runtime();
          if (runtime.getEnv().clientName !== 'ap') {
              return;
          }
          var target = {};
          var disableGetWidthFromUA = runtime
              .getSwitchManager()
              .get("disableGetWidthFromUA" /* ESharedAppxSwitchManagerName.DisableGetWidthFromUA */);
          var proxyedTarget = new Proxy(target, factory(target, runtime.getEnv().userAgent, runtime.getEnv().originalStartupParams, function (cb) {
              if (runtime.getEnv().originalStartupParams.profileEnable) {
                  finalOption.reason = 'async';
              }
              return getResponseAsync(cb);
          }, function (reason) {
              if (runtime.getEnv().originalStartupParams.profileEnable) {
                  finalOption.reason = reason;
              }
              return getResponseSync();
          }, disableGetWidthFromUA));
          return proxyedTarget;
      },
  };
  var getSystemInfoSync = getSystemInfo;
  function afterProcess4SystemInfo(res) {
      var pixelRatio = 'pixelRatio';
      var windowWidth = 'windowWidth';
      var windowHeight = 'windowHeight';
      var language = 'language';
      var isIphoneXSeries = 'isIphoneXSeries';
      if (!('error' in res)) {
          res[pixelRatio] = toType('%f', res[pixelRatio]);
          res[windowWidth] = toType('%d', res[windowWidth]);
          res[language] = (res[language] || '').replace(/\s?\w+\/((?:\w|-)+)$/, '$1');
          res[windowHeight] = toType('%d', res[windowHeight]);
          res[isIphoneXSeries] = iphoneXSeriesIdentify(res['screenHeight']);
      }
  }

  var AnimationContext = /** @class */ /*#__PURE__*/ (function () {
      function AnimationContext(config) {
          this.config = [400, 'linear', 0, '50% 50% 0'];
          this.commands = [];
          this.animations = [];
          this.config = this._normalizeAnimationConfig(config);
      }
      AnimationContext.prototype.step = function (config) {
          var step = [this._normalizeAnimationConfig(config), this.commands];
          this.animations.push(step);
          this.commands = [];
          return this;
      };
      AnimationContext.prototype.export = function () {
          var animations = this.animations;
          this.animations = [];
          return [
              // 使用数组将表达字符串包裹
              // 在使用的时候，只有一个元素的数组 toString() 就能消掉这层包裹
              // 同时依靠数组实现属性刷新
              JSON.stringify(animations) ];
      };
      AnimationContext.prototype.opacity = function (opacity) {
          this._step(0 /* ESharedAnimationCommandIndex.opacity */, opacity);
          return this;
      };
      AnimationContext.prototype.backgroundColor = function (color) {
          this._step(1 /* ESharedAnimationCommandIndex.backgroundColor */, color);
          return this;
      };
      AnimationContext.prototype.width = function (length) {
          this._step(2 /* ESharedAnimationCommandIndex.width */, length);
          return this;
      };
      AnimationContext.prototype.height = function (length) {
          this._step(3 /* ESharedAnimationCommandIndex.height */, length);
          return this;
      };
      AnimationContext.prototype.rotate = function (deg) {
          this._step(4 /* ESharedAnimationCommandIndex.rotate */, deg);
          return this;
      };
      AnimationContext.prototype.rotateX = function (deg) {
          this._step(5 /* ESharedAnimationCommandIndex.rotateX */, deg);
          return this;
      };
      AnimationContext.prototype.rotateY = function (deg) {
          this._step(6 /* ESharedAnimationCommandIndex.rotateY */, deg);
          return this;
      };
      AnimationContext.prototype.scale = function (x, y) {
          if (y === undefined) {
              y = x;
          }
          this._step(7 /* ESharedAnimationCommandIndex.scale */, x, y);
          return this;
      };
      AnimationContext.prototype.scaleX = function (x) {
          this._step(8 /* ESharedAnimationCommandIndex.scaleX */, x);
          return this;
      };
      AnimationContext.prototype.scaleY = function (y) {
          this._step(9 /* ESharedAnimationCommandIndex.scaleY */, y);
          return this;
      };
      AnimationContext.prototype.translate = function (x, y) {
          this._step(10 /* ESharedAnimationCommandIndex.translate */, x, y);
          return this;
      };
      AnimationContext.prototype.translateX = function (x) {
          this._step(11 /* ESharedAnimationCommandIndex.translateX */, x);
          return this;
      };
      AnimationContext.prototype.translateY = function (y) {
          this._step(12 /* ESharedAnimationCommandIndex.translateY */, y);
          return this;
      };
      AnimationContext.prototype.top = function (length) {
          this._step(13 /* ESharedAnimationCommandIndex.top */, length);
          return this;
      };
      AnimationContext.prototype.left = function (length) {
          this._step(14 /* ESharedAnimationCommandIndex.left */, length);
          return this;
      };
      AnimationContext.prototype.bottom = function (length) {
          this._step(15 /* ESharedAnimationCommandIndex.bottom */, length);
          return this;
      };
      AnimationContext.prototype.right = function (length) {
          this._step(16 /* ESharedAnimationCommandIndex.right */, length);
          return this;
      };
      AnimationContext.prototype.rotateZ = function (deg) {
          this._step(17 /* ESharedAnimationCommandIndex.rotateZ */, deg);
          return this;
      };
      AnimationContext.prototype.rotate3d = function (x, y, z, deg) {
          this._step(18 /* ESharedAnimationCommandIndex.rotate3d */, x, y, z, deg);
          return this;
      };
      AnimationContext.prototype.skew = function (x, y) {
          if (y === void 0) { y = 0; }
          this._step(19 /* ESharedAnimationCommandIndex.skew */, x, y);
          return this;
      };
      AnimationContext.prototype.skewX = function (x) {
          this._step(20 /* ESharedAnimationCommandIndex.skewX */, x);
          return this;
      };
      AnimationContext.prototype.skewY = function (y) {
          this._step(21 /* ESharedAnimationCommandIndex.skewY */, y);
          return this;
      };
      AnimationContext.prototype.scaleZ = function (z) {
          this._step(22 /* ESharedAnimationCommandIndex.scaleZ */, z);
          return this;
      };
      AnimationContext.prototype.scale3d = function (sx, sy, sz) {
          this._step(23 /* ESharedAnimationCommandIndex.scale3d */, sx, sy, sz);
          return this;
      };
      AnimationContext.prototype.translateZ = function (z) {
          this._step(24 /* ESharedAnimationCommandIndex.translateZ */, z);
          return this;
      };
      AnimationContext.prototype.translate3d = function (tx, ty, tz) {
          this._step(25 /* ESharedAnimationCommandIndex.translate3d */, tx, ty, tz);
          return this;
      };
      AnimationContext.prototype._normalizeAnimationConfig = function (config) {
          if (config === void 0) { config = {}; }
          var defaultConfig = this.config;
          if (!config) {
              return defaultConfig;
          }
          else {
              var duration = config.duration !== undefined ? config.duration : defaultConfig[0 /* ESharedAnimationConfigIndex.duration */];
              var timingFunction = config.timeFunction !== undefined
                  ? config.timeFunction
                  : defaultConfig[1 /* ESharedAnimationConfigIndex.timingFunction */];
              var delay = config.delay !== undefined ? config.delay : defaultConfig[2 /* ESharedAnimationConfigIndex.delay */];
              var transformOrigin = config.transformOrigin !== undefined
                  ? config.transformOrigin
                  : defaultConfig[3 /* ESharedAnimationConfigIndex.transformOrigin */];
              return [duration, timingFunction, delay, transformOrigin];
          }
      };
      AnimationContext.prototype._step = function (name, arg1, arg2, arg3, arg4) {
          if (arg2 === undefined) {
              this.commands.push([name, arg1]);
          }
          else if (arg3 === undefined) {
              this.commands.push([name, arg1, arg2]);
          }
          else if (arg4 === undefined) {
              this.commands.push([name, arg1, arg2, arg3]);
          }
          else {
              this.commands.push([name, arg1, arg2, arg3, arg4]);
          }
      };
      return AnimationContext;
  }());

  var createAnimation = {
      fnOptionIndex: false,
      fn: function (config) {
          return new AnimationContext(config);
      },
  };

  var SelectorQueryContext = /** @class */ /*#__PURE__*/ (function () {
      function SelectorQueryContext(extensionId) {
          this.actions = [];
          this.extensionId = extensionId;
      }
      SelectorQueryContext.prototype.select = function (selector) {
          this.selector = {
              value: transformBridgeSelector(this.extensionId, selector),
              type: 'single',
          };
          return this;
      };
      SelectorQueryContext.prototype.selectAll = function (selector) {
          this.selector = {
              value: transformBridgeSelector(this.extensionId, selector),
              type: 'all',
          };
          return this;
      };
      SelectorQueryContext.prototype.selectViewport = function () {
          this.selector = {
              value: 'viewport',
              type: 'single',
          };
          return this;
      };
      SelectorQueryContext.prototype.boundingClientRect = function () {
          if (this.selector) {
              this.actions.push({
                  selector: this.selector,
                  type: 'rect',
              });
              this.selector = null;
          }
          return this;
      };
      SelectorQueryContext.prototype.scrollOffset = function () {
          if (this.selector) {
              this.actions.push({
                  selector: this.selector,
                  type: 'scroll',
              });
              this.selector = null;
          }
          return this;
      };
      SelectorQueryContext.prototype.exec = function (runtimeGetter, getPageInstance, callback) {
          var runtime = runtimeGetter();
          var pageInstance = getPageInstance();
          if (pageInstance) {
              // 新开一条消息通道，用于 render 层响应
              var actions_1 = this.actions;
              pageInstance.invokeRenderMethod("selectQuery" /* ESharedAppxPageRenderMethod.SelectQuery */, [actions_1], function (error, result) {
                  if (error) {
                      // 全部 null
                      callback(actions_1.map(function (d) { return null; }));
                  }
                  else {
                      callback(result);
                  }
              });
              var switchManager = runtime.getSwitchManager();
              if (switchManager && switchManager.get("selectorQueryContextClearActions" /* ESharedAppxSwitchManagerName.SelectorQueryContextClearActions */)) {
                  this.actions = [];
              }
          }
      };
      return SelectorQueryContext;
  }());
  function getSelectorQueryContext(runtime, getPageInstance, domain) {
      var extensionIdOrUndefined;
      if (domain && domain.type === "extension" /* EBridgeAppxDomainType.extension */) {
          extensionIdOrUndefined = domain.value;
      }
      var context = new SelectorQueryContext(extensionIdOrUndefined);
      context.exec = context.exec.bind(context, runtime, getPageInstance);
      return context;
  }

  var INativeCanvasVideoRecorderContext = /** @class */ /*#__PURE__*/ (function () {
      function INativeCanvasVideoRecorderContext(canvas, createVideoRecorder) {
          this.canvas = canvas;
          this.createVideoRecorder = createVideoRecorder;
          this.events = new SharedEventEmitter();
          this.hasOnErrorListened = false;
          this.fps = 30;
          this.createVideoRecorder = createVideoRecorder.bind(canvas);
      }
      INativeCanvasVideoRecorderContext.prototype.onError = function (callback) {
          this.events.addEventListener('error', callback);
      };
      INativeCanvasVideoRecorderContext.prototype.offError = function (callback) {
          this.events.removeEventListener('error', callback);
      };
      INativeCanvasVideoRecorderContext.prototype.onStop = function (callback) {
          return this.events.addEventListener('stop', callback);
      };
      INativeCanvasVideoRecorderContext.prototype.offStop = function (callback) {
          return this.events.removeEventListener('stop', callback);
      };
      INativeCanvasVideoRecorderContext.prototype.stop = function () {
          var _this = this;
          if (this.videoRecorder) {
              this.videoRecorder.stop({
                  onResult: function (res) {
                      _this.events.dispatchEvent('stop', res);
                  },
              });
          }
      };
      INativeCanvasVideoRecorderContext.prototype.setViewport = function (width, height) {
          this.width = width;
          this.height = height;
      };
      INativeCanvasVideoRecorderContext.prototype.setFps = function (fps) {
          this.fps = fps;
      };
      INativeCanvasVideoRecorderContext.prototype.start = function () {
          var _this = this;
          if (!this.videoRecorder) {
              this.width = this.width || this.canvas.width;
              this.height = this.height || this.canvas.height;
              this.videoRecorder = this.createVideoRecorder({
                  width: this.width,
                  height: this.height,
                  fps: this.fps,
              });
          }
          if (this.videoRecorder) {
              if (!this.hasOnErrorListened) {
                  // this.videoRecorder.onError 一直返回undefined。故需要维护标识 this.hasListenOnError
                  this.videoRecorder.onError = function (res) {
                      var publicErrorRes = {
                          error: res.err_code,
                          errorMessage: res.err_msg,
                      };
                      _this.events.dispatchEvent('error', publicErrorRes);
                  };
                  this.hasOnErrorListened = true;
              }
              this.videoRecorder.start();
          }
      };
      return INativeCanvasVideoRecorderContext;
  }());
  function noop$6() { }
  function fixToTempFilePath4NativeCanvas(nativeCanvas, shouldFixTempFilePath) {
      if (shouldFixTempFilePath && (insideFeatureRuntimeVersion >= /* f_canvasToTempFilePath_2_7_15:10.2.35 */ 10002035)) {
          var toTempFilePath_1 = nativeCanvas.toTempFilePath;
          nativeCanvas.toTempFilePath = function (args) {
              var _a = args || {}, _b = _a.success, success = _b === void 0 ? noop$6 : _b, _c = _a.complete, complete = _c === void 0 ? noop$6 : _c, rest = __rest(_a, ["success", "complete"]);
              toTempFilePath_1.apply(nativeCanvas, [
                  __assign(__assign({}, rest), { success: function (res) {
                          // tempFilePath为无效值，为了跟wx对齐，重置为apFilePath的值
                          if (res && res.apFilePath) {
                              res.tempFilePath = res.apFilePath;
                          }
                          success(res);
                      }, complete: function (res) {
                          // tempFilePath为无效值，为了跟wx对齐，重置为apFilePath的值
                          if (res && res.apFilePath) {
                              res.tempFilePath = res.apFilePath;
                          }
                          complete(res);
                      } }) ]);
          };
      }
  }
  function setupVideoRecorderForNativeCanvas(nativeCanvas, extraInfo, shouldFixTempFilePath) {
      if ((insideFeatureRuntimeVersion >= /* a_Canvas_getVideoRecorder_2_7_4:10.2.26 */ 10002026)) {
          var createVideoRecorder_1 = nativeCanvas && nativeCanvas.createVideoRecorder;
          if (createVideoRecorder_1 !== undefined) {
              var map_1 = extraInfo["canvasVideoRecorders" /* EBridgeExtraInfoKey.canvasVideoRecorders */];
              if (!map_1) {
                  extraInfo["canvasVideoRecorders" /* EBridgeExtraInfoKey.canvasVideoRecorders */] = map_1 = createWeakMap();
              }
              nativeCanvas.createVideoRecorder = undefined;
              nativeCanvas.getVideoRecorder = function () {
                  var videoRecorderContext;
                  if (map_1.has(nativeCanvas)) {
                      videoRecorderContext = map_1.get(nativeCanvas);
                  }
                  else {
                      videoRecorderContext = createVideoRecorderContext(nativeCanvas, createVideoRecorder_1);
                      map_1.set(nativeCanvas, videoRecorderContext);
                  }
                  return videoRecorderContext;
              };
          }
      }
      fixToTempFilePath4NativeCanvas(nativeCanvas, shouldFixTempFilePath);
      return nativeCanvas;
  }
  function createVideoRecorderContext(canvas, createVideoRecorderImpl) {
      var context = new INativeCanvasVideoRecorderContext(canvas, createVideoRecorderImpl);
      var publicInstance = {
          start: context.start.bind(context),
          stop: context.stop.bind(context),
          onError: context.onError.bind(context),
          offError: context.offError.bind(context),
          onStop: context.onStop.bind(context),
          offStop: context.offStop.bind(context),
          setViewport: context.setViewport.bind(context),
          setFps: context.setFps.bind(context),
      };
      return publicInstance;
  }

  var QuerySelectorCallbackManager = /** @class */ /*#__PURE__*/ (function () {
      function QuerySelectorCallbackManager(context, pageInstance) {
          this.executable = false;
          this.count = 0;
          this.callbacks = [];
          this.context = context;
          this.pageInstance = pageInstance;
      }
      QuerySelectorCallbackManager.prototype.inc = function () {
          this.count += 1;
      };
      QuerySelectorCallbackManager.prototype.dec = function () {
          this.count -= 1;
          this.flush();
      };
      QuerySelectorCallbackManager.prototype.push = function (cb) {
          this.callbacks.push(cb);
      };
      QuerySelectorCallbackManager.prototype.ready = function () {
          this.executable = true;
          this.flush();
      };
      QuerySelectorCallbackManager.prototype.createContext = function (method, id) {
          var _a = this, pageInstance = _a.pageInstance, context = _a.context;
          return context.runtime().getBridge().getScope(context.appxDomain).call4LinkedContext(method, true, id, {
              page: pageInstance.getPageLogicInstance().publicInstance,
          });
      };
      QuerySelectorCallbackManager.prototype.createCanvas = function (id, done) {
          // JSI 支付宝 95 及之前还未适配 __createCanvas
          // 可能会返回 null
          var _a = this, pageInstance = _a.pageInstance, context = _a.context;
          pageInstance.whenCompositeElementReady(id, function () {
              var createNode = getNativeFunctionIfExisted("__createCanvas" /* ENativeV8PluginFunctionName.createCanvas */, context.runtime().getKernel().getFrameworkContextSymbol);
              done(createNode
                  ? setupVideoRecorderForNativeCanvas(createNode(pageInstance.pageId, id), context.getBridgeExtraInfo(), context.runtime().getSwitchManager().get("fixTempFilePath" /* ESharedAppxSwitchManagerName.FixTempFilePath */) !== 0)
                  : null);
          });
      };
      QuerySelectorCallbackManager.prototype.createAr = function (id, done) {
          // 10.2.0 开始提供 __createAR 函数
          // v8 才有 __createAR，JSI 待适配
          // 低版本客户端AR为单例，直接返回
          var _a = this, pageInstance = _a.pageInstance, context = _a.context;
          pageInstance.whenCompositeElementReady(id, function () {
              var node = null;
              if ((insideFeatureRuntimeVersion >= /* a_createAR_2_6_4:10.2.0 */ 10002000)) {
                  var createNode = getNativeFunctionIfExisted("__createAR" /* ENativeV8PluginFunctionName.createAR */, context.runtime().getKernel().getFrameworkContextSymbol);
                  if (createNode) {
                      node = createNode(pageInstance.pageId, id);
                  }
              }
              else if (typeof AR !== 'undefined') {
                  node = AR;
              }
              done(node);
          });
      };
      QuerySelectorCallbackManager.prototype.flush = function () {
          if (this.count === 0 && this.executable) {
              var callbacks = this.callbacks;
              for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {
                  var cb = callbacks_1[_i];
                  cb();
              }
          }
      };
      return QuerySelectorCallbackManager;
  }());
  function responseSelectorQueryContextCallback(execCallback, actionCallbacks, responses, callContext, pageInstance) {
      var manager = new QuerySelectorCallbackManager(callContext, pageInstance);
      for (var index = 0; index < responses.length; index += 1) {
          var response = responses[index];
          var actionCallback = actionCallbacks[index];
          for (var _i = 0, _a = Array.isArray(response) ? response : [response]; _i < _a.length; _i++) {
              var detail = _a[_i];
              if (detail && handleDetail(detail, manager)) {
                  manager.inc();
              }
          }
          if (typeof actionCallback === 'function') {
              manager.push(actionCallback.bind(null, response));
          }
      }
      if (typeof execCallback === 'function') {
          manager.push(execCallback.bind(null, responses));
      }
      manager.ready();
  }
  function handleDetail(detail, manager) {
      if (detail.contextName) {
          return handleContextCallback(detail, manager);
      }
      if (detail.nodeName) {
          switch (detail.nodeName) {
              case 'canvas':
                  return handleCanvasNodeCallback(detail, manager);
              case 'ar':
                  return handleArNodeCallback(detail, manager);
          }
      }
  }
  // 参照微信公开文档以及实际表现
  // 先只暴露 video、map、以及 live-player
  function getContextCreateMethod(contextName) {
      switch (contextName) {
          case 'video':
              return 'createVideoContext';
          case 'live-player':
              return 'createLivePlayerContext';
          case 'map':
              return 'createMapContext';
      }
  }
  function handleContextCallback(detail, manager) {
      var contextCreateMethod = getContextCreateMethod(detail.contextName);
      if (contextCreateMethod) {
          detail.context = manager.createContext(contextCreateMethod, detail.contextId);
          manager.dec();
          return true;
      }
  }
  function handleCanvasNodeCallback(detail, manager) {
      var nodeId = detail.nodeId;
      detail.node = null;
      manager.createCanvas(nodeId, function (node) {
          detail.node = node;
          manager.dec();
      });
      return true;
  }
  function handleArNodeCallback(detail, manager) {
      var nodeId = detail.nodeId;
      detail.node = null;
      manager.createAr(nodeId, function (node) {
          detail.node = node;
          manager.dec();
      });
      return true;
  }

  function validateAndWarnLooseSelector(callContext, selector) {
      if (isConsoleAvaliableToDeveloper(callContext.runtime().getEnv().packageAndRunSceneType) &&
          (selector + '').indexOf('>>>') > -1) {
          // tslint:disable-next-line no-console
          console.error('my.createSelectorQuery() 不支持 >>> 选择器，请使用 this.createSelectorQuery()');
      }
  }
  var EnhancedSelectorQueryContext = /** @class */ /*#__PURE__*/ (function () {
      function EnhancedSelectorQueryContext(callContext, extensionId, strict) {
          this.actions = [];
          this.callbacks = [];
          this.componentId = null;
          this.callContext = callContext;
          this.extensionId = extensionId;
          this.strict = strict;
      }
      EnhancedSelectorQueryContext.prototype.in = function (publicContext, component) {
          if (this.strict) {
              var callContext = this.callContext;
              // 严格模式，要求传入同页面的其他自定义组件或者页面本身
              // 所以此模式下也不会去改 this.viewId
              var pageInstance = callContext.getPageInstance();
              // 传入本页面的自定义组件
              if (pageInstance ===
                  getFlexiblePageInstanceByComponentPublicInstance(callContext.runtime, component)) {
                  this.componentId = component.$id;
                  this.viewId = pageInstance.pageId;
              }
              // 指向页面本身
              // 插件拿到的 publicInstance 是伪的
              // 故默认地插件自定义组件不能改指向宿主页面
              else if (component === pageInstance.getPageLogicInstance().publicInstance) {
                  this.componentId = null;
                  this.viewId = pageInstance.pageId;
              }
              // 其他情况告警
              else if (isConsoleAvaliableToDeveloper(callContext.runtime().getEnv().packageAndRunSceneType)) {
                  // tslint:disable-next-line no-console
                  console.error('this.createSelectorQuery().in() 仅支持当前所在页面的自身或自定义组件');
              }
          }
          else if (component) {
              this.componentId = component.$id;
              this.viewId = component.$page && component.$page.$viewId;
          }
          return publicContext;
      };
      EnhancedSelectorQueryContext.prototype.select = function (publicContext, selector) {
          this.selector = {
              type: 'single',
              value: this.transformSelector(selector),
          };
          return publicContext;
      };
      EnhancedSelectorQueryContext.prototype.fields = function (publicContext, option, callback) {
          if (this.selector) {
              this.actions.push({
                  option: option,
                  selector: this.selector,
              });
              if (typeof callback === 'function') {
                  this.callbacks.push(callback);
              }
              else {
                  this.callbacks.push(null);
              }
              this.selector = null;
          }
          return publicContext;
      };
      EnhancedSelectorQueryContext.prototype.selectAll = function (publicContext, selector) {
          this.selector = {
              type: 'all',
              value: this.transformSelector(selector),
          };
          return publicContext;
      };
      EnhancedSelectorQueryContext.prototype.selectViewport = function (publicContext) {
          this.selector = {
              type: 'single',
              value: 'viewport',
          };
          return publicContext;
      };
      EnhancedSelectorQueryContext.prototype.context = function (publicContext, callback) {
          if (this.selector) {
              this.actions.push({
                  option: {
                      context: true,
                  },
                  selector: this.selector,
              });
              if (typeof callback === 'function') {
                  this.callbacks.push(callback);
              }
              else {
                  this.callbacks.push(null);
              }
              this.selector = null;
          }
          return publicContext;
      };
      EnhancedSelectorQueryContext.prototype.node = function (publicContext, callback) {
          if (this.selector) {
              this.actions.push({
                  option: {
                      node: true,
                  },
                  selector: this.selector,
              });
              if (typeof callback === 'function') {
                  this.callbacks.push(callback);
              }
              else {
                  this.callbacks.push(null);
              }
              this.selector = null;
          }
          return publicContext;
      };
      EnhancedSelectorQueryContext.prototype.toImage = function (publicContext, option, callback) {
          if (this.selector) {
              this.actions.push({
                  option: {
                      toImage: option,
                  },
                  selector: this.selector,
              });
              if (typeof callback === 'function') {
                  this.callbacks.push(callback);
              }
              this.selector = null;
          }
          return publicContext;
      };
      EnhancedSelectorQueryContext.prototype.boundingClientRect = function (publicContext, callback) {
          if (this.selector) {
              this.actions.push({
                  option: {
                      dataset: true,
                      id: true,
                      rect: true,
                      size: true,
                  },
                  selector: this.selector,
                  type: 'rect',
              });
              if (typeof callback === 'function') {
                  var behavior = this.callContext
                      .runtime()
                      .getBehaviorManager()
                      .get("enableSelectorQueryBoundingClientRectCallback" /* ESharedAppxSwitchManagerName.EnableSelectorQueryBoundingClientRectCallback */);
                  if (behavior.report) {
                      behavior.report('invoke selectorQuery.boundingClientRect with callback param');
                  }
                  if (behavior.standard) {
                      this.callbacks.push(callback);
                  }
              }
              this.selector = null;
          }
          return publicContext;
      };
      EnhancedSelectorQueryContext.prototype.scrollOffset = function (publicContext, callback) {
          if (this.selector) {
              this.actions.push({
                  option: {
                      dataset: true,
                      id: true,
                      scrollOffset: true,
                  },
                  selector: this.selector,
                  type: 'scroll',
              });
              if (typeof callback === 'function') {
                  var behavior = this.callContext
                      .runtime()
                      .getBehaviorManager()
                      .get("enableSelectorQueryScrollOffsetCallback" /* ESharedAppxSwitchManagerName.EnableSelectorQueryScrollOffsetCallback */);
                  if (behavior.report) {
                      behavior.report('invoke selectorQuery.scrollOffset with callback param');
                  }
                  if (behavior.standard) {
                      this.callbacks.push(callback);
                  }
              }
              this.selector = null;
          }
          return publicContext;
      };
      EnhancedSelectorQueryContext.prototype.exec = function (callback) {
          var _a = this, callContext = _a.callContext, viewId = _a.viewId, componentId = _a.componentId, strict = _a.strict, extensionId = _a.extensionId;
          var runtime = callContext.runtime();
          var appxDomain = callContext.appxDomain;
          var pageInstance;
          if (viewId) {
              pageInstance = runtime.getPageManager().getInstanceById(viewId);
          }
          // 严格模式下，this 绑定到具体的页面
          // 不允许指向其他页面
          if (!pageInstance && !strict) {
              pageInstance = callContext.getPageInstance();
          }
          if (pageInstance) {
              var actions_1 = this.actions;
              // 严格模式下，只能选择指定页面或自定义组件的内容
              // 会传入 in() 校验发起方是否合法
              // 合法后会写入 this.viewId
              if (!strict || viewId) {
                  var actionCallbacks_1 = this.callbacks;
                  pageInstance.invokeRenderMethod("selectQueryEnhanced" /* ESharedAppxPageRenderMethod.SelectQueryEnhanced */, [componentId, actions_1, strict, appxDomain], function (error, result) {
                      if (error) {
                          // 全部 null
                          callback(actions_1.map(getNull));
                      }
                      else {
                          responseSelectorQueryContextCallback(callback, actionCallbacks_1, result, callContext, pageInstance);
                      }
                  });
              }
              else {
                  callback(actions_1.map(getNull));
              }
              var switchManager = runtime.getSwitchManager();
              if (switchManager && switchManager.get("selectorQueryContextClearActions" /* ESharedAppxSwitchManagerName.SelectorQueryContextClearActions */)) {
                  this.actions = [];
              }
              this.callbacks = [];
              this.componentId = null;
          }
      };
      EnhancedSelectorQueryContext.prototype.transformSelector = function (selector) {
          // 严格模式下，选择器不需要变更，渲染层会校验的
          if (selector && !this.strict) {
              validateAndWarnLooseSelector(this.callContext, selector);
              selector = transformBridgeSelector(this.extensionId, selector);
          }
          return selector;
      };
      return EnhancedSelectorQueryContext;
  }());
  function getEnhancedSelectorQueryContext(callContext, strict) {
      var enableSelectorQueryToImage = callContext
          .runtime()
          .getSwitchManager()
          .get("enableSelectorQueryToImage" /* ESharedAppxSwitchManagerName.EnableSelectorQueryToImage */);
      var appxDomain = callContext.appxDomain;
      var extensionIdOrUndefined;
      if (appxDomain && appxDomain.type === "extension" /* EBridgeAppxDomainType.extension */) {
          extensionIdOrUndefined = appxDomain.value;
      }
      var queryContext = new EnhancedSelectorQueryContext(callContext, extensionIdOrUndefined, !!strict);
      var publicContext = {
          boundingClientRect: null,
          context: null,
          exec: null,
          fields: null,
          in: null,
          node: null,
          scrollOffset: null,
          select: null,
          selectAll: null,
          selectViewport: null,
          toImage: null,
      };
      if (!strict) {
          // UniApp 构建的小程序使用了 actions 来自己定义 exec 的回调行为
          // 因此在非严格模式下仍然允许其访问
          Object.defineProperty(publicContext, 'actions', {
              configurable: true,
              get: function () {
                  return queryContext.actions;
              },
              set: function (v) {
                  queryContext.actions = v;
              },
          });
      }
      publicContext.boundingClientRect = queryContext.boundingClientRect.bind(queryContext, publicContext);
      publicContext.context = queryContext.context.bind(queryContext, publicContext);
      publicContext.exec = queryContext.exec.bind(queryContext);
      publicContext.fields = queryContext.fields.bind(queryContext, publicContext);
      publicContext.in = queryContext.in.bind(queryContext, publicContext);
      publicContext.node = queryContext.node.bind(queryContext, publicContext);
      publicContext.scrollOffset = queryContext.scrollOffset.bind(queryContext, publicContext);
      publicContext.select = queryContext.select.bind(queryContext, publicContext);
      publicContext.selectAll = queryContext.selectAll.bind(queryContext, publicContext);
      publicContext.selectViewport = queryContext.selectViewport.bind(queryContext, publicContext);
      // toImage 使用白名单控制
      publicContext.toImage = enableSelectorQueryToImage ? queryContext.toImage.bind(queryContext, publicContext) : null;
      return publicContext;
  }
  function getNull() {
      return null;
  }

  var createSelectorQuery = {
      fnOptionIndex: 0,
      fn: function (option) {
          var currentPage = this.getPageInstance();
          var strict = option && option.strict;
          if (!strict && currentPage && currentPage.getEngineType() === 2 /* ESharedAppxPageEngineType.CubeEngine */) {
              return getSelectorQueryContext(this.runtime, this.getPageInstance.bind(this), this.appxDomain);
          }
          return getEnhancedSelectorQueryContext(this, strict);
      },
  };



  var API4My = {
      __proto__: null,
      showActionSheet: showActionSheet,
      startRecord: startRecord,
      stopRecord: stopRecord,
      cancelRecord: cancelRecord,
      playVoice: playVoice,
      pauseVoice: pauseVoice,
      resumeVoice: resumeVoice,
      stopVoice: stopVoice,
      playBackgroundAudio: playBackgroundAudio,
      pauseBackgroundAudio: pauseBackgroundAudio,
      stopBackgroundAudio: stopBackgroundAudio,
      seekBackgroundAudio: seekBackgroundAudio,
      getBackgroundAudioPlayerState: getBackgroundAudioPlayerState,
      onBackgroundAudioPlay: onBackgroundAudioPlay,
      offBackgroundAudioPlay: offBackgroundAudioPlay,
      onBackgroundAudioPause: onBackgroundAudioPause,
      offBackgroundAudioPause: offBackgroundAudioPause,
      onBackgroundAudioStop: onBackgroundAudioStop,
      offBackgroundAudioStop: offBackgroundAudioStop,
      openBluetoothAdapter: openBluetoothAdapter,
      closeBluetoothAdapter: closeBluetoothAdapter,
      getBluetoothAdapterState: getBluetoothAdapterState,
      startBluetoothDevicesDiscovery: startBluetoothDevicesDiscovery,
      stopBluetoothDevicesDiscovery: stopBluetoothDevicesDiscovery,
      getBluetoothDevices: getBluetoothDevices,
      getConnectedBluetoothDevices: getConnectedBluetoothDevices,
      connectBLEDevice: connectBLEDevice,
      disconnectBLEDevice: disconnectBLEDevice,
      writeBLECharacteristicValue: writeBLECharacteristicValue,
      readBLECharacteristicValue: readBLECharacteristicValue,
      notifyBLECharacteristicValueChange: notifyBLECharacteristicValueChange,
      getBLEDeviceServices: getBLEDeviceServices,
      getBLEDeviceCharacteristics: getBLEDeviceCharacteristics,
      onBLECharacteristicValueChange: onBLECharacteristicValueChange,
      offBLECharacteristicValueChange: offBLECharacteristicValueChange,
      onBluetoothAdapterStateChange: onBluetoothAdapterStateChange,
      offBluetoothAdapterStateChange: offBluetoothAdapterStateChange,
      onBLEConnectionStateChanged: onBLEConnectionStateChanged,
      offBLEConnectionStateChanged: offBLEConnectionStateChanged,
      onBluetoothDeviceFound: onBluetoothDeviceFound,
      offBluetoothDeviceFound: offBluetoothDeviceFound,
      startBeaconDiscovery: startBeaconDiscovery,
      stopBeaconDiscovery: stopBeaconDiscovery,
      getBeacons: getBeacons,
      onBeaconUpdate: onBeaconUpdate,
      offBeaconUpdate: offBeaconUpdate,
      onBeaconServiceChange: onBeaconServiceChange,
      offBeaconServiceChange: offBeaconServiceChange,
      openBLEPeripheral: openBLEPeripheral,
      closeBLEPeripheral: closeBLEPeripheral,
      addPeripheralService: addPeripheralService,
      removePeripheralService: removePeripheralService,
      updateCharacteristic: updateCharacteristic,
      startBLEAdvertising: startBLEAdvertising,
      stopBLEAdvertising: stopBLEAdvertising,
      onCharacteristicRead: onCharacteristicRead,
      offCharacteristicRead: offCharacteristicRead,
      onCharacteristicWrite: onCharacteristicWrite,
      offCharacteristicWrite: offCharacteristicWrite,
      onCharacteristicDidSubscribe: onCharacteristicDidSubscribe,
      offCharacteristicDidSubscribe: offCharacteristicDidSubscribe,
      onCharacteristicDidUnsubscribe: onCharacteristicDidUnsubscribe,
      offCharacteristicDidUnsubscribe: offCharacteristicDidUnsubscribe,
      alert: alert,
      showLoading: showLoading,
      hideLoading: hideLoading,
      multiLevelSelect: multiLevelSelect,
      prompt: prompt,
      stopPullDownRefresh: stopPullDownRefresh,
      hideKeyboard: hideKeyboard,
      setBackgroundColor: setBackgroundColor,
      setBackgroundTextStyle: setBackgroundTextStyle,
      setBackButton: setBackButton,
      setBackgroundImage: setBackgroundImage,
      removeBackgroundImage: removeBackgroundImage,
      setLocatedCity: setLocatedCity,
      onLocatedComplete: onLocatedComplete,
      offLocatedComplete: offLocatedComplete,
      setCanPullDown: setCanPullDown,
      startPullDownRefresh: startPullDownRefresh,
      setTransparentTitle: setTransparentTitle,
      setViewTop: setViewTop,
      showAuthGuide: showAuthGuide,
      optionsSelect: optionsSelect,
      showBackToHomepage: showBackToHomepage,
      hideBackHome: hideBackHome,
      setCustomPopMenu: setCustomPopMenu,
      getExtConfig: getExtConfig,
      getLaunchOptionsSync: getLaunchOptionsSync,
      getEnterOptionsSync: getEnterOptionsSync,
      getExtConfigSync: getExtConfigSync,
      getAppIdSync: getAppIdSync,
      onAppShow: onAppShow,
      offAppShow: offAppShow,
      onAppHide: onAppHide,
      offAppHide: offAppHide,
      onUnhandledRejection: onUnhandledRejection,
      offUnhandledRejection: offUnhandledRejection,
      onError: onError,
      offError: offError,
      base64ToArrayBuffer: base64ToArrayBuffer$1,
      arrayBufferToBase64: arrayBufferToBase64$1,
      confirm: confirm,
      datePicker: datePicker,
      getNetworkType: getNetworkType,
      vibrate: vibrate,
      choosePhoneContact: choosePhoneContact,
      chooseAlipayContact: chooseAlipayContact,
      chooseContact: chooseContact,
      watchShake: watchShake,
      makePhoneCall: makePhoneCall,
      setClipboard: setClipboard,
      getClipboard: getClipboard,
      scan: scan,
      getServerTime: getServerTime,
      getScreenBrightness: getScreenBrightness,
      setScreenBrightness: setScreenBrightness,
      setKeepScreenOn: setKeepScreenOn,
      addPhoneContact: addPhoneContact,
      onGyroscopeChange: onGyroscopeChange,
      offGyroscopeChange: offGyroscopeChange,
      onAccelerometerChange: onAccelerometerChange,
      offAccelerometerChange: offAccelerometerChange,
      onCompassChange: onCompassChange,
      offCompassChange: offCompassChange,
      rsa: rsa,
      sendSMS: sendSMS,
      startWifi: startWifi,
      stopWifi: stopWifi,
      connectWifi: connectWifi,
      getWifiList: getWifiList,
      setWifiList: setWifiList,
      getConnectedWifi: getConnectedWifi,
      onGetWifiList: onGetWifiList,
      offGetWifiList: offGetWifiList,
      onWifiConnected: onWifiConnected,
      offWifiConnected: offWifiConnected,
      onMemoryWarning: onMemoryWarning,
      offMemoryWarning: offMemoryWarning,
      vibrateLong: vibrateLong,
      vibrateShort: vibrateShort,
      getHCEState: getHCEState,
      startHCE: startHCE,
      stopHCE: stopHCE,
      onHCEMessage: onHCEMessage,
      offHCEMessage: offHCEMessage,
      sendHCEMessage: sendHCEMessage,
      getBatteryInfo: getBatteryInfo,
      onDeviceMotionChange: onDeviceMotionChange,
      offDeviceMotionChange: offDeviceMotionChange,
      getDeviceInfo: getDeviceInfo,
      getTitleColor: getTitleColor,
      registerSSID: registerSSID,
      unregisterSSID: unregisterSSID,
      getCarrierName: getCarrierName,
      isSystemRoot: isSystemRoot,
      seNFCServiceIsv: seNFCServiceIsv,
      getMenuButtonBoundingClientRect: getMenuButtonBoundingClientRect,
      exit: exit,
      getAuthStatus: getAuthStatus,
      regionPicker: regionPicker,
      setScreenOrientation: setScreenOrientation,
      getScreenOrientation: getScreenOrientation,
      getDeviceID: getDeviceID,
      getRunScene: getRunScene,
      onUserCaptureScreen: onUserCaptureScreen,
      offUserCaptureScreen: offUserCaptureScreen,
      onTitleCloseClick: onTitleCloseClick,
      offTitleCloseClick: offTitleCloseClick,
      onTitleMoreClick: onTitleMoreClick,
      offTitleMoreClick: offTitleMoreClick,
      isFavorite: isFavorite,
      addToFavorite: addToFavorite,
      removeFromFavorite: removeFromFavorite,
      onFavorite: onFavorite,
      offFavorite: offFavorite,
      onInternalFavorite: onInternalFavorite,
      offInternalFavorite: offInternalFavorite,
      isCollected: isCollected,
      canFavorite: canFavorite,
      saveFile: saveFile,
      removeSavedFile: removeSavedFile,
      getSavedFileInfo: getSavedFileInfo,
      getSavedFileList: getSavedFileList,
      getFileInfo: getFileInfo,
      openDocument: openDocument,
      getOpenUserInfo: getOpenUserInfo,
      getOpenUserData: getOpenUserData,
      getPhoneNumber: getPhoneNumber,
      getIDNumber: getIDNumber,
      getCustomOpenUserInfo: getCustomOpenUserInfo,
      loadFontFace: loadFontFace,
      getLocation: getLocation,
      openLocation: openLocation,
      chooseLocation: chooseLocation,
      chooseCity: chooseCity,
      reGeoCode: reGeoCode,
      geoCode: geoCode,
      calculateRoute: calculateRoute,
      onContinuousLocation: onContinuousLocation,
      offContinuousLocation: offContinuousLocation,
      startContinuousLocation: startContinuousLocation,
      stopContinuousLocation: stopContinuousLocation,
      chooseImage: chooseImage,
      previewImage: previewImage,
      chooseVideo: chooseVideo,
      saveImage: saveImage,
      getImageInfo: getImageInfo,
      compressImage: compressImage,
      getAvailableAudioSources: getAvailableAudioSources,
      saveVideoToPhotosAlbum: saveVideoToPhotosAlbum,
      generateImageFromCode: generateImageFromCode,
      saveImageToPhotosAlbum: saveImageToPhotosAlbum,
      textToSpeech: textToSpeech,
      chooseFileFromDisk: chooseFileFromDisk,
      showNavigationBarLoading: showNavigationBarLoading,
      hideNavigationBarLoading: hideNavigationBarLoading,
      setNavigationBar: setNavigationBar,
      rpc: rpc,
      request: request,
      httpRequest: httpRequest,
      uploadFile: uploadFile,
      uploadFileToAliCloud: uploadFileToAliCloud,
      downloadFile: downloadFile,
      onNetworkStatusChange: onNetworkStatusChange,
      offNetworkStatusChange: offNetworkStatusChange,
      sendMtop: sendMtop,
      getTBCode: getTBCode,
      setTBSessionInfo: setTBSessionInfo,
      getTBSessionInfo: getTBSessionInfo,
      openRpc: openRpc,
      navigateToMiniProgram: navigateToMiniProgram,
      navigateBackMiniProgram: navigateBackMiniProgram,
      hideAddToDesktopMenu: hideAddToDesktopMenu,
      hideAllAddToDesktopMenu: hideAllAddToDesktopMenu,
      hideFavoriteMenu: hideFavoriteMenu,
      hideAllFavoriteMenu: hideAllFavoriteMenu,
      hideShareMenu: hideShareMenu,
      showSharePanel: showSharePanel,
      setStorage: setStorage,
      getStorage: getStorage,
      removeStorage: removeStorage,
      clearStorage: clearStorage,
      getStorageInfo: getStorageInfo,
      showToast: showToast,
      hideToast: hideToast,
      connectSocket: connectSocket,
      sendSocketMessage: sendSocketMessage,
      closeSocket: closeSocket,
      onSocketOpen: onSocketOpen,
      offSocketOpen: offSocketOpen,
      onSocketMessage: onSocketMessage,
      offSocketMessage: offSocketMessage,
      onSocketError: onSocketError,
      offSocketError: offSocketError,
      onSocketClose: onSocketClose,
      offSocketClose: offSocketClose,
      hideDebugVersion: hideDebugVersion,
      isSpeechRecognizeAvailable: isSpeechRecognizeAvailable,
      startSpeechRecognize: startSpeechRecognize,
      stopSpeechRecognize: stopSpeechRecognize,
      onSpeechRecognizeResult: onSpeechRecognizeResult,
      offSpeechRecognizeResult: offSpeechRecognizeResult,
      onSpeechRecognizeError: onSpeechRecognizeError,
      offSpeechRecognizeError: offSpeechRecognizeError,
      preloadCanvasImage: preloadCanvasImage,
      reportAnalytics: reportAnalytics,
      reportCustomEvent: reportCustomEvent,
      getChinfoChain: getChinfoChain,
      appendChinfoChain: appendChinfoChain,
      setOptionMenu: setOptionMenu,
      pageScrollTo: pageScrollTo,
      getRunData: getRunData,
      navigateToMiniService: navigateToMiniService,
      startMiniService: startMiniService,
      navigateBackFromMiniService: navigateBackFromMiniService,
      reportBizReady: reportBizReady,
      getVisitToken: getVisitToken,
      createWorker: createWorker,
      requestSubscribeMessage: requestSubscribeMessage,
      getSystemInfo: getSystemInfo,
      getSystemInfoSync: getSystemInfoSync,
      createAnimation: createAnimation,
      createSelectorQuery: createSelectorQuery
  };

  /**
   *
   * @param ua
   * @example "Mozilla/5.0 (Linux; U; Android 10; zh-CN; ONEPLUS A6000 Build/QKQ1.190716.003) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/69.0.3497.100 UWS/3.22.2.17 Mobile Safari/537.36 UCBS/3.22.2.19_210719105448 Region/CN AlipayDefined(nt:WIFI,ws:411|0|2.625) AliApp(AP/10.2.30.7001) AlipayClient/10.2.30.7001 Language/zh-Hans isConcaveScreen/true ProductType/dev Ariver/1.0.0"
   * @returns
   */
  function getUserAgentInfo$1(env, disableGetWidthFromUA, isSubAPIOfGetSystemInfo) {
      var _a;
      if (isSubAPIOfGetSystemInfo === void 0) { isSubAPIOfGetSystemInfo = true; }
      var ua = env.userAgent;
      var ret = (_a = {},
          _a["version" /* ESystemInfoProperty.version */] = env.originalClientVersion,
          _a["language" /* ESystemInfoProperty.language */] = env.language,
          _a);
      if (isSubAPIOfGetSystemInfo) {
          // getDeviceBaseInfo: ios、android、unknown
          ret["platform" /* ESystemInfoProperty.platform */] = env.platform;
      }
      else if (env.isAndroid) {
          // getSystemInfo: Android、iOS、iphone OS
          ret["platform" /* ESystemInfoProperty.platform */] = 'Android';
      }
      // ampe 端ua AliApp(AP/10.2.33.190) AMPE/10.2.33.190
      if (env.clientName === 'ap') {
          ret["app" /* ESystemInfoProperty.app */] = 'alipay';
      }
      if (env.isIOS) {
          ret["titleBarHeight" /* ESystemInfoProperty.titleBarHeight */] = 44;
          // ret[ESystemInfoProperty.statusBarHeight] = 47;
      }
      else if (env.isAndroid) {
          ret["titleBarHeight" /* ESystemInfoProperty.titleBarHeight */] = 48;
          ret["isIphoneXSeries" /* ESystemInfoProperty.isIphoneXSeries */] = false;
          // ret[ESystemInfoProperty.statusBarHeight] = 39.142857;
          // AlipayDefined(nt:WIFI,ws:360|0|3.0)
          var screenMatch = ua.match(/AlipayDefined\(.*ws:(\d+(?:\.\d+)?)\|(\d+(?:\.\d+)?)\|(\d+(?:\.\d+)?)/);
          if (screenMatch) {
              var pixelRatio = parseFloat(screenMatch[3]);
              var width = parseInt(screenMatch[1]);
              if (!isNaN(pixelRatio)) {
                  ret["pixelRatio" /* ESystemInfoProperty.pixelRatio */] = pixelRatio;
                  if (!isNaN(width) && !disableGetWidthFromUA) {
                      ret["windowWidth" /* ESystemInfoProperty.windowWidth */] = width;
                      // getWindowInfo 接口返回正确的值, getSystemInfo 接口保持和以前错的一样
                      ret["screenWidth" /* ESystemInfoProperty.screenWidth */] = isSubAPIOfGetSystemInfo ? width : Math.floor(width * pixelRatio + 0.5);
                  }
              }
          }
          var androidSystemMatch = ua.match(/;\s?Android\s(\d+);/);
          if (androidSystemMatch) {
              ret["system" /* ESystemInfoProperty.system */] = androidSystemMatch[1];
          }
      }
      var presetInfo = getPreset(env.startupParams);
      return __assign(__assign({}, ret), presetInfo);
  }

  function createUpdateManager(runtime, bridgeCallContext) {
      bridgeCallContext.callScopedBridge('registerUpdateManager');
      return {
          applyUpdate: function (params) {
              bridgeCallContext.callDefaultBridge('applyUpdate', {
                  params: params,
              });
          },
          onCheckForUpdate: function (callback) {
              var bridge = runtime().getBridge();
              bridge.event.addEventListener("checkForUpdate", 2 /* EBridgeEventCustomTypeContext.UserData */, callback);
          },
          onUpdateReady: function (callback) {
              var bridge = runtime().getBridge();
              bridge.event.addEventListener("updateReady", 2 /* EBridgeEventCustomTypeContext.UserData */, callback);
          },
          onUpdateFailed: function (callback) {
              var bridge = runtime().getBridge();
              bridge.event.addEventListener("updateFailed", 2 /* EBridgeEventCustomTypeContext.UserData */, callback);
          },
          offCheckForUpdate: function (callback) {
              var bridge = runtime().getBridge();
              bridge.event.removeEventListener("checkForUpdate", 2 /* EBridgeEventCustomTypeContext.UserData */, callback);
          },
          offUpdateReady: function (callback) {
              var bridge = runtime().getBridge();
              bridge.event.removeEventListener("updateReady", 2 /* EBridgeEventCustomTypeContext.UserData */, callback);
          },
          offUpdateFailed: function (callback) {
              var bridge = runtime().getBridge();
              bridge.event.removeEventListener("updateFailed", 2 /* EBridgeEventCustomTypeContext.UserData */, callback);
          },
      };
  }

  var getUpdateManager = {
      fnOptionIndex: false,
      fn: function () {
          return createUpdateManager(this.runtime, this);
      },
  };

  function getPayloadFromFrameRecordedEvent(e) {
      var payload = __assign({}, e.data);
      if (payload.frameBuffer && typeof payload.frameBuffer === 'string') {
          payload.frameBuffer = base64ToArrayBuffer(payload.frameBuffer);
      }
      return payload;
  }
  function getTaskIdFromFrameRecordedEvent(event, taskContext) {
      if (event.data.appInstanceId) {
          return [event.data.appInstanceId];
      }
      else {
          return Object.keys(taskContext.callbacks);
      }
  }
  var allowedFormats = ['aac', 'mp3'];
  function createRecorderManager(runtime, bridgeCallContext) {
      return {
          start: function (params) {
              params = __assign({ format: 'aac' }, params);
              // https://baiyan.antfin.com/task/242484 兼容大小写
              params.format = params.format.toLowerCase();
              if (allowedFormats.indexOf(params.format) === -1) {
                  var packageAndRunSceneType = bridgeCallContext.runtime().getEnv().packageAndRunSceneType;
                  var errorMsg = 'format格式非法，允许的格式：' + allowedFormats.join('、');
                  if (isConsoleAvaliableToDeveloper(packageAndRunSceneType)) {
                      // tslint:disable-next-line
                      console.error(errorMsg);
                  }
                  throw new Error(errorMsg);
              }
              else {
                  bridgeCallContext.callScopedBridge('startAudioRecord', params);
              }
          },
          stop: function (params) {
              bridgeCallContext.callScopedBridge('stopAudioRecord', __assign({}, params));
          },
          resume: function (params) {
              bridgeCallContext.callScopedBridge('resumeAudioRecord', __assign({}, params));
          },
          pause: function (params) {
              bridgeCallContext.callScopedBridge('pauseAudioRecord', __assign({}, params));
          },
          onStart: function (callback) {
              var bridge = runtime().getBridge();
              bridge.event.addEventListener('recordStart', 2 /* EBridgeEventCustomTypeContext.UserData */, callback);
          },
          onResume: function (callback) {
              var bridge = runtime().getBridge();
              bridge.event.addEventListener('recordResume', 2 /* EBridgeEventCustomTypeContext.UserData */, callback);
          },
          onStop: function (callback) {
              var bridge = runtime().getBridge();
              bridge.event.addEventListener('recordStop', 2 /* EBridgeEventCustomTypeContext.UserData */, callback);
          },
          onPause: function (callback) {
              var bridge = runtime().getBridge();
              bridge.event.addEventListener('recordPause', 2 /* EBridgeEventCustomTypeContext.UserData */, callback);
          },
          onError: function (callback) {
              var bridge = runtime().getBridge();
              bridge.event.addEventListener('recordError', 2 /* EBridgeEventCustomTypeContext.UserData */, callback);
          },
          onDecibelChange: function (callback) {
              var bridge = runtime().getBridge();
              bridge.event.addEventListener('recordDecibelChange', 2 /* EBridgeEventCustomTypeContext.UserData */, callback);
          },
          onFrameRecorded: function (callback) {
              var taskId = runtime().getApp().appInstanceId;
              var taskManager = bridgeCallContext.runtime().getBridge().event.taskManager;
              taskManager.addMatcher('recordFrameRecorded', taskId, callback, getTaskIdFromFrameRecordedEvent, getPayloadFromFrameRecordedEvent, true);
          },
          offDecibelChange: function (callback) {
              var bridge = runtime().getBridge();
              bridge.event.removeEventListener('recordDecibelChange', 2 /* EBridgeEventCustomTypeContext.UserData */, callback);
          },
          offPause: function (callback) {
              var bridge = runtime().getBridge();
              bridge.event.removeEventListener('recordPause', 2 /* EBridgeEventCustomTypeContext.UserData */, callback);
          },
          offResume: function (callback) {
              var bridge = runtime().getBridge();
              bridge.event.removeEventListener('recordResume', 2 /* EBridgeEventCustomTypeContext.UserData */, callback);
          },
          offStart: function (callback) {
              var bridge = runtime().getBridge();
              bridge.event.removeEventListener('recordStart', 2 /* EBridgeEventCustomTypeContext.UserData */, callback);
          },
          offStop: function (callback) {
              var bridge = runtime().getBridge();
              bridge.event.removeEventListener('recordStop', 2 /* EBridgeEventCustomTypeContext.UserData */, callback);
          },
          offError: function (callback) {
              var bridge = runtime().getBridge();
              bridge.event.removeEventListener('recordError', 2 /* EBridgeEventCustomTypeContext.UserData */, callback);
          },
          offFrameRecorded: function (callback) {
              var taskId = runtime().getApp().appInstanceId;
              var taskManager = bridgeCallContext.runtime().getBridge().event.taskManager;
              taskManager.removeMatcher('recordFrameRecorded', taskId, callback);
          },
      };
  }

  var getRecorderManager = {
      fnOptionIndex: false,
      fn: function () {
          return createRecorderManager(this.runtime, this);
      },
  };

  var InnerAudioContext = /** @class */ /*#__PURE__*/ (function () {
      function InnerAudioContext(callContext, contextDefinition) {
          this._state = {};
          this.listenerCount = 0;
          var runtime = callContext.runtime();
          var appId = runtime.getEnv().startupParams.appId;
          var bridge = runtime.getBridge();
          var callBridge = callContext.callDefaultBridge.bind(callContext);
          var callBridgeSync = callContext.callDefaultBridgeSync.bind(callContext);
          var getEvent = function () { return callContext.runtime().getBridge().event; };
          var writes = contextDefinition.writes, reads = contextDefinition.reads, type = contextDefinition.type;
          this.writes = writes;
          this.reads = reads;
          this.type = type;
          var extraInfo = bridge.extraInfo;
          if (!extraInfo["innerAudioContextIdBase" /* EBridgeExtraInfoKey.innerAudioContextIdBase */]) {
              extraInfo["innerAudioContextIdBase" /* EBridgeExtraInfoKey.innerAudioContextIdBase */] = 1;
          }
          else {
              ++extraInfo["innerAudioContextIdBase" /* EBridgeExtraInfoKey.innerAudioContextIdBase */];
          }
          var taskId = extraInfo["innerAudioContextIdBase" /* EBridgeExtraInfoKey.innerAudioContextIdBase */];
          this.id = String(taskId);
          this.params = {
              bizIdentifier: appId,
              audioPlayerID: this.id,
          };
          this.play = this.play.bind(this, callBridge);
          this.pause = this.pause.bind(this, callBridge);
          this.stop = this.stop.bind(this, callBridge);
          this.destroy = this.destroy.bind(this, callBridge);
          this.seek = this.seek.bind(this, callBridge);
          this._setter = this.__setter.bind(this, callBridge);
          this._getter = this.__getter.bind(this, callBridgeSync);
          this._getFromNative = this.__getFromNative.bind(this, callBridgeSync);
          this._listen = this.__listen.bind(this, callBridge, getEvent);
          this._unListen = this.__unListen.bind(this, callBridge, getEvent);
          this.onCanPlay = this.onCanplay = this._onCanPlay.bind(this);
          this.offCanPlay = this.offCanplay = this._offCanPlay.bind(this);
      }
      InnerAudioContext.prototype._onCanPlay = function (callback) {
          this._listen('CanPlay', callback);
      };
      InnerAudioContext.prototype._offCanPlay = function (callback) {
          this._unListen('CanPlay', callback);
      };
      InnerAudioContext.prototype.onPlay = function (callback) {
          this._listen('Play', callback);
      };
      InnerAudioContext.prototype.offPlay = function (callback) {
          this._unListen('Play', callback);
      };
      InnerAudioContext.prototype.onPause = function (callback) {
          this._listen('Pause', callback);
      };
      InnerAudioContext.prototype.offPause = function (callback) {
          this._unListen('Pause', callback);
      };
      InnerAudioContext.prototype.onStop = function (callback) {
          this._listen('Stop', callback);
      };
      InnerAudioContext.prototype.offStop = function (callback) {
          this._unListen('Stop', callback);
      };
      InnerAudioContext.prototype.onEnded = function (callback) {
          this._listen('Ended', callback);
      };
      InnerAudioContext.prototype.offEnded = function (callback) {
          this._unListen('Ended', callback);
      };
      InnerAudioContext.prototype.onTimeUpdate = function (callback) {
          this._listen('TimeUpdate', callback);
      };
      InnerAudioContext.prototype.offTimeUpdate = function (callback) {
          this._unListen('TimeUpdate', callback);
      };
      InnerAudioContext.prototype.onPrev = function (callback) {
          this._listen('Prev', callback);
      };
      InnerAudioContext.prototype.offPrev = function (callback) {
          this._unListen('Prev', callback);
      };
      InnerAudioContext.prototype.onNext = function (callback) {
          this._listen('Next', callback);
      };
      InnerAudioContext.prototype.offNext = function (callback) {
          this._unListen('Next', callback);
      };
      InnerAudioContext.prototype.onError = function (callback) {
          this._listen('Error', callback);
      };
      InnerAudioContext.prototype.offError = function (callback) {
          this._unListen('Error', callback);
      };
      InnerAudioContext.prototype.onWaiting = function (callback) {
          this._listen('Waiting', callback);
      };
      InnerAudioContext.prototype.offWaiting = function (callback) {
          this._unListen('Waiting', callback);
      };
      InnerAudioContext.prototype.onSeeking = function (callback) {
          this._listen('Seeking', callback);
      };
      InnerAudioContext.prototype.offSeeking = function (callback) {
          this._unListen('Seeking', callback);
      };
      InnerAudioContext.prototype.onSeeked = function (callback) {
          this._listen('Seeked', callback);
      };
      InnerAudioContext.prototype.offSeeked = function (callback) {
          this._unListen('Seeked', callback);
      };
      InnerAudioContext.prototype.play = function (callBridge) {
          callBridge("play".concat(this.type), __assign({ playWithNoParam: true }, this.params));
      };
      InnerAudioContext.prototype.pause = function (callBridge) {
          callBridge("pause".concat(this.type), __assign({ playWithNoParam: true }, this.params));
      };
      InnerAudioContext.prototype.stop = function (callBridge) {
          callBridge("stop".concat(this.type), __assign({ playWithNoParam: true }, this.params));
      };
      // destroyBackgroundAudio不存在， 可以destroyForegroundAudio
      InnerAudioContext.prototype.destroy = function (callBridge) {
          callBridge("stopMonitor".concat(this.type), this.params);
          callBridge("destroy".concat(this.type), __assign({ playWithNoParam: true }, this.params));
          // Object.keys(this.callBackMap).forEach(k => {
          //   ap.offUserEvent(k, this.callBackMap[k]);
          // });
      };
      InnerAudioContext.prototype.seek = function (callBridge, position) {
          callBridge("seek".concat(this.type), __assign(__assign({}, this.params), { position: position }));
      };
      InnerAudioContext.prototype.__setter = function (callBridge, propName, value) {
          var _a;
          if (this.writes[propName] && this.writes[propName](value)) {
              return;
          }
          this._state[propName] = value;
          callBridge("set".concat(this.type, "Option"), __assign(__assign({}, this.params), { option: (_a = {},
                  _a[propName] = value,
                  _a) }));
      };
      InnerAudioContext.prototype.__getter = function (callBridgeSync, propName) {
          if (this._state[propName]) {
              return this._state[propName];
          }
          return callBridgeSync("get".concat(this.type, "Option"), __assign(__assign({}, this.params), { optionName: propName }))[propName];
      };
      InnerAudioContext.prototype.__listen = function (callBridge, getEventManager, eventName, callback) {
          var methodName = "on".concat(this.type).concat(eventName);
          // if (!data.audioPlayerID || data.audioPlayerID === this.id) { 要判断一个audioPlayerID
          var addedListenerCount = getEventManager().taskManager.addMatcher(methodName, this.id, callback, getTaskIdFromAudioEvent, getPayloadFromAudioEvent);
          this.listenerCount += addedListenerCount;
          if (this.listenerCount === 1) {
              callBridge("startMonitor".concat(this.type), this.params);
          }
      };
      InnerAudioContext.prototype.__unListen = function (callBridge, getEventManager, eventName, callback) {
          var methodName = "on".concat(this.type).concat(eventName);
          var removedListenerCount = getEventManager().taskManager.removeMatcher(methodName, this.id, callback);
          this.listenerCount -= removedListenerCount;
          if (this.listenerCount === 0) {
              callBridge("stopMonitor".concat(this.type), this.params);
          }
      };
      InnerAudioContext.prototype.__getFromNative = function (callBridgeSync, propName) {
          return callBridgeSync("get".concat(this.type, "Option"), __assign(__assign({}, this.params), { optionName: propName }))[propName];
      };
      return InnerAudioContext;
  }());
  function getTaskIdFromAudioEvent(event, taskContext) {
      var data = event.data || {};
      if (data.audioPlayerID) {
          return [data.audioPlayerID];
      }
      else {
          return Object.keys(taskContext.callbacks);
      }
  }
  function getPayloadFromAudioEvent(event) {
      return event;
  }
  function getForegroundAudioConstructorImpl() {
      return /** @class */ (function (_super) {
          __extends$1(ForegroundAudioContext, _super);
          function ForegroundAudioContext(callContext) {
              var contextDefinition = {
                  writes: {
                      src: function (value) {
                          return 'string' != typeof value || 0 === value.length;
                      },
                      startTime: function (value) {
                          return 'number' != typeof value;
                      },
                      autoplay: function (value) {
                          return 'boolean' != typeof value;
                      },
                      loop: function (value) {
                          return 'boolean' != typeof value;
                      },
                      obeyMuteSwitch: function (value) {
                          return 'boolean' != typeof value;
                      },
                      volume: function (value) {
                          return 'number' != typeof value || value < 0 || value > 1;
                      },
                      // 10.1.62 肯定支持
                      isRecordAudioPlayState: function (value) {
                          return 'boolean' != typeof value;
                      },
                      playbackRate: function (value) {
                          return 'number' != typeof value || value < 0.5 || value > 2;
                      },
                      supportBackgroundPlay: function (value) {
                          return 'boolean' != typeof value;
                      },
                      ccode: function () { },
                  },
                  // reads: ['duration', 'currentTime', 'paused', 'buffered'],
                  type: 'ForegroundAudio',
                  // config,
              };
              return _super.call(this, callContext, contextDefinition) || this;
          }
          Object.defineProperty(ForegroundAudioContext.prototype, "src", {
              get: function () {
                  return this._getter('src');
              },
              set: function (value) {
                  this._setter('src', value);
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(ForegroundAudioContext.prototype, "startTime", {
              get: function () {
                  return this._getter('startTime');
              },
              set: function (value) {
                  this._setter('startTime', value);
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(ForegroundAudioContext.prototype, "autoplay", {
              get: function () {
                  return this._getter('autoplay');
              },
              set: function (value) {
                  this._setter('autoplay', value);
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(ForegroundAudioContext.prototype, "loop", {
              get: function () {
                  return this._getter('loop');
              },
              set: function (value) {
                  this._setter('loop', value);
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(ForegroundAudioContext.prototype, "obeyMuteSwitch", {
              get: function () {
                  return this._getter('obeyMuteSwitch');
              },
              set: function (value) {
                  this._setter('obeyMuteSwitch', value);
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(ForegroundAudioContext.prototype, "volume", {
              get: function () {
                  return this._getter('volume');
              },
              set: function (value) {
                  this._setter('volume', value);
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(ForegroundAudioContext.prototype, "isRecordAudioPlayState", {
              get: function () {
                  return this._getter('isRecordAudioPlayState');
              },
              set: function (value) {
                  this._setter('isRecordAudioPlayState', value);
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(ForegroundAudioContext.prototype, "playbackRate", {
              get: function () {
                  return this._getter('playbackRate');
              },
              set: function (value) {
                  this._setter('playbackRate', value);
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(ForegroundAudioContext.prototype, "duration", {
              // 通用
              get: function () {
                  return this._getFromNative('duration');
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(ForegroundAudioContext.prototype, "currentTime", {
              get: function () {
                  return this._getFromNative('currentTime');
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(ForegroundAudioContext.prototype, "paused", {
              get: function () {
                  return this._getFromNative('paused');
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(ForegroundAudioContext.prototype, "buffered", {
              get: function () {
                  return this._getFromNative('buffered');
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(ForegroundAudioContext.prototype, "supportBackgroundPlay", {
              get: function () {
                  return this._getter('supportBackgroundPlay');
              },
              set: function (value) {
                  this._setter('supportBackgroundPlay', value);
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(ForegroundAudioContext.prototype, "ccode", {
              get: function () {
                  return this._getter('ccode');
              },
              set: function (value) {
                  this._setter('ccode', value);
              },
              enumerable: false,
              configurable: true
          });
          return ForegroundAudioContext;
      }(InnerAudioContext));
  }
  function getBackgroundAudioContextConstructorImpl() {
      return /** @class */ (function (_super) {
          __extends$1(BackgroundAudioContext, _super);
          function BackgroundAudioContext(callContext) {
              var contextDefinition = {
                  writes: {
                      src: function (value) {
                          return 'string' != typeof value || 0 === value.length;
                      },
                      startTime: function (value) {
                          return 'number' != typeof value;
                      },
                      title: function () { },
                      epname: function () { },
                      singer: function () { },
                      coverImgUrl: function () { },
                      webUrl: function () { },
                      // 10.1.62 肯定支持
                      isRecordAudioPlayState: function (value) {
                          return 'boolean' != typeof value;
                      },
                      playbackRate: function (value) {
                          return 'number' != typeof value || value < 0.5 || value > 2;
                      },
                      ccode: function () { },
                  },
                  // reads: ['duration', 'currentTime', 'paused', 'buffered'],
                  type: 'BackgroundAudio',
                  // config,
              };
              return _super.call(this, callContext, contextDefinition) || this;
          }
          Object.defineProperty(BackgroundAudioContext.prototype, "src", {
              get: function () {
                  return this._getter('src');
              },
              set: function (value) {
                  this._setter('src', value);
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(BackgroundAudioContext.prototype, "startTime", {
              get: function () {
                  return this._getter('startTime');
              },
              set: function (value) {
                  this._setter('startTime', value);
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(BackgroundAudioContext.prototype, "title", {
              get: function () {
                  return this._getter('title');
              },
              set: function (value) {
                  this._setter('title', value);
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(BackgroundAudioContext.prototype, "epname", {
              get: function () {
                  return this._getter('epname');
              },
              set: function (value) {
                  this._setter('epname', value);
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(BackgroundAudioContext.prototype, "singer", {
              get: function () {
                  return this._getter('singer');
              },
              set: function (value) {
                  this._setter('singer', value);
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(BackgroundAudioContext.prototype, "coverImgUrl", {
              get: function () {
                  return this._getter('coverImgUrl');
              },
              set: function (value) {
                  this._setter('coverImgUrl', value);
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(BackgroundAudioContext.prototype, "webUrl", {
              get: function () {
                  return this._getter('webUrl');
              },
              set: function (value) {
                  this._setter('webUrl', value);
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(BackgroundAudioContext.prototype, "isRecordAudioPlayState", {
              get: function () {
                  return this._getter('isRecordAudioPlayState');
              },
              set: function (value) {
                  this._setter('isRecordAudioPlayState', value);
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(BackgroundAudioContext.prototype, "playbackRate", {
              get: function () {
                  return this._getter('playbackRate');
              },
              set: function (value) {
                  this._setter('playbackRate', value);
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(BackgroundAudioContext.prototype, "duration", {
              // 通用
              get: function () {
                  return this._getFromNative('duration');
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(BackgroundAudioContext.prototype, "currentTime", {
              get: function () {
                  return this._getFromNative('currentTime');
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(BackgroundAudioContext.prototype, "paused", {
              get: function () {
                  return this._getFromNative('paused');
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(BackgroundAudioContext.prototype, "buffered", {
              get: function () {
                  return this._getFromNative('buffered');
              },
              enumerable: false,
              configurable: true
          });
          Object.defineProperty(BackgroundAudioContext.prototype, "ccode", {
              get: function () {
                  return this._getter('ccode');
              },
              set: function (value) {
                  this._setter('ccode', value);
              },
              enumerable: false,
              configurable: true
          });
          return BackgroundAudioContext;
      }(InnerAudioContext));
  }
  var bgAudioCtxImplCache;
  function getBackgroundAudioContextConstructor() {
      if (!bgAudioCtxImplCache) {
          bgAudioCtxImplCache = getBackgroundAudioContextConstructorImpl();
      }
      return bgAudioCtxImplCache;
  }
  var fgAudioCtxImplCache;
  function getForegroundAudioContextConstructor() {
      if (!fgAudioCtxImplCache) {
          fgAudioCtxImplCache = getForegroundAudioConstructorImpl();
      }
      return fgAudioCtxImplCache;
  }
  function invokeClientAudioElementMethod(getPageInstance, elementId, method) {
      var arguments$1 = arguments;

      var args = [];
      for (var _i = 3; _i < arguments.length; _i++) {
          args[_i - 3] = arguments$1[_i];
      }
      var page = getPageInstance();
      if (page) {
          page.invokeClientElementMethod(elementId, method, args);
      }
  }
  function createAudioContextImpl(getPageInstance, viewId, elementId) {
      var context = {
          id: elementId,
          viewId: viewId,
      };
      context.pause = invokeClientAudioElementMethod.bind(null, getPageInstance, elementId, 'pause');
      context.play = invokeClientAudioElementMethod.bind(null, getPageInstance, elementId, 'play');
      context.seek = invokeClientAudioElementMethod.bind(null, getPageInstance, elementId, 'seek');
      context.setSrc = invokeClientAudioElementMethod.bind(null, getPageInstance, elementId, 'setSrc');
      return context;
  }

  var kBridgeExtraInfoKey4AudioManager = 'backgroundAudioManager';
  // const kBridgeExtraInfoKey4AudioContext = 'innerAudioContext';
  var getBackgroundAudioManager = {
      fnOptionIndex: false,
      fn: function () {
          var bridge = this.runtime().getBridge();
          if (!bridge.extraInfo[kBridgeExtraInfoKey4AudioManager]) {
              bridge.extraInfo[kBridgeExtraInfoKey4AudioManager] = new (getBackgroundAudioContextConstructor())(this);
          }
          return bridge.extraInfo[kBridgeExtraInfoKey4AudioManager];
      },
  };
  var createInnerAudioContext = {
      fnOptionIndex: false,
      fn: function () {
          return new (getForegroundAudioContextConstructor())(this);
      },
  };
  var createAudioContext = {
      fnOptionIndex: 1,
      fn: function (id) {
          var finalId = this.getRewriteIdWithAppxDomain(id);
          return createAudioContextImpl(this.getPageInstance.bind(this), this.assignedViewId, finalId);
      },
  };

  function handleXnnException(params) {
      var res = {
          error: 1,
          errorMessage: '当前环境不支持',
      };
      if (params.fail && typeof params.fail === 'function') {
          params.fail(res);
      }
      if (params.complete && typeof params.complete === 'function') {
          params.complete(res);
      }
  }
  var XnnManager = /** @class */ /*#__PURE__*/ (function () {
      function XnnManager(getFrameworkContextSymbol) {
          var createXnn = getNativeFunctionIfExisted("__createXnn" /* ENativeV8PluginFunctionName.createXnn */, getFrameworkContextSymbol);
          var xnn;
          if (typeof createXnn === 'function') {
              xnn = createXnn();
          }
          this.load = this.load.bind(this, xnn);
          this.inference = this.inference.bind(this, xnn);
          this.release = this.release.bind(this, xnn);
          this.transformFromVideoFrame = this.transformFromVideoFrame.bind(this, xnn);
          this.transformFromImage = this.transformFromImage.bind(this, xnn);
      }
      XnnManager.prototype.load = function (xnn, params) {
          if (xnn) {
              xnn.load(params);
          }
          else {
              handleXnnException(params);
          }
      };
      XnnManager.prototype.inference = function (xnn, params) {
          if (xnn) {
              xnn.inference(params);
          }
          else {
              handleXnnException(params);
          }
      };
      XnnManager.prototype.release = function (xnn, params) {
          if (xnn) {
              xnn.release(params);
          }
          else {
              handleXnnException(params);
          }
      };
      XnnManager.prototype.transformFromVideoFrame = function (xnn, params) {
          if (xnn) {
              xnn.transformFromVideoFrame(params);
          }
          else {
              handleXnnException(params);
          }
      };
      XnnManager.prototype.transformFromImage = function (xnn, params) {
          if (xnn) {
              xnn.transformFromImage(params);
          }
          else {
              handleXnnException(params);
          }
      };
      return XnnManager;
  }());

  var createXnnManager = {
      fnOptionIndex: false,
      fn: function () {
          return new XnnManager(this.runtime().getKernel().getFrameworkContextSymbol);
      },
  };



  var API4MyManager = {
      __proto__: null,
      getUpdateManager: getUpdateManager,
      getRecorderManager: getRecorderManager,
      getBackgroundAudioManager: getBackgroundAudioManager,
      createInnerAudioContext: createInnerAudioContext,
      createAudioContext: createAudioContext,
      createXnnManager: createXnnManager
  };

  var kFileSystemManagerMethodSyncList = [
      ["mkdir" /* EFileSystemManagerMethodSyncList.mkdir */, ['dirPath', 'recursive']],
      ["rmdir" /* EFileSystemManagerMethodSyncList.rmdir */, ['dirPath', 'recursive']],
      ["readdir" /* EFileSystemManagerMethodSyncList.readdir */, ['dirPath']],
      ["writeFile" /* EFileSystemManagerMethodSyncList.writeFile */, ['filePath', 'data', 'encoding']],
      ["copyFile" /* EFileSystemManagerMethodSyncList.copyFile */, ['srcPath', 'destPath']],
      ["readFile" /* EFileSystemManagerMethodSyncList.readFile */, ['filePath', 'encoding']],
      ["saveFile" /* EFileSystemManagerMethodSyncList.saveFile */, ['tempFilePath', 'filePath']],
      ["appendFile" /* EFileSystemManagerMethodSyncList.appendFile */, ['filePath', 'data', 'encoding']],
      ["access" /* EFileSystemManagerMethodSyncList.access */, ['path']],
      ["rename" /* EFileSystemManagerMethodSyncList.rename */, ['oldPath', 'newPath']],
      ["unlink" /* EFileSystemManagerMethodSyncList.unlink */, ['filePath']],
      ["stat" /* EFileSystemManagerMethodSyncList.stat */, ['path', 'recursive']],
      // 以下 3 个 wx 没有
      ["removeSavedFile" /* EFileSystemManagerMethodSyncList.removeSavedFile */, ['filePath']],
      ["getSavedFileList" /* EFileSystemManagerMethodSyncList.getSavedFileList */, []],
      ["getFileInfo" /* EFileSystemManagerMethodSyncList.getFileInfo */, ['filePath']] ];
  function createFileSystemManager(runtime, callContext) {
      var api = {};
      var kFileSystemManagerMethodAsyncList;
      if ((insideFeatureRuntimeVersion >= /* a_getFileSystemManager_zip_2_6_7:10.2.10 */ 10002010)) {
          kFileSystemManagerMethodAsyncList = kFileSystemManagerMethodSyncList.concat([
              ['unzip', []],
              ['zip', []] ]);
      }
      else {
          kFileSystemManagerMethodAsyncList = kFileSystemManagerMethodSyncList.concat([['unzip', []]]);
      }
      kFileSystemManagerMethodSyncList.forEach(function (_a) {
          var methodName = _a[0], argNames = _a[1];
          api["".concat(methodName, "Sync")] = function () {
              var arguments$1 = arguments;

              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                  args[_i] = arguments$1[_i];
              }
              var params;
              if (typeof args[0] === 'string') {
                  params = {};
                  argNames.forEach(function (argName, argIndex) {
                      params[argName] = args[argIndex];
                  });
              }
              else {
                  params = (args[0] || {});
              }
              return callContext.callSyncLinkedCollection('fileSystemManage', __assign(__assign({}, params), { action: methodName }));
          };
      });
      kFileSystemManagerMethodAsyncList.forEach(function (_a) {
          var methodName = _a[0];
          api[methodName] = function (params) {
              if (params === void 0) { params = {}; }
              return callContext.callLinkedCollection('fileSystemManage', __assign(__assign({}, params), { action: methodName }));
          };
      });
      return api;
  }

  var Stat = /** @class */ /*#__PURE__*/ (function () {
      function Stat(res) {
          this.mode = res.mode;
          this.size = res.size;
          this.lastAccessedTime = res.lastAccessedTime;
          this.lastModifiedTime = res.lastModifiedTime;
          Object.defineProperty(this, 'isDirectory', {
              value: function () {
                  return res.is_directory;
              },
          });
          Object.defineProperty(this, 'isFile', {
              value: function () {
                  return res.is_file;
              },
          });
      }
      return Stat;
  }());
  function handleStatsRes(res, isAndroid) {
      if (res.error) {
          return res;
      }
      var stats = {};
      if (Array.isArray(res.stats)) {
          res.stats.forEach(function (item) {
              stats[item.path] = {
                  path: item.path,
                  // https://baiyan.antfin.com/task/154867
                  // android端item.stats 在<10.2.30前会返回undefined，不排除后续客户端层面双端对齐（或者说inside端已对齐），所以这里多加个!item.stats判断
                  stats: !item.stats && isAndroid ? new Stat(item) : new Stat(item.stats),
              };
          });
      }
      else {
          stats = new Stat(res.stats);
      }
      return { stats: stats };
  }

  var fileSystemManage = {
      private: true,
      b: function (params) {
          switch (params.action) {
              case 'appendFile':
              case 'writeFile':
                  if (isArrayBuffer(params.data)) {
                      params.dataType = 'ArrayBuffer';
                      params.data = arrayBufferToBase64(params.data);
                  }
              case 'readFile':
                  if (params.encoding === '') {
                      delete params['encoding'];
                  }
          }
          return params;
      },
      m: 'fsManage',
      a: function (res, opt) {
          if (opt.action === 'readFile' && res.dataType === 'ArrayBuffer' && !isArrayBuffer(res.data)) {
              res.data = base64ToArrayBuffer(res.data);
          }
          if (opt.action === 'stat') {
              res = handleStatsRes(res, this.runtime().getEnv().isAndroid);
          }
          return res;
      },
  };

  var getFileSystemManager = {
      createOptionIndex: false,
      create: function () {
          return createFileSystemManager(this.runtime, this);
      },
      linked: {
          fileSystemManage: fileSystemManage,
      },
  };



  var API4MyLinked = {
      __proto__: null,
      getFileSystemManager: getFileSystemManager
  };

  var setStorageSync = setStorage;
  var getStorageSync = getStorage;
  var removeStorageSync = removeStorage;
  var clearStorageSync = clearStorage;
  var getStorageInfoSync = getStorageInfo;
  var getSystemInfoSync$1 = getSystemInfo;
  var getBatteryInfoSync = getBatteryInfo;



  var API4MySync = {
      __proto__: null,
      setStorageSync: setStorageSync,
      getStorageSync: getStorageSync,
      removeStorageSync: removeStorageSync,
      clearStorageSync: clearStorageSync,
      getStorageInfoSync: getStorageInfoSync,
      getSystemInfoSync: getSystemInfoSync$1,
      getBatteryInfoSync: getBatteryInfoSync
  };

  function verifyTabBarAPI4Customize(callContext, name) {
      var runtime = callContext.runtime();
      var page = callContext.getPageInstance();
      var isSupportCustomizeTabBar = isAppSupportCustomizeTabBar(runtime.getMeta().getTabBar(), runtime.getEnv().originalStartupParams);
      if (isSupportCustomizeTabBar && page && runtime.getMeta().isTabPage(page.pagePath)) {
          return {
              error: 1,
              errorMessage: "Currently using customize tabBar. The API [".concat(name, "] does not support!"),
          };
      }
  }
  var hideTabBar = {
      m: 'setTabBar',
      b: function (opt) {
          opt.actionType = 'hideTabBar';
      },
      v: function () {
          return verifyTabBarAPI4Customize(this, 'hideTabBar');
      },
  };
  var showTabBar = {
      m: 'setTabBar',
      b: function (opt) {
          opt.actionType = 'showTabBar';
      },
      v: function () {
          return verifyTabBarAPI4Customize(this, 'showTabBar');
      },
  };
  var setTabBarItem = {
      m: 'setTabBar',
      b: function (opt) {
          opt.actionType = 'setTabBarItem';
      },
      v: function () {
          return verifyTabBarAPI4Customize(this, 'setTabBarItem');
      },
  };
  var setTabBarStyle = {
      m: 'setTabBar',
      b: function (opt) {
          opt.actionType = 'setTabBarStyle';
      },
      v: function () {
          return verifyTabBarAPI4Customize(this, 'setTabBarStyle');
      },
  };
  var hideTabBarRedDot = {
      m: 'setTabBar',
      b: function (opt) {
          opt.actionType = 'hideTabBarRedDot';
      },
      v: function () {
          return verifyTabBarAPI4Customize(this, 'hideTabBarRedDot');
      },
  };
  var showTabBarRedDot = {
      m: 'setTabBar',
      b: function (opt) {
          opt.actionType = 'showTabBarRedDot';
      },
      v: function () {
          return verifyTabBarAPI4Customize(this, 'showTabBarRedDot');
      },
  };
  var removeTabBarBadge = {
      m: 'setTabBar',
      b: function (opt) {
          opt.actionType = 'removeTabBarBadge';
      },
      v: function () {
          return verifyTabBarAPI4Customize(this, 'removeTabBarBadge');
      },
  };
  var setTabBarBadge = {
      m: 'setTabBar',
      b: function (opt) {
          opt.actionType = 'setTabBarBadge';
      },
      v: function () {
          return verifyTabBarAPI4Customize(this, 'setTabBarBadge');
      },
  };

  /**
   * 只有 app 级别，没有 page 级别 API
   */

  var API4MyApp = {
      __proto__: null,
      hideTabBar: hideTabBar,
      showTabBar: showTabBar,
      setTabBarItem: setTabBarItem,
      setTabBarStyle: setTabBarStyle,
      hideTabBarRedDot: hideTabBarRedDot,
      showTabBarRedDot: showTabBarRedDot,
      removeTabBarBadge: removeTabBarBadge,
      setTabBarBadge: setTabBarBadge
  };

  var addEventCal = {};
  var addEventCalendar = {};
  var onLowPowerWarning = {
      start: function () {
          this.callDefaultBridge('startMonitorLowPowerWarning');
      },
  };
  var offLowPowerWarning = {
      end: function () {
          this.callDefaultBridge('stopMonitorLowPowerWarning');
      },
  };
  var isLowPowerMode = {};

  var onDeviceConnected = {};
  var offDeviceConnected = {};
  var onDeviceDisconnected = {};
  var offDeviceDisconnected = {};
  var setVisualEffectOnCapture = {
      m: "allowSystemSnapshot" /* NativeAPI.allowSystemSnapshot */,
      b: function (finalOpt) {
          if (finalOpt.visualEffect === 'hidden') {
              finalOpt.allow = false;
          }
          else {
              finalOpt.allow = true;
          }
          delete finalOpt.visualEffect;
          return finalOpt;
      },
  };



  var API4MyPlatformRequired = {
      __proto__: null,
      addEventCal: addEventCal,
      addEventCalendar: addEventCalendar,
      onLowPowerWarning: onLowPowerWarning,
      offLowPowerWarning: offLowPowerWarning,
      isLowPowerMode: isLowPowerMode,
      onDeviceConnected: onDeviceConnected,
      offDeviceConnected: offDeviceConnected,
      onDeviceDisconnected: onDeviceDisconnected,
      offDeviceDisconnected: offDeviceDisconnected,
      setVisualEffectOnCapture: setVisualEffectOnCapture
  };

  var PARAMS_ERROR = {
      error: 2,
      errorMessage: '非法参数',
  };
  var SYS_ERROR = {
      error: 1001,
      errorMessage: '逆地理编码失败',
  };
  var EMPTY_RESULT_ERROR = {
      error: 1002,
      errorMessage: '逆地理编码信息为空',
  };
  var RPC_ERROR_CODE;
  (function (RPC_ERROR_CODE) {
      RPC_ERROR_CODE["SYS_ERROR"] = "101";
      RPC_ERROR_CODE["PARAM_MISSING"] = "102";
  })(RPC_ERROR_CODE || (RPC_ERROR_CODE = {}));
  var kBridgeExtraInfoKey4Geocoder = 'geocoder';
  var getGeocoder = {
      fnOptionIndex: false,
      fn: function () {
          // 单例
          var bridge = this.runtime().getBridge();
          if (!bridge.extraInfo[kBridgeExtraInfoKey4Geocoder]) {
              bridge.extraInfo[kBridgeExtraInfoKey4Geocoder] = this.callProtoAPI(Geocoder, []);
          }
          return bridge.extraInfo[kBridgeExtraInfoKey4Geocoder];
      },
  };
  // 获取地理编码器
  var Geocoder = {
      state: function () {
          return {};
      },
      proto: {
          reverseGeocoding: {
              d: function (opt, resolve) {
                  if (!opt || !opt.latitude || !opt.longitude) {
                      return resolve(PARAMS_ERROR);
                  }
                  var latitude = opt.latitude, longitude = opt.longitude;
                  this.callInternalAPI('appxrpc', {
                      operationType: 'alipay.mobilelbs.domestic.geo.reverse.simple',
                      requestData: [
                          {
                              appKey: 'TINYAPP',
                              latitude: latitude,
                              longitude: longitude,
                          } ],
                  }, function (res) {
                      // appxrpc 返回的 error 透传
                      if (res.error) {
                          return resolve(res);
                      }
                      if (res.success) {
                          if (res.location) {
                              // 服务端可能返回空对象，其实是异常
                              if (Object.keys(res.location).length === 0) {
                                  return resolve(SYS_ERROR);
                              }
                              return resolve(res.location);
                          }
                          // 无结果（例如定位到海里）或者接口降级
                          return resolve(EMPTY_RESULT_ERROR);
                      }
                      // 服务端返回 102 参数为空
                      if (res.code === RPC_ERROR_CODE.PARAM_MISSING) {
                          return resolve(PARAMS_ERROR);
                      }
                      // 其他异常，测试下来均为 101，调用下游异常。统一返回 逆地理编码失败
                      return resolve(SYS_ERROR);
                  });
              },
          },
      },
  };

  var kBridgeExtraInfoKey4AccessibilityManager = 'accessibilityManager';
  var getAccessibilityManager = {
      fnOptionIndex: false,
      fn: function () {
          var bridge = this.runtime().getBridge();
          if (!bridge.extraInfo[kBridgeExtraInfoKey4AccessibilityManager]) {
              bridge.extraInfo[kBridgeExtraInfoKey4AccessibilityManager] = this.callProtoAPI(AccessibilityManager, []);
          }
          return bridge.extraInfo[kBridgeExtraInfoKey4AccessibilityManager];
      },
  };
  // 获取无障碍能力管理器
  var AccessibilityManager = {
      state: function () {
          return {};
      },
      proto: {
          // 无障碍模式下语音播报
          announce: {
              m: 'a11yAnnouncement',
              a: function (res) {
                  // iOS error 2 公共方法返回 errorMessage 和 Android 不对齐，等客户端 90 版本解决
                  if (res.error === 2) {
                      res.errorMessage = 'invalid parameter!';
                  }
                  if (res.message) {
                      delete res.message;
                  }
              },
          },
          // 是否开启无障碍语音播报
          isScreenReaderEnabled: {
              m: 'isScreenReaderEnabled',
              a: function (res) {
                  mapping(res, {
                      screenReaderEnabled: 'enabled',
                  });
              },
          },
      },
  };



  var API4MyProto = {
      __proto__: null,
      getGeocoder: getGeocoder,
      getAccessibilityManager: getAccessibilityManager
  };

  function getRemoteLogExtraInfo(runtime) {
      var key = "jsApi_remoteLog_info" /* EBridgeExtraInfoKey.jsApi_remoteLog_info */;
      var extraInfo = runtime.getBridge().extraInfo;
      if (!extraInfo[key]) {
          var env = runtime.getEnv();
          // const startupParams = runtime.getEnv().startupParams;
          var originalStartupParams = env.originalStartupParams;
          var timeout = +originalStartupParams['jsApi_remoteLog'];
          if (timeout > 10) {
              extraInfo[key] = {
                  enable: true,
                  timeout: timeout,
                  pendings: [],
                  timer: null,
              };
          }
          else {
              extraInfo[key] = {
                  enable: false,
                  timeout: 0,
                  pendings: [],
                  timer: null,
              };
          }
      }
      return extraInfo[key];
  }
  function remoteLogBatchCallbackFlush(pendings, result) {
      for (var _i = 0, pendings_1 = pendings; _i < pendings_1.length; _i++) {
          var pendingInfo = pendings_1[_i];
          var callback = pendingInfo.callback;
          if (callback) {
              try {
                  callback(result || {});
              }
              catch (ex) { }
          }
      }
  }
  function remoteLogBatchImpl(callContext) {
      var weakRuntime = callContext.runtime();
      if (weakRuntime) {
          var weakConfig = getRemoteLogExtraInfo(weakRuntime);
          var bridge = weakRuntime.getBridge();
          if (weakConfig && bridge) {
              weakConfig.timer = null;
              var pendings = weakConfig.pendings.slice();
              weakConfig.pendings = [];
              if (pendings.length) {
                  callContext.callInternalAPI('remoteLogBatch', {
                      data: pendings.map(function (d) { return d.option; }),
                      type: 'remoteLogBatch',
                  }, remoteLogBatchCallbackFlush.bind(null, pendings));
              }
          }
      }
  }
  var remoteLog = {
      fnOptionIndex: false,
      fn: function (optionOrCallback, callbackOrUndefined) {
          var runtime = this.runtime();
          if (runtime) {
              var _a = normalizeCallParameter(optionOrCallback, callbackOrUndefined), option = _a.option, callback = _a.callback;
              var config = getRemoteLogExtraInfo(runtime);
              if (config.enable) {
                  config.pendings.push({
                      option: __assign({}, option),
                      callback: typeof callback === 'function' ? callback : null,
                  });
                  if (!config.timer) {
                      config.timer = runtime.getKernel().setTimeout(remoteLogBatchImpl.bind(null, this), config.timeout);
                  }
              }
              else {
                  this.callScopedBridge('remoteLog', option, callback);
              }
          }
      },
  };
  var localLog = {
      fnOptionIndex: false,
      fn: function (optionOrCallback, callbackOrUndefined) {
          var runtime = this.runtime();
          if (runtime) {
              var _a = normalizeCallParameter(optionOrCallback, callbackOrUndefined), option = _a.option, callback = _a.callback;
              var startupParams = this.runtime().getEnv().originalStartupParams;
              if (isCacheKeyInWhiteList(startupParams, 'jsApi_localLog')) {
                  if (callback) {
                      try {
                          callback({});
                      }
                      catch (ex) {
                          // ignore
                      }
                  }
                  return;
              }
              else {
                  this.callScopedBridge('localLog', option, callback);
              }
          }
      },
  };
  /**
   * 标记了 private
   * 开发者写的 call('reportData') 需要过这个拦截
   * 但是不暴露 my.reportData
   */
  var reportData = {
      b: function (params) {
          if (params &&
              params.spm &&
              typeof params.spm == 'object' &&
              !params.ignoreDefaultPageMonitor // 有该参数的情况下，不上报框架埋点结束，保证refer准确
          ) {
              this.callDefaultBridge('pageMonitor', {
                  actionType: 'end',
              });
          }
          {
              return params;
          }
      },
      d: function (params, resolve) {
          if (params && params.$defaultPrevented) {
              // nothing
              resolve({});
          }
          else {
              this.callScopedBridge('reportData', params, resolve);
          }
      },
  };

  var getSystemInfo4PublicProxy = {
      b: function (option) {
          var runtime = this.runtime();
          var nav = runtime.getNav();
          option.isAppFirstPage = nav.isFirstPage();
      },
      cache: cacheOfGetSystemInfo,
  };
  var getUserInfo4PublicProxy = {
      cache: cacheOfGetUserInfo,
  };
  var rpc4PublicProxy = rpc;

  function getPublicProxyAPI() {
      return {
          keys: ['remoteLog', 'localLog', 'reportData'],
          values: {
              localLog: localLog,
              remoteLog: remoteLog,
              reportData: reportData,
          },
      };
  }
  function getPublicProxyAPI4Cache() {
      return {
          keys: ['getUserInfo', 'getSystemInfo', 'rpc'],
          values: {
              getUserInfo: getUserInfo4PublicProxy,
              getSystemInfo: getSystemInfo4PublicProxy,
              rpc: rpc4PublicProxy,
          },
      };
  }

  function getCanIUseMap(runtime, isCurrentPageCubeEngine, supportCompositeElement, platform) {
      // todo inside里未实现API需要删除
      // todo inside里未实现的native组件的context需要删除
      var livePusher244 = (insideFeatureRuntimeVersion >= /* a_livePusherContext_24_4:10.1.95 */ 10001095) ? 1 : 0;
      var supportDecibelChange = (insideFeatureRuntimeVersion >= /* a_getRecorderManager_onDecibelChange_2_6_2:10.2.0 */ 10002000) ? 1 : 0;
      var behaviorManager = runtime.getBehaviorManager();
      var switchManager = runtime.getSwitchManager();
      var enableSelectorQueryBoundingClientRectCallback = behaviorManager.get("enableSelectorQueryBoundingClientRectCallback" /* ESharedAppxSwitchManagerName.EnableSelectorQueryBoundingClientRectCallback */).standard;
      var enableSelectorQueryScrollOffsetCallback = behaviorManager.get("enableSelectorQueryScrollOffsetCallback" /* ESharedAppxSwitchManagerName.EnableSelectorQueryScrollOffsetCallback */).standard;
      var enableNavigateToMiniProgramQuery = switchManager.get("NavigateToMiniProgramQuery" /* ESharedAppxSwitchManagerName.NavigateToMiniProgramQuery */) === 0 ? 0 : 1;
      var enableSelectorQueryToImage = switchManager.get("enableSelectorQueryToImage" /* ESharedAppxSwitchManagerName.EnableSelectorQueryToImage */);
      var supportChooseCityTask = (insideFeatureRuntimeVersion >= /* a_chooseCity_task_2_8_0:10.2.70 */ 10002070) ? 1 : 0;
      var supportCameraContextStartRecordTimeoutCallbackExtendedArguments = (insideFeatureRuntimeVersion >= /* a_cameraContext_startRecord_timeoutCallback_2_8_0:10.2.90 */ 10002090)
          ? 1
          : 0;
      var isIOS = platform === 'ios' ? 1 : 0;
      return {
          Canvas: {
              getVideoRecorder: (insideFeatureRuntimeVersion >= /* a_Canvas_getVideoRecorder_2_7_4:10.2.26 */ 10002026) ? 1 : 0,
              toTempFilePath: (insideFeatureRuntimeVersion >= /* f_canvasToTempFilePath_2_7_15:10.2.35 */ 10002035) ? 1 : 0,
          },
          createAICameraContext: {
              return: {
                  hasHeadset: 1,
                  startVideoRecognize: 1,
                  stopVideoRecognize: 1,
              },
          },
          createARContext: {
              return: {
                  getSmileDetectingStatus: 1,
                  startSmileDetecting: 1,
                  stopSmileDetecting: 1,
                  getSmileDetectingScore: 1,
                  getGestureDetectingStatus: 1,
                  startGestureDetecting: 1,
                  stopGestureDetecting: 1,
                  getGestureDetectingResult: 1,
                  getGestureDetectingScore: 1,
                  getPoseDetectingStatus: 1,
                  startPoseDetecting: 1,
                  stopPoseDetecting: 1,
                  getPoseDetectingScore: 1,
                  resetScene: 1,
                  rotateScene: 1,
                  translateScene: 1,
                  scaleScene: 1,
                  getNodeRotation: 1,
                  getNodeScale: 1,
                  rotateNode: 1,
                  scaleNode: 1,
                  translateNode: 1,
                  transformCoordinate: 1,
                  hitTest: 1,
                  isNodeVisible: 1,
                  setNodeBillboard: 1,
                  setNodeStatic: 1,
                  setNodeTexture: 1,
                  removeTextureCache: 1,
                  modulateAlpha: 1,
                  modulateColor: 1,
                  startEnvironmentTexturing: 1,
                  stopEnvironmentTexturing: 1,
                  playAnimation: 1,
                  pauseAnimation: 1,
                  stopAnimation: 1,
                  createAnimation: 1,
                  createAnimationClip: 1,
                  setAnimationAdditiveBlending: 1,
                  clearAnimationAdditiveBlending: 1,
                  crossFadeAnimation: 1,
                  loadAnimation: 1,
                  setLightAmbientColor: 1,
                  setLightColor: 1,
                  setLightRange: 1,
                  setLightInnerAngle: 1,
                  setLightOuterAngle: 1,
                  emitParticle: 1,
                  enableGuidePlane: 1,
                  setGuidePlaneLineColor: 1,
                  setGuidePlanePlaneColor: 1,
                  setGuidePlaneScale: 1,
                  bindGuidePlaneNodeId: 1,
                  getCameraPosition: 1,
                  switchCameraPosition: 1,
                  setVideo: 1,
                  playVideo: 1,
                  pauseVideo: 1,
                  stopVideo: 1,
                  setAudio: 1,
                  playAudio: 1,
                  stopAudio: 1,
                  stopAllAudio: 1,
                  startRecording: 1,
                  stopRecording: 1,
                  snapshot: 1,
                  getImageDetectingStatus: 1,
                  startImageDetecting: 1,
                  stopImageDetecting: 1,
              },
          },
          createCameraContext: {
              return: {
                  onCameraFrame: {
                      callback: {
                          timestamp: (insideFeatureRuntimeVersion >= /* a_cameraContext_onCameraFrame_timestamp_2_7_6:10.2.30 */ 10002030) ? 1 : 0,
                      },
                  },
                  startRecord: {
                      object: {
                          maxDuration: (insideFeatureRuntimeVersion >= /* a_cameraContext_startRecord_maxDuration_2_6_2:10.1.98 */ 10001098) ? 1 : 0,
                          timeoutCallback: {
                              callback: {
                                  duration: supportCameraContextStartRecordTimeoutCallbackExtendedArguments,
                                  height: supportCameraContextStartRecordTimeoutCallbackExtendedArguments,
                                  size: supportCameraContextStartRecordTimeoutCallbackExtendedArguments,
                                  width: supportCameraContextStartRecordTimeoutCallbackExtendedArguments,
                              },
                          },
                      },
                  },
                  setZoom: (insideFeatureRuntimeVersion >= /* c_camera_setZoom_2_7_16:10.2.58 */ 10002058) ? 1 : 0,
              },
          },
          createCanvasContext: {
              return: {
                  draw: {
                      callback: 1,
                  },
                  getImageData: 1,
                  globalCompositeOperation: 0,
                  measureText: (/* a_canvasContext_measureText_24_3:true */ true) ? 1 : 0,
                  measureTextAsync: (/* a_canvasContext_measureText_24_3:true */ true) ? 1 : 0,
                  putImageData: 1,
                  toDataURL: 1,
              },
          },
          createIntersectionObserver: isCurrentPageCubeEngine
              ? 0
              : {
                  object: {
                      dataset: 1,
                  },
                  return: {
                      in: 1,
                  },
              },
          createSelectorQuery: isCurrentPageCubeEngine
              ? 0
              : {
                  return: {
                      in: 1,
                      node: 1,
                      context: 1,
                      fields: {
                          object: {
                              id: 1,
                          },
                      },
                      boundingClientRect: {
                          callback: enableSelectorQueryBoundingClientRectCallback
                              ? {
                                  id: 1,
                              }
                              : 0,
                      },
                      scrollOffset: {
                          callback: enableSelectorQueryScrollOffsetCallback
                              ? {
                                  id: 1,
                              }
                              : 0,
                      },
                      toImage: enableSelectorQueryToImage ? 1 : 0,
                  },
              },
          createLivePlayerContext: {
              return: {
                  showFloatingWindow: (insideFeatureRuntimeVersion >= /* c_live_player_floating_mode_24_6:10.1.92 */ 10001092) ? 1 : 0,
              },
          },
          createLivePusherContext: {
              return: {
                  enableCamera: livePusher244,
                  mute: livePusher244,
                  sendMessage: livePusher244,
                  inviteUser: (insideFeatureRuntimeVersion >= /* c_rtc_room_context_inviteUser_24_0:10.1.90 */ 10001090) ? 1 : 0,
                  // createLivePusherContext.return.start.object.url 校验
                  start: {
                      object: {
                          url: (insideFeatureRuntimeVersion >= /* a_livePusherContext_startWithUrl_2_7_4:10.2.28 */ 10002028) ? 1 : 0,
                      },
                  },
              },
          },
          createMapContext: {
              return: {
                  calculateDistance: 1,
                  clearRoute: 1,
                  gestureEnable: 1,
                  getMapProperties: 1,
                  showRoute: 1,
                  showsCompass: 1,
                  showsScale: 1,
                  smoothMoveMarker: 1,
                  smoothMovePolyline: 1,
                  translateMarker: 1,
                  updateComponents: 1,
                  getRegion: 1,
                  changeMarkers: (insideFeatureRuntimeVersion >= /* a_mapContext_changeMarkers_23_0:10.1.80 */ 10001080) ? 1 : 0,
                  // updateIndoorMapActiveFloor: 0, // only 高德
                  getScale: (insideFeatureRuntimeVersion >= /* a_mapContext_getScale_24_0:10.1.92 */ 10001092) ? 1 : 0,
                  screenToMap: (insideFeatureRuntimeVersion >= /* a_mapContext_screenToMap_24_0:10.1.92 */ 10001092) ? 1 : 0,
                  mapToScreen: (insideFeatureRuntimeVersion >= /* a_mapContext_mapToScreen_24_0:10.1.92 */ 10001092) ? 1 : 0,
                  setMapType: (insideFeatureRuntimeVersion >= /* a_mapContext_setMapType_24_0:10.1.92 */ 10001092) ? 1 : 0,
                  // addOverlays: 0, // only 高德
                  // calculatePointFromDistance: 0, // only 高德
                  includePoints: (insideFeatureRuntimeVersion >= /* a_mapContext_includePoints_2_6_2:10.2.0 */ 10002000) ? 1 : 0,
                  getRotate: (insideFeatureRuntimeVersion >= /* a_mapContext_getRotate_2_6_2:10.2.0 */ 10002000) ? 1 : 0,
                  getSkew: (insideFeatureRuntimeVersion >= /* a_mapContext_getSkew_2_6_2:10.2.0 */ 10002000) ? 1 : 0,
                  setCenterOffset: (insideFeatureRuntimeVersion >= /* a_mapContext_setCenterOffset_2_6_2:10.2.0 */ 10002000) ? 1 : 0,
                  addGroundOverlay: (insideFeatureRuntimeVersion >= /* a_mapContext_addGroundOverlay_2_7_2:10.2.20 */ 10002020) ? 1 : 0,
                  addMarkers: (insideFeatureRuntimeVersion >= /* a_mapContext_addMarkers_2_7_2:10.2.20 */ 10002020) ? 1 : 0,
                  initMarkerCluster: (insideFeatureRuntimeVersion >= /* a_mapContext_initMarkerCluster_2_7_2:10.2.20 */ 10002020) ? 1 : 0,
                  polygonContainsPoint: (insideFeatureRuntimeVersion >= /* a_mapContext_polygonContainsPoint_2_7_9:10.2.33 */ 10002033) ? 1 : 0,
                  removeGroundOverlay: (insideFeatureRuntimeVersion >= /* a_mapContext_removeGroundOverlay_2_7_2:10.2.20 */ 10002020) ? 1 : 0,
                  removeMarkers: (insideFeatureRuntimeVersion >= /* a_mapContext_removeMarkers_2_7_2:10.2.20 */ 10002020) ? 1 : 0,
                  updateGroundOverlay: (insideFeatureRuntimeVersion >= /* a_mapContext_updateGroundOverlay_2_7_2:10.2.20 */ 10002020) ? 1 : 0,
              },
          },
          createVideoContext: {
              return: {
                  exitFullScreen: 1,
                  hideStatusBar: 1,
                  mute: 1,
                  playbackRate: 1,
                  requestFullScreen: 1,
                  stop: 1,
                  showStatusBar: 1,
                  updateQualityList: (insideFeatureRuntimeVersion >= /* a_videoContext_quality_23_0:10.1.82 */ 10001082) ? 1 : 0,
                  switchQuality: (insideFeatureRuntimeVersion >= /* a_videoContext_quality_23_0:10.1.82 */ 10001082) ? 1 : 0,
                  showFloatingWindow: (insideFeatureRuntimeVersion >= /* c_video_floating_mode_24_6:10.1.92 */ 10001092) ? 1 : 0,
                  showControl: (insideFeatureRuntimeVersion >= /* a_videoContext_showControl_2_7_3:10.2.23 */ 10002023) ? 1 : 0,
                  hideControl: (insideFeatureRuntimeVersion >= /* a_videoContext_hideControl_2_7_3:10.2.23 */ 10002023) ? 1 : 0,
                  getCurrentTime: (/* a_videoContext_getCurrentTime_2_7_3:false */ false) ? 1 : 0,
                  startInteractions: (insideFeatureRuntimeVersion >= /* a_videoContext_startInteractions_2_7_10:10.2.36 */ 10002036) ? 1 : 0,
                  stopInteractions: (insideFeatureRuntimeVersion >= /* a_videoContext_stopInteractions_2_7_10:10.2.36 */ 10002036) ? 1 : 0,
              },
          },
          createLottieContext: {
              return: {
                  downgradeToPlaceholder: 1,
                  fillVariableValue: 1,
                  getLottieInfo: (insideFeatureRuntimeVersion >= /* a_lottieContext_getLottieInfo_23_0:10.1.80 */ 10001080) ? 1 : 0,
              },
          },
          onAccelerometerChange: {
              callback: {
                  timestamp: (insideFeatureRuntimeVersion >= /* a_onAccelerometerChange_timestamp_2_7_5:10.2.30 */ 10002030) ? 1 : 0,
              },
          },
          onCompassChange: {
              callback: {
                  timestamp: (insideFeatureRuntimeVersion >= /* a_onCompassChange_timestamp_2_7_5:10.2.30 */ 10002030) ? 1 : 0,
              },
          },
          onContinuousLocation: 1,
          offContinuousLocation: 1,
          startContinuousLocation: 1,
          stopContinuousLocation: 1,
          alert: {
              object: {
                  confirmColor: 1,
              },
          },
          chooseCity: {
              return: {
                  onLocatedComplete: supportChooseCityTask,
                  offLocatedComplete: supportChooseCityTask,
                  setLocatedCity: supportChooseCityTask,
              },
          },
          chooseImage: {
              object: {
                  sizeType: 1,
              },
              return: {
                  tempFiles: 1,
              },
          },
          chooseVideo: {
              return: {
                  tempFilePath: 1,
                  filePath: 1,
              },
          },
          closeSocket: {
              object: {
                  code: 1,
                  reason: 1,
              },
          },
          confirm: {
              object: {
                  cancelColor: 1,
                  confirmColor: 1,
              },
          },
          connectSocket: {
              object: {
                  protocols: 1,
                  multiple: 1,
              },
              return: {
                  send: 1,
                  close: 1,
                  onMessage: 1,
                  onOpen: 1,
                  onClose: 1,
                  onError: 1,
                  offMessage: 1,
                  offOpen: 1,
                  offClose: 1,
                  offError: 1,
              },
          },
          createInnerAudioContext: {
              return: {
                  isRecordAudioPlayState: 1,
                  onCanPlay: 1,
                  playbackRate: (insideFeatureRuntimeVersion >= /* a_InnerAudioContext_playbackRate_2_6_0:10.1.99 */ 10001099) ? 1 : 0,
                  supportBackgroundPlay: (insideFeatureRuntimeVersion >= /* a_innerAudioContext_supportBackgroundPlay_2_7_2:10.2.20 */ 10002020) ? 1 : 0,
              },
          },
          createWorker: isIOS || typeof __nativeCreateWorker__ === 'function' ? 1 : 0,
          datePicker: {
              object: {
                  format: {
                      yyyy: 1,
                      'yyyy-MM': 1,
                  },
              },
          },
          env: {
              clientName: 1,
              clientVersion: 1,
              language: 1,
              platform: 1,
          },
          downloadFile: {
              return: {
                  abort: 1,
                  onProgressUpdate: 1,
                  tempFilePath: 1,
              },
          },
          getBackgroundAudioManager: {
              return: {
                  isRecordAudioPlayState: 1,
                  onCanPlay: 1,
                  playbackRate: (insideFeatureRuntimeVersion >= /* a_backgroundAudioManager_playbackRate_2_6_0:10.1.99 */ 10001099) ? 1 : 0,
              },
          },
          getFileSystemManager: {
              return: {
                  zip: (insideFeatureRuntimeVersion >= /* a_getFileSystemManager_zip_2_6_7:10.2.10 */ 10002010) ? 1 : 0,
                  accessSync: 1,
                  appendFileSync: 1,
                  copyFileSync: 1,
                  mkdirSync: 1,
                  readdirSync: 1,
                  readFileSync: 1,
                  renameSync: 1,
                  rmdirSync: 1,
                  saveFileSync: 1,
                  unlinkSync: 1,
                  writeFileSync: 1,
                  statSync: 1,
                  getFileInfoSync: 1,
                  getSavedFileListSync: 1,
                  removeSavedFileSync: 1,
              },
          },
          getIDNumber: {
              object: {
                  protocols: 1,
              },
          },
          getImageInfo: {
              return: {
                  orientation: 1,
                  type: 1,
              },
          },
          getLocation: {
              object: {
                  type: 1,
              },
          },
          getOpenUserInfo: {
              object: {
                  protocols: 1,
              },
          },
          getPhoneNumber: {
              object: {
                  protocols: 1,
              },
          },
          getRunData: {
              object: {
                  protocols: 1,
              },
          },
          getRecorderManager: {
              onFrameRecorded: 1,
              offFrameRecorded: 1,
              pause: 1,
              resume: 1,
              onPause: 1,
              offPause: 1,
              onResume: 1,
              offResume: 1,
              onDecibelChange: supportDecibelChange,
              offDecibelChange: supportDecibelChange,
          },
          getSystemInfo: {
              return: {
                  storage: 1,
                  currentBattery: 1,
                  brand: 1,
                  fontSizeSetting: 1,
                  isIphoneXSeries: platform === 'ios' ? 1 : 0,
                  safeArea: (insideFeatureRuntimeVersion >= 10002020 && insideFeatureRuntimePlatform === "ios") ? 1 : 0,
              },
          },
          isSpeechRecognizeAvailable: {
              object: {
                  extraInfo: (insideFeatureRuntimeVersion >= /* a_isSpeechRecognizeAvailable_extraInfo_2_6_7:10.2.10 */ 10002010) ? 1 : 0,
              },
          },
          loadFontFace: {
              object: {
                  global: 1,
              },
          },
          // 使用 联调设置 方案: https://opendocs.alipay.com/mini/ide/integration-testing 明确不开放envVersion
          navigateToMiniProgram: {
              object: {
                  query: enableNavigateToMiniProgramQuery,
                  // envVersion: 1,
                  version: 1,
              },
          },
          navigateToMiniService: {
              object: {
                  servicePage: 1,
              },
          },
          openRpc: {
              object: {
                  protocols: 1,
              },
          },
          openTaobao: {
              object: {
                  extraQuery: 1,
                  isLite: 1,
              },
          },
          pageScrollTo: {
              object: {
                  duration: 1,
                  selector: 1,
              },
          },
          previewImage: {
              object: {
                  enableSavePhoto: 1,
                  enableShowPhotoDownload: 1,
              },
          },
          prompt: {
              object: {
                  cancelColor: 1,
                  confirmColor: 1,
              },
          },
          request: {
              object: {
                  dataType: {
                      arraybuffer: 1,
                  },
                  data: {
                      arraybuffer: 1,
                  },
                  method: {
                      DELETE: (insideFeatureRuntimeVersion >= /* a_request_method_delete_24_4:10.1.95 */ 10001095) ? 1 : 0,
                  },
              },
          },
          saveImage: {
              object: {
                  showActionSheet: 1,
                  cusHandleResult: 1,
              },
          },
          scan: {
              object: {
                  hideAlbum: 1,
                  actionType: 1,
                  onlyFromCamera: 1,
                  scanType: 1,
              },
              return: {
                  result: 1,
                  scanType: 1,
                  rawData: 1,
                  imageChannel: 1,
              },
          },
          showActionSheet: {
              object: {
                  badges: 1,
              },
          },
          textToSpeech: {
              object: {
                  align: (insideFeatureRuntimeVersion >= /* a_textToSpeech_align_2_6_6:10.2.6 */ 10002006) ? 1 : 0,
              },
          },
          uploadFile: {
              return: {
                  abort: 1,
                  onProgressUpdate: 1,
              },
          },
          showAuthGuide: {
              object: {
                  authType: {
                      BLUETOOTH: (insideFeatureRuntimeVersion >= /* a_showAuthGuide_authType_2_7_10:10.2.33 */ 10002033) ? 1 : 0,
                  },
              },
          },
          canvasToTempFilePath: {
              object: {
                  canvas: (insideFeatureRuntimeVersion >= /* f_canvasToTempFilePath_2_7_15:10.2.35 */ 10002035) ? 1 : 0,
              },
          },
          requestSubscribeMessage: {
              object: {
                  aboveContent: (insideFeatureRuntimeVersion >= /* a_requestSubscribeMessage_jsapi_2_7_15:10.2.56 */ 10002056) ? 1 : 0,
              },
          },
          getAccessibilityManager: {
              return: {
                  announce: (insideFeatureRuntimeVersion >= /* a_getAccessibilityManager_announce_2_7_23:10.2.0 */ 10002000) ? 1 : 0,
                  isScreenReaderEnabled: (insideFeatureRuntimeVersion >= /* a_getAccessibilityManager_isScreenReaderEnabled_2_7_23:10.1.87 */ 10001087)
                      ? 1
                      : 0,
              },
          },
      };
  }

  var platformAndroidUnavaliable = {
      onLowPowerWarning: true,
      offLowPowerWarning: true,
      isLowPowerMode: true,
      addEventCal: true,
      addEventCalendar: true,
  };
  var platformIOSUnavaliable = {
      onDeviceConnected: true,
      offDeviceConnected: true,
      onDeviceDisconnected: true,
      offDeviceDisconnected: true,
      setVisualEffectOnCapture: true,
  };

  // iOS 客户端看了，一下多次发起 loadPlugin 不会有什么问题
  // 问题 1. 发起动态插件加载，然后页面发生导航跳转，会在新的 top page 加载 index.js （对齐，等待 page 参数支持）
  // 问题 2. 动态插件加载过程中，发起动态插件加载，appx1.0 会调用多次 loadPlugin，2.0 会合并 callbacks，最后统一回调
  // 问题 3. 某个插件是静态插件，发起动态插件加载，appx1.0 会调用 loadPlugin， 2.0 不会
  // 问题 4. 某个动态插件加载在 host 加载成功了，执行 client 加载失败，appx1.0 不会回调，2.0 会回调错误
  // 问题 5. 某个动态插件页面分享出去回来的时候，在 client 发起了 loadPlugin，这个状态并没有被 host 同步到，host 发起 loadPlugin 的时候会再来一次…2.0 不会
  // 问题 6. WKCrash 后页面状态要重建
  // 问题 7. 在加载插件过程中发生了页面跳转，index.js 会在客户端 loadPlugin 回调之后 getCurrentPage
  // 问题 8.
  var loadPlugin = {
      d: function (finalOption, resolve) {
          var _this = this;
          var _a = finalOption.plugin, plugin = _a === void 0 ? '' : _a;
          var pluginExpression = {
              type: 10 /* EMiniExtensionStringType._extensionId_$_at_$_version */,
              value: plugin,
          };
          var runtime = this.runtime();
          var pageInstance = this.getPageInstance();
          var miniExtensionManager = runtime.getMiniExtensionManager();
          miniExtensionManager.loadDynamicMiniExtension(pluginExpression, pageInstance && pageInstance.pageId, function (error) {
              if (error) {
                  resolve(error);
              }
              else {
                  resolve();
                  // 注册动态插件自动挂载;
                  var enableDynamicPluginAutoLoad = runtime
                      .getSwitchManager()
                      .get("enableDynamicPluginAutoLoad" /* ESharedAppxSwitchManagerName.EnableDynamicPluginAutoLoad */);
                  if (enableDynamicPluginAutoLoad && pageInstance) {
                      var res = get_extensionId_version(pluginExpression);
                      var pluginId = res && res.extensionId.value;
                      pageInstance.registerRequirement(0 /* EAppxWeb2MessageRequirementType.EnsureExtension */, pluginId, _this.appxDomain, false);
                  }
              }
          });
      },
  };

  var onComponentError = {
      fn: function (callback) {
          if (typeof callback === 'function') {
              var ret = this.runtime()
                  .getTypedEventManager()
                  .addEventListener(6 /* ESharedAppxInternalEvent.ComponentError */, callback, true);
              return ret;
          }
          else {
              return {
                  remove: function () { },
              };
          }
      },
      fnOptionIndex: false,
  };
  var offComponentError = {
      fn: function (callback) {
          if (typeof callback === 'function') {
              this.runtime().getTypedEventManager().removeEventListener(6 /* ESharedAppxInternalEvent.ComponentError */, callback);
          }
      },
      fnOptionIndex: false,
  };
  var exitMiniProgram = {
      tapMark: true,
      d: function (finalOpt, resolve) {
          this.callInternalAPI("exitTinyApp" /* NativeAPI.exitTinyApp */, finalOpt, resolve);
      },
  };

  var onPageNotFound = {
      fnOptionIndex: false,
      fn: function (callback) {
          if (typeof callback === 'function') {
              return this.runtime()
                  .getTypedEventManager()
                  .addEventListener(7 /* ESharedAppxInternalEvent.PageNotFound */, callback, true);
          }
          return {
              remove: function () { },
          };
      },
  };
  var offPageNotFound = {
      fnOptionIndex: false,
      fn: function (callback) {
          if (typeof callback === 'function') {
              return this.runtime().getTypedEventManager().removeEventListener(7 /* ESharedAppxInternalEvent.PageNotFound */, callback);
          }
      },
  };

  function getSocketIdFromEvent(event) {
      var data = event.data || {};
      if (data.socketId) {
          return [data.socketId];
      }
      else {
          // 严格依赖socketId
          return [];
      }
  }
  function getPayloadFromSocketEvent(event) {
      var _a = event.data, socketId = _a.socketId, NBPageUrl = _a.NBPageUrl, userEventData = __rest(_a, ["socketId", "NBPageUrl"]);
      return userEventData;
  }
  var socketAddListener = {
      private: true,
      fnOptionIndex: 1,
      fn: function (payload, callback) {
          if (typeof callback === 'function') {
              this.runtime()
                  .getBridge()
                  .event.taskManager.addMatcher(payload.event, payload.socketId, callback, getSocketIdFromEvent, getPayloadFromSocketEvent);
          }
      },
  };
  var socketRemoveListener = {
      private: true,
      fnOptionIndex: 1,
      fn: function (payload, callback) {
          if (typeof callback === 'function') {
              this.runtime().getBridge().event.taskManager.removeMatcher(payload.event, payload.socketId, callback);
          }
      },
  };
  var socketInvokeAction = {
      private: true,
      fnOptionIndex: 1,
      fn: function (payload, option) {
          var _a = option || {}, success = _a.success, fail = _a.fail, complete = _a.complete, rest = __rest(_a, ["success", "fail", "complete"]);
          this.callScopedBridge(payload.method, __assign(__assign({}, rest), { socketId: payload.socketId }));
      },
  };
  var bindUDPSocket = {
      private: true,
      m: 'bindUDPSocket',
      a: function (result) {
          return result && result.port;
      },
  };
  function createTransportLayerSocket(getRuntime, callContext, protocol, option, eventNames, callNames) {
      var bridge = getRuntime().getBridge();
      var extraInfo = bridge.extraInfo;
      if (!extraInfo["transportLayerSocketId" /* EBridgeExtraInfoKey.transportLayerSocketId */]) {
          extraInfo["transportLayerSocketId" /* EBridgeExtraInfoKey.transportLayerSocketId */] = 1;
      }
      else {
          ++extraInfo["transportLayerSocketId" /* EBridgeExtraInfoKey.transportLayerSocketId */];
      }
      var socketId = extraInfo["transportLayerSocketId" /* EBridgeExtraInfoKey.transportLayerSocketId */];
      var socketContext = {
          type: protocol,
          socketId: String(socketId),
      };
      var _a = option || {}, success = _a.success, fail = _a.fail, complete = _a.complete, rest = __rest(_a, ["success", "fail", "complete"]);
      callContext.callScopedBridge("create".concat(protocol), __assign(__assign({}, rest), { socketId: socketContext.socketId }));
      for (var _i = 0, eventNames_1 = eventNames; _i < eventNames_1.length; _i++) {
          var event = eventNames_1[_i];
          socketContext["on".concat(event)] = callContext.callLinkedCollection.bind(callContext, 'socketAddListener', {
              event: "".concat(protocol).concat(event),
              socketId: socketContext.socketId,
          });
          socketContext["off".concat(event)] = callContext.callLinkedCollection.bind(callContext, 'socketRemoveListener', {
              event: "".concat(protocol).concat(event),
              socketId: socketContext.socketId,
          });
      }
      for (var _b = 0, callNames_1 = callNames; _b < callNames_1.length; _b++) {
          var callName = callNames_1[_b];
          socketContext[callName[0]] = callContext.callLinkedCollection.bind(callContext, 'socketInvokeAction', {
              method: callName[1],
              socketId: socketContext.socketId,
          });
      }
      return socketContext;
  }

  var createTCPSocket = {
      createOptionIndex: 0,
      create: function (option) {
          var socketContext = createTransportLayerSocket(this.runtime, this, "TCPSocket" /* EBridgeTransportLayerProtocol.TCP */, option, ['Connect', 'Message', 'Close', 'Error'], [
              ['connect', 'connectTCPSocket'],
              ['send', 'sendTCPMessage'],
              ['close', 'closeTCPSocket'] ]);
          return socketContext;
      },
      linked: {
          socketAddListener: socketAddListener,
          socketRemoveListener: socketRemoveListener,
          socketInvokeAction: socketInvokeAction,
      },
  };

  var createUDPSocket = {
      createOptionIndex: 0,
      create: function (option) {
          var socketContext = createTransportLayerSocket(this.runtime, this, "UDPSocket" /* EBridgeTransportLayerProtocol.UDP */, option, ['Listening', 'Message', 'Close', 'Error'], [
              ['send', 'sendUDPMessage'],
              ['close', 'closeUDPSocket'] ]);
          socketContext.bind = this.callSyncLinkedCollection.bind(this, 'bindUDPSocket', __assign(__assign({}, option), { socketId: socketContext.socketId }));
          return socketContext;
      },
      linked: {
          bindUDPSocket: bindUDPSocket,
          socketAddListener: socketAddListener,
          socketRemoveListener: socketRemoveListener,
          socketInvokeAction: socketInvokeAction,
      },
  };

  var createBluetoothSocket = {
      createOptionIndex: 0,
      create: function (option) {
          var socketContext = createTransportLayerSocket(this.runtime, this, "BluetoothSocket" /* EBridgeTransportLayerProtocol.Bluetooth */, option, ['Open', 'Listening', 'Message', 'Close', 'Error'], [
              ['connect', 'connectBluetoothSocket'],
              ['close', 'closeBluetoothSocket'],
              ['send', 'writeBluetoothSocketValue'] ]);
          return socketContext;
      },
      linked: {
          socketAddListener: socketAddListener,
          socketRemoveListener: socketRemoveListener,
          socketInvokeAction: socketInvokeAction,
      },
  };

  var NFCTag = /** @class */ /*#__PURE__*/ (function () {
      function NFCTag(_tech, instanceId, platformAPI) {
          this.techType = _tech;
          var tech = _tech;
          // https://baiyan.antfin.com/task/155093?bqlKey=61f7bb9
          // my.getNFCAdapter().getIsoDep iOS 10.2.30及以下有bug，需要将tech值从ENFCTag.IsoDep 即 ISO-DEP 兼容成 IsoDep
          // 下一个客户端版本即10.2.33 客户端会改为正确的ISO-DEP
          // todo 暂时不加特征值判断
          if (_tech === "ISO-DEP" /* ENFCTag.IsoDep */ && platformAPI.isIOS) {
              // if (_tech === ENFCTag.IsoDep && platformAPI.isIOS && !hasInsideFeature(EInsideFeature.a_getNFCAdapter_getIsoDep_iOS_2_7_6)) {
              tech = 'IsoDep';
          }
          platformAPI.asyncCall('getNFCTag', {
              instanceId: instanceId,
              tech: tech,
          });
          this.close = this.close.bind(this, platformAPI, instanceId);
          this.connect = this.connect.bind(this, platformAPI, instanceId);
          this.getMaxTransceiveLength = this.getMaxTransceiveLength.bind(this, platformAPI, instanceId);
          this.setTimeout = this.setTimeout.bind(this, platformAPI, instanceId);
          this.transceive = this.transceive.bind(this, platformAPI, instanceId);
      }
      NFCTag.prototype.connect = function (platformAPI, instanceId, opt) {
          if (opt === void 0) { opt = {}; }
          // opt.instanceId = instanceId;
          platformAPI.callLinked('connect', __assign(__assign({}, opt), { instanceId: instanceId }));
      };
      NFCTag.prototype.close = function (platformAPI, instanceId, opt) {
          if (opt === void 0) { opt = {}; }
          // opt.instanceId = instanceId;
          platformAPI.callLinked('close', __assign(__assign({}, opt), { instanceId: instanceId }));
      };
      NFCTag.prototype.setTimeout = function (platformAPI, instanceId, opt) {
          if (opt === void 0) { opt = {}; }
          // opt.instanceId = instanceId;
          platformAPI.callLinked('setTimeout', __assign(__assign({}, opt), { instanceId: instanceId }));
      };
      NFCTag.prototype.transceive = function (platformAPI, instanceId, opt) {
          if (opt === void 0) { opt = {}; }
          // opt.instanceId = instanceId;
          platformAPI.callLinked('transceive', __assign(__assign({}, opt), { instanceId: instanceId }));
      };
      NFCTag.prototype.getMaxTransceiveLength = function (platformAPI, instanceId, opt) {
          if (opt === void 0) { opt = {}; }
          // opt.instanceId = instanceId;
          platformAPI.callLinked('getMaxTransceiveLength', __assign(__assign({}, opt), { instanceId: instanceId }));
      };
      return NFCTag;
  }());

  var NdeFTag = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(NdeFTag, _super);
      function NdeFTag(type, instanceId, platformAPI) {
          var _this = _super.call(this, type, instanceId, platformAPI) || this;
          _this.onNdefMessage = _this.onNdefMessage.bind(_this, platformAPI);
          _this.offNdefMessage = _this.offNdefMessage.bind(_this, platformAPI);
          _this.writeNdefMessage = _this.writeNdefMessage.bind(_this, platformAPI, instanceId);
          _this.readNdefMessage = _this.readNdefMessage.bind(_this, platformAPI, instanceId);
          return _this;
      }
      NdeFTag.prototype.onNdefMessage = function (platformAPI, callback) {
          platformAPI.callLinked('onNdefMessage', callback);
      };
      NdeFTag.prototype.offNdefMessage = function (platformAPI, callback) {
          platformAPI.callLinked('offNdefMessage', callback);
      };
      NdeFTag.prototype.writeNdefMessage = function (platformAPI, instanceId, opt) {
          if (opt === void 0) { opt = {}; }
          // opt.instanceId = instanceId;
          platformAPI.callLinked('writeNdefMessage', __assign(__assign({}, opt), { instanceId: instanceId }));
      };
      NdeFTag.prototype.readNdefMessage = function (platformAPI, instanceId, opt) {
          if (opt === void 0) { opt = {}; }
          // opt.instanceId = instanceId;
          platformAPI.callLinked('readNdefMessage', __assign(__assign({}, opt), { instanceId: instanceId }));
      };
      return NdeFTag;
  }(NFCTag));

  var NfcATag = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(NfcATag, _super);
      function NfcATag(tech, instanceId, platformAPI) {
          var _this = _super.call(this, tech, instanceId, platformAPI) || this;
          _this.getSak = _this.getSak.bind(_this, platformAPI, instanceId);
          _this.getAtqa = _this.getAtqa.bind(_this, platformAPI, instanceId);
          return _this;
      }
      NfcATag.prototype.getSak = function (platformAPI, instanceId, opt) {
          if (opt === void 0) { opt = {}; }
          // opt.instanceId = instanceId;
          platformAPI.callLinked('getSak', __assign(__assign({}, opt), { instanceId: instanceId }));
      };
      NfcATag.prototype.getAtqa = function (platformAPI, instanceId, opt) {
          if (opt === void 0) { opt = {}; }
          // opt.instanceId = instanceId;
          platformAPI.callLinked('getAtqa', __assign(__assign({}, opt), { instanceId: instanceId }));
      };
      return NfcATag;
  }(NFCTag));

  var IsoDepTag = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(IsoDepTag, _super);
      function IsoDepTag(type, instanceId, platformAPI) {
          var _this = _super.call(this, type, instanceId, platformAPI) || this;
          _this.getHistoricalBytes = _this.getHistoricalBytes.bind(_this, platformAPI, instanceId);
          return _this;
      }
      IsoDepTag.prototype.getHistoricalBytes = function (platformAPI, instanceId, opt) {
          if (opt === void 0) { opt = {}; }
          // opt.instanceId = instanceId;
          platformAPI.callLinked('getHistoricalBytes', __assign(__assign({}, opt), { instanceId: instanceId }));
      };
      return IsoDepTag;
  }(NFCTag));

  // "IsoDep", "NFC-V", "NFC-A", "NDEF"
  var techGetters = [
      ["getNdef" /* ETagGetterName.getNdef */, "NDEF" /* ENFCTag.Ndef */],
      ["getNfcA" /* ETagGetterName.getNfcA */, "NFC-A" /* ENFCTag.NfcA */],
      ["getIsoDep" /* ETagGetterName.getIsoDep */, "ISO-DEP" /* ENFCTag.IsoDep */],
      ["getNfcV" /* ETagGetterName.getNfcV */, "NFC-V" /* ENFCTag.NfcV */] ];
  var techGettersAndroidOnly = [
      ["getNfcB" /* ETagGetterName.getNfcB */, "NFC-B" /* ENFCTag.NfcB */],
      ["getNfcF" /* ETagGetterName.getNfcF */, "NFC-F" /* ENFCTag.NfcF */],
      ["getMifareClassic" /* ETagGetterName.getMifareClassic */, "MIFARE Classic" /* ENFCTag.MifareClassic */],
      ["getMifareUltralight" /* ETagGetterName.getMifareUltralight */, "MIFARE Ultralight" /* ENFCTag.MifareUltralight */] ];
  var onDiscovered = {
      private: true,
      m: 'NFCDiscovered',
      a: function (res) {
          // https://baiyan.antfin.com/task/155093?bqlKey=61f7bb9
          // {techs: ['IsoDep', 'NDEF']}; => {techs: ['ISO-DEP, 'NDEF']};
          if (this.runtime().getEnv().isIOS &&
              res &&
              res.techs &&
              Array.isArray(res.techs) &&
              res.techs.indexOf('IsoDep') > -1) {
              var index = res.techs.indexOf('IsoDep');
              res.techs.splice(index, 1, "ISO-DEP" /* ENFCTag.IsoDep */);
          }
          return res;
      },
  };
  var offDiscovered = {
      private: true,
      m: 'NFCDiscovered',
  };
  var startDiscovery = {
      private: true,
      m: 'startNFCDiscovery',
  };
  var stopDiscovery = {
      private: true,
      m: 'stopNFCDiscovery',
  };
  var connect = {
      private: true,
      m: 'connectNFC',
  };
  var close = {
      private: true,
      m: 'closeNFC',
  };
  var setTimeout$1 = {
      private: true,
      m: 'setNFCTimeout',
  };
  var transceive = {
      private: true,
      m: 'transceiveNFC',
  };
  var getMaxTransceiveLength = {
      private: true,
      m: 'getNFCMaxTransceiveLength',
  };
  var getSak = {
      private: true,
      m: 'getNfcASak',
  };
  var getAtqa = {
      private: true,
      m: 'getNfcAAtqa',
  };
  var readNdefMessage = {
      private: true,
      m: 'readNdefMessage',
  };
  var writeNdefMessage = {
      private: true,
      m: 'writeNdefMessage',
  };
  var onNdefMessage = {
      private: true,
      m: 'NdefMessage',
  };
  var offNdefMessage = {
      private: true,
      m: 'NdefMessage',
  };
  var getHistoricalBytes = {
      private: true,
      m: 'getIsoDepHistoricalBytes',
  };
  var getNFCAdapter = {
      createOptionIndex: false,
      create: function () {
          var _this = this;
          var NFCAdapter = {
              tech: {
                  ndef: "NDEF" /* ENFCTag.Ndef */,
                  nfcA: "NFC-A" /* ENFCTag.NfcA */,
                  nfcB: "NFC-B" /* ENFCTag.NfcB */,
                  isoDep: "ISO-DEP" /* ENFCTag.IsoDep */,
                  nfcF: "NFC-F" /* ENFCTag.NfcF */,
                  nfcV: "NFC-V" /* ENFCTag.NfcV */,
                  mifareClassic: "MIFARE Classic" /* ENFCTag.MifareClassic */,
                  mifareUltralight: "MIFARE Ultralight" /* ENFCTag.MifareUltralight */,
              },
              offDiscovered: null,
              onDiscovered: null,
              startDiscovery: null,
              stopDiscovery: null,
              getIsoDep: null,
              getNfcA: null,
              getNdef: null,
              getNfcV: null,
          };
          var bridgeScope = this.runtime().getBridge().getScope(this.appxDomain);
          var platformAPI = {
              isIOS: this.runtime().getEnv().isIOS,
              asyncCall: bridgeScope.call,
              callLinked: this.callLinkedCollection,
          };
          // 客户端层面后续操作不依赖此JSAPI的返回值。
          platformAPI.asyncCall("getNFCAdapter", {});
          // JSAPI执行失败
          // if (res === undefined && !!res.error) {
          //   return NFCAdapter;
          // }
          // JSAPI执行成功
          NFCAdapter.offDiscovered = function (callback) {
              platformAPI.callLinked('offDiscovered', callback);
          };
          NFCAdapter.onDiscovered = function (callback) {
              platformAPI.callLinked('onDiscovered', callback);
          };
          NFCAdapter.startDiscovery = function (opt) {
              platformAPI.callLinked('startDiscovery', opt);
          };
          NFCAdapter.stopDiscovery = function (opt) {
              platformAPI.callLinked('stopDiscovery', opt);
          };
          var _loop_1 = function (techGetter) {
              NFCAdapter[techGetter[0]] = function () {
                  var extraInfo = _this.runtime().getBridge().extraInfo;
                  var instanceId;
                  if (!extraInfo["nfcAdapterInstanceId" /* EBridgeExtraInfoKey.nfcAdapterInstanceId */]) {
                      instanceId = extraInfo["nfcAdapterInstanceId" /* EBridgeExtraInfoKey.nfcAdapterInstanceId */] = 0;
                  }
                  else {
                      instanceId = ++extraInfo["nfcAdapterInstanceId" /* EBridgeExtraInfoKey.nfcAdapterInstanceId */];
                  }
                  switch (techGetter[1]) {
                      case "ISO-DEP" /* ENFCTag.IsoDep */:
                          return new IsoDepTag(techGetter[1], String(instanceId), platformAPI);
                      case "NFC-A" /* ENFCTag.NfcA */:
                          return new NfcATag(techGetter[1], String(instanceId), platformAPI);
                      case "NDEF" /* ENFCTag.Ndef */:
                          return new NdeFTag(techGetter[1], String(instanceId), platformAPI);
                      default:
                          return new NFCTag(techGetter[1], String(instanceId), platformAPI);
                  }
              };
          };
          for (var _i = 0, techGetters_1 = techGetters; _i < techGetters_1.length; _i++) {
              var techGetter = techGetters_1[_i];
              _loop_1(techGetter);
          }
          if (this.runtime().getEnv().platform === 'android') {
              var _loop_2 = function (techGetter) {
                  NFCAdapter[techGetter[0]] = function () {
                      var extraInfo = _this.runtime().getBridge().extraInfo;
                      var instanceId;
                      if (!extraInfo["nfcAdapterInstanceId" /* EBridgeExtraInfoKey.nfcAdapterInstanceId */]) {
                          instanceId = extraInfo["nfcAdapterInstanceId" /* EBridgeExtraInfoKey.nfcAdapterInstanceId */] = 0;
                      }
                      else {
                          instanceId = ++extraInfo["nfcAdapterInstanceId" /* EBridgeExtraInfoKey.nfcAdapterInstanceId */];
                      }
                      return new NFCTag(techGetter[1], String(instanceId), platformAPI);
                  };
              };
              for (var _a = 0, techGettersAndroidOnly_1 = techGettersAndroidOnly; _a < techGettersAndroidOnly_1.length; _a++) {
                  var techGetter = techGettersAndroidOnly_1[_a];
                  _loop_2(techGetter);
              }
          }
          return NFCAdapter;
      },
      linked: {
          onDiscovered: onDiscovered,
          offDiscovered: offDiscovered,
          startDiscovery: startDiscovery,
          stopDiscovery: stopDiscovery,
          connect: connect,
          close: close,
          setTimeout: setTimeout$1,
          transceive: transceive,
          getMaxTransceiveLength: getMaxTransceiveLength,
          getSak: getSak,
          getAtqa: getAtqa,
          readNdefMessage: readNdefMessage,
          writeNdefMessage: writeNdefMessage,
          onNdefMessage: onNdefMessage,
          offNdefMessage: offNdefMessage,
          getHistoricalBytes: getHistoricalBytes,
      },
  };

  var makeBluetoothPair = {};
  var cancelBluetoothPair = {};
  var getBluetoothPairs = {};

  function getFeaturedBridgeAPI4Bluetooth() {
      return [
          {
              sync: false,
              linked: true,
              keys: ['createBluetoothSocket'],
              values: {
                  createBluetoothSocket: createBluetoothSocket,
              },
          },
          {
              sync: false,
              keys: ['makeBluetoothPair'],
              values: {
                  makeBluetoothPair: makeBluetoothPair,
              },
          } ];
  }
  function getFeaturedBridgeAPI4CancelBluetoothPair() {
      return [
          {
              sync: false,
              keys: ['cancelBluetoothPair'],
              values: {
                  cancelBluetoothPair: cancelBluetoothPair,
              },
          } ];
  }
  function getFeaturedBridgeAPI4GetBluetoothPairs() {
      return [
          {
              sync: false,
              keys: ['getBluetoothPairs'],
              values: {
                  getBluetoothPairs: getBluetoothPairs,
              },
          } ];
  }

  var startAccelerometer = {
      d: function (opt, resolve) {
          var _a;
          var extraInfo = this.runtime().getBridge().extraInfo;
          extraInfo["startAccelerometerExecuted" /* EBridgeExtraInfoKey.startAccelerometerExecuted */] = true;
          this.callDefaultBridge('watchShake', (_a = {},
              _a["monitorAccelerometer" /* EWatchShakeType.monitorAccelerometer */] = true,
              _a.interval = getWatchShakeInterval(opt.interval),
              _a.samplingPeriodUs = opt.interval,
              _a), resolve);
      },
  };
  var stopAccelerometer = {
      d: function (opt, resolve) {
          var _a;
          var extraInfo = this.runtime().getBridge().extraInfo;
          extraInfo["startAccelerometerExecuted" /* EBridgeExtraInfoKey.startAccelerometerExecuted */] = false;
          this.callDefaultBridge('watchShake', (_a = {}, _a["monitorAccelerometer" /* EWatchShakeType.monitorAccelerometer */] = false, _a), resolve);
      },
  };

  var API4Accelerometer = {
      __proto__: null,
      startAccelerometer: startAccelerometer,
      stopAccelerometer: stopAccelerometer
  };

  var onAudioInterruptionBegin = {};
  var onAudioInterruptionEnd = {};
  var offAudioInterruptionBegin = {};
  var offAudioInterruptionEnd = {};

  var API4Audio = {
      __proto__: null,
      onAudioInterruptionBegin: onAudioInterruptionBegin,
      onAudioInterruptionEnd: onAudioInterruptionEnd,
      offAudioInterruptionBegin: offAudioInterruptionBegin,
      offAudioInterruptionEnd: offAudioInterruptionEnd
  };

  var startCompass = {
      d: function (opt, resolve) {
          var _a;
          var extraInfo = this.runtime().getBridge().extraInfo;
          extraInfo["startCompassExecuted" /* EBridgeExtraInfoKey.startCompassExecuted */] = true;
          this.callDefaultBridge('watchShake', (_a = {},
              _a["monitorCompass" /* EWatchShakeType.monitorCompass */] = true,
              _a.interval = getWatchShakeInterval(opt.interval),
              _a.samplingPeriodUs = opt.interval,
              _a), resolve);
      },
  };
  var stopCompass = {
      d: function (opt, resolve) {
          var _a;
          var extraInfo = this.runtime().getBridge().extraInfo;
          extraInfo["startCompassExecuted" /* EBridgeExtraInfoKey.startCompassExecuted */] = false;
          this.callDefaultBridge('watchShake', (_a = {}, _a["monitorCompass" /* EWatchShakeType.monitorCompass */] = false, _a), resolve);
      },
  };

  var API4Compass = {
      __proto__: null,
      startCompass: startCompass,
      stopCompass: stopCompass
  };

  function hasPermission(callContext, resolve) {
      var runtime = callContext.runtime();
      var bridge = runtime.getBridge();
      var appId = runtime.getEnv().startupParams.appId;
      callContext.callDefaultBridge('configService.getConfig', {
          configKey: 'APPX_DONATE_IN_BROWSER',
      }, function (res) {
          var config;
          try {
              config = JSON.parse((res && res.configKey) || '{}');
          }
          catch (e) { }
          if (config && Array.isArray(config)) {
              if (config.indexOf(appId) > -1) {
                  resolve(true);
              }
              else {
                  resolve(false);
              }
          }
          else {
              resolve(true);
          }
      });
  }
  // TODO isFeatureAvailable('a_donateInBrowser_23_0')
  var donateInBrowser = {
      d: function (opt, resolve) {
          return __awaiter(this, void 0, void 0, function () {
              var runtime, bridge;
              var _this = this;
              return __generator(this, function (_a) {
                  runtime = this.runtime();
                  bridge = runtime.getBridge();
                  hasPermission(this, function (has) {
                      if (has) {
                          _this.callDefaultBridge('openInBrowser', {
                              url: opt.url || '',
                          });
                          resolve({ success: true });
                      }
                      else {
                          resolve({
                              error: 4,
                              errorMessage: '无权调用该接口',
                          });
                      }
                  });
                  return [2 /*return*/];
              });
          });
      },
  };

  var API4Donate = {
      __proto__: null,
      donateInBrowser: donateInBrowser
  };

  var startGyroscope = {
      d: function (opt, resolve) {
          var _a;
          var extraInfo = this.runtime().getBridge().extraInfo;
          extraInfo["startGyroscopeExecuted" /* EBridgeExtraInfoKey.startGyroscopeExecuted */] = true;
          this.callDefaultBridge('watchShake', (_a = {},
              _a["monitorGyroscope" /* EWatchShakeType.monitorGyroscope */] = true,
              _a.interval = getWatchShakeInterval(opt.interval),
              _a.samplingPeriodUs = opt.interval,
              _a), resolve);
      },
  };
  var stopGyroscope = {
      d: function (opt, resolve) {
          var _a;
          var extraInfo = this.runtime().getBridge().extraInfo;
          extraInfo["startGyroscopeExecuted" /* EBridgeExtraInfoKey.startGyroscopeExecuted */] = false;
          this.callDefaultBridge('watchShake', (_a = {}, _a["monitorGyroscope" /* EWatchShakeType.monitorGyroscope */] = false, _a), resolve);
      },
  };

  var API4Gyroscope = {
      __proto__: null,
      startGyroscope: startGyroscope,
      stopGyroscope: stopGyroscope
  };

  var showAuthenticDialog = {};
  var getWifiBroadcastInfo = {};

  function getPagePath(pagePath) {
      if (pagePath.charAt(0) === '/') {
          pagePath = pagePath.slice(1);
      }
      return pagePath;
  }
  // TODO 需要改成 无 promise 返回
  var addTabBarItem = {
      d: function (finalOption, resolve) {
          var runtime = this.runtime();
          var meta = runtime.getMeta();
          if (!meta.shouldAddTabBarItem()) {
              resolve({
                  error: 100,
                  errorMessage: '调用addTabBarItem次数过多！',
              });
          }
          else {
              this.callDefaultBridge('addTabBarItem', __assign(__assign({}, finalOption), { activeIcon: finalOption.activeIcon || '', icon: finalOption.icon || '', tag: finalOption.pagePath, text: finalOption.name }), function (res) {
                  if (!res.error) {
                      var pagePath = getPagePath(finalOption.pagePath);
                      if (pagePath) {
                          meta.addTabBarItem(pagePath);
                      }
                  }
                  resolve(res);
              });
          }
      },
  };
  // TODO 需要改成 无 promise 返回
  var removeTabBarItem = {
      d: function (finalOption, resolve) {
          var runtime = this.runtime();
          this.callDefaultBridge('removeTabBarItem', finalOption, function (res) {
              if (!res.error) {
                  // 确实，finalOption 没有 pagePath
                  var pagePath = getPagePath(res.pagePath || finalOption.pagePath);
                  if (pagePath) {
                      runtime.getMeta().removeTabBarItem(pagePath);
                  }
              }
              resolve(res);
          });
      },
  };

  var API4TabBar = {
      __proto__: null,
      addTabBarItem: addTabBarItem,
      removeTabBarItem: removeTabBarItem
  };



  var API4TCP = {
      __proto__: null,
      createTCPSocket: createTCPSocket
  };



  var API4UDP = {
      __proto__: null,
      createUDPSocket: createUDPSocket
  };



  var API4NFCAdapter = {
      __proto__: null,
      getNFCAdapter: getNFCAdapter
  };

  var crossPay = {
      m: "tradePayCrossApp" /* NativeAPI.tradePayCrossApp */,
  };
  var signContract = {
      d: function (opt, resolve) {
          // prod: https://render.alipay.com/p/c/mdeduct-landing
          // sit/test https://shandie.alipay.com/p/c/basement_dev_test18h6ny60iqxs
          var regexp = '^https?://render\\.alipay\\.com/p/c/mdeduct-landing|^https?://shandie\\.alipay\\.com/p/c/basement_dev_test18h6ny60iqxs';
          var config = this.runtime().getSwitchManager().get("validSignContractURL" /* ESharedAppxSwitchManagerName.ValidSignContractURL */);
          if (config && typeof config === 'string') {
              regexp = config;
          }
          try {
              var re = new RegExp(regexp);
              if (re.test(opt.signStr)) {
                  this.callScopedBridge("signContract" /* NativeAPI.signContract */, opt, resolve);
              }
              else {
                  resolve({
                      error: 2,
                      errorMessage: '参数不合法',
                  });
              }
          }
          catch (ex) {
              resolve({
                  error: 2,
                  errorMessage: '参数不合法',
              });
          }
      },
  };
  var getSiteInfo = {};

  var API4AlipayPlus = {
      __proto__: null,
      crossPay: crossPay,
      signContract: signContract,
      getSiteInfo: getSiteInfo
  };

  var NotificationName4FuCardModalClosed = 'NEBULANOTIFY_CDP_FUCARD_MODAL_CLOSED';
  function getPayloadFromFireNotifyEvent(event) {
      // e.g.
      // {
      //   NBPageUrl: "https://2017072607907880.hybrid.alipay-eco.com/index.html#pages/notify/notify"
      //   hello: "world"
      //   notificationName: "NEBULANOTIFY_TEST_EVENT"
      // } = event.data;
      var _a = event.data, notificationName = _a.notificationName, NBPageUrl = _a.NBPageUrl, received = _a.received, userEventData = __rest(_a, ["notificationName", "NBPageUrl", "received"]);
      /**
       * data新增一个字段：received: boolean @全锋
       * - true 代表已领取福卡
       * - false 代表未领取
       */
      return {
          received: typeof received === 'boolean' ? received : received === 'true', // android boolean值 true 会被容器转成 "true"
      };
  }
  var onFuCardModalClosed = {
      fnOptionIndex: false,
      fn: function (callback) {
          var appId = this.runtime().getEnv().startupParams.appId;
          var notificationName = "".concat(NotificationName4FuCardModalClosed, "-").concat(appId);
          var extraInfo = this.runtime().getBridge().extraInfo;
          if (extraInfo["fuCardModalClosedEvent" /* EBridgeExtraInfoKey.fuCardModalClosedEvent */] === undefined) {
              extraInfo["fuCardModalClosedEvent" /* EBridgeExtraInfoKey.fuCardModalClosedEvent */] = 0;
          }
          if (typeof callback === 'function') {
              var addedListenerCount = this.runtime()
                  .getBridge()
                  .event.taskManager.addMatcher("fireNotify" /* NativeEvent.fireNotify */, notificationName, callback, function (event) {
                  var data = event.data || {};
                  if (data.notificationName === notificationName) {
                      return [data.notificationName];
                  }
                  else {
                      // 严格依赖notificationName
                      return [];
                  }
              }, getPayloadFromFireNotifyEvent);
              if (extraInfo["fuCardModalClosedEvent" /* EBridgeExtraInfoKey.fuCardModalClosedEvent */] === 0) {
                  this.callInternalAPI("addNotifyListener" /* NativeAPI.addNotifyListener */, {
                      name: notificationName,
                  });
                  extraInfo["fuCardModalClosedEvent" /* EBridgeExtraInfoKey.fuCardModalClosedEvent */] += addedListenerCount;
              }
          }
      },
  };
  var offFuCardModalClosed = {
      fnOptionIndex: false,
      fn: function (callback) {
          var appId = this.runtime().getEnv().startupParams.appId;
          var notificationName = "".concat(NotificationName4FuCardModalClosed, "-").concat(appId);
          var extraInfo = this.runtime().getBridge().extraInfo;
          if (extraInfo["fuCardModalClosedEvent" /* EBridgeExtraInfoKey.fuCardModalClosedEvent */] === undefined) {
              extraInfo["fuCardModalClosedEvent" /* EBridgeExtraInfoKey.fuCardModalClosedEvent */] = 0;
          }
          // removedListenerCount 不可能为负数
          var removedListenerCount = this.runtime()
              .getBridge()
              .event.taskManager.removeMatcher("fireNotify" /* NativeEvent.fireNotify */, notificationName, callback);
          extraInfo["fuCardModalClosedEvent" /* EBridgeExtraInfoKey.fuCardModalClosedEvent */] -= removedListenerCount;
          // 没有任何监听函数时则执行下 removeNotifyListener
          if (removedListenerCount > 0 && extraInfo["fuCardModalClosedEvent" /* EBridgeExtraInfoKey.fuCardModalClosedEvent */] === 0) {
              this.callInternalAPI("removeNotifyListener" /* NativeAPI.removeNotifyListener */, {
                  name: notificationName,
              });
          }
      },
  };

  var API4WuFuModal = {
      __proto__: null,
      onFuCardModalClosed: onFuCardModalClosed,
      offFuCardModalClosed: offFuCardModalClosed
  };

  var getBackgroundFetchData = {
      b: function (opt) {
          // fetchType参数映射为type
          /**
           * 对外入参字段是fetchType
           * 客户端 10.2.36 只支持type参数，
           * 客户端 10.2.38 开始支持fetchType参数，但实在转不动了，一直保持映射吧。
           */
          mapping(opt, {
              fetchType: 'type%s',
          });
      },
      a: function (res) {
          // https://yuque.antfin.com/appxng/open-docs/hqgg6w
          // 执行成功时，delete掉status字段
          if (res.status !== undefined && res.status === 0) {
              delete res.status;
          }
          if (res.prefetch !== undefined) {
              delete res.prefetch;
          }
          // 如果status 为 2 或者 3 则映射到error 3，只保留error和errorMessage
          if (res.error === undefined && res.status && (res.status === 2 || res.status === 3)) {
              res = {
                  error: 3,
                  errorMessage: '没有预加载数据',
              };
          }
          if (res.error === 2 && res.errorMessage === '未传type') {
              // fml
              res.errorMessage = '未传fetchType';
          }
          // 10.1.36Android 未返回type字段，由于此版本只支持pre，所以强制补上fetchType
          if (res.fetchedData && res.type === undefined && res.fetchType === undefined) {
              res.fetchType = 'pre';
          }
          // type字段映射成fetchType
          mapping(res, {
              type: 'fetchType%s',
              timeStamp: 'timestamp%s',
          });
          // 此处需返回，因为上面对res重新赋值了（而不仅仅增删改某个属性）
          // 如果不返回，则下面this.apiInfo.a.call 收到的是undefined，仍会取finalResult
          return res;
      },
  };

  var getAccountInfoSync = {
      fnOptionIndex: false,
      fn: function () {
          var appxDomain = this.appxDomain;
          var miniExtensionManager = this.runtime().getMiniExtensionManager();
          var appId = this.runtime().getEnv().startupParams.appId;
          var _a = this.runtime().getEnv().originalStartupParams, _b = _a.package_nick, package_nick = _b === void 0 ? '' : _b, _c = _a.envVersion, envVersion = _c === void 0 ? '' : _c;
          var res = {
              miniProgram: {
                  appId: appId,
                  envVersion: envVersion,
                  version: package_nick,
              },
          };
          if (isAppxDomain4Extension(appxDomain)) {
              var extensionExtraInfo = miniExtensionManager.getExtraInfoByExtensionId(appxDomain.value);
              var pluginVersion = (extensionExtraInfo && extensionExtraInfo.package_nick) || '';
              res.plugin = {
                  appId: appxDomain.value,
                  version: pluginVersion,
              };
          }
          return res;
      },
  };

  function nonPrivateProxy(opts, context) {
      var res = {};
      var cache = {};
      var opts4nonUA = [];
      var runtime = context.runtime();
      var env = runtime.getEnv();
      var disableGetWidthFromUA = runtime
          .getSwitchManager()
          .get("disableGetWidthFromUA" /* ESharedAppxSwitchManagerName.DisableGetWidthFromUA */);
      var resFromUA = getUserAgentInfo$1(env, disableGetWidthFromUA);
      var behavior = context
          .runtime()
          .getBehaviorManager()
          .get("EnablePreBridgeCallAsync4GetSystemInfo" /* ESharedAppxSwitchManagerName.EnablePreBridgeCallAsync4GetSystemInfo */);
      var flag = 0;
      opts.forEach(function (item) {
          if (resFromUA[item]) {
              res[item] = resFromUA[item];
          }
          else {
              opts4nonUA.push(item);
              Object.defineProperty(res, item, {
                  configurable: true,
                  enumerable: true,
                  get: function () {
                      if (!(item in cache)) {
                          flag = 1;
                          var bridgeRes = context.callScopedBridgeSync("getSystemInfo" /* NativeAPI.getSystemInfo */, {
                              options: opts4nonUA,
                              fixScreen: true,
                          });
                          cache = __assign(__assign({}, bridgeRes), cache);
                      }
                      return cache[item];
                  },
                  set: function (newVal) {
                      cache[item] = newVal;
                      return true;
                  },
              });
          }
      });
      setTimeout(function () {
          if (flag === 0) {
              if (behavior.report) {
                  behavior.report('bridgeCall subGetSystemInfo');
              }
          }
      }, 0);
      return res;
  }
  // 将 getAppAuthorizeSetting 接口的返回参数作映射，其中 overlayAuthorized 字段不作转化
  var keys2Exchange = [
      'cameraAuthorized',
      'locationAuthorized',
      'microphoneAuthorized',
      'notificationAuthorized',
      'albumAuthorized',
      'bluetoothAuthorized',
      'notificationAlertAuthorized',
      'notificationBadgeAuthorized',
      'notificationSoundAuthorized' ];
  var EAppAuthorizeSettingRes;
  (function (EAppAuthorizeSettingRes) {
      EAppAuthorizeSettingRes["Authorized"] = "authorized";
      EAppAuthorizeSettingRes["Denied"] = "denied";
      EAppAuthorizeSettingRes["NotDetermined"] = "not determined";
  })(EAppAuthorizeSettingRes || (EAppAuthorizeSettingRes = {}));
  function privateProxy(opts, callScopedBridgeSync) {
      var res = {};
      var cache = {};
      var response;
      opts.forEach(function (item) {
          Object.defineProperty(res, item, {
              configurable: true,
              enumerable: true,
              get: function () {
                  if (!(item in cache)) {
                      var resFromBridge = callScopedBridgeSync("getSystemInfo" /* NativeAPI.getSystemInfo */, {
                          options: [item],
                      })[item];
                      if (keys2Exchange.indexOf(item) > -1 && typeof resFromBridge === 'boolean') {
                          // false 包含 请求授权被拒绝(denied) 和 尚未请求授权(non determined) 两种情况
                          cache[item] = resFromBridge === true ? EAppAuthorizeSettingRes.Authorized : EAppAuthorizeSettingRes.Denied;
                      }
                      else {
                          cache[item] = resFromBridge;
                      }
                  }
                  return cache[item];
              },
              set: function (newVal) {
                  cache[item] = newVal;
                  return true;
              },
          });
      });
      if (typeof Proxy === 'function') {
          return new Proxy(res, {
              ownKeys: function (target) {
                  if (!response) {
                      var noCacheOpts = opts.filter(function (key) { return !(key in cache); });
                      response = callScopedBridgeSync("getSystemInfo" /* NativeAPI.getSystemInfo */, { options: noCacheOpts });
                      noCacheOpts.forEach(function (key) {
                          if (keys2Exchange.indexOf(key) > -1 && typeof response[key] === 'boolean') {
                              // false 包含 请求授权被拒绝(denied) 和 尚未请求授权(non determined) 两种情况
                              target[key] =
                                  response[key] === true
                                      ? EAppAuthorizeSettingRes.Authorized
                                      : EAppAuthorizeSettingRes.Denied;
                          }
                          else {
                              target[key] = response[key];
                          }
                      });
                  }
                  return Reflect.ownKeys(target);
              },
          });
      }
      else {
          return res;
      }
  }

  var getAppAuthorizeSetting = {
      fnOptionIndex: false,
      fn: function () {
          var platform = this.runtime().getEnv().platform;
          var opts = buildOptions(platform);
          var callScopedBridgeSync = this.callScopedBridgeSync.bind(this);
          return privateProxy(opts, callScopedBridgeSync);
      },
  };
  var EProperty4AppAuthorizeSetting;
  (function (EProperty4AppAuthorizeSetting) {
      EProperty4AppAuthorizeSetting["cameraAuthorized"] = "cameraAuthorized";
      EProperty4AppAuthorizeSetting["locationAuthorized"] = "locationAuthorized";
      EProperty4AppAuthorizeSetting["microphoneAuthorized"] = "microphoneAuthorized";
      EProperty4AppAuthorizeSetting["notificationAuthorized"] = "notificationAuthorized";
      //ios only
      EProperty4AppAuthorizeSetting["albumAuthorized"] = "albumAuthorized";
      EProperty4AppAuthorizeSetting["bluetoothAuthorized"] = "bluetoothAuthorized";
      EProperty4AppAuthorizeSetting["notificationAlertAuthorized"] = "notificationAlertAuthorized";
      EProperty4AppAuthorizeSetting["notificationBadgeAuthorized"] = "notificationBadgeAuthorized";
      EProperty4AppAuthorizeSetting["notificationSoundAuthorized"] = "notificationSoundAuthorized";
      //android only
      EProperty4AppAuthorizeSetting["overlayAuthorized"] = "overlayAuthorized";
  })(EProperty4AppAuthorizeSetting || (EProperty4AppAuthorizeSetting = {}));
  function buildOptions(platform) {
      var opts = [
          EProperty4AppAuthorizeSetting.cameraAuthorized,
          EProperty4AppAuthorizeSetting.locationAuthorized,
          EProperty4AppAuthorizeSetting.microphoneAuthorized,
          EProperty4AppAuthorizeSetting.notificationAuthorized ];
      if (platform === 'ios') {
          opts.push(EProperty4AppAuthorizeSetting.bluetoothAuthorized, EProperty4AppAuthorizeSetting.albumAuthorized, EProperty4AppAuthorizeSetting.notificationAlertAuthorized, EProperty4AppAuthorizeSetting.notificationBadgeAuthorized, EProperty4AppAuthorizeSetting.notificationSoundAuthorized);
      }
      else if (platform === 'android') {
          opts.push(EProperty4AppAuthorizeSetting.overlayAuthorized);
      }
      return opts;
  }

  var getAppBaseInfo = {
      fnOptionIndex: false,
      fn: function () {
          var runtime = this.runtime();
          var _a = runtime.getEnv(), language = _a.language, originalClientVersion = _a.originalClientVersion, startupParams = _a.startupParams;
          var res = {
              SDKVersion: kAppxVersion,
              host: {
                  appId: startupParams.appId,
              },
              language: language,
              version: originalClientVersion,
          };
          return res;
      },
  };

  var getWindowInfo = {
      fnOptionIndex: 0,
      fn: function () {
          var opts = buildOptions$1();
          return nonPrivateProxy(opts, this);
      },
  };
  var EProperty4WindowInfo;
  (function (EProperty4WindowInfo) {
      EProperty4WindowInfo["pixelRatio"] = "pixelRatio";
      EProperty4WindowInfo["screenWidth"] = "screenWidth";
      EProperty4WindowInfo["screenHeight"] = "screenHeight";
      EProperty4WindowInfo["windowWidth"] = "windowWidth";
      EProperty4WindowInfo["windowHeight"] = "windowHeight";
      EProperty4WindowInfo["statusBarHeight"] = "statusBarHeight";
      EProperty4WindowInfo["safeArea"] = "safeArea";
  })(EProperty4WindowInfo || (EProperty4WindowInfo = {}));
  function buildOptions$1() {
      var opts = [
          EProperty4WindowInfo.pixelRatio,
          EProperty4WindowInfo.screenWidth,
          EProperty4WindowInfo.screenHeight,
          EProperty4WindowInfo.windowWidth,
          EProperty4WindowInfo.windowHeight,
          EProperty4WindowInfo.statusBarHeight,
          EProperty4WindowInfo.safeArea ];
      return opts;
  }

  var getDeviceBaseInfo = {
      fnOptionIndex: false,
      fn: function () {
          var opts = buildOptions$2();
          return nonPrivateProxy(opts, this);
      },
  };
  var EProperty4DeviceBaseInfo;
  (function (EProperty4DeviceBaseInfo) {
      EProperty4DeviceBaseInfo["brand"] = "brand";
      EProperty4DeviceBaseInfo["model"] = "model";
      EProperty4DeviceBaseInfo["platform"] = "platform";
      EProperty4DeviceBaseInfo["system"] = "system";
  })(EProperty4DeviceBaseInfo || (EProperty4DeviceBaseInfo = {}));
  function buildOptions$2() {
      var opts = [
          EProperty4DeviceBaseInfo.brand,
          EProperty4DeviceBaseInfo.model,
          EProperty4DeviceBaseInfo.platform,
          EProperty4DeviceBaseInfo.system ];
      return opts;
  }

  var getSystemSetting = {
      fnOptionIndex: false,
      fn: function () {
          var opts = buildOptions$3();
          var callScopedBridgeSync = this.callScopedBridgeSync.bind(this);
          return privateProxy(opts, callScopedBridgeSync);
      },
  };
  var EProperty4SystemSetting;
  (function (EProperty4SystemSetting) {
      EProperty4SystemSetting["wifiEnabled"] = "wifiEnabled";
      EProperty4SystemSetting["bluetoothEnabled"] = "bluetoothEnabled";
      EProperty4SystemSetting["locationEnabled"] = "locationEnabled";
  })(EProperty4SystemSetting || (EProperty4SystemSetting = {}));
  function buildOptions$3() {
      var opts = [
          EProperty4SystemSetting.wifiEnabled,
          EProperty4SystemSetting.bluetoothEnabled,
          EProperty4SystemSetting.locationEnabled ];
      return opts;
  }

  var enableAlertBeforeUnload = {
      d: function (opt, resolve) {
          var pageInstance = this.getPageInstance();
          if (pageInstance && !pageInstance.hasPageUnloaded()) {
              if (pageInstance === this.runtime().getNav().getBottomInstance()) {
                  resolve({
                      error: 8,
                      errorMessage: 'can not invoke enableAlertBeforeUnload at first page',
                  });
              }
              else {
                  pageInstance.getBackEventManager().enableAlertBeforeUnload(opt.message, function (success) {
                      resolve(success
                          ? { success: true }
                          : {
                              error: 9,
                              errorMessage: 'client not support enableAlertBeforeUnload',
                          });
                  });
              }
          }
          else {
              resolve({
                  error: 7,
                  errorMessage: 'has not found page when enableAlertBeforeUnload has been invoked',
              });
          }
      },
  };
  var disableAlertBeforeUnload = {
      d: function (_opt, resolve) {
          var pageInstance = this.getPageInstance();
          if (pageInstance && !pageInstance.hasPageUnloaded()) {
              if (pageInstance === this.runtime().getNav().getBottomInstance()) {
                  resolve({
                      error: 8,
                      errorMessage: 'can not invoke disableAlertBeforeUnload at first page',
                  });
              }
              else {
                  pageInstance.getBackEventManager().disableAlertBeforeUnload(function (success) {
                      resolve(success
                          ? { success: true }
                          : {
                              error: 9,
                              errorMessage: 'client not support disableAlertBeforeUnload',
                          });
                  });
              }
          }
          else {
              resolve({
                  error: 7,
                  errorMessage: 'has not found page when disableAlertBeforeUnload has been invoked',
              });
          }
      },
  };

  function getBridgeAPI4InsideFeature(platform) {
      return __spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1([], ((insideFeatureRuntimeVersion >= /* a_audioInterruption_23_0:10.1.80 */ 10001080) ? [getFeaturedBridgeAPI4Audio()] : []), true), ((insideFeatureRuntimeVersion >= /* a_showAuthenticDialog_23_0:10.1.82 */ 10001082)
          ? [getFeaturedBridgeAPI4ShowAuthenticDialog()]
          : []), true), ((insideFeatureRuntimeVersion >= /* a_getWifiBroadcastInfo_23_0:10.1.82 */ 10001082)
          ? [getFeaturedBridgeAPI4GetWifiBroadcastInfo()]
          : []), true), (platform === 'ios' && (/* a_donateInBrowser_23_0:true */ true)
          ? [getFeaturedBridgeAPI4Donate()]
          : []), true), ((insideFeatureRuntimeVersion >= /* a_tabbarAPI_23_0:10.1.80 */ 10001080) ? [getFeaturedBridgeAPI4TabBar()] : []), true), (platform === 'android' && (insideFeatureRuntimeVersion >= /* a_bluetooth_socket_2_6_2:10.2.0 */ 10002000)
          ? getFeaturedBridgeAPI4Bluetooth()
          : []), true), ((insideFeatureRuntimeVersion >= /* a_tcpSocket_23_0:10.1.82 */ 10001082) ? [getFeaturedBridgeAPI4TCP()] : []), true), ((insideFeatureRuntimeVersion >= /* a_udpSocket_23_0:10.1.82 */ 10001082) ? [getFeaturedBridgeAPI4UDP()] : []), true), ((insideFeatureRuntimeVersion >= /* a_gyroscope_24_7:10.1.98 */ 10001098) ? [getFeaturedBridgeAPI4Gyroscope()] : []), true), ((insideFeatureRuntimeVersion >= /* a_accelerometer_24_7:10.1.98 */ 10001098) ? [getFeaturedBridgeAPI4Accelerometer()] : []), true), ((insideFeatureRuntimeVersion >= /* a_compass_24_7:10.1.98 */ 10001098) ? [getFeaturedBridgeAPI4Compass()] : []), true), ((insideFeatureRuntimeVersion >= /* a_nfcAdapter_2_6_6:10.2.6 */ 10002006) ? [getFeaturedBridgeAPI4NFCAdapter()] : []), true), (platform === 'android' && (insideFeatureRuntimeVersion >= /* a_cancelBluetoothPair_2_7_2:10.2.20 */ 10002020)
          ? getFeaturedBridgeAPI4CancelBluetoothPair()
          : []), true), (platform === 'android' && (insideFeatureRuntimeVersion >= /* a_getBluetoothPairs_2_7_2:10.2.20 */ 10002020)
          ? getFeaturedBridgeAPI4GetBluetoothPairs()
          : []), true), ((insideFeatureRuntimeVersion >= /* a_alipayPlus_2_7_11:10.2.38 */ 10002038) ? [getFeaturedBridgeAPI4AlipayPlus()] : []), true), ((insideFeatureRuntimeVersion >= /* a_getBackgroundFetchData_2_7_11:10.2.36 */ 10002036) ? [getFeaturedBridgeAPI4FetchData()] : []), true), ((insideFeatureRuntimeVersion >= /* a_wufuModal_2_7_13:10.2.50 */ 10002050) ? [getFeaturedBridgeAPI4WuFuModal()] : []), true), ((insideFeatureRuntimeVersion >= /* a_getAccountInfoSync_2_7_17:10.2.60 */ 10002060)
          ? [getFeaturedBridgeAPI4getAccountInfoSync()]
          : []), true), ((insideFeatureRuntimeVersion >= /* a_getSystemInfo_sub_2_7_18:10.2.60 */ 10002060) ? [getFeaturedBridgeAPI4SubSystemInfo()] : []), true), ((insideFeatureRuntimeVersion >= /* f_openEmbeddedMiniProgram_2_7_19:10.2.63 */ 10002063)
          ? [getFeaturedBridgeAPI4OpenEmbeddedMiniProgram()]
          : []), true);
  }
  /**
   * 宿主独有API & 需应用特征值值的API组
   */
  function getBridgeAPI4InsideFeature4AppContext(platform) {
      return __spreadArray$1([], ((insideFeatureRuntimeVersion >= /* a_alertBeforeUnload_2_7_17:10.2.60 */ 10002060) ? [getFeaturedBridgeAPI4AlertBeforeUnload()] : []), true);
  }
  function getFeaturedBridgeAPI4getAccountInfoSync() {
      return {
          // sync: true,
          keys: ['getAccountInfoSync'],
          values: {
              getAccountInfoSync: getAccountInfoSync,
          },
      };
  }
  function getFeaturedBridgeAPI4AlertBeforeUnload() {
      return {
          keys: ['enableAlertBeforeUnload', 'disableAlertBeforeUnload'],
          values: {
              enableAlertBeforeUnload: enableAlertBeforeUnload,
              disableAlertBeforeUnload: disableAlertBeforeUnload,
          },
      };
  }
  function getFeaturedBridgeAPI4ShowAuthenticDialog() {
      return {
          sync: false,
          keys: ['showAuthenticDialog'],
          values: {
              showAuthenticDialog: showAuthenticDialog,
          },
      };
  }
  function getFeaturedBridgeAPI4GetWifiBroadcastInfo() {
      return {
          sync: false,
          keys: ['getWifiBroadcastInfo'],
          values: {
              getWifiBroadcastInfo: getWifiBroadcastInfo,
          },
      };
  }
  function getFeaturedBridgeAPI4Donate() {
      return __assign({ sync: false }, createBridgeTypedAPI(API4Donate));
  }
  function getFeaturedBridgeAPI4TabBar() {
      return __assign({ sync: false }, createBridgeTypedAPI(API4TabBar));
  }
  function getFeaturedBridgeAPI4TCP() {
      return __assign({ sync: false, linked: true }, createBridgeTypedAPI(API4TCP));
  }
  function getFeaturedBridgeAPI4Audio() {
      return __assign({ sync: false }, createBridgeTypedAPI(API4Audio));
  }
  function getFeaturedBridgeAPI4UDP() {
      return __assign({ sync: false, linked: true }, createBridgeTypedAPI(API4UDP));
  }
  function getFeaturedBridgeAPI4NFCAdapter() {
      return {
          sync: false,
          linked: true,
          keys: Object.keys(API4NFCAdapter),
          values: API4NFCAdapter,
      };
  }
  function getFeaturedBridgeAPI4Gyroscope() {
      return __assign({ sync: false }, createBridgeTypedAPI(API4Gyroscope));
  }
  function getFeaturedBridgeAPI4Accelerometer() {
      return __assign({ sync: false }, createBridgeTypedAPI(API4Accelerometer));
  }
  function getFeaturedBridgeAPI4Compass() {
      return __assign({ sync: false }, createBridgeTypedAPI(API4Compass));
  }
  function getFeaturedBridgeAPI4AlipayPlus() {
      return {
          sync: false,
          keys: Object.keys(API4AlipayPlus),
          values: API4AlipayPlus,
      };
  }
  function getFeaturedBridgeAPI4FetchData() {
      return {
          sync: false,
          linked: false,
          keys: ['getBackgroundFetchData'],
          values: {
              getBackgroundFetchData: getBackgroundFetchData,
          },
      };
  }
  function getFeaturedBridgeAPI4WuFuModal() {
      return {
          sync: false,
          namespace: 'ap',
          keys: Object.keys(API4WuFuModal),
          values: API4WuFuModal,
      };
  }
  function getFeaturedBridgeAPI4SubSystemInfo() {
      return {
          keys: ['getAppBaseInfo', 'getDeviceBaseInfo', 'getWindowInfo', 'getSystemSetting', 'getAppAuthorizeSetting'],
          values: {
              getAppBaseInfo: getAppBaseInfo,
              getDeviceBaseInfo: getDeviceBaseInfo,
              getWindowInfo: getWindowInfo,
              getSystemSetting: getSystemSetting,
              getAppAuthorizeSetting: getAppAuthorizeSetting,
          },
      };
  }
  function getFeaturedBridgeAPI4OpenEmbeddedMiniProgram() {
      return {
          sync: false,
          keys: ['openEmbeddedMiniProgram'],
          values: {
              openEmbeddedMiniProgram: openEmbeddedMiniProgram,
          },
      };
  }

  var wasmMemoryWeakMap = createWeakMap();

  var wasmModuleWeakMap = createWeakMap();

  var sharedBridgeAPIExportPlatformRequired;
  /**
   * my.xxx
   */
  var sharedBridgeAPIExport;
  var sharedBridgeAPIExport4Sync;
  var sharedBridgeAPIExport4Manager;
  /**
   * 高级 API
   *   - 普通 API 只支持 b、a、d
   *   - 高级 API 可以构造自己的 ctx，可以自己挂载多个 API
   *
   *  e.g. my.createVideoContext
   */
  var sharedBridgeAPIExport4Linked;
  var sharedBridgeAPIExport4Proto;
  /**
   * my.ap.x
   */
  var sharedBridgeAPIExport4AP;
  var sharedBridgeAPIExport4APSync;
  /**
   * App 级别独有的 API，tabBar
   */
  var sharedBridgeAPIExport4App;
  /**
   * my.xxx & my.ap.xxx
   */
  var sharedBridgeAPIExport4AP4Root;
  /**
   * 处理 my.call('getSystemInfo')
   */
  var sharedBridgeAPIExport4PublicProxy;
  /**
   * 端上为了性能优化，一个被 intercept 的 api
   *   my.getSystemInfo
   *   my.getStorage
   */
  var sharedBridgeAPIExport4Cache;
  /**
   * 宿主独有API
   */
  var sharedBridgeAPIExport4AppContext;
  function getBridgeAPI4AppContext() {
      if (!sharedBridgeAPIExport4AppContext) {
          sharedBridgeAPIExport4AppContext = getBridgeAPI4AppContextTypedImpl();
      }
      return sharedBridgeAPIExport4AppContext;
  }
  function getBridgeAPI4AppContextTypedImpl() {
      return {
          sync: false,
          keys: [
              'loadPlugin',
              'onComponentError',
              'offComponentError',
              'onPageNotFound',
              'offPageNotFound',
              'exitMiniProgram' ],
          values: { loadPlugin: loadPlugin, onComponentError: onComponentError, offComponentError: offComponentError, onPageNotFound: onPageNotFound, offPageNotFound: offPageNotFound, exitMiniProgram: exitMiniProgram },
      };
  }
  function getBridgeAPI4MyPlatformRequired(platform) {
      if (!sharedBridgeAPIExportPlatformRequired) {
          sharedBridgeAPIExportPlatformRequired = {
              sync: false,
              keys: Object.keys(API4MyPlatformRequired).filter(function (apiName) {
                  if (platform === 'android') {
                      if (platformAndroidUnavaliable[apiName])
                          { return false; }
                  }
                  else if (platform === 'ios') {
                      if (platformIOSUnavaliable[apiName])
                          { return false; }
                  }
                  return true;
              }),
              values: API4MyPlatformRequired,
          };
      }
      return sharedBridgeAPIExportPlatformRequired;
  }
  function getBridgeAPI4MySync() {
      if (!sharedBridgeAPIExport4Sync) {
          sharedBridgeAPIExport4Sync = getBridgeAPI4MySyncTypedImpl();
      }
      return sharedBridgeAPIExport4Sync;
  }
  function getBridgeAPI4MySyncTypedImpl() {
      return __assign({ sync: true }, createBridgeTypedAPI(API4MySync));
  }
  function getBridgeAPI4My() {
      if (!sharedBridgeAPIExport) {
          sharedBridgeAPIExport = getBridgeAPI4MyTypedImpl();
      }
      return sharedBridgeAPIExport;
  }
  function getBridgeAPI4MyTypedImpl() {
      return __assign({ sync: false }, createBridgeTypedAPI(API4My));
  }
  function getBridgeAPI4MyManager() {
      if (!sharedBridgeAPIExport4Manager) {
          sharedBridgeAPIExport4Manager = getBridgeAPI4MyManagerTypedImpl();
      }
      return sharedBridgeAPIExport4Manager;
  }
  function getBridgeAPI4MyManagerTypedImpl() {
      return __assign({ sync: false }, createBridgeTypedAPI(API4MyManager));
  }
  function getBridgeAPI4MyLinked() {
      if (!sharedBridgeAPIExport4Linked) {
          sharedBridgeAPIExport4Linked = getBridgeAPI4MyLinkedTypedImpl();
      }
      return sharedBridgeAPIExport4Linked;
  }
  function getBridgeAPI4MyLinkedTypedImpl() {
      return __assign({ sync: false, linked: true }, createBridgeTypedAPI(API4MyLinked));
  }
  function getBridgeAPI4MyProto() {
      if (!sharedBridgeAPIExport4Proto) {
          sharedBridgeAPIExport4Proto = getBridgeAPI4MyProtoTypedImpl();
      }
      return sharedBridgeAPIExport4Proto;
  }
  function getBridgeAPI4MyProtoTypedImpl() {
      return __assign({ sync: false }, createBridgeTypedAPI(API4MyProto));
  }
  function getBridgeAPI4AP4Inside(noSyncFlag) {
      if (noSyncFlag === void 0) { noSyncFlag = false; }
      // todo 待决定，某个客户端暴露my.ap.xx 是否可由多ns npm包以及容器注入的JSAPI配置来决定
      if (getInsideConfig4ClientName() === 'ap') {
          return noSyncFlag ? [getBridgeAPI4MyAP()] : [getBridgeAPI4MyAP(), getBridgeAPI4MyAPSync()];
      }
      return [];
  }
  function getBridgeAPI4MyAP() {
      if (!sharedBridgeAPIExport4AP) {
          // 所有是 ap 的全挂在内部 namespace
          sharedBridgeAPIExport4AP = getBridgeAPI4MyAPTypedImpl();
      }
      return sharedBridgeAPIExport4AP;
  }
  function getBridgeAPI4MyAPTypedImpl() {
      return __assign({ sync: false, namespace: 'ap' }, createBridgeTypedAPI(API4AP));
  }
  function getBridgeAPI4MyAPSync() {
      if (!sharedBridgeAPIExport4APSync) {
          // 所有是 ap 的全挂在内部 namespace
          sharedBridgeAPIExport4APSync = getBridgeAPI4MyAPSyncTypedImpl();
      }
      return sharedBridgeAPIExport4APSync;
  }
  function getBridgeAPI4MyAPSyncTypedImpl() {
      return {
          sync: true,
          namespace: 'ap',
          keys: Object.keys(API4APSync),
          values: API4APSync,
      };
  }
  function getBridgeAPI4MyAP4Root() {
      if (!sharedBridgeAPIExport4AP4Root) {
          // 额外需要挂在 root 上的
          sharedBridgeAPIExport4AP4Root = getBridgeAPI4MyAP4RootTypedImpl();
      }
      return sharedBridgeAPIExport4AP4Root;
  }
  function getBridgeAPI4MyAP4RootTypedImpl() {
      return __assign({ sync: false }, createBridgeTypedAPI(API4APRoot));
  }
  function getBridgeAPI4MyApp() {
      if (!sharedBridgeAPIExport4App) {
          sharedBridgeAPIExport4App = getBridgeAPI4MyAppTypedImpl();
      }
      return sharedBridgeAPIExport4App;
  }
  function getBridgeAPI4MyAppTypedImpl() {
      return __assign({ sync: false }, createBridgeTypedAPI(API4MyApp));
  }
  function getBridgeAPI4MyPublicProxy() {
      if (!sharedBridgeAPIExport4PublicProxy) {
          var _a = getPublicProxyAPI(), keys = _a.keys, values = _a.values;
          sharedBridgeAPIExport4PublicProxy = {
              keys: keys,
              values: values,
          };
      }
      return sharedBridgeAPIExport4PublicProxy;
  }
  function getBridgeAPI4MyPublicProxyWithCache() {
      if (!sharedBridgeAPIExport4Cache) {
          var _a = getPublicProxyAPI4Cache(), keys = _a.keys, values = _a.values;
          sharedBridgeAPIExport4Cache = {
              keys: keys,
              values: values,
          };
      }
      return sharedBridgeAPIExport4Cache;
  }
  function exportBridgeAPI4PublicInstance(publicInstance, userAgent) {
      var _a = extractClientInfo(userAgent), clientVersion = _a.clientVersion, clientName = _a.clientName, isIDE = _a.isIDE, language = _a.language, platform = _a.platform;
      publicInstance.isIDE = isIDE;
      publicInstance.env = {
          USER_DATA_PATH: 'https://usr',
          clientName: clientName,
          clientVersion: clientVersion,
          language: language,
          platform: platform === 'ios' ? 'iOS' : platform === 'android' ? 'Android' : 'unknown',
      };
  }

  // tslint:disable-next-line
  var _createOffscreenCanvas = {
      fnOptionIndex: false,
      fn: function (widthOrOption, height) {
          // 有没有
          var createNativeOffscreenCanvas = getNativeFunctionIfExisted("__createOffscreenCanvas" /* ENativeV8PluginFunctionName.createOffscreenCanvas */, this.runtime().getKernel().getFrameworkContextSymbol);
          if (widthOrOption && typeof widthOrOption === 'object') {
              return createNativeOffscreenCanvas(widthOrOption.width, widthOrOption.height, widthOrOption.type);
          }
          else {
              return createNativeOffscreenCanvas.apply(void 0, arguments);
          }
      },
  };
  // tslint:disable-next-line
  var _createCanvas = {
      fnOptionIndex: 0,
      fn: function (_a) {
          var _this = this;
          var id = _a.id, success = _a.success;
          var pageInstance = this.getPageInstance();
          if (pageInstance) {
              var viewId_1 = this.assignedViewId;
              var realId_1 = this.getRewriteIdWithAppxDomain(id);
              pageInstance.whenCompositeElementReady(realId_1, function () {
                  if (success && typeof success === 'function') {
                      var createNativeCanvas = getNativeFunctionIfExisted("__createCanvas" /* ENativeV8PluginFunctionName.createCanvas */, _this.runtime().getKernel().getFrameworkContextSymbol);
                      success(setupVideoRecorderForNativeCanvas(createNativeCanvas(String(viewId_1), String(realId_1)), _this.getBridgeExtraInfo(), _this.runtime().getSwitchManager().get("fixTempFilePath" /* ESharedAppxSwitchManagerName.FixTempFilePath */) !== 0));
                  }
              });
          }
      },
  };
  var getARSessionManager = {
      fnOptionIndex: false,
      fn: function () {
          return getNativeFunctionIfExisted("__createARSession" /* ENativeV8PluginFunctionName.createARSession */, this.runtime().getKernel().getFrameworkContextSymbol)();
      },
  };

  function getBridgeAPI4NativeBinding() {
      return __spreadArray$1(__spreadArray$1(__spreadArray$1([
          {
              keys: ['_createOffscreenCanvas', '_createCanvas'],
              values: {
                  _createCanvas: _createCanvas,
                  _createOffscreenCanvas: _createOffscreenCanvas,
              },
          }
      ], ((insideFeatureRuntimeVersion >= /* a_createARSession_2_6_6:10.2.8 */ 10002008)
          ? [
              {
                  keys: ['getARSessionManager'],
                  values: {
                      getARSessionManager: getARSessionManager,
                  },
              } ]
          : []), true), ((/* a_createCanvas_23_2:false */ false)
          ? [
              {
                  keys: ['createCanvas'],
                  values: {
                      createCanvas: _createCanvas,
                  },
              } ]
          : []), true), ((/* a_createOffscreenCanvas_23_2:true */ true)
          ? [
              {
                  keys: ['createOffscreenCanvas'],
                  values: {
                      createOffscreenCanvas: _createOffscreenCanvas,
                  },
              } ]
          : []), true);
  }

  function encodeFill() {
      return [0 /* ECanvasFunctionNameEncoder.fill */];
  }
  function encodeFillStyle(style) {
      return [1 /* ECanvasFunctionNameEncoder.fillStyle */, style];
  }
  function encodeStrokeStyle(style) {
      return [8 /* ECanvasFunctionNameEncoder.strokeStyle */, style];
  }
  function encodeArc(x, y, radius, startDeg, endDeg, anticlockwise) {
      if (anticlockwise === undefined) {
          return [2 /* ECanvasFunctionNameEncoder.arc */, x, y, radius, startDeg, endDeg];
      }
      return [2 /* ECanvasFunctionNameEncoder.arc */, x, y, radius, startDeg, endDeg, anticlockwise];
  }
  function encodeBeginPath() {
      return [3 /* ECanvasFunctionNameEncoder.beginPath */];
  }
  function encodeFillRect(x, y, width, height) {
      return [4 /* ECanvasFunctionNameEncoder.fillRect */, x, y, width, height];
  }
  function encodeGradient(gradient) {
      return [5 /* ECanvasFunctionNameEncoder.gradient */, gradient];
  }
  function encodeFont(font) {
      return [6 /* ECanvasFunctionNameEncoder.font */, font];
  }
  function encodeDrawImage(imageId, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {
      if (sWidth === undefined) {
          return [7 /* ECanvasFunctionNameEncoder.drawImage */, imageId.id, sx, sy];
      }
      if (dx === undefined) {
          return [7 /* ECanvasFunctionNameEncoder.drawImage */, imageId.id, sx, sy, sWidth, sHeight];
      }
      return [7 /* ECanvasFunctionNameEncoder.drawImage */, imageId.id, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight];
  }
  function encodeSetGlobalAlpha(alpha) {
      return [9 /* ECanvasFunctionNameEncoder.setGlobalAlpha */, alpha];
  }
  function encodeSetLineWidth(width) {
      return [10 /* ECanvasFunctionNameEncoder.setLineWidth */, width];
  }
  function encodeSetLineCap(cap) {
      return [11 /* ECanvasFunctionNameEncoder.setLineCap */, cap];
  }
  function encodeSetLineJoin(lineJoin) {
      return [12 /* ECanvasFunctionNameEncoder.lineJoin */, lineJoin];
  }
  function encodeSetMiterLimit(limit) {
      return [13 /* ECanvasFunctionNameEncoder.setMiterLimit */, limit];
  }
  function encodeSetTextBaseline(baseline) {
      return [14 /* ECanvasFunctionNameEncoder.baseline */, baseline];
  }
  function encodeSetLineDashOffset(offset) {
      return [15 /* ECanvasFunctionNameEncoder.setLineDashOffset */, offset];
  }
  function encodeSetTextAlign(align) {
      return [16 /* ECanvasFunctionNameEncoder.setTextAlign */, align];
  }
  function encodeSetGlobalCompositeOperation(operation) {
      return [17 /* ECanvasFunctionNameEncoder.setGlobalCompositeOperation */, operation];
  }
  function encodeShadowFamily(offsetX, offsetY, blur, color) {
      return [18 /* ECanvasFunctionNameEncoder.setShadowFamily */, offsetX, offsetY, blur, color];
  }
  function encodeClip() {
      return [19 /* ECanvasFunctionNameEncoder.clip */];
  }
  function encodeRect(x, y, width, height) {
      return [20 /* ECanvasFunctionNameEncoder.rect */, x, y, width, height];
  }
  function encodeStrokeRect(x, y, width, height) {
      return [21 /* ECanvasFunctionNameEncoder.strokeRect */, x, y, width, height];
  }
  function encodeStroke() {
      return [22 /* ECanvasFunctionNameEncoder.stroke */];
  }
  function encodeScale(x, y) {
      return [23 /* ECanvasFunctionNameEncoder.scale */, x, y];
  }
  function encodeRotate(angle) {
      return [24 /* ECanvasFunctionNameEncoder.rotate */, angle];
  }
  function encodeTranslate(x, y) {
      return [25 /* ECanvasFunctionNameEncoder.translate */, x, y];
  }
  function encodeSave() {
      return [26 /* ECanvasFunctionNameEncoder.save */];
  }
  function encodeRestore() {
      return [27 /* ECanvasFunctionNameEncoder.restore */];
  }
  function encodeClearRect(x, y, width, height) {
      return [28 /* ECanvasFunctionNameEncoder.clearRect */, x, y, width, height];
  }
  function encodeFillText(text, x, y, maxWidth) {
      if (maxWidth === undefined) {
          return [29 /* ECanvasFunctionNameEncoder.fillText */, text, x, y];
      }
      return [29 /* ECanvasFunctionNameEncoder.fillText */, text, x, y, maxWidth];
  }
  function encodeMoveTo(x, y) {
      return [30 /* ECanvasFunctionNameEncoder.moveTo */, x, y];
  }
  function encodeLineTo(x, y) {
      return [31 /* ECanvasFunctionNameEncoder.lineTo */, x, y];
  }
  function encodeArcTo(x1, y1, x2, y2, radius) {
      return [32 /* ECanvasFunctionNameEncoder.arcTo */, x1, y1, x2, y2, radius];
  }
  function encodeSetTransform(a, b, c, d, e, f) {
      return [33 /* ECanvasFunctionNameEncoder.setTransform */, a, b, c, d, e, f];
  }
  function encodeTransform(a, b, c, d, e, f) {
      return [34 /* ECanvasFunctionNameEncoder.transform */, a, b, c, d, e, f];
  }
  function encodeClosePath() {
      return [35 /* ECanvasFunctionNameEncoder.closePath */];
  }
  function encodeQuadraticCurveTo(cpx, cpy, x, y) {
      return [36 /* ECanvasFunctionNameEncoder.quadraticCurveTo */, cpx, cpy, x, y];
  }
  function encodeBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
      return [37 /* ECanvasFunctionNameEncoder.bezierCurveTo */, cp1x, cp1y, cp2x, cp2y, x, y];
  }
  function encodeSetLineDash(gaps) {
      return [38 /* ECanvasFunctionNameEncoder.setLineDash */, gaps];
  }
  function encodeStrokeText(text, x, y, maxWidth) {
      if (maxWidth === undefined) {
          return [39 /* ECanvasFunctionNameEncoder.strokeText */, text, x, y];
      }
      return [39 /* ECanvasFunctionNameEncoder.strokeText */, text, x, y, maxWidth];
  }
  function encodeDrawCanvas(canvasId, sxOrDx, syOrDy, sWidthOrDWidth, sHeightOrDHeight, dx, dy, dWidth, dHeight) {
      if (sWidthOrDWidth === undefined) {
          // void ctx.drawImage(image, dx, dy);
          return [40 /* ECanvasFunctionNameEncoder.drawCanvas */, canvasId, sxOrDx, syOrDy];
      }
      else if (dx === undefined) {
          // void ctx.drawImage(image, dx, dy, dWidth, dHeight);
          return [40 /* ECanvasFunctionNameEncoder.drawCanvas */, canvasId, sxOrDx, syOrDy, sWidthOrDWidth, sHeightOrDHeight];
      }
      else {
          // void ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);
          return [
              40 /* ECanvasFunctionNameEncoder.drawCanvas */,
              canvasId,
              sxOrDx,
              syOrDy,
              sWidthOrDWidth,
              sHeightOrDHeight,
              dx,
              dy,
              dWidth,
              dHeight ];
      }
  }
  function encodePattern(image, repeat, $callId) {
      return [41 /* ECanvasFunctionNameEncoder.pattern */, image.id, repeat, $callId];
  }

  var Encoder = {
      __proto__: null,
      encodeFill: encodeFill,
      encodeFillStyle: encodeFillStyle,
      encodeStrokeStyle: encodeStrokeStyle,
      encodeArc: encodeArc,
      encodeBeginPath: encodeBeginPath,
      encodeFillRect: encodeFillRect,
      encodeGradient: encodeGradient,
      encodeFont: encodeFont,
      encodeDrawImage: encodeDrawImage,
      encodeSetGlobalAlpha: encodeSetGlobalAlpha,
      encodeSetLineWidth: encodeSetLineWidth,
      encodeSetLineCap: encodeSetLineCap,
      encodeSetLineJoin: encodeSetLineJoin,
      encodeSetMiterLimit: encodeSetMiterLimit,
      encodeSetTextBaseline: encodeSetTextBaseline,
      encodeSetLineDashOffset: encodeSetLineDashOffset,
      encodeSetTextAlign: encodeSetTextAlign,
      encodeSetGlobalCompositeOperation: encodeSetGlobalCompositeOperation,
      encodeShadowFamily: encodeShadowFamily,
      encodeClip: encodeClip,
      encodeRect: encodeRect,
      encodeStrokeRect: encodeStrokeRect,
      encodeStroke: encodeStroke,
      encodeScale: encodeScale,
      encodeRotate: encodeRotate,
      encodeTranslate: encodeTranslate,
      encodeSave: encodeSave,
      encodeRestore: encodeRestore,
      encodeClearRect: encodeClearRect,
      encodeFillText: encodeFillText,
      encodeMoveTo: encodeMoveTo,
      encodeLineTo: encodeLineTo,
      encodeArcTo: encodeArcTo,
      encodeSetTransform: encodeSetTransform,
      encodeTransform: encodeTransform,
      encodeClosePath: encodeClosePath,
      encodeQuadraticCurveTo: encodeQuadraticCurveTo,
      encodeBezierCurveTo: encodeBezierCurveTo,
      encodeSetLineDash: encodeSetLineDash,
      encodeStrokeText: encodeStrokeText,
      encodeDrawCanvas: encodeDrawCanvas,
      encodePattern: encodePattern
  };

  var canvasContext4MeasureText;
  function measureTextInWebView(document, font, text) {
      if (canvasContext4MeasureText === undefined) {
          canvasContext4MeasureText = document.createElement('canvas').getContext('2d');
      }
      canvasContext4MeasureText.font = font;
      return {
          width: canvasContext4MeasureText.measureText(text).width,
      };
  }

  /**
   * Canvas 各种暴露的 Context API
   * public 方法都是用户可以直接使用的
   * private 方法不要暴露给用户
   * - 正常来说
   *  都是直接调用 Encoder
   * - 对于 drawImage 有一些特殊处理
   *  包含 asyncAction 还有 drawContext 的间接调用
   */
  var CanvasContextInStandard = /** @class */ /*#__PURE__*/ (function () {
      /**
       * 后续在这里确定版本协议与协议版本
       * @param elementAttrId canvasElementID
       */
      function CanvasContextInStandard(elementAttrId, platformAPI) {
          this.type = 'CanvasContextInCube';
          /**
           * isCanvas
           */
          this.isCanvasContext = true;
          /**
           * 编码器
           */
          this.encoder = Encoder;
          /**
           * 当前调用 draw api 之前是不是需要加载图片
           */
          this.containsAsyncAction = false;
          /**
           * 当插入一个 asyncAction 的时候就要把 action 送到 actionsQueue 里面
           */
          this.actionsQueue = [];
          /**
           * 异步 action 队列
           *  现在里面存放的
           */
          this.asyncActionsQueue = [];
          /**
           * actions 字符串
           * 会发送到 Native
           */
          this.actions = [];
          /**
           * stroke 和 fill Style 需要用到的callId
           */
          this.callId = 0;
          // @MARK 字体相关 API
          /**
           * 保存字体的状态
           * 用于 measureText 时候获取当前字体属性
           */
          this.fontStyle = {
              font: '10px Arial',
              fontFamily: 'Arial',
              fontSize: 10,
              fontStyle: 'normal',
              fontWeight: 'normal',
          };
          /**
           * 用于上报连续执行canvasContext.draw()时最终this.commitDrawFrame的执行是否被顺序执行
           */
          this.commitDrawFrameSeqId = 0;
          this.id = elementAttrId;
          this.getImageData = this.getImageData.bind(this, platformAPI);
          this.putImageData = this.putImageData.bind(this, platformAPI);
          this.toDataURL = this.toDataURL.bind(this, platformAPI);
          this.toTempFilePath = this.toTempFilePath.bind(this, platformAPI);
          this.draw = this.draw.bind(this, platformAPI);
          if ((/* a_canvasContext_measureText_24_3:true */ true)) {
              this.measureText = this.measureText.bind(this, platformAPI);
              this.measureTextAsync = this.measureTextAsync.bind(this, platformAPI);
          }
          else {
              this.measureText = this.measureTextAsync = undefined;
          }
          this.drawBehavior = platformAPI.getBehaviorManager().get("reportCanvasContextDraw" /* ESharedAppxSwitchManagerName.ReportCanvasContextDraw */);
      }
      Object.defineProperty(CanvasContextInStandard.prototype, "fillStyle", {
          set: function (value) {
              this.setFillStyle(value);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContextInStandard.prototype, "font", {
          get: function () {
              return this.fontStyle.font;
          },
          set: function (font) {
              this.setFont(font);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContextInStandard.prototype, "fontSize", {
          set: function (value) {
              this.setFontSize(value);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContextInStandard.prototype, "strokeStyle", {
          set: function (value) {
              this.setStrokeStyle(value);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContextInStandard.prototype, "globalAlpha", {
          set: function (alpha) {
              this.setGlobalAlpha(alpha);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContextInStandard.prototype, "lineWidth", {
          set: function (width) {
              this.setLineWidth(width);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContextInStandard.prototype, "lineCap", {
          set: function (lineCap) {
              this.setLineCap(lineCap);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContextInStandard.prototype, "lineJoin", {
          set: function (lineJoin) {
              this.setLineJoin(lineJoin);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContextInStandard.prototype, "miterLimit", {
          set: function (limit) {
              this.setMiterLimit(limit);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContextInStandard.prototype, "textBaseline", {
          set: function (baseline) {
              this.setTextBaseline(baseline);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContextInStandard.prototype, "lineDashOffset", {
          set: function (offset) {
              this.setLineDashOffset(offset);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContextInStandard.prototype, "textAlign", {
          set: function (align) {
              this.setTextAlign(align);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContextInStandard.prototype, "globalCompositeOperation", {
          set: function (op) {
              this.setGlobalCompositeOperation(op);
          },
          enumerable: false,
          configurable: true
      });
      CanvasContextInStandard.prototype.getElementId = function () {
          return this.id;
      };
      CanvasContextInStandard.prototype.setFillStyle = function (style) {
          if (isCanvasGradient(style) || isCanvasPattern(style)) {
              var $callId = style.$callId;
              this.addAction(this.encoder.encodeFillStyle({ $callId: $callId }));
          }
          else {
              this.addAction(this.encoder.encodeFillStyle(style || ''));
          }
      };
      CanvasContextInStandard.prototype.fillRect = function (x, y, width, height) {
          this.addAction(this.encoder.encodeFillRect(x, y, width, height));
      };
      CanvasContextInStandard.prototype.strokeRect = function (x, y, width, height) {
          this.addAction(this.encoder.encodeStrokeRect(x, y, width, height));
      };
      CanvasContextInStandard.prototype.beginPath = function () {
          this.addAction(this.encoder.encodeBeginPath());
      };
      CanvasContextInStandard.prototype.arc = function (x, y, radius, startDeg, endDeg, anticlockwise) {
          this.addAction(this.encoder.encodeArc(x, y, radius, startDeg, endDeg, anticlockwise));
      };
      CanvasContextInStandard.prototype.fill = function () {
          this.addAction(this.encoder.encodeFill());
      };
      CanvasContextInStandard.prototype.clip = function () {
          this.addAction(this.encoder.encodeClip());
      };
      CanvasContextInStandard.prototype.rect = function (x, y, width, height) {
          this.addAction(this.encoder.encodeRect(x, y, width, height));
      };
      CanvasContextInStandard.prototype.stroke = function () {
          this.addAction(this.encoder.encodeStroke());
      };
      CanvasContextInStandard.prototype.scale = function (x, y) {
          this.addAction(this.encoder.encodeScale(x, y));
      };
      CanvasContextInStandard.prototype.rotate = function (angle) {
          this.addAction(this.encoder.encodeRotate(angle));
      };
      CanvasContextInStandard.prototype.translate = function (x, y) {
          this.addAction(this.encoder.encodeTranslate(x, y));
      };
      CanvasContextInStandard.prototype.save = function () {
          this.addAction(this.encoder.encodeSave());
      };
      CanvasContextInStandard.prototype.restore = function () {
          this.addAction(this.encoder.encodeRestore());
      };
      CanvasContextInStandard.prototype.clearRect = function (x, y, width, height) {
          this.addAction(this.encoder.encodeClearRect(x, y, width, height));
      };
      CanvasContextInStandard.prototype.fillText = function (text, x, y, maxWidth) {
          this.addAction(this.encoder.encodeFillText(text, x, y, maxWidth));
      };
      CanvasContextInStandard.prototype.moveTo = function (x, y) {
          this.addAction(this.encoder.encodeMoveTo(x, y));
      };
      CanvasContextInStandard.prototype.lineTo = function (x, y) {
          this.addAction(this.encoder.encodeLineTo(x, y));
      };
      CanvasContextInStandard.prototype.arcTo = function (x1, y1, x2, y2, radius) {
          this.addAction(this.encoder.encodeArcTo(x1, y1, x2, y2, radius));
      };
      CanvasContextInStandard.prototype.transform = function (a, b, c, d, e, f) {
          this.addAction(this.encoder.encodeTransform(a, b, c, d, e, f));
      };
      CanvasContextInStandard.prototype.setTransform = function (a, b, c, d, e, f) {
          this.addAction(this.encoder.encodeSetTransform(a, b, c, d, e, f));
      };
      CanvasContextInStandard.prototype.closePath = function () {
          this.addAction(this.encoder.encodeClosePath());
      };
      CanvasContextInStandard.prototype.quadraticCurveTo = function (cpx, cpy, x, y) {
          this.addAction(this.encoder.encodeQuadraticCurveTo(cpx, cpy, x, y));
      };
      CanvasContextInStandard.prototype.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
          this.addAction(this.encoder.encodeBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y));
      };
      CanvasContextInStandard.prototype.setLineDash = function (gaps) {
          this.addAction(this.encoder.encodeSetLineDash(gaps));
      };
      CanvasContextInStandard.prototype.strokeText = function (text, x, y, maxWidth) {
          this.addAction(this.encoder.encodeStrokeText(text, x, y, maxWidth));
      };
      /**
       * strokeStyle
       * @param color
       */
      CanvasContextInStandard.prototype.setStrokeStyle = function (style) {
          if (isCanvasGradient(style) || isCanvasPattern(style)) {
              var $callId = style.$callId;
              this.addAction(this.encoder.encodeStrokeStyle({ $callId: $callId }));
          }
          else {
              this.addAction(this.encoder.encodeStrokeStyle(style || ''));
          }
      };
      /**
       * @param alpha
       */
      CanvasContextInStandard.prototype.setGlobalAlpha = function (alpha) {
          this.addAction(this.encoder.encodeSetGlobalAlpha(alpha));
      };
      /**
       * @param width
       */
      CanvasContextInStandard.prototype.setLineWidth = function (width) {
          this.addAction(this.encoder.encodeSetLineWidth(width));
      };
      /**
       * @param lineCap
       */
      CanvasContextInStandard.prototype.setLineCap = function (lineCap) {
          this.addAction(this.encoder.encodeSetLineCap(lineCap));
      };
      /**
       * @param lineJoin
       */
      CanvasContextInStandard.prototype.setLineJoin = function (lineJoin) {
          this.addAction(this.encoder.encodeSetLineJoin(lineJoin));
      };
      /**
       * @param limit
       */
      CanvasContextInStandard.prototype.setMiterLimit = function (limit) {
          this.addAction(this.encoder.encodeSetMiterLimit(limit));
      };
      /**
       * @param baseline
       */
      CanvasContextInStandard.prototype.setTextBaseline = function (baseline) {
          this.addAction(this.encoder.encodeSetTextBaseline(baseline));
      };
      /**
       * @param offset
       */
      CanvasContextInStandard.prototype.setLineDashOffset = function (offset) {
          this.addAction(this.encoder.encodeSetLineDashOffset(offset));
      };
      /**
       * @param align
       */
      CanvasContextInStandard.prototype.setTextAlign = function (align) {
          this.addAction(this.encoder.encodeSetTextAlign(align));
      };
      /**
       * @param op
       */
      CanvasContextInStandard.prototype.setGlobalCompositeOperation = function (op) {
          this.addAction(this.encoder.encodeSetGlobalCompositeOperation(op));
      };
      /**
       * @param offsetX
       * @param offsetY
       * @param blur
       * @param color
       */
      CanvasContextInStandard.prototype.setShadow = function (offsetX, offsetY, blur, color) {
          if (offsetX === void 0) { offsetX = 0; }
          if (offsetY === void 0) { offsetY = 0; }
          if (blur === void 0) { blur = 0; }
          if (color === void 0) { color = 'black'; }
          this.addAction(this.encoder.encodeShadowFamily(offsetX, offsetY, blur, color));
      };
      /**
       * 设置字体大小
       * @param size
       */
      CanvasContextInStandard.prototype.setFontSize = function (size) {
          this.fontStyle.fontSize = size;
          var font = this.fontStyle.font.replace(/\d+\.?\d*px/, size + 'px');
          this.updateFont(font);
      };
      /**
       * <font-style> <font-weight> font-size font-family
       * @param font String
       */
      CanvasContextInStandard.prototype.setFont = function (font) {
          this.parseAndSaveFont(font);
          this.updateFont(font);
      };
      CanvasContextInStandard.prototype.createRadialGradient = function (x0, y0, r0, x1, y1, r1) {
          var res = {
              $callId: ++this.callId,
              args: [x0, y0, r0, x1, y1, r1],
              class: 'radialGradient',
              colors: [],
              positions: [],
              addColorStop: function (position, color) {
                  this.positions.push(position);
                  this.colors.push(color);
              },
          };
          this.addAction(this.encoder.encodeGradient(res));
          return res;
      };
      CanvasContextInStandard.prototype.createCircularGradient = function (x, y, r) {
          var res = {
              $callId: ++this.callId,
              args: [x, y, 0, x, y, r],
              class: 'radialGradient',
              colors: [],
              positions: [],
              addColorStop: function (position, color) {
                  this.positions.push(position);
                  this.colors.push(color);
              },
          };
          this.addAction(this.encoder.encodeGradient(res));
          return res;
      };
      CanvasContextInStandard.prototype.createLinearGradient = function (x0, y0, x1, y1) {
          var res = {
              $callId: ++this.callId,
              args: [x0, y0, x1, y1],
              class: 'linearGradient',
              colors: [],
              positions: [],
              addColorStop: function (position, color) {
                  this.positions.push(position);
                  this.colors.push(color);
              },
          };
          this.addAction(this.encoder.encodeGradient(res));
          return res;
      };
      /**
       * 支持三种draw
       * 1. 送一个 CanvasContext 进来
       *    调用 drawCanvas API
       * 2. 送一个 imageURL 进来
       *    检查缓存
       *      1. 缓存为空
       *          异步加载 加一个 Async Action
       *      2. 缓存不为空
       *          内容合法 id !== -1 直接添加一个 drawImage 的 Action
       *          内容不合法 忽略，可能之前已经加载失败了，那就不要了
       *  3. 送一个 object 进来
       *    ImageInfo 符合 IImageLoadData 的结构
       *    直接塞一个 drawImage Action
       * @param imageOrContext
       * @param sx
       * @param sy
       * @param sWidth
       * @param sHeight
       * @param dx
       * @param dy
       * @param dWidth
       * @param dHeight
       */
      CanvasContextInStandard.prototype.drawImage = function (imageOrContext, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {
          if (isCanvasContextDrawable(imageOrContext)) {
              this.addAction(this.encoder.encodeDrawCanvas(imageOrContext.getElementId(), sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight));
          }
          /**
           * 对象类的
           */
          if (imageOrContext && typeof imageOrContext === 'object') {
              if (isCanvasValidImageInfo(imageOrContext)) {
                  /**
                   * 用户自己 preloadCanvasImage 拿到的结果
                   */
                  return this.addAction(this.encoder.encodeDrawImage(imageOrContext, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight));
              }
          }
          /**
           * 字符串类型的
           */
          if (imageOrContext && typeof imageOrContext === 'string') {
              var imageUrl = imageOrContext;
              /**
               * 需要异步加载
               */
              this.containsAsyncAction = true;
              this.addAsyncAction({
                  dHeight: dHeight,
                  dWidth: dWidth,
                  dx: dx,
                  dy: dy,
                  sHeight: sHeight,
                  sWidth: sWidth,
                  sx: sx,
                  sy: sy,
                  type: 'loadImage',
                  url: imageUrl,
              });
          }
      };
      CanvasContextInStandard.prototype.createPattern = function (image, repeat) {
          var $callId = ++this.callId;
          if (image && typeof image === 'string') {
              // 异步加载图片
              this.containsAsyncAction = true;
              this.addAsyncAction({
                  $callId: $callId,
                  repeat: repeat,
                  type: 'pattern',
                  url: image,
              });
          }
          if (image && typeof image === 'object') {
              if (isCanvasValidImageInfo(image)) {
                  this.addAction(this.encoder.encodePattern(image, repeat, $callId));
              }
          }
          return {
              $callId: $callId,
              class: 'pattern',
              image: image,
              repeat: repeat,
          };
      };
      CanvasContextInStandard.prototype.getImageData = function (platformAPI, opt, callback) {
          opt.elementId = this.id;
          var _a = platformAPI
              .getBehaviorManager()
              .get("ignoreCanvasCallback" /* ESharedAppxSwitchManagerName.IgnoreCanvasCallback */, 0 /* ESharedAppxSwitchManagerValue4CanvasCallbackIndex.GetImageData */), report = _a.report, standard = _a.standard;
          if (report && callback !== undefined) {
              report('invoke CanvasContext.getImageData with callback param');
          }
          return platformAPI.callLinked('canvasGetImageDataPrivate4Standard', opt, standard ? null : callback);
      };
      CanvasContextInStandard.prototype.putImageData = function (platformAPI, opt, callback) {
          opt.elementId = this.id;
          var _a = platformAPI
              .getBehaviorManager()
              .get("ignoreCanvasCallback" /* ESharedAppxSwitchManagerName.IgnoreCanvasCallback */, 1 /* ESharedAppxSwitchManagerValue4CanvasCallbackIndex.PutImageData */), report = _a.report, standard = _a.standard;
          if (report && callback !== undefined) {
              report('invoke CanvasContext.putImageData with callback param');
          }
          return platformAPI.callLinked('canvasPutImageDataPrivate4Standard', opt, standard ? null : callback);
      };
      CanvasContextInStandard.prototype.toDataURL = function (platformAPI, opt, callback) {
          opt.elementId = this.id;
          var _a = platformAPI
              .getBehaviorManager()
              .get("ignoreCanvasCallback" /* ESharedAppxSwitchManagerName.IgnoreCanvasCallback */, 2 /* ESharedAppxSwitchManagerValue4CanvasCallbackIndex.ToDataURL */), report = _a.report, standard = _a.standard;
          if (report && callback !== undefined) {
              report('invoke CanvasContext.toDataURL with callback param');
          }
          return platformAPI.callLinked('canvasToDataURLPrivate4Standard', opt, standard ? null : callback);
      };
      CanvasContextInStandard.prototype.toTempFilePath = function (platformAPI, opt, callback) {
          if (opt === void 0) { opt = {}; }
          opt.elementId = this.id;
          var _a = platformAPI
              .getBehaviorManager()
              .get("ignoreCanvasCallback" /* ESharedAppxSwitchManagerName.IgnoreCanvasCallback */, 3 /* ESharedAppxSwitchManagerValue4CanvasCallbackIndex.ToTempFilePath */), report = _a.report, standard = _a.standard;
          if (report && callback !== undefined) {
              report('invoke CanvasContext.toTempFilePath with callback param');
          }
          return platformAPI.callLinked('canvasToTempFilePathPrivate4Standard', opt, standard ? null : callback);
      };
      /**
       * 小程序 Canvas 特定 API
       * 向 Native 发送绘制命令
       * @param invokeMethod
       * @param reserve
       * @param callback
       */
      CanvasContextInStandard.prototype.draw = function (platformAPI, reserve, callback) {
          var _this = this;
          var seqId = this.commitDrawFrameSeqId;
          if (this.drawBehavior.standard) {
              if (this.actions.length === 0 && this.asyncActionsQueue.length === 0) {
                  if (callback) {
                      setTimeout(callback, 0);
                  }
                  return;
              }
          }
          else {
              if (this.actions.length === 0 && this.containsAsyncAction === false) {
                  if (callback) {
                      setTimeout(callback, 0);
                  }
                  return;
              }
          }
          if (this.containsAsyncAction) {
              this.resolveAsyncActions(platformAPI.loadImage, function (actions) {
                  _this.commitDrawFrame(platformAPI, reserve, actions, callback, seqId);
              });
          }
          else {
              this.commitDrawFrame(platformAPI, reserve, this.actions, callback, seqId);
          }
          this.reset();
      };
      CanvasContextInStandard.prototype.measureTextAsync = function (platformAPI, text, callback) {
          if (typeof callback === 'function') {
              var shouldInvokeBridge_1 = false;
              ifIsMiniProgramEnv(function () { return (shouldInvokeBridge_1 = true); });
              if (shouldInvokeBridge_1) {
                  var _a = this.fontStyle, fontSize = _a.fontSize, fontWeight = _a.fontWeight, fontFamily = _a.fontFamily, fontStyle = _a.fontStyle;
                  platformAPI.asyncCall('measureText', {
                      fontFamily: fontFamily,
                      fontSize: fontSize,
                      fontStyle: fontStyle,
                      fontWeight: fontWeight,
                      text: text,
                  }, callback);
              }
              else {
                  callback(typeof __measureText === 'function'
                      ? __measureText(this.fontStyle.font, text)
                      : measureTextInWebView(document, this.fontStyle.font, text));
              }
          }
      };
      CanvasContextInStandard.prototype.measureText = function (platformAPI, text) {
          var shouldInvokeBridge = false;
          ifIsMiniProgramEnv(function () { return (shouldInvokeBridge = true); });
          if (shouldInvokeBridge) {
              var _a = this.fontStyle, fontSize = _a.fontSize, fontWeight = _a.fontWeight, fontFamily = _a.fontFamily, fontStyle = _a.fontStyle;
              return platformAPI.syncCall('measureText', {
                  fontFamily: fontFamily,
                  fontSize: fontSize,
                  fontStyle: fontStyle,
                  fontWeight: fontWeight,
                  text: text,
              });
          }
          else {
              if (typeof __measureText === 'function') {
                  return __measureText(this.fontStyle.font, text);
              }
              return measureTextInWebView(document, this.fontStyle.font, text);
          }
      };
      /**
       * 向 Native 发送 draw 指令
       * @param invokeMethod
       * @param reserve
       * @param actions
       * @param callback
       */
      CanvasContextInStandard.prototype.commitDrawFrame = function (platformAPI, reserve, actions, callback, seqId) {
          if (seqId !== this.commitDrawFrameSeqId && this.drawBehavior.report) {
              this.drawBehavior.report('canvasContext_draw_out_of_order', {
                  commitDrawFrameSeqId: this.commitDrawFrameSeqId,
                  id: this.id,
                  seqId: seqId,
              });
          }
          this.commitDrawFrameSeqId++;
          // TODO invokeRenderMethod
          // this.canvasDrawActions(reserve, actions, callback);
          platformAPI.invokeRenderMethod("canvasDrawActionsInRender" /* ESharedAppxPageRenderMethod.CanvasDrawActionsInRender */, [this.id, !!reserve, actions], callback);
      };
      CanvasContextInStandard.prototype.addAsyncAction = function (action) {
          /**
           * 这里保持 actions 与 asyncActions 一对一的关系
           * actionsQueue.length === asyncActionsQueue.length
           * 如果有变动会影响后续拼接的逻辑
           */
          this.actionsQueue.push(this.actions);
          this.asyncActionsQueue.push(action);
          this.actions = [];
      };
      /**
       * 添加 action
       * @param s
       */
      CanvasContextInStandard.prototype.addAction = function (s) {
          this.actions.push(s);
      };
      CanvasContextInStandard.prototype.reset = function () {
          if (!this.drawBehavior.standard) {
              this.containsAsyncAction = false;
          }
          this.actionsQueue = [];
          this.asyncActionsQueue = [];
          this.actions = [];
      };
      CanvasContextInStandard.prototype.resolveAsyncActions = function (loadImage, done) {
          var _this = this;
          /**
           * cache status
           */
          var asyncActionsQueue = this.asyncActionsQueue;
          var actionsQueue = this.actionsQueue;
          var lastDrawImageToDrawActions = this.actions;
          var len = asyncActionsQueue.length;
          var urls = [];
          var action = [];
          if (len !== actionsQueue.length) ;
          for (var _i = 0, asyncActionsQueue_1 = asyncActionsQueue; _i < asyncActionsQueue_1.length; _i++) {
              var asyncAction = asyncActionsQueue_1[_i];
              // 没找到才推进去
              if (urls.indexOf(asyncAction.url) === -1) {
                  urls.push(asyncAction.url);
              }
          }
          loadImage(urls, function (result) {
              /**
               * 映射成 url to id 的 map
               */
              /**
               * 开始遍历同步 actions 和异步 actions 做合并
               */
              for (var i = 0; i < len; i++) {
                  action = action.concat(actionsQueue[i]);
                  // encode
                  var asyncAction = asyncActionsQueue[i];
                  var texture = result.loaded[asyncAction.url];
                  if (!texture) {
                      continue;
                  }
                  var textureId = texture.id;
                  if (textureId === -1 || textureId === '-1' || textureId === undefined || textureId === null) {
                      continue;
                  }
                  if (isCanvasAsyncAction4Image(asyncAction)) {
                      action.push(_this.encoder.encodeDrawImage(texture, asyncAction.sx, asyncAction.sy, asyncAction.sWidth, asyncAction.sHeight, asyncAction.dx, asyncAction.dy, asyncAction.dWidth, asyncAction.dHeight));
                  }
                  else if (isCanvasAsyncAction4Pattern(asyncAction)) {
                      action.push(_this.encoder.encodePattern(texture, asyncAction.repeat, asyncAction.$callId));
                  }
              }
              /**
               * 最后接上「最后一个 drawImage」 到 「draw」 中间的 actions
               */
              action = action.concat(lastDrawImageToDrawActions);
              done(action);
          }, this.drawBehavior.standard);
      };
      /**
       * + parse 字体字符串
       * + 更新当前 Context 内的字体状态
       * + <font-style> <font-weight> font-size font-family
       * @param font
       */
      CanvasContextInStandard.prototype.parseAndSaveFont = function (font) {
          var this$1 = this;

          this.fontStyle.font = font;
          var matches = font.match(/^(([\w\-]+\s)*)(\d+px)(\/(\d+\.?\d*(px)?))?\s+(.*)/);
          if (matches) {
              var fontStyles = matches[1].trim().split(/\s/);
              this.fontStyle.fontSize = parseFloat(matches[3]);
              this.fontStyle.fontFamily = matches[7];
              for (var _i = 0, fontStyles_1 = fontStyles; _i < fontStyles_1.length; _i++) {
                  var s = fontStyles_1[_i];
                  if (['italic', 'oblique', 'normal'].indexOf(s) > -1) {
                      this$1.fontStyle.fontStyle = s;
                  }
                  else if (['bold', 'normal'].indexOf(s) > -1) {
                      this$1.fontStyle.fontWeight = s;
                  }
              }
          }
      };
      /**
       * 根据当前字体状态向 Native 发送指令更新字体
       */
      CanvasContextInStandard.prototype.updateFont = function (font) {
          this.fontStyle.font = font;
          this.addAction(this.encoder.encodeFont(this.fontStyle.font));
      };
      return CanvasContextInStandard;
  }());

  function getCanvasContextInStandard(id, appxDomain, callContext) {
      var page = callContext.getPageInstance();
      var loadedImageResult = {
          failed: {},
          loaded: {},
      };
      var callbacksQueue = [];
      var loadImage = function (imageUrls, callback, isStandardBehavior) {
          if (!page || page.hasPageUnloaded()) {
              page = callContext.getPageInstance();
              // 需要清空
              loadedImageResult = {
                  failed: {},
                  loaded: {},
              };
          }
          if (isStandardBehavior) {
              callback.invoked = false;
              callback.requested = false;
          }
          // 如果 urls 都在 loadedImage 里面找到，就直接 callback 返回
          var imageRequests = imageUrls.filter(function (url) { return !loadedImageResult.loaded[url]; });
          if (imageRequests.length) {
              callbacksQueue.push(callback);
              page.invokeRenderMethod("canvasPreloadImageInRender" /* ESharedAppxPageRenderMethod.CanvasPreloadImageInRender */, [imageRequests], function (error, result) {
                  // failed 不更新
                  loadedImageResult.loaded = __assign(__assign({}, loadedImageResult.loaded), result.loaded);
                  if (!isStandardBehavior) {
                      callback(loadedImageResult);
                  }
                  else {
                      callback.requested = true;
                      // 举例：
                      // [callback1, callback2, callback3, callback4...]
                      // 当1，2，4 callback对应的page.invokeRenderMethod('canvasPreloadImageInRender', params, (error, result) => {})都触发回调，
                      // 先给各自的callback打标requested = 1
                      // 此时callback3还未触发回调，
                      // 则顺序执行callback1和callback2，因为callback3还未有requested标识，故中止遍历，callback4需等callback3对应的资源加载也完成后在再callback3后执行。
                      for (var _i = 0, callbacksQueue_1 = callbacksQueue; _i < callbacksQueue_1.length; _i++) {
                          var cb = callbacksQueue_1[_i];
                          if (cb.requested) {
                              cb(loadedImageResult);
                              cb.invoked = true;
                          }
                          else {
                              break;
                          }
                      }
                      callbacksQueue = callbacksQueue.filter(function (cb) { return !cb.invoked; });
                  }
              });
          }
          else {
              if (!isStandardBehavior) {
                  callback(loadedImageResult);
              }
              else {
                  // 不需要远程preload图片，直接设置requested为true
                  callback.requested = true;
                  callbacksQueue.push(callback);
                  // 如果此时callback为callbacksQueue的第一个callback，则立马执行回调并出列
                  if (callbacksQueue.indexOf(callback) === 0) {
                      callback(loadedImageResult);
                      callbacksQueue.shift();
                  }
              }
          }
      };
      var invokeRenderMethod = function (method, args, callback) {
          var pageInstance = callContext.getPageInstance();
          if (pageInstance) {
              pageInstance.invokeRenderMethod(method, args, callback);
          }
      };
      var runtime = callContext.runtime();
      var bridgeScope = runtime.getBridge().getScope(appxDomain);
      var platformAPI = {
          asyncCall: bridgeScope.call,
          callLinked: callContext.callLinkedCollection,
          getBehaviorManager: function () { return runtime.getBehaviorManager(); },
          invokeRenderMethod: invokeRenderMethod,
          loadImage: loadImage,
          syncCall: bridgeScope.callSync,
      };
      var context = new CanvasContextInStandard(id, platformAPI);
      // 确保枚举不到
      if (!(/* a_canvasContext_measureText_24_3:true */ true)) {
          var descriptor = {
              enumerable: false,
          };
          Object.defineProperties(context, {
              measureText: descriptor,
              measureTextAsync: descriptor,
          });
      }
      return context;
  }

  var canvasToDataURLPrivate4Standard = {
      private: true,
      d: function (finalOption, resolve) {
          var page = this.getPageInstance();
          page.invokeRenderMethod("canvasToDataURL4StandardInRender" /* ESharedAppxPageRenderMethod.CanvasToDataURL4StandardInRender */, [finalOption], function (error, result) {
              if (error) {
                  resolve({
                      error: error.message,
                      errorMessage: error.message,
                  });
              }
              resolve(result);
          });
      },
  };
  var canvasToTempFilePathPrivate4Standard = {
      private: true,
      d: function (finalOption, resolve) {
          var page = this.getPageInstance();
          page.invokeRenderMethod("canvasToTempFilePath4StandardInRender" /* ESharedAppxPageRenderMethod.CanvasToTempFilePath4StandardInRender */, [finalOption], function (error, result) {
              // error 传了null
              resolve(result);
          });
      },
  };
  var canvasGetImageDataPrivate4Standard = {
      private: true,
      d: function (finalOption, resolve) {
          var page = this.getPageInstance();
          page.invokeRenderMethod("canvasGetImageData4StandardInRender" /* ESharedAppxPageRenderMethod.CanvasGetImageData4StandardInRender */, [finalOption], function (error, result) {
              if (error) {
                  resolve({
                      error: error.message,
                      errorMessage: error.message,
                  });
              }
              result.data = new Uint8ClampedArray(result.data);
              resolve(result);
          });
      },
  };
  var canvasPutImageDataPrivate4Standard = {
      private: true,
      d: function (finalOption, resolve) {
          if ('[object Uint8ClampedArray]' !== Object.prototype.toString.call(finalOption.data)) {
              resolve({
                  error: 'data argument must be an Uint8ClampedArray',
                  errorMessage: 'data argument must be an Uint8ClampedArray',
              });
          }
          finalOption.data = Array.prototype.slice.call(finalOption.data);
          var page = this.getPageInstance();
          page.invokeRenderMethod("canvasPutImageData4StandardInRender" /* ESharedAppxPageRenderMethod.CanvasPutImageData4StandardInRender */, [finalOption], function (error, result) {
              if (error) {
                  resolve({
                      error: error.message,
                      errorMessage: error.message,
                  });
              }
              resolve(result);
          });
      },
  };
  var canvasContextLinked4Standard = {
      canvasGetImageDataPrivate4Standard: canvasGetImageDataPrivate4Standard,
      canvasPutImageDataPrivate4Standard: canvasPutImageDataPrivate4Standard,
      canvasToDataURLPrivate4Standard: canvasToDataURLPrivate4Standard,
      canvasToTempFilePathPrivate4Standard: canvasToTempFilePathPrivate4Standard,
  };

  function setupZephyrRuntimeFeatureSwitch(switchSystem, isPortalWorkerScene, zruntime, zephyrFlag) {
      if (!switchSystem.get("forceIterationUpdate" /* ESharedAppxSwitchManagerName.ForceIterationUpdate */)) {
          zruntime.enableFeature(1 /* EZephyrFrameworkRuntimeFeature.forceIterationUpdate */, false);
      }
      else {
          zruntime.enableFeature(1 /* EZephyrFrameworkRuntimeFeature.forceIterationUpdate */, true);
      }
      if (switchSystem.get("forceTemplateUpdate" /* ESharedAppxSwitchManagerName.ForceTemplateUpdate */)) {
          zruntime.enableFeature(2 /* EZephyrFrameworkRuntimeFeature.forceTemplateUpdate */, true);
      }
      if (switchSystem.get("enableSwitchFragment" /* ESharedAppxSwitchManagerName.EnableSwitchFragment */)) {
          zruntime.enableFeature(47 /* EZephyrFrameworkRuntimeFeature.enablePlaceholderBypass */, true);
      }
      // tslint:disable-next-line no-bitwise
      if (zephyrFlag & 2 /** EZCompilerRuntimeFlag.SlotReceiveAndInitProviders */) {
          // 如果需要开启 LinkNode + ClientLazyUpdating
          var useSlotLinkTree = switchSystem.get("useSlotLinkTree" /* ESharedAppxSwitchManagerName.UseSlotLinkTree */);
          if (useSlotLinkTree || useSlotLinkTree === undefined) {
              zruntime.enableFeature(12 /* EZephyrFrameworkRuntimeFeature.useSlotProviderCreator */, true);
              zruntime.enableFeature(11 /* EZephyrFrameworkRuntimeFeature.useSlotLazyConstructor */, true);
              switchSystem.setValue("useSlotLinkTree" /* ESharedAppxSwitchManagerName.UseSlotLinkTree */, true);
              // 如果需要开启 HostLazyUpdating
              // 仅在开关系统里保留 2 个独立值，实际只有 1 个开关（不然也会崩）
              switchSystem.setValue("useSlotLazyUpdating" /* ESharedAppxSwitchManagerName.UseSlotLazyUpdating */, true);
          }
      }
      else {
          // 不支持直接关闭
          switchSystem.setValue("useSlotLinkTree" /* ESharedAppxSwitchManagerName.UseSlotLinkTree */, false);
          switchSystem.setValue("useSlotLazyUpdating" /* ESharedAppxSwitchManagerName.UseSlotLazyUpdating */, false);
      }
      var switchValue = switchSystem.get("scalableStyle" /* ESharedAppxSwitchManagerName.ScalableStyle */);
      // tslint:disable-next-line no-bitwise
      var useScalableStyle = !!(zephyrFlag & /** EZCompilerRuntimeFlag.ScalableStyle */ 16);
      // 配置了开关或者产物使用了可缩放样式情况下都强行写一次开关
      // 当且仅当开关开启（或缺省）且产物支持才开启
      if (useScalableStyle || switchValue !== undefined) {
          switchSystem.setValue("scalableStyle" /* ESharedAppxSwitchManagerName.ScalableStyle */, useScalableStyle && (!!switchValue || switchValue === undefined));
      }
      if (isPortalWorkerScene) {
          switchSystem.setValue("uepReportDataSwitch" /* ESharedAppxSwitchManagerName.Uep */, false);
          switchSystem.setValue("uepSupportSPMSwitch" /* ESharedAppxSwitchManagerName.UepSupportSPMSwitch */, false);
      }
  }

  var sharedSendMessageAction = function (action, context, callWithProxy, extract, param) {
      callWithProxy("ContextPrivateSendMessageAction" /* EBridgePrivateAPI4CompositeElement.ContextPrivateSendMessageAction */, extract
          ? extractBridgeOption4CompositeElement(param, context.viewId, context.id, action)
          : {
              action: action,
              data: param,
              element: context.id,
              viewId: context.viewId,
          });
  };
  var sharedSendMessageActionV2 = function (action, context, callWithProxy, extract, permissionInfo, param) {
      if (permissionInfo === void 0) { permissionInfo = undefined; }
      // 通用方法 只有明确是false时 才做权限拦截
      if (permissionInfo && permissionInfo.p === false) {
          // TODO: 目前只考虑 context的标准异步方法 手动执行 fail/complete。 类似videoContext.start(true) 这种非标方法如何处理后续再考虑
          sharedMethodImplWhenNoPermission4CompositeContext(param, action, permissionInfo.e);
      }
      else {
          callWithProxy("ContextPrivateSendMessageAction" /* EBridgePrivateAPI4CompositeElement.ContextPrivateSendMessageAction */, extract
              ? extractBridgeOption4CompositeElement(param, context.viewId, context.id, action)
              : {
                  action: action,
                  data: param,
                  element: context.id,
                  viewId: context.viewId,
              });
      }
  };
  function extractBridgeOption4CompositeElement(options, viewId, element, action) {
      if (options) {
          var success = options.success, fail = options.fail, complete = options.complete, data = __rest(options, ["success", "fail", "complete"]);
          return {
              complete: complete,
              data: data,
              element: element,
              fail: fail,
              success: success,
              viewId: viewId,
              action: action,
          };
      }
      return {
          element: element,
          viewId: viewId,
          action: action,
      };
  }
  function reportIfCreateContextUsingAutoGeneratedId(callContext, id) {
      ifIsMiniProgramEnv(function () {
          if ((id + '').indexOf('appx-native-component-') === 0) {
              var behavior = callContext
                  .runtime()
                  .getBehaviorManager()
                  .get("reportCompositeContextId" /* ESharedAppxSwitchManagerName.ReportCompositeContextId */);
              if (behavior.report) {
                  behavior.report('create composite context with built-in id');
              }
          }
      });
  }
  function fillCompositeElementDynamicContextMethods(callContext, stringTag, targetContext) {
      var config = callContext.runtime().getSwitchManager().get("compositeElement" /* ESharedAppxSwitchManagerName.CompositeElement */);
      var element = config && config[stringTag];
      if (element) {
          var context_2 = element.context;
          if (Array.isArray(context_2)) {
              var callWithProxy = callContext.callAfterCompositeElementReady;
              for (var _i = 0, context_1 = context_2; _i < context_1.length; _i++) {
                  var action = context_1[_i];
                  if (targetContext[action] === undefined) {
                      targetContext[action] = sharedSendMessageActionV2.bind(null, action, targetContext, callWithProxy, true, 
                      // TODO: 动态注入的方法先默认都有权限
                      undefined);
                  }
              }
          }
      }
      return targetContext;
  }
  function getAppxSwitchNameAndPermissionNameByCompositeName(compositeName) {
      var res = undefined;
      switch (compositeName) {
          case "camera" /* EZElementStringTag.Camera */:
              res = {
                  appxSwitchName: "cameraContextPermissionCheck" /* ESharedAppxSwitchManagerName.CameraContextPermissionCheck */,
                  permissionName4Composite: "_appxFwExtra_".concat(compositeName),
              };
              break;
          default:
              return res;
      }
      return res;
  }
  function checkPermission4CompositeContext(callContext, compositeName) {
      var appxDomain = callContext.appxDomain, runtime = callContext.runtime;
      // ！！重要，同层组件上下文API （例如：camera => my.createCameraContext 在ISP系统内配置的底层API名字规则为`_appxFwExtra_${CompositeName}`
      // 容器读取到权限文件后，会将所有_appxFwExtra_ 开头的权限信息全部透传给appx
      // 整体方案详见 https://yuque.antfin.com/appxng/review/tpi61k
      var res4switchNameAndPermissionName = getAppxSwitchNameAndPermissionNameByCompositeName(compositeName);
      if (res4switchNameAndPermissionName) {
          var permissionName4Composite = res4switchNameAndPermissionName.permissionName4Composite, appxSwitchName = res4switchNameAndPermissionName.appxSwitchName;
          // 客户端是否支持
          var clientIsSupport_1 = (insideFeatureRuntimeVersion >= /* f_compositeContext_2_7_20:10.2.63 */ 10002063);
          // 是否有权限
          var hasPermission_1 = true; // 默认值为true
          // 调用方，可以是小程序的appid，也可以是插件的appid
          var appId_1;
          // 白名单
          var inWhiteList_1 = true;
          // 容器返回的同层组件权限信息
          var compositeContext = void 0;
          var appxSwitchVal = runtime()
              .getSwitchManager()
              .get(appxSwitchName);
          // 开关值没有时，直接返回true
          if (!appxSwitchVal) {
              return true;
          }
          var enable = appxSwitchVal.enable, whiteList = appxSwitchVal.whiteList;
          var report = !!(enable & 1 /* ESharedAppxUnexpectedBehaviorState.Reportable */);
          var standard_1 = !!(enable & 2 /* ESharedAppxUnexpectedBehaviorState.Standard */);
          // 静态插件/动态插件
          if (isAppxDomain4Extension(appxDomain)) {
              appId_1 = appxDomain.value;
              var extensionExtraInfo = runtime().getMiniExtensionManager().getExtraInfoByExtensionId(appId_1);
              compositeContext = extensionExtraInfo && extensionExtraInfo.componentContext;
              // 宿主小程序
          }
          else {
              var startupParams = runtime().getEnv().startupParams;
              appId_1 = startupParams.appId;
              compositeContext = startupParams.componentContext;
          }
          // 白名单模式下，名单包含appid则认为一定有权限
          // whiteList 一定要是个数组，否则认为没有拉到开关数据，则认为有权限
          if (Array.isArray(whiteList)) {
              inWhiteList_1 = whiteList.indexOf(appId_1) > -1;
          }
          hasPermission_1 = !!(compositeContext && compositeContext.indexOf(permissionName4Composite) > -1);
          if (report) {
              // 不管有没有权限，都把日志给报了，但可严格区分出两种日志
              var nav = runtime().getNav();
              if (nav.whenTopInstancePushed) {
                  nav.whenTopInstancePushed(function (pageInstance) {
                      pageInstance.invokeRenderMethod("reportUnexpectedBehaviorToBasement" /* ESharedAppxPageRenderMethod.ReportUnexpectedBehaviorToBasement */, [
                          [
                              "create context for ".concat(compositeName, " with permission status: ").concat(hasPermission_1, ", switch status: ").concat(standard_1),
                              {
                                  appId: appId_1,
                                  clientIsSupport: clientIsSupport_1,
                                  compositeName: compositeName,
                                  hasPermission: hasPermission_1,
                                  inWhiteList: inWhiteList_1,
                                  standard: standard_1,
                              } ] ]);
                  });
              }
          }
          // 容器10.2.63以上开始支持
          if (clientIsSupport_1) {
              // // 针对特定组件，小程序/插件产物 是否已开启权限管控处理
              if (standard_1) {
                  // 如果在白名单中，直接返回有权限
                  if (inWhiteList_1) {
                      return true;
                      // 不在白名单里，则正式开启权限管控，返回真实的权限信息
                  }
                  else {
                      return hasPermission_1;
                  }
                  // 权限管控 开关未开启，直接返回有权限
              }
              else {
                  return true;
              }
              // 10.2.63以下的客户端，直接返回有权限
          }
          else {
              return true;
          }
      }
      else {
          return true;
      }
  }
  function getRes4NoPermission(method, entity) {
      return {
          error: 4,
          errorMessage: "\u65E0\u6743\u8C03\u7528".concat(entity, ".").concat(method),
      };
  }
  function sharedMethodImplWhenNoPermission4CompositeContext(options, method, entity) {
      if (options) {
          var _a = options || {}, fail = _a.fail, complete = _a.complete;
          var res4NoPermission = getRes4NoPermission(method, entity);
          if (fail) {
              fail(res4NoPermission);
          }
          if (complete) {
              complete(res4NoPermission);
          }
      }
  }

  var kJSAPILottieContextAction = [
      "play" /* ESharedContextRequestActionType.Play */,
      "stop" /* ESharedContextRequestActionType.Stop */,
      "pause" /* ESharedContextRequestActionType.Pause */,
      "setSpeed" /* ESharedContextRequestActionType.SetSpeed */,
      "goToAndStop" /* ESharedContextRequestActionType.GoToAndStop */,
      "goToAndPlay" /* ESharedContextRequestActionType.GoToAndPlay */,
      "playFromMinToMaxProgress" /* ESharedContextRequestActionType.PlayFromMinToMaxProgress */,
      "playFromMinToMaxFrame" /* ESharedContextRequestActionType.PlayFromMinToMaxFrame */,
      "getDuration" /* ESharedContextRequestActionType.GetDuration */,
      "downgradeToPlaceholder" /* ESharedContextRequestActionType.DowngradeToPlaceholder */,
      "fillVariableValue" ];
  function createLottieContextImpl(callContext, viewId, elementId) {
      var callWithProxy = callContext.callAfterCompositeElementReady;
      var context = {
          id: elementId,
          viewId: viewId,
      };
      for (var _i = 0, kJSAPILottieContextAction_1 = kJSAPILottieContextAction; _i < kJSAPILottieContextAction_1.length; _i++) {
          var action = kJSAPILottieContextAction_1[_i];
          context[action] = sharedSendMessageAction.bind(null, action, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_lottieContext_getLottieInfo_23_0:10.1.80 */ 10001080)) {
          context.getLottieInfo = sharedSendMessageAction.bind(null, "getLottieInfo" /* ESharedContextRequestActionType.GetLottieInfo */, context, callWithProxy, true);
      }
      return context;
  }

  var createAPI4LottieContext = function (elementId) {
      reportIfCreateContextUsingAutoGeneratedId(this, elementId);
      return fillCompositeElementDynamicContextMethods(this, "lottie" /* EZElementStringTag.Lottie */, createLottieContextImpl(this, this.assignedViewId, this.getRewriteIdWithAppxDomain(elementId)));
  };

  var translateMarkerId = 0;
  function createMapContextImpl(getRuntime, callContext, viewId, appxDomain, elementId) {
      var runtime = getRuntime();
      var bridge = runtime.getBridge();
      var callWithProxy = callContext.callAfterCompositeElementReady;
      var context = {
          id: elementId,
          viewId: viewId,
      };
      context.translateMarker = translateMarker.bind(null, context, callWithProxy);
      context.setProps = setProps.bind(null, context, bridge.getScope(appxDomain).call);
      context.moveToLocation = sharedSendMessageAction.bind(null, "moveToLocation" /* ESharedContextRequestActionType.MoveToLocation */, context, callWithProxy, true);
      if ((insideFeatureRuntimeVersion >= /* a_mapContext_changeMarkers_23_0:10.1.80 */ 10001080)) {
          context.changeMarkers = sharedSendMessageAction.bind(null, "changeMarkers" /* ESharedContextRequestActionType.ChangeMarkers */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_mapContext_getScale_24_0:10.1.92 */ 10001092)) {
          context.getScale = sharedSendMessageAction.bind(null, "getScale" /* ESharedContextRequestActionType.GetScale */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_mapContext_screenToMap_24_0:10.1.92 */ 10001092)) {
          context.screenToMap = sharedSendMessageAction.bind(null, "screenToMap" /* ESharedContextRequestActionType.ScreenToMap */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_mapContext_mapToScreen_24_0:10.1.92 */ 10001092)) {
          context.mapToScreen = sharedSendMessageAction.bind(null, "mapToScreen" /* ESharedContextRequestActionType.MapToScreen */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_mapContext_setMapType_24_0:10.1.92 */ 10001092)) {
          context.setMapType = sharedSendMessageAction.bind(null, "setMapType" /* ESharedContextRequestActionType.SetMapType */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_mapContext_includePoints_2_6_2:10.2.0 */ 10002000)) {
          context.includePoints = sharedSendMessageAction.bind(null, "includePoints" /* ESharedContextRequestActionType.IncludePoints */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_mapContext_getRotate_2_6_2:10.2.0 */ 10002000)) {
          context.getRotate = sharedSendMessageAction.bind(null, "getRotate" /* ESharedContextRequestActionType.GetRotate */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_mapContext_getSkew_2_6_2:10.2.0 */ 10002000)) {
          context.getSkew = sharedSendMessageAction.bind(null, "getSkew" /* ESharedContextRequestActionType.GetSkew */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_mapContext_setCenterOffset_2_6_2:10.2.0 */ 10002000)) {
          context.setCenterOffset = sharedSendMessageAction.bind(null, "setCenterOffset" /* ESharedContextRequestActionType.SetCenterOffset */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_mapContext_addGroundOverlay_2_7_2:10.2.20 */ 10002020)) {
          context.addGroundOverlay = sharedSendMessageAction.bind(null, "addGroundOverlay" /* ESharedContextRequestActionType.AddGroundOverlay */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_mapContext_addMarkers_2_7_2:10.2.20 */ 10002020)) {
          context.addMarkers = sharedSendMessageAction.bind(null, "addMarkers" /* ESharedContextRequestActionType.AddMarkers */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_mapContext_initMarkerCluster_2_7_2:10.2.20 */ 10002020)) {
          context.initMarkerCluster = sharedSendMessageAction.bind(null, "initMarkerCluster" /* ESharedContextRequestActionType.InitMarkerCluster */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_mapContext_removeGroundOverlay_2_7_2:10.2.20 */ 10002020)) {
          context.removeGroundOverlay = sharedSendMessageAction.bind(null, "removeGroundOverlay" /* ESharedContextRequestActionType.RemoveGroundOverlay */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_mapContext_removeMarkers_2_7_2:10.2.20 */ 10002020)) {
          context.removeMarkers = sharedSendMessageAction.bind(null, "removeMarkers" /* ESharedContextRequestActionType.RemoveMarkers */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_mapContext_updateGroundOverlay_2_7_2:10.2.20 */ 10002020)) {
          context.updateGroundOverlay = sharedSendMessageAction.bind(null, "updateGroundOverlay" /* ESharedContextRequestActionType.UpdateGroundOverlay */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_mapContext_polygonContainsPoint_2_7_9:10.2.33 */ 10002033)) {
          context.polygonContainsPoint = sharedSendMessageAction.bind(null, "polygonContainsPoint" /* ESharedContextRequestActionType.PolygonContainsPoint */, context, callWithProxy, true);
      }
      context.getRegion = sharedSendMessageAction.bind(null, "getRegion" /* ESharedContextRequestActionType.GetRegion */, context, callWithProxy, true);
      context.updateComponents = sharedSendMessageAction.bind(null, "updateComponents" /* ESharedContextRequestActionType.UpdateComponents */, context, callWithProxy, true);
      context.smoothMovePolyline = sharedSendMessageAction.bind(null, "smoothMovePolyline" /* ESharedContextRequestActionType.SmoothMovePolyline */, context, callWithProxy, true);
      context.smoothMoveMarker = sharedSendMessageAction.bind(null, "smoothMoveMarker" /* ESharedContextRequestActionType.SmoothMoveMarker */, context, callWithProxy, true);
      context.showsScale = sharedSendMessageAction.bind(null, "showsScale" /* ESharedContextRequestActionType.ShowsScale */, context, callWithProxy, true);
      context.showsCompass = sharedSendMessageAction.bind(null, "showsCompass" /* ESharedContextRequestActionType.ShowsCompass */, context, callWithProxy, true);
      context.showRoute = sharedSendMessageAction.bind(null, "showRoute" /* ESharedContextRequestActionType.ShowRoute */, context, callWithProxy, true);
      context.getMapProperties = sharedSendMessageAction.bind(null, "getMapProperties" /* ESharedContextRequestActionType.GetMapProperties */, context, callWithProxy, true);
      context.getCenterLocation = sharedSendMessageAction.bind(null, "getCenterLocation" /* ESharedContextRequestActionType.GetCenterLocation */, context, callWithProxy, true);
      context.gestureEnable = sharedSendMessageAction.bind(null, "gestureEnable" /* ESharedContextRequestActionType.GestureEnable */, context, callWithProxy, true);
      context.clearRoute = sharedSendMessageAction.bind(null, "clearRoute" /* ESharedContextRequestActionType.ClearRoute */, context, callWithProxy, true);
      context.calculateDistance = sharedSendMessageAction.bind(null, "calculateDistance" /* ESharedContextRequestActionType.CalculateDistance */, context, callWithProxy, true);
      return context;
  }
  function translateMarker(context, callWithProxy, options) {
      var viewId = context.viewId;
      var request = extractBridgeOption4CompositeElement(options, viewId, context.id);
      if (request.data) {
          request.data.translateMarkerId = translateMarkerId++;
      }
      callWithProxy("MapContextPrivateTranslateMarker" /* EBridgePrivateAPI4CompositeElement.MapContextPrivateTranslateMarker */, request);
  }
  function setProps(context, call, options) {
      var viewId = context.viewId;
      // 走的是 NBComponent.render
      // 没有回调
      // 也不用等待组件创建完毕
      call("MapContextPrivateSetProps" /* EBridgePrivateAPI4CompositeElement.MapContextPrivateSetProps */, {
          data: options,
          element: context.id,
          viewId: viewId,
      }, null, viewId);
  }

  var createAPI4MapContext = function (elementId) {
      reportIfCreateContextUsingAutoGeneratedId(this, elementId);
      var finalId = this.getRewriteIdWithAppxDomain(elementId);
      return fillCompositeElementDynamicContextMethods(this, "map" /* EZElementStringTag.Map */, createMapContextImpl(this.runtime, this, this.assignedViewId, this.appxDomain, finalId));
  };

  function createWebViewContextImpl(callContext, viewId, appxDomain, elementId) {
      var callWithProxy = callContext.callAfterCompositeElementReady;
      var context = {
          id: elementId,
          viewId: viewId,
      };
      context.postMessage = postMessage.bind(null, context, callWithProxy);
      return context;
  }
  function postMessage(context, callWithProxy, message) {
      callWithProxy("ContextPrivateSendMessageAction" /* EBridgePrivateAPI4CompositeElement.ContextPrivateSendMessageAction */, 
      // 没有回调
      {
          action: "postMessage" /* ESharedContextRequestActionType.PostMessage */,
          data: {
              res: {
                  data: JSON.stringify(message),
                  type: 'message',
              },
          },
          element: context.id,
          viewId: context.viewId,
      });
  }

  var createApi4WebViewContext = function (elementId) {
      reportIfCreateContextUsingAutoGeneratedId(this, elementId);
      return fillCompositeElementDynamicContextMethods(this, "web-view" /* EZElementStringTag.WebView */, createWebViewContextImpl(this, this.assignedViewId, this.appxDomain, this.getRewriteIdWithAppxDomain(elementId)));
  };

  function createVideoContextImpl(callContext, viewId, appxDomain, elementId) {
      var callWithProxy = callContext.callAfterCompositeElementReady;
      var context = {
          id: elementId,
          viewId: viewId,
          nodeName: 'video',
      };
      context.play = play.bind(null, context, callWithProxy);
      context.stop = stop.bind(null, context, callWithProxy);
      context.pause = pause.bind(null, context, callWithProxy);
      context.seek = seek.bind(null, context, callWithProxy);
      context.mute = mute.bind(null, context, callWithProxy);
      context.playbackRate = playbackRate.bind(null, context, callWithProxy);
      context.requestFullScreen = sharedSendMessageAction.bind(null, "requestFullScreen" /* ESharedContextRequestActionType.RequestFullScreen */, context, callWithProxy, false);
      context.exitFullScreen = sharedSendMessageAction.bind(null, "exitFullScreen" /* ESharedContextRequestActionType.ExitFullScreen */, context, callWithProxy, false);
      context.showStatusBar = sharedSendMessageAction.bind(null, "showStatusBar" /* ESharedContextRequestActionType.ShowStatusBar */, context, callWithProxy, false);
      context.hideStatusBar = sharedSendMessageAction.bind(null, "hideStatusBar" /* ESharedContextRequestActionType.HideStatusBar */, context, callWithProxy, false);
      if ((insideFeatureRuntimeVersion >= /* a_videoContext_quality_23_0:10.1.82 */ 10001082)) {
          context.updateQualityList = sharedSendMessageAction.bind(null, "updateQualityList" /* ESharedContextRequestActionType.UpdateQualityList */, context, callWithProxy, false);
          context.switchQuality = sharedSendMessageAction.bind(null, "switchQuality" /* ESharedContextRequestActionType.SwitchQuality */, context, callWithProxy, false);
      }
      if ((insideFeatureRuntimeVersion >= /* c_video_floating_mode_24_6:10.1.92 */ 10001092)) {
          context.showFloatingWindow = showFloatingWindow.bind(null, context, callWithProxy);
      }
      if ((/* a_videoContext_getCurrentTime_2_7_3:false */ false)) {
          context.getCurrentTime = sharedSendMessageAction.bind(null, "getCurrentTime" /* ESharedContextRequestActionType.GetCurrentTime */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_videoContext_showControl_2_7_3:10.2.23 */ 10002023)) {
          context.showControl = sharedSendMessageAction.bind(null, "showControl" /* ESharedContextRequestActionType.ShowControl */, context, callWithProxy, false);
      }
      if ((insideFeatureRuntimeVersion >= /* a_videoContext_hideControl_2_7_3:10.2.23 */ 10002023)) {
          context.hideControl = sharedSendMessageAction.bind(null, "hideControl" /* ESharedContextRequestActionType.HideControl */, context, callWithProxy, false);
      }
      if ((insideFeatureRuntimeVersion >= /* a_videoContext_startInteractions_2_7_10:10.2.36 */ 10002036)) {
          context.startInteractions = sharedSendMessageAction.bind(null, "startInteractions" /* ESharedContextRequestActionType.StartInteractions */, context, callWithProxy, false);
      }
      if ((insideFeatureRuntimeVersion >= /* a_videoContext_stopInteractions_2_7_10:10.2.36 */ 10002036)) {
          context.stopInteractions = sharedSendMessageAction.bind(null, "stopInteractions" /* ESharedContextRequestActionType.StopInteractions */, context, callWithProxy, false);
      }
      return context;
  }
  function play(context, callWithProxy) {
      callWithProxy("VideoContextPrivatePlay" /* EBridgePrivateAPI4CompositeElement.VideoContextPrivatePlay */, {
          element: context.id,
          viewId: context.viewId,
      });
  }
  function stop(context, callWithProxy) {
      callWithProxy("VideoContextPrivateStop" /* EBridgePrivateAPI4CompositeElement.VideoContextPrivateStop */, {
          element: context.id,
          viewId: context.viewId,
      });
  }
  function seek(context, callWithProxy, time) {
      callWithProxy("VideoContextPrivateSeek" /* EBridgePrivateAPI4CompositeElement.VideoContextPrivateSeek */, {
          data: { time: time },
          element: context.id,
          viewId: context.viewId,
      });
  }
  function mute(context, callWithProxy, ison) {
      callWithProxy("ContextPrivateSendMessageAction" /* EBridgePrivateAPI4CompositeElement.ContextPrivateSendMessageAction */, {
          data: { ison: ison },
          element: context.id,
          viewId: context.viewId,
          action: "mute" /* ESharedContextRequestActionType.Mute */,
      });
  }
  function playbackRate(context, callWithProxy, rate) {
      callWithProxy("ContextPrivateSendMessageAction" /* EBridgePrivateAPI4CompositeElement.ContextPrivateSendMessageAction */, {
          data: { rate: rate },
          element: context.id,
          viewId: context.viewId,
          action: "playbackRate" /* ESharedContextRequestActionType.PlaybackRate */,
      });
  }
  function pause(context, callWithProxy) {
      callWithProxy("VideoContextPrivatePause" /* EBridgePrivateAPI4CompositeElement.VideoContextPrivatePause */, {
          element: context.id,
          viewId: context.viewId,
      });
  }
  function showFloatingWindow(context, callWithProxy, isShow) {
      callWithProxy("ContextPrivateSendMessageAction" /* EBridgePrivateAPI4CompositeElement.ContextPrivateSendMessageAction */, {
          data: { isShow: !!isShow },
          element: context.id,
          viewId: context.viewId,
          action: "showFloatingWindow" /* ESharedContextRequestActionType.ShowFloatingWindow */,
      });
  }

  var createApi4VideoContext = function (elementId) {
      reportIfCreateContextUsingAutoGeneratedId(this, elementId);
      return fillCompositeElementDynamicContextMethods(this, "video" /* EZElementStringTag.Video */, createVideoContextImpl(this, this.assignedViewId, this.appxDomain, this.getRewriteIdWithAppxDomain(elementId)));
  };

  var kJSAPILivePlayerContextAction = [
      "play" /* ESharedContextRequestActionType.Play */,
      "stop" /* ESharedContextRequestActionType.Stop */,
      "mute" /* ESharedContextRequestActionType.Mute */,
      "pause" /* ESharedContextRequestActionType.Pause */,
      "resume" /* ESharedContextRequestActionType.Resume */,
      "requestFullScreen" /* ESharedContextRequestActionType.RequestFullScreen */,
      "exitFullScreen" ];
  function createLivePlayerContextImpl(callContext, viewId, elementId) {
      var callWithProxy = callContext.callAfterCompositeElementReady;
      var context = {
          id: elementId,
          viewId: viewId,
      };
      for (var _i = 0, kJSAPILivePlayerContextAction_1 = kJSAPILivePlayerContextAction; _i < kJSAPILivePlayerContextAction_1.length; _i++) {
          var action = kJSAPILivePlayerContextAction_1[_i];
          context[action] = sharedSendMessageAction.bind(null, action, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* c_live_player_floating_mode_24_6:10.1.92 */ 10001092)) {
          context.showFloatingWindow = function (isShow) {
              sharedSendMessageAction("showFloatingWindow" /* ESharedContextRequestActionType.ShowFloatingWindow */, context, callWithProxy, true, {
                  isShow: !!isShow,
              });
          };
      }
      return context;
  }

  var createAPI4LivePlayerContext = function (elementId) {
      reportIfCreateContextUsingAutoGeneratedId(this, elementId);
      return fillCompositeElementDynamicContextMethods(this, "live-player" /* EZElementStringTag.LivePlayer */, createLivePlayerContextImpl(this, this.assignedViewId, this.getRewriteIdWithAppxDomain(elementId)));
  };

  function createLivePusherContextImpl(callContext, viewId, elementId) {
      var callWithProxy = callContext.callAfterCompositeElementReady;
      var context = {
          id: elementId,
          viewId: viewId,
      };
      context.pause = sharedSendMessageAction.bind(null, "pause" /* ESharedContextRequestActionType.Pause */, context, callWithProxy, true);
      context.resume = sharedSendMessageAction.bind(null, "resume" /* ESharedContextRequestActionType.Resume */, context, callWithProxy, true);
      context.snapshot = sharedSendMessageAction.bind(null, "snapshot" /* ESharedContextRequestActionType.Snapshot */, context, callWithProxy, true);
      context.start = (insideFeatureRuntimeVersion >= /* a_livePusherContext_startWithUrl_2_7_4:10.2.28 */ 10002028)
          ? start.bind(null, context, callWithProxy)
          : sharedSendMessageAction.bind(null, "start" /* ESharedContextRequestActionType.Start */, context, callWithProxy, true);
      context.stop = sharedSendMessageAction.bind(null, "stop" /* ESharedContextRequestActionType.Stop */, context, callWithProxy, true);
      context.switchCamera = sharedSendMessageAction.bind(null, "switchCamera" /* ESharedContextRequestActionType.SwitchCamera */, context, callWithProxy, true);
      context.toggleTorch = sharedSendMessageAction.bind(null, "toggleTorch" /* ESharedContextRequestActionType.ToggleTorch */, context, callWithProxy, true);
      if ((insideFeatureRuntimeVersion >= /* a_livePusherContext_24_4:10.1.95 */ 10001095)) {
          context.enableCamera = sharedSendMessageAction.bind(null, "enableCamera" /* ESharedContextRequestActionType.EnableCamera */, context, callWithProxy, true);
          context.mute = sharedSendMessageAction.bind(null, "mute" /* ESharedContextRequestActionType.Mute */, context, callWithProxy, true);
          context.sendMessage = sharedSendMessageAction.bind(null, "sendMessage" /* ESharedContextRequestActionType.SendMessage */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_livepusherContext_inviteUser_2_6_4:10.2.3 */ 10002003)) {
          context.inviteUser = sharedSendMessageAction.bind(null, "inviteUser" /* ESharedContextRequestActionType.InviteUser */, context, callWithProxy, true);
      }
      return context;
  }
  function start(context, callWithProxy, option) {
      if (option && option.url) {
          // 含 url 参数时，调用 startWithUrl JSAPI
          return sharedSendMessageAction("startWithUrl" /* ESharedContextRequestActionType.StartWithUrl */, context, callWithProxy, true, option);
      }
      else {
          // 不含 url 参数时，调用 start JSAPI
          return sharedSendMessageAction("start" /* ESharedContextRequestActionType.Start */, context, callWithProxy, true);
      }
  }

  var createAPI4LivePusherContext = function (elementId) {
      reportIfCreateContextUsingAutoGeneratedId(this, elementId);
      return fillCompositeElementDynamicContextMethods(this, "live-pusher" /* EZElementStringTag.LivePusher */, createLivePusherContextImpl(this, this.assignedViewId, this.getRewriteIdWithAppxDomain(elementId)));
  };

  var kJSAPIAICameraContextAction = [
      "startRecord" /* ESharedContextRequestActionType.StartRecord */,
      "takePhoto" /* ESharedContextRequestActionType.TakePhoto */,
      "stopRecord" /* ESharedContextRequestActionType.StopRecord */,
      "startAudioRecognize" /* ESharedContextRequestActionType.StartAudioRecognize */,
      "stopAudioRecognize" /* ESharedContextRequestActionType.StopAudioRecognize */,
      "hasHeadset" /* ESharedContextRequestActionType.HasHeadset */,
      "startVideoRecognize" /* ESharedContextRequestActionType.StartVideoRecognize */,
      "stopVideoRecognize" ];
  function createAICameraContextImpl(callContext, viewId, appxDomain, elementId) {
      var callWithProxy = callContext.callAfterCompositeElementReady;
      var context = {
          id: elementId,
          viewId: viewId,
          nodeName: 'ai-camera',
      };
      for (var _i = 0, kJSAPIAICameraContextAction_1 = kJSAPIAICameraContextAction; _i < kJSAPIAICameraContextAction_1.length; _i++) {
          var action = kJSAPIAICameraContextAction_1[_i];
          context[action] = sharedSendMessageAction.bind(null, action, context, callWithProxy, true);
      }
      return context;
  }

  var createAPI4AICameraContext = function (elementId) {
      reportIfCreateContextUsingAutoGeneratedId(this, elementId);
      return fillCompositeElementDynamicContextMethods(this, "ai-camera" /* EZElementStringTag.AiCamera */, createAICameraContextImpl(this, this.assignedViewId, this.appxDomain, this.getRewriteIdWithAppxDomain(elementId)));
  };

  var kBridgeCallSendMessage = 'NBComponent.sendMessage';
  var NBCAMERA = 'nbcomponent.camera.';
  var CAMERASTOP = "".concat(NBCAMERA, "stop");
  var CAMERAERROR = "".concat(NBCAMERA, "error");
  var CAMERAFRAME = "".concat(NBCAMERA, "cameraFrame");
  var CAMERARECORDTIMEOUT = "".concat(NBCAMERA, "recordTimeout");
  var RECORDING_TIMEOUT =  3000 ;
  var CameraManager = /** @class */ /*#__PURE__*/ (function () {
      function CameraManager(callContext, getCameraContext) {
          this.needHandleMaxDuration = true; // 客户端98以上版本不再需求appx层处理最长录制时间
          this.callContext = callContext;
          this.getCameraContext = getCameraContext;
          this.needHandleMaxDuration = !(insideFeatureRuntimeVersion >= /* a_cameraContext_startRecord_maxDuration_2_6_2:10.1.98 */ 10001098);
          this.handleStopOrErrorCallback = this.handleStopOrErrorCallback.bind(this);
          this.handleRecordTimeout = this.handleRecordTimeout.bind(this);
          if (!this.needHandleMaxDuration) {
              this.callContext
                  .runtime()
                  .getBridge()
                  .event.addEventListener(CAMERARECORDTIMEOUT, 0 /* EBridgeEventCustomTypeContext.Raw */, this.handleRecordTimeout);
          }
      }
      CameraManager.prototype.startRecord = function (option, resolve) {
          var _this = this;
          if (this.recording) {
              resolve({
                  error: 7,
                  errorMessage: '已在录像中',
              });
              return;
          }
          this.recording = true;
          this.timeoutCallback = option.payload.timeoutCallback;
          if (this.needHandleMaxDuration) {
              var _a = this.callContext.runtime().getKernel(), clearT_1 = _a.clearTimeout, setT = _a.setTimeout;
              if (this.cameraRecordTimer) {
                  clearT_1(this.cameraRecordTimer);
              }
              this.cameraRecordTimer = setT(function () {
                  if (_this.cameraRecordTimer) {
                      clearT_1(_this.cameraRecordTimer);
                      _this.cameraRecordTimer = null;
                  }
                  var cameraContext = _this.getCameraContext();
                  cameraContext.stopRecord({
                      success: _this.timeoutCallback,
                  });
              }, RECORDING_TIMEOUT);
              if (!this.stopOrErrorListening) {
                  this.stopOrErrorListening = true;
                  var bridgeEvent = this.callContext.runtime().getBridge().event;
                  bridgeEvent.addEventListener(CAMERASTOP, 0 /* EBridgeEventCustomTypeContext.Raw */, this.handleStopOrErrorCallback);
                  bridgeEvent.addEventListener(CAMERAERROR, 0 /* EBridgeEventCustomTypeContext.Raw */, this.handleStopOrErrorCallback);
              }
          }
          this.callContext.callDefaultBridge(kBridgeCallSendMessage, {
              actionType: "startRecord" /* ESharedContextRequestActionType.StartRecord */,
              data: option.data,
              element: option.element,
              viewId: option.viewId,
          }, resolve, option.viewId);
      };
      CameraManager.prototype.stopRecord = function (option, resolve) {
          this.recording = false;
          if (this.needHandleMaxDuration) {
              this.callContext.runtime().getKernel().clearTimeout(this.cameraRecordTimer);
              var cameraContext = this.getCameraContext();
              this.handleStopOrErrorCallback({ data: { element: cameraContext.id, instanceId: cameraContext.viewId } });
          }
          else {
              // 减少内存泄露
              this.timeoutCallback = null;
          }
          this.callContext.callDefaultBridge(kBridgeCallSendMessage, {
              actionType: "stopRecord" /* ESharedContextRequestActionType.StopRecord */,
              data: option.data,
              element: option.element,
              viewId: option.viewId,
          }, resolve, option.viewId);
      };
      CameraManager.prototype.startListenCameraFrame = function (option, resolve) {
          var _this = this;
          if (!this.isFrameListening) {
              var cameraCallback_1 = option.payload.cameraFrameCallback;
              if (!cameraCallback_1 || 'function' !== typeof cameraCallback_1) {
                  resolve({
                      errMsg: 'callback is not a function',
                      error: 1,
                  });
                  return;
              }
              this.isFrameListening = true;
              var viewId = option.viewId;
              this.callContext.callDefaultBridge(kBridgeCallSendMessage, {
                  actionType: "frameListenerStart" /* ESharedContextRequestActionType.FrameListenerStart */,
                  element: option.element,
                  viewId: viewId,
              }, function (res) {
                  if (res && res.error) {
                      _this.isFrameListening = false;
                  }
                  else {
                      if (!_this.isFrameListening) {
                          resolve({
                              errMsg: 'listener has been stopped',
                              error: 1,
                          });
                          return;
                      }
                      var bridgeEvent = _this.callContext.runtime().getBridge().event;
                      _this.frameListener = function (event) {
                          var cameraContext = _this.getCameraContext();
                          if (event.data &&
                              cameraContext.viewId === event.data.instanceId &&
                              event.data.element === cameraContext.id) {
                              var _a = event.data, width = _a.width, height = _a.height, data = _a.data, timestamp = _a.timestamp;
                              cameraCallback_1({
                                  data: data,
                                  height: height,
                                  timestamp: timestamp,
                                  width: width,
                              });
                          }
                      };
                      bridgeEvent.addEventListener(CAMERAFRAME, 0 /* EBridgeEventCustomTypeContext.Raw */, _this.frameListener);
                  }
                  resolve(res);
              }, viewId);
          }
          else {
              resolve({
                  errMsg: 'listener is started',
                  error: 1,
              });
          }
      };
      CameraManager.prototype.stopListenCameraFrame = function (option, resolve) {
          var _this = this;
          this.isFrameListening = false;
          var viewId = option.viewId;
          this.callContext.callDefaultBridge(kBridgeCallSendMessage, {
              actionType: "frameListenerStop" /* ESharedContextRequestActionType.FrameListenerStop */,
              element: option.element,
              viewId: viewId,
          }, function (res) {
              if (res && !res.error) {
                  var bridgeEvent = _this.callContext.runtime().getBridge().event;
                  if (_this.frameListener) {
                      bridgeEvent.removeEventListener(CAMERAFRAME, 0 /* EBridgeEventCustomTypeContext.Raw */, _this.frameListener);
                  }
              }
              resolve(res);
          }, viewId);
      };
      CameraManager.prototype.handleStopOrErrorCallback = function (event) {
          if (this.stopOrErrorListening) {
              var cameraContext = this.getCameraContext();
              if (this.needHandleMaxDuration &&
                  event.data &&
                  cameraContext.viewId === event.data.instanceId &&
                  event.data.element === cameraContext.id &&
                  this.cameraRecordTimer) {
                  var clearT = this.callContext.runtime().getKernel().clearTimeout;
                  clearT(this.cameraRecordTimer);
                  this.cameraRecordTimer = null;
              }
              var bridgeEvent = this.callContext.runtime().getBridge().event;
              bridgeEvent.removeEventListener(CAMERASTOP, 0 /* EBridgeEventCustomTypeContext.Raw */, this.handleStopOrErrorCallback);
              bridgeEvent.removeEventListener(CAMERAERROR, 0 /* EBridgeEventCustomTypeContext.Raw */, this.handleStopOrErrorCallback);
              this.stopOrErrorListening = false;
              this.recording = false;
          }
      };
      CameraManager.prototype.handleRecordTimeout = function (event) {
          var cameraContext = this.getCameraContext();
          if (event.data &&
              cameraContext.viewId === event.data.instanceId &&
              event.data.element === cameraContext.id &&
              this.timeoutCallback) {
              var _a = event.data, duration = _a.duration, height = _a.height, size = _a.size, tempThumbPath = _a.tempThumbPath, tempVideoPath = _a.tempVideoPath, width = _a.width;
              this.timeoutCallback({
                  duration: duration,
                  height: height,
                  size: size,
                  tempThumbPath: tempThumbPath,
                  tempVideoPath: tempVideoPath,
                  width: width,
              });
              this.timeoutCallback = null;
          }
      };
      return CameraManager;
  }());

  function createCameraContextImpl(callContext, viewId, appxDomain, elementId, hasPermission) {
      var callWithProxy = callContext.callAfterCompositeElementReady;
      var context = {
          id: elementId,
          viewId: viewId,
          nodeName: 'camera',
      };
      var cameraManager = new CameraManager(callContext, function () { return context; });
      context.takePhoto = sharedSendMessageActionV2.bind(null, "takePhoto" /* ESharedContextRequestActionType.TakePhoto */, context, callWithProxy, true, {
          p: hasPermission,
          e: "CameraContext" /* MiniEntity.CameraContext */,
      });
      context.startRecord = startRecord$1.bind(null, cameraManager, context, callWithProxy, {
          p: hasPermission,
          e: "CameraContext" /* MiniEntity.CameraContext */,
      });
      context.stopRecord = stopRecord$1.bind(null, cameraManager, context, callWithProxy, {
          p: hasPermission,
          e: "CameraContext" /* MiniEntity.CameraContext */,
      });
      context.onCameraFrame = onCameraFrame.bind(null, cameraManager, context, callWithProxy, {
          p: hasPermission,
          e: "CameraFrameListener" /* MiniEntity.CameraFrameListener */,
      });
      if ((insideFeatureRuntimeVersion >= /* c_camera_setZoom_2_7_16:10.2.58 */ 10002058)) {
          context.setZoom = sharedSendMessageActionV2.bind(null, "setZoom" /* ESharedContextRequestActionType.SetZoom */, context, callWithProxy, true, {
              p: hasPermission,
              e: "CameraContext" /* MiniEntity.CameraContext */,
          });
      }
      return context;
  }
  function onCameraFrame(cameraManager, context, callWithProxy, permissionInfo, callback) {
      var cameraFrameObject = {
          start: function (options) {
              options = options || {};
              var success = options.success, fail = options.fail, complete = options.complete, data = __rest(options, ["success", "fail", "complete"]);
              if (permissionInfo && permissionInfo.p) {
                  callWithProxy("CameraContextPrivateFrameListenerStart" /* EBridgePrivateAPI4CompositeElement.CameraContextPrivateFrameListenerStart */, {
                      viewId: context.viewId,
                      element: context.id,
                      action: "frameListenerStart" /* ESharedContextRequestActionType.FrameListenerStart */,
                      success: success,
                      fail: fail,
                      complete: complete,
                      data: data,
                      payload: {
                          cameraFrameCallback: callback,
                          cameraManager: cameraManager,
                      },
                  });
              }
              else {
                  sharedMethodImplWhenNoPermission4CompositeContext(options, 'start', permissionInfo.e);
              }
          },
          stop: function (options) {
              options = options || {};
              var success = options.success, fail = options.fail, complete = options.complete, data = __rest(options, ["success", "fail", "complete"]);
              if (permissionInfo && permissionInfo.p) {
                  callWithProxy("CameraContextPrivateFrameListenerStop" /* EBridgePrivateAPI4CompositeElement.CameraContextPrivateFrameListenerStop */, {
                      viewId: context.viewId,
                      element: context.id,
                      action: "frameListenerStop" /* ESharedContextRequestActionType.FrameListenerStop */,
                      success: success,
                      fail: fail,
                      complete: complete,
                      data: data,
                      payload: {
                          cameraFrameCallback: callback,
                          cameraManager: cameraManager,
                      },
                  });
              }
              else {
                  sharedMethodImplWhenNoPermission4CompositeContext(options, 'stop', permissionInfo.e);
              }
          },
      };
      return cameraFrameObject;
  }
  function stopRecord$1(cameraManager, context, callWithProxy, permissionInfo, options) {
      options = options || {};
      var success = options.success, fail = options.fail, complete = options.complete, data = __rest(options, ["success", "fail", "complete"]);
      if (permissionInfo && permissionInfo.p) {
          callWithProxy("CameraContextPrivateStopRecord" /* EBridgePrivateAPI4CompositeElement.CameraContextPrivateStopRecord */, {
              viewId: context.viewId,
              element: context.id,
              action: "stopRecord" /* ESharedContextRequestActionType.StopRecord */,
              success: success,
              fail: fail,
              complete: complete,
              data: data,
              payload: {
                  cameraManager: cameraManager,
              },
          });
      }
      else {
          sharedMethodImplWhenNoPermission4CompositeContext(options, 'stopRecord', permissionInfo.e);
      }
  }
  function startRecord$1(cameraManager, context, callWithProxy, permissionInfo, options) {
      options = options || {};
      if (permissionInfo && permissionInfo.p) {
          var success = options.success, fail = options.fail, complete = options.complete, timeoutCallback = options.timeoutCallback, data = __rest(options, ["success", "fail", "complete", "timeoutCallback"]);
          if (data.maxDuration && data['max-duration'] === undefined) {
              data['max-duration'] = data.maxDuration;
          }
          callWithProxy("CameraContextPrivateStartRecord" /* EBridgePrivateAPI4CompositeElement.CameraContextPrivateStartRecord */, {
              viewId: context.viewId,
              element: context.id,
              action: "startRecord" /* ESharedContextRequestActionType.StartRecord */,
              success: success,
              fail: fail,
              complete: complete,
              data: data,
              payload: {
                  timeoutCallback: timeoutCallback,
                  cameraManager: cameraManager,
              },
          });
      }
      else {
          sharedMethodImplWhenNoPermission4CompositeContext(options, 'startRecord', permissionInfo.e);
      }
  }

  var createAPI4CameraContext = function (elementId) {
      reportIfCreateContextUsingAutoGeneratedId(this, elementId);
      var hasPermission = checkPermission4CompositeContext(this, "camera" /* EZElementStringTag.Camera */);
      return fillCompositeElementDynamicContextMethods(this, "camera" /* EZElementStringTag.Camera */, createCameraContextImpl(this, this.assignedViewId, this.appxDomain, this.getRewriteIdWithAppxDomain(elementId), hasPermission));
  };

  var kJSAPIARContextAction = [
      "getTrackMode" /* ESharedContextRequestActionType.GetTrackMode */,
      "setFaceTrackingNode" /* ESharedContextRequestActionType.SetFaceTrackingNode */,
      "getFaceTrackingStatus" /* ESharedContextRequestActionType.GetFaceTrackingStatus */,
      "startFaceTracking" /* ESharedContextRequestActionType.StartFaceTracking */,
      "stopFaceTracking" /* ESharedContextRequestActionType.StopFaceTracking */,
      "enableBeauty" /* ESharedContextRequestActionType.EnableBeauty */,
      "setBeautyLevel" /* ESharedContextRequestActionType.SetBeautyLevel */,
      "getNodePosition" /* ESharedContextRequestActionType.GetNodePosition */,
      "setNodePosition" /* ESharedContextRequestActionType.SetNodePosition */,
      "setNodeVisible" /* ESharedContextRequestActionType.SetNodeVisible */,
      "getFaceInfo" /* ESharedContextRequestActionType.GetFaceInfo */,
      "getSmileDetectingStatus" /* ESharedContextRequestActionType.GetSmileDetectingStatus */,
      "startSmileDetecting" /* ESharedContextRequestActionType.StartSmileDetecting */,
      "stopSmileDetecting" /* ESharedContextRequestActionType.StopSmileDetecting */,
      "getSmileDetectingScore" /* ESharedContextRequestActionType.GetSmileDetectingScore */,
      "getGestureDetectingStatus" /* ESharedContextRequestActionType.GetGestureDetectingStatus */,
      "startGestureDetecting" /* ESharedContextRequestActionType.StartGestureDetecting */,
      "stopGestureDetecting" /* ESharedContextRequestActionType.StopGestureDetecting */,
      "getGestureDetectingResult" /* ESharedContextRequestActionType.GetGestureDetectingResult */,
      "getGestureDetectingScore" /* ESharedContextRequestActionType.GetGestureDetectingScore */,
      "getPoseDetectingStatus" /* ESharedContextRequestActionType.GetPoseDetectingStatus */,
      "startPoseDetecting" /* ESharedContextRequestActionType.StartPoseDetecting */,
      "stopPoseDetecting" /* ESharedContextRequestActionType.StopPoseDetecting */,
      "getPoseDetectingScore" /* ESharedContextRequestActionType.GetPoseDetectingScore */,
      "resetScene" /* ESharedContextRequestActionType.ResetScene */,
      "rotateScene" /* ESharedContextRequestActionType.RotateScene */,
      "translateScene" /* ESharedContextRequestActionType.TranslateScene */,
      "scaleScene" /* ESharedContextRequestActionType.ScaleScene */,
      "getNodeRotation" /* ESharedContextRequestActionType.GetNodeRotation */,
      "getNodeScale" /* ESharedContextRequestActionType.GetNodeScale */,
      "rotateNode" /* ESharedContextRequestActionType.RotateNode */,
      "scaleNode" /* ESharedContextRequestActionType.ScaleNode */,
      "translateNode" /* ESharedContextRequestActionType.TranslateNode */,
      "transformCoordinate" /* ESharedContextRequestActionType.TransformCoordinate */,
      "hitTest" /* ESharedContextRequestActionType.HitTest */,
      "isNodeVisible" /* ESharedContextRequestActionType.IsNodeVisible */,
      "setNodeBillboard" /* ESharedContextRequestActionType.SetNodeBillboard */,
      "setNodeStatic" /* ESharedContextRequestActionType.SetNodeStatic */,
      "setNodeTexture" /* ESharedContextRequestActionType.SetNodeTexture */,
      "removeTextureCache" /* ESharedContextRequestActionType.RemoveTextureCache */,
      "modulateAlpha" /* ESharedContextRequestActionType.ModulateAlpha */,
      "modulateColor" /* ESharedContextRequestActionType.ModulateColor */,
      "startEnvironmentTexturing" /* ESharedContextRequestActionType.StartEnvironmentTexturing */,
      "stopEnvironmentTexturing" /* ESharedContextRequestActionType.StopEnvironmentTexturing */,
      "playAnimation" /* ESharedContextRequestActionType.PlayAnimation */,
      "pauseAnimation" /* ESharedContextRequestActionType.PauseAnimation */,
      "stopAnimation" /* ESharedContextRequestActionType.StopAnimation */,
      "createAnimation" /* ESharedContextRequestActionType.CreateAnimation */,
      "createAnimationClip" /* ESharedContextRequestActionType.CreateAnimationClip */,
      "setAnimationAdditiveBlending" /* ESharedContextRequestActionType.SetAnimationAdditiveBlending */,
      "clearAnimationAdditiveBlending" /* ESharedContextRequestActionType.ClearAnimationAdditiveBlending */,
      "crossFadeAnimation" /* ESharedContextRequestActionType.CrossFadeAnimation */,
      "loadAnimation" /* ESharedContextRequestActionType.LoadAnimation */,
      "setLightAmbientColor" /* ESharedContextRequestActionType.SetLightAmbientColor */,
      "setLightColor" /* ESharedContextRequestActionType.SetLightColor */,
      "setLightRange" /* ESharedContextRequestActionType.SetLightRange */,
      "setLightInnerAngle" /* ESharedContextRequestActionType.SetLightInnerAngle */,
      "setLightOuterAngle" /* ESharedContextRequestActionType.SetLightOuterAngle */,
      "emitParticle" /* ESharedContextRequestActionType.EmitParticle */,
      "enableGuidePlane" /* ESharedContextRequestActionType.EnableGuidePlane */,
      "setGuidePlaneLineColor" /* ESharedContextRequestActionType.SetGuidePlaneLineColor */,
      "setGuidePlanePlaneColor" /* ESharedContextRequestActionType.SetGuidePlanePlaneColor */,
      "setGuidePlaneScale" /* ESharedContextRequestActionType.SetGuidePlaneScale */,
      "bindGuidePlaneNodeId" /* ESharedContextRequestActionType.BindGuidePlaneNodeId */,
      "getCameraPosition" /* ESharedContextRequestActionType.GetCameraPosition */,
      "switchCameraPosition" /* ESharedContextRequestActionType.SwitchCameraPosition */,
      "setVideo" /* ESharedContextRequestActionType.SetVideo */,
      "playVideo" /* ESharedContextRequestActionType.PlayVideo */,
      "pauseVideo" /* ESharedContextRequestActionType.PauseVideo */,
      "stopVideo" /* ESharedContextRequestActionType.StopVideo */,
      "setAudio" /* ESharedContextRequestActionType.SetAudio */,
      "playAudio" /* ESharedContextRequestActionType.PlayAudio */,
      "stopAudio" /* ESharedContextRequestActionType.StopAudio */,
      "stopAllAudio" /* ESharedContextRequestActionType.StopAllAudio */,
      "startRecording" /* ESharedContextRequestActionType.StartRecording */,
      "stopRecording" /* ESharedContextRequestActionType.StopRecording */,
      "snapshot" /* ESharedContextRequestActionType.Snapshot */,
      "getImageDetectingStatus" /* ESharedContextRequestActionType.GetImageDetectingStatus */,
      "startImageDetecting" /* ESharedContextRequestActionType.StartImageDetecting */,
      "stopImageDetecting" ];
  function createARContextImpl(callContext, viewId, elementId) {
      var callWithProxy = callContext.callAfterCompositeElementReady;
      var context = {
          id: elementId,
          viewId: viewId,
      };
      for (var _i = 0, kJSAPIARContextAction_1 = kJSAPIARContextAction; _i < kJSAPIARContextAction_1.length; _i++) {
          var action = kJSAPIARContextAction_1[_i];
          context[action] = sharedSendMessageAction.bind(null, action, context, callWithProxy, true);
      }
      return context;
  }

  var createAPI4ARContext = function (elementId) {
      reportIfCreateContextUsingAutoGeneratedId(this, elementId);
      return fillCompositeElementDynamicContextMethods(this, "ar" /* EZElementStringTag.Ar */, createARContextImpl(this, this.assignedViewId, this.getRewriteIdWithAppxDomain(elementId)));
  };

  var kJSAPIRtcRoomContextAction = [
      "start" /* ESharedContextRequestActionType.Start */,
      "stop" /* ESharedContextRequestActionType.Stop */,
      "mute" /* ESharedContextRequestActionType.Mute */,
      "switchCamera" /* ESharedContextRequestActionType.SwitchCamera */,
      "enableCamera" /* ESharedContextRequestActionType.EnableCamera */,
      "audioMode" /* ESharedContextRequestActionType.AudioMode */,
      "showDebugInfo" ];
  function createRtcRoomContextImpl(callContext, viewId, elementId, appId) {
      var callWithProxy = callContext.callAfterCompositeElementReady;
      var context = {
          id: elementId,
          viewId: viewId,
      };
      for (var _i = 0, kJSAPIRtcRoomContextAction_1 = kJSAPIRtcRoomContextAction; _i < kJSAPIRtcRoomContextAction_1.length; _i++) {
          var action = kJSAPIRtcRoomContextAction_1[_i];
          context[action] = sharedSendMessageAction.bind(null, action, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* c_rtcRoom_screenCapture_2_6_2:10.2.0 */ 10002000)) {
          context.startScreenCapture = sharedSendMessageAction.bind(null, "startScreenCapture" /* ESharedContextRequestActionType.StartScreenCapture */, context, callWithProxy, true);
          context.stopScreenCapture = sharedSendMessageAction.bind(null, "stopScreenCapture" /* ESharedContextRequestActionType.StopScreenCapture */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_rtc_room_context_showPreView_24_1:10.1.92 */ 10001092)) {
          context.showPreView = sharedSendMessageAction.bind(null, "showPreView" /* ESharedContextRequestActionType.ShowPreView */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* c_rtc_room_context_inviteUser_24_0:10.1.90 */ 10001090)) {
          context.inviteUser = sharedSendMessageAction.bind(null, "inviteUser" /* ESharedContextRequestActionType.InviteUser */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_rtc_room_context_snapshot_23_7:10.1.88 */ 10001088)) {
          context.snapshot = sharedSendMessageAction.bind(null, "snapshot" /* ESharedContextRequestActionType.Snapshot */, context, callWithProxy, true);
          context.sendMessage = sharedSendMessageAction.bind(null, "sendMessage" /* ESharedContextRequestActionType.SendMessage */, context, callWithProxy, true);
      }
      if ((insideFeatureRuntimeVersion >= /* a_rtc_room_context_showFloatingWindow_2_7_4:10.2.26 */ 10002026)) {
          context.showFloatingWindow = sharedSendMessageAction.bind(null, "showFloatingWindow" /* ESharedContextRequestActionType.ShowFloatingWindow */, context, callWithProxy, true);
          context.setFloatingWindow = setFloatingWindow.bind(null, context, callWithProxy, appId);
      }
      if ((insideFeatureRuntimeVersion >= /* a_rtc_room_context_setDegradationPreference_2_8_0:10.2.90 */ 10002090)) {
          context.setDegradationPreference = sharedSendMessageAction.bind(null, "setDegradationPreference" /* ESharedContextRequestActionType.SetDegradationPreference */, context, callWithProxy, true);
      }
      return context;
  }
  function setFloatingWindow(context, callWithProxy, appId, option) {
      var _a;
      var param = option;
      if (option) {
          var pageToReturn = void 0;
          (_a = option, pageToReturn = _a.pageToReturn, param = __rest(_a, ["pageToReturn"]));
          param.schema = "alipays://platformapi/startapp?appId=".concat(appId, "&page=").concat(encodeURIComponent(pageToReturn || ''));
      }
      return sharedSendMessageAction("setFloatingWindow" /* ESharedContextRequestActionType.SetFloatingWindow */, context, callWithProxy, true, param);
  }

  var createAPI4RtcRoomContext = function (elementId) {
      reportIfCreateContextUsingAutoGeneratedId(this, elementId);
      return fillCompositeElementDynamicContextMethods(this, "rtc-room" /* EZElementStringTag.RtcRoom */, createRtcRoomContextImpl(this, this.assignedViewId, this.getRewriteIdWithAppxDomain(elementId), this.getEnvAppId()));
  };

  var kBridgeCallSendMessage$1 = 'NBComponent.sendMessage';

  var kBridgeCallRender = 'NBComponent.render';
  function getTaskIdFromMapEvent(event) {
      if (event.data && event.data.element && event.data.translateMarkerId != null) {
          return [getTaskId4TranslateMarker(event.data.instanceId, event.data.element, event.data.translateMarkerId)];
      }
  }
  function getPayloadFromMapEvent() {
      return {};
  }
  function getTaskId4TranslateMarker(viewId, elementId, translateMarkerId) {
      return "".concat(viewId, "_").concat(elementId, "_").concat(translateMarkerId);
  }
  var MapContextPrivateTranslateMarker = {
      private: true,
      b: function (option) {
          var data = option.data;
          if (data) {
              // 处理 animationEnd 绑定
              var animationEnd_1 = data.animationEnd;
              data.animationEnd = undefined;
              if (animationEnd_1 && typeof animationEnd_1 === 'function') {
                  var taskManager_1 = this.runtime().getBridge().event.taskManager;
                  var taskId_1 = getTaskId4TranslateMarker(option.viewId, option.element, data.translateMarkerId);
                  taskManager_1.addMatcher('nbcomponent.map.animationEnd', taskId_1, function () {
                      taskManager_1.removeMatcher('nbcomponent.map.animationEnd', taskId_1);
                      animationEnd_1();
                  }, getTaskIdFromMapEvent, getPayloadFromMapEvent, true);
              }
          }
      },
      d: function (option, resolve) {
          var viewId = option.viewId;
          this.callScopedBridge(kBridgeCallSendMessage$1, {
              actionType: "translateMarker" /* ESharedContextRequestActionType.TranslateMarker */,
              data: option.data,
              element: option.element,
              viewId: viewId,
          }, resolve, viewId);
      },
  };
  var MapContextPrivateSetProps = {
      private: true,
      d: function (option, resolve) {
          var viewId = option.viewId;
          this.callScopedBridge(kBridgeCallRender, {
              data: __assign(__assign({}, option.data), { timestamp: Date.now() }),
              element: option.element,
              viewId: viewId,
          }, resolve, viewId);
      },
  };

  var ContextPrivateSendMessageAction = {
      private: true,
      d: function (option, resolve) {
          this.callScopedBridge(kBridgeCallSendMessage$1, {
              actionType: option.action,
              data: option.data || {},
              element: option.element,
              viewId: option.viewId,
          }, resolve);
      },
  };

  var VideoContextPrivatePause = {
      private: true,
      d: function (option, resolve) {
          var element = option.element, viewId = option.viewId;
          var page = this.getPageInstance();
          if (page) {
              page.invokeClientElementMethod(element, 'pause', []);
              if (page.getEngineType() === 1 /* ESharedAppxPageEngineType.WebEngine */) {
                  this.callScopedBridge(kBridgeCallSendMessage$1, {
                      actionType: "pause" /* ESharedContextRequestActionType.Pause */,
                      data: {},
                      element: element,
                      viewId: viewId,
                  }, resolve);
              }
          }
      },
  };
  var VideoContextPrivateSeek = {
      private: true,
      d: function (option, resolve) {
          var element = option.element, viewId = option.viewId, data = option.data;
          var page = this.getPageInstance();
          if (page) {
              page.invokeClientElementMethod(element, 'seek', [data.time]);
              if (page.getEngineType() === 1 /* ESharedAppxPageEngineType.WebEngine */) {
                  this.callScopedBridge(kBridgeCallSendMessage$1, {
                      actionType: "seek" /* ESharedContextRequestActionType.Seek */,
                      data: data || {},
                      element: element,
                      viewId: viewId,
                  }, resolve);
              }
          }
      },
  };
  var VideoContextPrivatePlay = {
      private: true,
      d: function (option, resolve) {
          var page = this.getPageInstance();
          if (page) {
              var isWeb = page.getEngineType() === 1 /* ESharedAppxPageEngineType.WebEngine */;
              var paramList = isWeb ? [{ zComposite: 'video' }] : [];
              page.invokeClientElementMethod(option.element, 'play', paramList, resolve);
          }
      },
  };
  var VideoContextPrivateStop = {
      private: true,
      d: function (option, resolve) {
          var page = this.getPageInstance();
          if (page) {
              page.invokeClientElementMethod(option.element, 'stop', [], resolve);
          }
      },
  };

  var CameraContextPrivateStartRecord = {
      private: true,
      d: function (option, resolve) {
          option.payload.cameraManager.startRecord(option, resolve);
      },
  };
  var CameraContextPrivateStopRecord = {
      private: true,
      d: function (option, resolve) {
          option.payload.cameraManager.stopRecord(option, resolve);
      },
  };
  var CameraContextPrivateFrameListenerStart = {
      private: true,
      d: function (option, resolve) {
          option.payload.cameraManager.startListenCameraFrame(option, resolve);
      },
  };
  var CameraContextPrivateFrameListenerStop = {
      private: true,
      d: function (option, resolve) {
          option.payload.cameraManager.stopListenCameraFrame(option, resolve);
      },
  };

  var createVideoContext = {
      create: createApi4VideoContext,
      createOptionIndex: 1,
      linked: {
          ContextPrivateSendMessageAction: ContextPrivateSendMessageAction,
          VideoContextPrivatePause: VideoContextPrivatePause,
          VideoContextPrivatePlay: VideoContextPrivatePlay,
          VideoContextPrivateSeek: VideoContextPrivateSeek,
          VideoContextPrivateStop: VideoContextPrivateStop,
      },
  };
  var createLottieContext = {
      create: createAPI4LottieContext,
      createOptionIndex: 1,
      linked: {
          ContextPrivateSendMessageAction: ContextPrivateSendMessageAction,
      },
  };
  var createMapContext = {
      create: createAPI4MapContext,
      createOptionIndex: 1,
      linked: {
          ContextPrivateSendMessageAction: ContextPrivateSendMessageAction,
          MapContextPrivateSetProps: MapContextPrivateSetProps,
          MapContextPrivateTranslateMarker: MapContextPrivateTranslateMarker,
      },
  };
  var createWebViewContext = {
      create: createApi4WebViewContext,
      createOptionIndex: 1,
      linked: {
          ContextPrivateSendMessageAction: ContextPrivateSendMessageAction,
      },
  };
  var createLivePlayerContext = {
      create: createAPI4LivePlayerContext,
      createOptionIndex: 1,
      linked: {
          ContextPrivateSendMessageAction: ContextPrivateSendMessageAction,
      },
  };
  var createLivePusherContext = {
      create: createAPI4LivePusherContext,
      createOptionIndex: 1,
      linked: {
          ContextPrivateSendMessageAction: ContextPrivateSendMessageAction,
      },
  };
  var createCameraContext = {
      create: createAPI4CameraContext,
      createOptionIndex: 1,
      linked: {
          CameraContextPrivateFrameListenerStart: CameraContextPrivateFrameListenerStart,
          CameraContextPrivateFrameListenerStop: CameraContextPrivateFrameListenerStop,
          CameraContextPrivateStartRecord: CameraContextPrivateStartRecord,
          CameraContextPrivateStopRecord: CameraContextPrivateStopRecord,
          ContextPrivateSendMessageAction: ContextPrivateSendMessageAction,
      },
  };
  var createAICameraContext = {
      create: createAPI4AICameraContext,
      createOptionIndex: 1,
      linked: {
          ContextPrivateSendMessageAction: ContextPrivateSendMessageAction,
      },
  };
  var createARContext = {
      create: createAPI4ARContext,
      createOptionIndex: 1,
      linked: {
          ContextPrivateSendMessageAction: ContextPrivateSendMessageAction,
      },
  };
  var createRtcRoomContext = {
      create: createAPI4RtcRoomContext,
      createOptionIndex: 1,
      linked: {
          ContextPrivateSendMessageAction: ContextPrivateSendMessageAction,
      },
  };

  var CompositePublicAPI = {
      __proto__: null,
      createVideoContext: createVideoContext,
      createLottieContext: createLottieContext,
      createMapContext: createMapContext,
      createWebViewContext: createWebViewContext,
      createLivePlayerContext: createLivePlayerContext,
      createLivePusherContext: createLivePusherContext,
      createCameraContext: createCameraContext,
      createAICameraContext: createAICameraContext,
      createARContext: createARContext,
      createRtcRoomContext: createRtcRoomContext
  };

  function getBridgeApi4MyCompositeElementPublic() {
      return {
          keys: Object.keys(CompositePublicAPI),
          linked: true,
          values: CompositePublicAPI,
      };
  }

  var saveSnapshot = {
      fnOptionIndex: false,
      fn: function () {
          var page = this.runtime().getNav().getTopInstance();
          if (page && page.hasPageLoaded()) {
              page.invokeRenderMethod("saveSnapshot" /* ESharedAppxPageRenderMethod.SaveSnapshot */, []);
          }
      },
  };
  var enableSnapshot = {
      d: function (opt, resolve) {
          var page = this.getPageInstance();
          if (page) {
              page.enableSnapshot(opt, function (errorMessage, res) {
                  resolve(errorMessage ? { errorMessage: errorMessage } : res);
              });
          }
      },
  };
  var reportSnapshot = {
      fnOptionIndex: 0,
      fn: function (opt) {
          var page = this.getPageInstance();
          if (page) {
              page.reportSnapshot(opt);
          }
      },
  };

  function getBridgeAPI4Snapshot() {
      return {
          keys: ['enableSnapshot', 'reportSnapshot', 'saveSnapshot'],
          sync: false,
          values: {
              enableSnapshot: enableSnapshot,
              reportSnapshot: reportSnapshot,
              saveSnapshot: saveSnapshot,
          },
      };
  }

  var getSelectedTextRange = {
      d: function (finalOption, resolve) {
          var runtime = this.runtime();
          var bridge = runtime.getBridge();
          this.callDefaultBridge('getSelectedTextRange', {}, function (res) {
              // res: {cursor} / { selectionStart, selectionEnd } / {}
              if (res && (res.cursor !== undefined || res.start !== undefined || 'error' in res)) {
                  resolve(res);
              }
              else {
                  // 尝试从纯web的input/textarea获取
                  var page = runtime.getNav().getTopInstance();
                  if (page) {
                      page.invokeRenderMethod("getSelectedTextRange" /* ESharedAppxPageRenderMethod.GetSelectedTextRange */, [null], function (err, resFromRender) {
                          resolve(resFromRender);
                      });
                  }
                  else {
                      resolve({
                          error: 1,
                          errorMessage: 'page is not existed when execute getSelectedTextRange',
                      });
                  }
              }
          });
      },
  };

  function getBridgeAPI4SelectedTextRange() {
      return {
          keys: ['getSelectedTextRange'],
          sync: false,
          values: {
              getSelectedTextRange: getSelectedTextRange,
          },
      };
  }

  var RDSContext = /** @class */ /*#__PURE__*/ (function () {
      function RDSContext(appId) {
          this.enabled = false;
          this.appId = appId;
      }
      RDSContext.prototype.enableDetect = function (getPageInstance, opt) {
          var _this = this;
          opt = opt || { enabled: false };
          var userEnabled = opt.enabled;
          var callback = extractBridgeCallback(opt.success, opt.fail, opt.complete, true);
          if (!this.enabled) {
              if (userEnabled) {
                  var pageInstance = getPageInstance();
                  pageInstance.invokeRenderMethod("enableRDSDetect" /* ESharedAppxPageRenderMethod.EnableRDSDetect */, [
                      {
                          appId: this.appId,
                          enabled: userEnabled,
                      } ], function (error, res) {
                      if (res.enabled === true) {
                          _this.enabled = true;
                      }
                      if (callback) {
                          callback(res);
                      }
                  });
              }
              else {
                  // 继续不开启
                  if (callback) {
                      callback({
                          enabled: false,
                      });
                  }
              }
          }
          else {
              // 已经开启，强制开启
              if (callback) {
                  callback({
                      enabled: true,
                  });
              }
          }
      };
      RDSContext.prototype.getRDSData = function (getPageInstance, opt) {
          opt = opt || {};
          var callback = extractBridgeCallback(opt.success, opt.fail, opt.complete, true);
          if (this.enabled) {
              var pageInstance = getPageInstance();
              if (pageInstance) {
                  pageInstance.invokeRenderMethod("getRDSData" /* ESharedAppxPageRenderMethod.GetRDSData */, [null], function (err, res) {
                      if (callback) {
                          callback(res);
                      }
                  });
              }
              else {
                  if (callback) {
                      callback({
                          error: 3,
                          errorMessage: '页面未找到',
                      });
                  }
              }
          }
          else {
              if (callback) {
                  callback({
                      error: 2,
                      errorMessage: 'rds检测未启用',
                  });
              }
          }
      };
      return RDSContext;
  }());
  var createRDSContext = {
      fnOptionIndex: 0,
      fn: function (opt) {
          var appId = (opt && opt.appId) || '';
          var context = new RDSContext(appId);
          var getPageInstance = this.getPageInstance.bind(this);
          return {
              enableDetect: context.enableDetect.bind(context, getPageInstance),
              getRDSData: context.getRDSData.bind(context, getPageInstance),
          };
      },
  };

  function getBridgeAPI4RDS() {
      if ((/* f_createRDSContext_2_6_7:true */ true)) {
          return [
              {
                  keys: ['createRDSContext'],
                  values: {
                      createRDSContext: createRDSContext,
                  },
              } ];
      }
      else {
          return [];
      }
  }

  var intersectionObserverId = 0;
  function getIntersectionObserverContextCallback(runtime, observerId) {
      var callbackList = runtime.getBridge().extraInfo["intersectionObserverCallback" /* EBridgeExtraInfoKey.intersectionObserverCallback */];
      if (callbackList) {
          return callbackList.get(observerId);
      }
  }
  function setIntersectionObserverContextCallback(runtime, observerId, callback) {
      var extraInfo = runtime.getBridge().extraInfo;
      var callbackList = extraInfo["intersectionObserverCallback" /* EBridgeExtraInfoKey.intersectionObserverCallback */];
      if (callback) {
          callbackList =
              callbackList ||
                  (extraInfo["intersectionObserverCallback" /* EBridgeExtraInfoKey.intersectionObserverCallback */] = createMap());
          callbackList.set(observerId, callback);
      }
      else if (callbackList) {
          callbackList.delete(observerId);
      }
  }
  function normalizeMargin(margins) {
      if (margins) {
          return [
              Number(margins.top) || 0,
              Number(margins.right) || 0,
              Number(margins.bottom) || 0,
              Number(margins.left) || 0 ];
      }
      return [0, 0, 0, 0];
  }
  function validateAndWarnLooseSelector$1(runtime, selector) {
      if (isConsoleAvaliableToDeveloper(runtime.getEnv().packageAndRunSceneType) && (selector + '').indexOf('>>>') > -1) {
          // tslint:disable-next-line no-console
          console.error('my.createIntersectionObserver() 不支持 >>> 选择器，请使用 this.createIntersectionObserver()');
      }
  }
  var IntersectionObserverContext = /** @class */ /*#__PURE__*/ (function () {
      function IntersectionObserverContext(option, extensionId) {
          this.relativeInfo = [];
          this.id = intersectionObserverId++;
          this.disconnected = false;
          this.extensionId = extensionId;
          this.option = {
              // Appx 的一个 feature:
              // 用户强制设定 initialRatio 为 undefined 的话
              // 可以立即触发 observe 回调
              dataset: !!(option && option.dataset),
              initialRatio: option && 'initialRatio' in option ? option.initialRatio : 0,
              selectAll: !!(option && option.selectAll),
              strict: !!(option && option.strict),
              thresholds: option && Array.isArray(option.thresholds) ? option.thresholds : [0],
          };
      }
      IntersectionObserverContext.prototype.in = function (chain, callContext, component) {
          if (this.option.strict) {
              // 严格模式，要求传入同页面的其他自定义组件或者页面本身
              // 所以此模式下也不会去改 this.viewId
              var pageInstance = callContext.getPageInstance();
              // 传入本页面的自定义组件
              if (pageInstance ===
                  getFlexiblePageInstanceByComponentPublicInstance(callContext.runtime, component)) {
                  this.componentId = component.$id;
                  this.viewId = pageInstance.pageId;
              }
              // 指向页面本身
              // 插件拿到的 publicInstance 是伪的
              // 故默认地插件自定义组件不能改指向宿主页面
              else if (component === pageInstance.getPageLogicInstance().publicInstance) {
                  this.componentId = null;
                  this.viewId = pageInstance.pageId;
              }
              // 其他情况告警
              else if (isConsoleAvaliableToDeveloper(callContext.runtime().getEnv().packageAndRunSceneType)) {
                  // tslint:disable-next-line no-console
                  console.error('this.createIntersectionObserver().in() 仅支持当前所在页面的自身或自定义组件');
              }
          }
          else if (component) {
              this.componentId = component.$id;
              this.viewId = component.$page && component.$page.$viewId;
          }
          return chain;
      };
      IntersectionObserverContext.prototype.relativeToViewport = function (chain, margins) {
          this.relativeInfo.push([null, normalizeMargin(margins)]);
          return chain;
      };
      IntersectionObserverContext.prototype.relativeTo = function (chain, runtime, selector, margins) {
          if (!this.option.strict) {
              validateAndWarnLooseSelector$1(runtime, selector);
              selector = transformBridgeSelector(this.extensionId, selector);
          }
          this.relativeInfo.push([selector, normalizeMargin(margins)]);
          return chain;
      };
      IntersectionObserverContext.prototype.observe = function (callContext, targetSelector, callback) {
          var _a = this, viewId = _a.viewId, option = _a.option;
          if (this.disconnected || (option.strict && !viewId)) {
              return;
          }
          var runtime = callContext.runtime();
          var pageInstance;
          if (viewId) {
              pageInstance = runtime.getPageManager().getInstanceById(viewId);
          }
          // 严格模式下，this 绑定到具体的页面
          // 不允许指向其他页面
          if (!pageInstance && !option.strict) {
              pageInstance = callContext.getPageInstance();
          }
          if (pageInstance && typeof callback === 'function') {
              var _b = this, observerId = _b.id, componentId = _b.componentId;
              if (!option.strict) {
                  validateAndWarnLooseSelector$1(runtime, targetSelector);
                  targetSelector = transformBridgeSelector(this.extensionId, targetSelector);
              }
              setIntersectionObserverContextCallback(runtime, observerId, callback);
              pageInstance.invokeRenderMethod("addIntersectionObserver" /* ESharedAppxPageRenderMethod.AddIntersectionObserver */, [[observerId, option, this.relativeInfo, targetSelector, componentId]], null);
          }
      };
      IntersectionObserverContext.prototype.disconnect = function (runtime, getPageInstance) {
          if (this.disconnected) {
              return;
          }
          var _a = this, viewId = _a.viewId, observerId = _a.id;
          var pageInstance = (viewId && runtime.getPageManager().getInstanceById(viewId)) || getPageInstance();
          if (pageInstance) {
              pageInstance.invokeRenderMethod("removeIntersectionObserver" /* ESharedAppxPageRenderMethod.RemoveIntersectionObserver */, [
                  observerId ]);
          }
          setIntersectionObserverContextCallback(runtime, observerId);
          this.disconnected = true;
      };
      return IntersectionObserverContext;
  }());

  var fireIntersectionObserver = {
      fnOptionIndex: false,
      fn: function (_a) {
          var intersectionId = _a[0], response = _a[1], userDefinedId = _a[2];
          var runtime = this.runtime();
          var callback = getIntersectionObserverContextCallback(runtime, intersectionId);
          if (callback) {
              if (userDefinedId != null) {
                  var actualId_1 = response.id;
                  if (actualId_1 && actualId_1 !== userDefinedId) {
                      var _b = runtime.getBehaviorManager().get("fixEventTargetId" /* ESharedAppxSwitchManagerName.FixEventTargetId */), report_1 = _b.report, standard_1 = _b.standard;
                      if (report_1) {
                          Object.defineProperty(response, 'id', {
                              configurable: true,
                              enumerable: true,
                              get: function () {
                                  report_1('event target id', {
                                      a: actualId_1,
                                      e: userDefinedId,
                                      o: 'i',
                                  });
                                  return standard_1 ? userDefinedId : actualId_1;
                              },
                              set: function (v) {
                                  Object.defineProperty(this, 'id', {
                                      configurable: true,
                                      enumerable: true,
                                      value: v,
                                      writable: true,
                                  });
                              },
                          });
                      }
                      else if (standard_1) {
                          response.id = userDefinedId;
                      }
                  }
              }
              callback(response);
          }
      },
  };
  var createIntersectionObserver = {
      fnOptionIndex: 0,
      fn: function (options) {
          var appxDomain = this.appxDomain;
          var observer = new IntersectionObserverContext(options, isAppxDomain4Extension(appxDomain) ? appxDomain.value : undefined);
          var runtime = this.runtime();
          var getPageInstance = this.getPageInstance.bind(this);
          var context = {
              disconnect: observer.disconnect.bind(observer, runtime, getPageInstance),
              in: null,
              observe: observer.observe.bind(observer, this),
              relativeTo: null,
              relativeToViewport: null,
          };
          context.relativeTo = observer.relativeTo.bind(observer, context, runtime);
          context.relativeToViewport = observer.relativeToViewport.bind(observer, context);
          context.in = observer.in.bind(observer, context, this);
          return context;
      },
  };

  function getBridgeAPI4IntersectionObserver() {
      return {
          keys: ['createIntersectionObserver', '_fireIntersectionObserver'],
          values: {
              _fireIntersectionObserver: fireIntersectionObserver,
              createIntersectionObserver: createIntersectionObserver,
          },
      };
  }

  function setupZephyrRuntimeFeature(runtime, zruntime, zephyrFlag, clientInfo) {
      setupZephyrRuntimeFeatureSwitch(runtime.getSwitchManager(), runtime.getEnv().isPortalWorkerScene, zruntime, zephyrFlag);
      zruntime.setInsideRuntime(clientInfo.clientName, clientInfo.clientVersionSequence, clientInfo.platform, hasInsideFeatureRuntimeImplemention);
  }

  var noop$7 = function () { };
  var pureHelper$1 = /*#__PURE__*/ getHelper$1();
  var helper$2 = pureHelper$1;
  function getHelper$1() {
      var _a;
      setZRuntimeLinkedInstance4ContextImpl(ContextConstructor4HostSide);
      setImplHelperHydrateBlockAnchorTryMatchReverseIndex(helperHydrateBlockAnchorTryMatchReverseIndex4HostWeb);
      setImplHelperHydrateBlockAnchor(helperHydrateBlockAnchor4HostWeb);
      setImplHelperHydrateBlockAnchor4CommentTagMatch(helperHydrateBlockAnchor4CommentTagMatch4HostWeb);
      return _a = {},
          _a["ip" /* ECompilerRuntimeHelperSymbol.InitSlotProvider */] = helperInitSlotProvider,
          _a["iP" /* ECompilerRuntimeHelperSymbol.InitDynamicSlotProvider */] = helperInitDynamicSlotProvider,
          _a["cs" /* ECompilerRuntimeHelperSymbol.CreateSlotContent */] = helperCreateSlotContent,
          _a["us" /* ECompilerRuntimeHelperSymbol.UpdateSlotContent */] = helperUpdateSlotContent,
          _a["uS" /* ECompilerRuntimeHelperSymbol.UpdateSlotProvider */] = helperUpdateSlotProvider,
          _a["dS" /* ECompilerRuntimeHelperSymbol.DestroySlotProvider */] = helperDestroySlotProvider,
          _a["l" /* ECompilerRuntimeHelperSymbol.InitializeComponent */] = helperInitializeComponent,
          _a["c" /* ECompilerRuntimeHelperSymbol.CreateComponent */] = helperCreateComponent,
          _a["p" /* ECompilerRuntimeHelperSymbol.ComponentSetProps */] = helperComponentSetProps,
          _a["s" /* ECompilerRuntimeHelperSymbol.ComponentReceiveOnlySlot */] = helperComponentReceiveOnlySlot,
          _a["o" /* ECompilerRuntimeHelperSymbol.DestroyComponent */] = helperDestroyComponent4Host,
          _a["m" /* ECompilerRuntimeHelperSymbol.MountComponent */] = helperMountComponent4Host,
          _a["e" /* ECompilerRuntimeHelperSymbol.CreateElement */] = noop$7,
          _a["i" /* ECompilerRuntimeHelperSymbol.DocumentInsert */] = noop$7,
          _a["j" /* ECompilerRuntimeHelperSymbol.DocumentInsertAnchor */] = noop$7,
          _a["r" /* ECompilerRuntimeHelperSymbol.ElementRemove */] = noop$7,
          _a["d" /* ECompilerRuntimeHelperSymbol.ElementDestroyButNotRemove */] = noop$7,
          _a["a" /* ECompilerRuntimeHelperSymbol.DocumentAppend */] = noop$7,
          _a["f" /* ECompilerRuntimeHelperSymbol.TextNormalize */] = noop$7,
          _a["n" /* ECompilerRuntimeHelperSymbol.TextElementSetContent */] = noop$7,
          _a["ea" /* ECompilerRuntimeHelperSymbol.ElementSetAttribute */] = noop$7,
          _a["ec" /* ECompilerRuntimeHelperSymbol.ElementChangeProp */] = noop$7,
          _a["it" /* ECompilerRuntimeHelperSymbol.ElementInitTrackerAttribute */] = noop$7,
          _a["et" /* ECompilerRuntimeHelperSymbol.ElementSetTrackerAttribute */] = noop$7,
          _a["x" /* ECompilerRuntimeHelperSymbol.ElementInitAttributeClassStyleAndProp */] = noop$7,
          _a["X" /* ECompilerRuntimeHelperSymbol.ElementUpdateAttributeClassStyleAndProp */] = noop$7,
          _a["y" /* ECompilerRuntimeHelperSymbol.ElementUpdateAttributeClassOnlyAndProp */] = noop$7,
          _a["Y" /* ECompilerRuntimeHelperSymbol.ElementUpdateAttributeStyleOnlyAndProp */] = noop$7,
          _a["w" /* ECompilerRuntimeHelperSymbol.ElementUpdateAttributeNoneAndProp */] = noop$7,
          _a["v" /* ECompilerRuntimeHelperSymbol.ElementAddEvent4Compatible */] = noop$7,
          _a["k" /* ECompilerRuntimeHelperSymbol.ElementAddEventBinding */] = noop$7,
          _a["K" /* ECompilerRuntimeHelperSymbol.ElementUpdateEventBinding */] = noop$7,
          _a["b" /* ECompilerRuntimeHelperSymbol.InitBlock */] = helperInitBlock,
          _a["M" /* ECompilerRuntimeHelperSymbol.CallMethod */] = noop$7,
          _a["V" /* ECompilerRuntimeHelperSymbol.CallEvent */] = helperCallEvent,
          _a["H" /* ECompilerRuntimeHelperSymbol.DestroyBlockAnchor */] = noop$7,
          _a["h" /* ECompilerRuntimeHelperSymbol.CreateBlockAnchor */] = noop$7,
          _a["de" /* ECompilerRuntimeHelperSymbol.DestroyBlocks4EachContainer */] = helperDestroyBlocks4EachContainer,
          _a["uE" /* ECompilerRuntimeHelperSymbol.UpdateBlocks4EachContainerWithItemDiff */] = helperUpdateBlocks4EachContainerWithItemDiff,
          _a["ue" /* ECompilerRuntimeHelperSymbol.UpdateBlocks4EachContainer */] = helperUpdateBlocks4EachContainer,
          _a["ut" /* ECompilerRuntimeHelperSymbol.UpdateBlock4TemplateUseContainer */] = helperUpdateBlock4TemplateUseContainer,
          _a["gt" /* ECompilerRuntimeHelperSymbol.GetBlock4TemplateUseContainer */] = helperGetBlock4TemplateUseContainer,
          _a["gi" /* ECompilerRuntimeHelperSymbol.GetBlock4IncludeContainer */] = helperGetBlock4IncludeContainer,
          _a["cI" /* ECompilerRuntimeHelperSymbol.ContextRequiredInitBlock */] = helperContextRequiredInitBlock,
          _a["cC" /* ECompilerRuntimeHelperSymbol.ContextRequiredCreateBlock */] = helperContextRequiredCreateBlock,
          _a["cB" /* ECompilerRuntimeHelperSymbol.ContextRequiredCreateBlock4Compatible */] = helperContextRequiredCreateBlock4Compatible,
          _a["cM" /* ECompilerRuntimeHelperSymbol.ContextRequiredMountBlock */] = helperContextRequiredMountBlock,
          _a["cU" /* ECompilerRuntimeHelperSymbol.ContextRequiredUpdateBlock */] = helperContextRequiredUpdateBlock,
          _a["cD" /* ECompilerRuntimeHelperSymbol.ContextRequiredDestroyBlock */] = helperContextRequiredDestroyBlock,
          _a["t" /* ECompilerRuntimeHelperSymbol.CreateWebText */] = noop$7,
          _a["N" /* ECompilerRuntimeHelperSymbol.WebTextSetContent */] = noop$7,
          _a["R" /* ECompilerRuntimeHelperSymbol.RemoveWebText */] = noop$7,
          _a["D" /* ECompilerRuntimeHelperSymbol.DestroyButNotRemoveWebText */] = noop$7,
          _a["I" /* ECompilerRuntimeHelperSymbol.DocumentInsert4WebText */] = noop$7,
          _a["A" /* ECompilerRuntimeHelperSymbol.DocumentAppend4WebText */] = noop$7,
          _a["g" /* ECompilerRuntimeHelperSymbol.ElementInitSetAttributeDataset */] = noop$7,
          _a["G" /* ECompilerRuntimeHelperSymbol.ElementUpdateSetAttributeDatasetPartial */] = noop$7,
          _a["Q" /* ECompilerRuntimeHelperSymbol.ElementUpdateSetAttributeDatasetAll */] = noop$7,
          _a["$C" /* ECompilerRuntimeHelperSymbol.ConditionContainerFactoryCreate */] = helperConditionContainerFactoryCreate,
          _a["$PC" /* ECompilerRuntimeHelperSymbol.DeprecatedConditionContainerFactoryCreate4PlaceholderComponent */] = helperConditionContainerFactoryCreate4PlaceholderComponent,
          _a["$B" /* ECompilerRuntimeHelperSymbol.BypassContainerFactoryCreate */] = helperBypassContainerFactoryCreate,
          _a["$P" /* ECompilerRuntimeHelperSymbol.PlaceholderSwitchDefine */] = helperPlaceholderSwitchDefine,
          _a["$E" /* ECompilerRuntimeHelperSymbol.EachContainerFactoryCreate */] = helperEachContainerFactoryCreate,
          _a["$T" /* ECompilerRuntimeHelperSymbol.TemplateUseContainerFactoryCreate */] = helperTemplateUseContainerFactoryCreate,
          _a["ie" /* ECompilerRuntimeHelperSymbol.ElementInitEventHandlerMap */] = noop$7,
          _a["ed" /* ECompilerRuntimeHelperSymbol.ElementUpdateEventAndDataset */] = noop$7,
          _a["E" /* ECompilerRuntimeHelperSymbol.HydrateClaimElement */] = noop$7,
          _a["L" /* ECompilerRuntimeHelperSymbol.HydrateClaimChildren */] = noop$7,
          _a["u" /* ECompilerRuntimeHelperSymbol.HydrateGetTarget */] = noop$7,
          _a["W" /* ECompilerRuntimeHelperSymbol.ElementHydrateAttributeClassStyleAndProp */] = noop$7,
          _a["T" /* ECompilerRuntimeHelperSymbol.HydrateWebText */] = noop$7,
          _a["F" /* ECompilerRuntimeHelperSymbol.HydrateBlockAnchor */] = switchIsMiniProgramEnv(function () { return helperHydrateBlockAnchor; }),
          _a["cL" /* ECompilerRuntimeHelperSymbol.ContextRequiredLinkBlock */] = function (parentNodesContext, contextInstance) {
              return contextInstance._fragment["l" /* EZRuntimeBlockMethod.Link */](parentNodesContext);
          },
          _a["J" /* ECompilerRuntimeHelperSymbol.HydrateClearChildren */] = noop$7,
          _a["q" /* ECompilerRuntimeHelperSymbol.LinkComponent */] = switchIsMiniProgramEnv(function () { return helperLinkComponent4Host; }),
          _a["$D" /* ECompilerRuntimeHelperSymbol.DynamicComponentBlockFactoryCreate */] = helper4DynamicComponentBlockCreateFactory,
          _a["dl" /* ECompilerRuntimeHelperSymbol.InitializeDynamicComponent */] = helper4InitializeDynamicComponent,
          _a["ls" /* ECompilerRuntimeHelperSymbol.HydrateSlotContent */] = switchIsMiniProgramEnv(function () { return helperHydrateSlotContent; }),
          _a["pc" /* ECompilerRuntimeHelperSymbol.PlaceholderComponentHelper */] = switchIsMiniProgramEnv(function () {
              return function (componentInstance, payload) {
                  var pageInstanceId = componentInstance.root.option.runtime.pageInstanceId;
                  var targetId = 2 /* EZRuntimeLinkedInstanceType.Component */ === componentInstance.type ? componentInstance.targetId : 0;
                  var getLazyLoadManager = componentInstance.root.option.runtime.getLazyLoadManager;
                  var lazyLoadManager = getLazyLoadManager();
                  lazyLoadManager.register(payload.type, payload.data, pageInstanceId, targetId);
              };
          }),
          // host侧 ElementAddEventBinding 为noop，这里设置为 ERuntimeSupportedFlag.Capture 代表不需要覆写此helper方法
          _a["z" /* ECompilerRuntimeHelperSymbol.RuntimeFeatureFlag */] = 0 /* ERuntimeSupportedFlag.NONE */,
          _a;
  }
  function helperLinkComponent4Host(parentNodesContext, componentInstance, props, propKeys, nonEventSize, refMethod) {
      // ClaimElement
      var root = parentNodesContext.nodes.item(parentNodesContext.index++);
      var parent = parentNodesContext.target;
      // TODO 这里可以考虑先把 parent 的历史节点全都按 name 收集到 Map 暂存，像 @天镶一样处理
      // 找到一个 Component，找到，用 componentInstance.beforeLink 进行混合
      var isLinkNode = root && root.hType === 1 /* EZRuntimeHostSideElementType.TargetOrSlot */;
      var created;
      // let childrenContext: IZRuntimeHydrateNodesContext4Host;
      if (isLinkNode) {
          var linkNode = root;
          var linkedInstance = linkNode.component;
          if (linkedInstance.type >= 2 /* EZRuntimeLinkedInstanceType.Component */) {
              if (componentInstance.beforeLink(linkNode, props, propKeys, nonEventSize)) {
                  created = false;
                  // componentInstance 应该完成 child 树的迁移
                  componentInstance.node.firstChild = linkNode.firstChild;
                  componentInstance.node.lastChild = linkNode.lastChild;
                  var previousChild = linkNode.firstChild;
                  while (previousChild) {
                      previousChild.parent = componentInstance.node;
                      previousChild = previousChild.nextSibling;
                  }
                  parent.insertBefore(componentInstance.node, root);
                  parent.removeChild(root);
              }
              else {
                  created = true;
              }
          }
          else {
              created = true;
          }
      }
      else {
          created = true;
      }
      if (created) {
          componentInstance.beforeCreate(props, propKeys, nonEventSize);
          // 把新节点插入
          if (root) {
              parent.insertBefore(componentInstance.node, root);
              if (parentNodesContext.nodes.length - parentNodesContext.index === parentNodesContext.stopReverseIndex) ;
              else {
                  parent.removeChild(root);
              }
          }
          else {
              parent.appendChild(componentInstance.node);
          }
      }
      componentInstance.node.parent = parent;
      componentInstance.node.root = parent.root;
      // GetTarget
      var childrenContext = {
          index: 0,
          nodes: new ZHostNode4Collection(componentInstance.node),
          stopReverseIndex: 0,
          stopReverseIndexStack: [],
          target: componentInstance.node,
          treatErrorAsWarning: 0,
      };
      // ClaimChildren
      componentInstance._fragment["l" /* EZRuntimeBlockMethod.Link */](childrenContext);
      // afterCreate
      if (created) {
          if (componentInstance.afterCreate) {
              componentInstance.afterCreate(props, propKeys, nonEventSize, refMethod);
          }
      }
      // ClearChildren
      helperHydrateClearChildren4HostWeb(childrenContext);
  }

  function getEventTargetTagName(tagOrder) {
      switch (tagOrder) {
          case 42 /* EZElementTagName.AiCamera */:
              return "ai-camera" /* EZElementStringTag.AiCamera */;
          case 46 /* EZElementTagName.Ar */:
              return "ar" /* EZElementStringTag.Ar */;
          case 43 /* EZElementTagName.Camera */:
              return "camera" /* EZElementStringTag.Camera */;
          case 18 /* EZElementTagName.Canvas */:
              return "canvas" /* EZElementStringTag.Canvas */;
          case 8 /* EZElementTagName.Input */:
              return "input" /* EZElementStringTag.Input */;
          case 22 /* EZElementTagName.Map */:
              return "map" /* EZElementStringTag.Map */;
          case 33 /* EZElementTagName.Video */:
              return "video" /* EZElementStringTag.Video */;
          case 29 /* EZElementTagName.WebView */:
              return "web-view" /* EZElementStringTag.WebView */;
          case 28 /* EZElementTagName.Lottie */:
              return "lottie" /* EZElementStringTag.Lottie */;
          case 40 /* EZElementTagName.LivePlayer */:
              return "live-player" /* EZElementStringTag.LivePlayer */;
          case 41 /* EZElementTagName.LivePusher */:
              return "live-pusher" /* EZElementStringTag.LivePusher */;
          case 39 /* EZElementTagName.Ad */:
              return "ad" /* EZElementStringTag.Ad */;
          case 45 /* EZElementTagName.Cdp */:
              return "cdp" /* EZElementStringTag.Cdp */;
          case 47 /* EZElementTagName.RtcRoom */:
              return "rtc-room" /* EZElementStringTag.RtcRoom */;
      }
  }
  function normalizeCompositeEvent(eventType, meta, payload, id) {
      if (id === void 0) { id = meta.elementId; }
      var tagName = getEventTargetTagName(meta.tagOrder);
      var dataset = meta.dataset;
      return __assign({ currentTarget: {
              dataset: dataset,
              id: id,
              tagName: tagName,
          }, target: {
              dataset: dataset,
              id: id,
              tagName: tagName,
              targetDataset: dataset,
          }, timeStamp: Date.now(), type: eventType }, payload);
  }
  function normalizeCompositeEvent4Inside(eventType, meta, payload, tagName) {
      var id = meta.elementId;
      var dataset = meta.dataset;
      return __assign({ currentTarget: {
              dataset: dataset,
              id: id,
              tagName: tagName,
          }, target: {
              dataset: dataset,
              id: id,
              tagName: tagName,
              targetDataset: dataset,
          }, timeStamp: Date.now(), type: eventType }, payload);
  }

  function getEventName4Ad(platformEventName, data) {
      switch (platformEventName) {
          case "nbcomponent.ad.onRenderFail" /* ECompositeElementPlatformEventName.Ad.Error */:
              return ["error" /* EAdEventName.Error */, "renderFail" /* EAdEventName.RenderFail */];
      }
  }
  function gePlatformEvents4Ad() {
      return ["nbcomponent.ad.onRenderFail" /* ECompositeElementPlatformEventName.Ad.Error */];
  }
  function getEventObject4Ad(eventType, meta, data) {
      switch (eventType) {
          case "error" /* EAdEventName.Error */:
              return normalizeCompositeEvent(eventType, meta, { errCode: data.errorCode });
          case "renderFail" /* EAdEventName.RenderFail */:
              return normalizeCompositeEvent(eventType, meta, null);
      }
  }

  function getEventName4AiCamera(platformEventName, data) {
      switch (platformEventName) {
          case "nbcomponent.ai-camera.error" /* ECompositeElementPlatformEventName.AiCamera.Error */:
              return "error" /* EAiCameraEventName.Error */;
          case "nbcomponent.ai-camera.onRecognizeResult" /* ECompositeElementPlatformEventName.AiCamera.RecognizeResult */:
              return "recognizeResult" /* EAiCameraEventName.RecognizeResult */;
          case "nbcomponent.ai-camera.stop" /* ECompositeElementPlatformEventName.AiCamera.Stop */:
              return "stop" /* EAiCameraEventName.Stop */;
          case "nbcomponent.ai-camera.ready" /* ECompositeElementPlatformEventName.AiCamera.Ready */:
              return "ready" /* EAiCameraEventName.Ready */;
      }
  }
  function gePlatformEvents4AiCamera() {
      return [
          "nbcomponent.ai-camera.error" /* ECompositeElementPlatformEventName.AiCamera.Error */,
          "nbcomponent.ai-camera.onRecognizeResult" /* ECompositeElementPlatformEventName.AiCamera.RecognizeResult */,
          "nbcomponent.ai-camera.stop" /* ECompositeElementPlatformEventName.AiCamera.Stop */,
          "nbcomponent.ai-camera.ready" ];
  }
  function normalizeEvent4AiCameraRecognizeResult(_a) {
      var result = _a.result, error = _a.error, errorMessage = _a.errorMessage, success = _a.success;
      var detail = {
          error: error,
          errorMessage: errorMessage,
          result: result,
          success: success,
      };
      return { detail: detail };
  }
  function normalizeEvent4AiCameraError(_a) {
      var errorMessage = _a.errorMessage, errorCode = _a.errorCode;
      var detail = {
          error: errorCode,
          errorMessage: errorMessage,
      };
      return { detail: detail };
  }
  function getEventObject4AiCamera(eventType, meta, data) {
      var payload;
      switch (eventType) {
          case "stop" /* EAiCameraEventName.Stop */:
              payload = {};
              break;
          case "recognizeResult" /* EAiCameraEventName.RecognizeResult */:
              payload = normalizeEvent4AiCameraRecognizeResult(data);
              break;
          case "error" /* EAiCameraEventName.Error */:
              payload = normalizeEvent4AiCameraError(data);
              break;
          case "ready" /* EAiCameraEventName.Ready */:
              payload = {};
              break;
      }
      if (payload) {
          return normalizeCompositeEvent(eventType, meta, payload);
      }
  }

  function getEventName4Ar(platformEventName, data) {
      switch (platformEventName) {
          case "nbcomponent.ar.onAnimationEnd" /* ECompositeElementPlatformEventName.Ar.AnimationEnd */:
              return "animationEnd" /* EArEventName.AnimationEnd */;
          case "nbcomponent.ar.onAnimationStart" /* ECompositeElementPlatformEventName.Ar.AnimationStart */:
              return "animationStart" /* EArEventName.AnimationStart */;
          case "nbcomponent.ar.onEvent" /* ECompositeElementPlatformEventName.Ar.Event */:
              return "event" /* EArEventName.Event */;
          case "nbcomponent.ar.onFrame" /* ECompositeElementPlatformEventName.Ar.Frame */:
              return "frame" /* EArEventName.Frame */;
          case "nbcomponent.ar.onLoad" /* ECompositeElementPlatformEventName.Ar.Load */:
              return "load" /* EArEventName.Load */;
          case "nbcomponent.ar.onPinch" /* ECompositeElementPlatformEventName.Ar.Pinch */:
              return "pinch" /* EArEventName.Pinch */;
          case "nbcomponent.ar.onSwipe" /* ECompositeElementPlatformEventName.Ar.Swipe */:
              return "swipe" /* EArEventName.Swipe */;
          case "nbcomponent.ar.onTap" /* ECompositeElementPlatformEventName.Ar.Tap */:
              return "tap" /* EArEventName.Tap */;
          case "nbcomponent.ar.onTouch" /* ECompositeElementPlatformEventName.Ar.Touch */:
              return "touch" /* EArEventName.Touch */;
          case "nbcomponent.ar.onTrackChange" /* ECompositeElementPlatformEventName.Ar.TrackChange */:
              return "trackChange" /* EArEventName.TrackChange */;
      }
  }
  function gePlatformEvents4Ar() {
      return [
          "nbcomponent.ar.onAnimationEnd" /* ECompositeElementPlatformEventName.Ar.AnimationEnd */,
          "nbcomponent.ar.onAnimationStart" /* ECompositeElementPlatformEventName.Ar.AnimationStart */,
          "nbcomponent.ar.onEvent" /* ECompositeElementPlatformEventName.Ar.Event */,
          "nbcomponent.ar.onFrame" /* ECompositeElementPlatformEventName.Ar.Frame */,
          "nbcomponent.ar.onLoad" /* ECompositeElementPlatformEventName.Ar.Load */,
          "nbcomponent.ar.onPinch" /* ECompositeElementPlatformEventName.Ar.Pinch */,
          "nbcomponent.ar.onSwipe" /* ECompositeElementPlatformEventName.Ar.Swipe */,
          "nbcomponent.ar.onTap" /* ECompositeElementPlatformEventName.Ar.Tap */,
          "nbcomponent.ar.onTouch" /* ECompositeElementPlatformEventName.Ar.Touch */,
          "nbcomponent.ar.onTrackChange" ];
  }
  function normalizeEvent4ArFrame(_a) {
      var t = _a.t;
      var detail = {
          t: t,
      };
      return { detail: detail };
  }
  function normalizeEvent4ArEvent(_a) {
      var eventName = _a.eventName, extra = _a.extra;
      var detail = {
          eventName: eventName,
          extra: extra,
      };
      return { detail: detail };
  }
  function normalizeEvent4TrackChange(_a) {
      var trackMode = _a.trackMode;
      var detail = {
          trackMode: trackMode,
      };
      return { detail: detail };
  }
  function normalizeEvent4ArAnimation(_a) {
      var clipId = _a.clipId;
      var detail = {
          clipId: clipId,
      };
      return { detail: detail };
  }
  function normalizeEvent4ArTouch(_a) {
      var x = _a.x, y = _a.y, state = _a.state;
      var detail = {
          state: state,
          x: x,
          y: y,
      };
      return { detail: detail };
  }
  function normalizeEvent4ArTap(_a) {
      var nodeId = _a.nodeId, x = _a.x, y = _a.y;
      var detail = {
          nodeId: nodeId,
          x: x,
          y: y,
      };
      return { detail: detail };
  }
  function normalizeEvent4ArSwipe(_a) {
      var direction = _a.direction, x = _a.x, y = _a.y;
      var detail = {
          direction: direction,
          x: x,
          y: y,
      };
      return { detail: detail };
  }
  function normalizeEvent4ArPinch(_a) {
      var scale = _a.scale, x = _a.x, y = _a.y;
      var detail = {
          scale: scale,
          x: x,
          y: y,
      };
      return { detail: detail };
  }
  function getEventObject4Ar(eventType, meta, data) {
      var payload;
      switch (eventType) {
          case "load" /* EArEventName.Load */:
              payload = {};
              break;
          case "frame" /* EArEventName.Frame */:
              payload = normalizeEvent4ArFrame(data);
              break;
          case "event" /* EArEventName.Event */:
              payload = normalizeEvent4ArEvent(data);
              break;
          case "trackChange" /* EArEventName.TrackChange */:
              payload = normalizeEvent4TrackChange(data);
              break;
          case "animationStart" /* EArEventName.AnimationStart */:
              payload = normalizeEvent4ArAnimation(data);
              break;
          case "animationEnd" /* EArEventName.AnimationEnd */:
              payload = normalizeEvent4ArAnimation(data);
              break;
          case "touch" /* EArEventName.Touch */:
              payload = normalizeEvent4ArTouch(data);
              break;
          case "tap" /* EArEventName.Tap */:
              payload = normalizeEvent4ArTap(data);
              break;
          case "swipe" /* EArEventName.Swipe */:
              payload = normalizeEvent4ArSwipe(data);
              break;
          case "pinch" /* EArEventName.Pinch */:
              payload = normalizeEvent4ArPinch(data);
              break;
      }
      if (payload) {
          return normalizeCompositeEvent(eventType, meta, payload);
      }
  }

  function getEventName4Camera(platformEventName, data) {
      switch (platformEventName) {
          case "nbcomponent.camera.error" /* ECompositeElementPlatformEventName.Camera.Error */:
              return "error" /* ECameraEventName.Error */;
          case "nbcomponent.camera.stop" /* ECompositeElementPlatformEventName.Camera.Stop */:
              return "stop" /* ECameraEventName.Stop */;
          case "nbcomponent.camera.scancode" /* ECompositeElementPlatformEventName.Camera.Scancode */:
              return ["scancode" /* ECameraEventName.Scancode */, "scanCode" /* ECameraEventName.ScanCode */];
          case "nbcomponent.camera.ready" /* ECompositeElementPlatformEventName.Camera.Ready */:
              return "ready" /* ECameraEventName.Ready */;
      }
  }
  function gePlatformEvents4Camera() {
      return [
          "nbcomponent.camera.error" /* ECompositeElementPlatformEventName.Camera.Error */,
          "nbcomponent.camera.scancode" /* ECompositeElementPlatformEventName.Camera.Scancode */,
          "nbcomponent.camera.stop" /* ECompositeElementPlatformEventName.Camera.Stop */,
          "nbcomponent.camera.ready" ];
  }
  function normalizeEvent4CameraError(_a) {
      var errorMessage = _a.errorMessage, errorCode = _a.errorCode;
      var detail = {
          errorCode: errorCode,
          errorMessage: errorMessage,
      };
      return { detail: detail };
  }
  function normalizeEvent4CameraScancode(_a) {
      var type = _a.type, result = _a.result, scanCodeFullRequest = _a.scanCodeFullRequest, scanCodeFullResult = _a.scanCodeFullResult, charSet = _a.charSet;
      var detail = {
          charSet: charSet,
          // scanCodeFullRequest scanCodeFullResult 这个是端上的代码的问题
          // 10.2.33 版本会修复保留 scanCodeFullResult
          fullResult: scanCodeFullResult || scanCodeFullRequest,
          result: result,
          type: type,
      };
      return { detail: detail };
  }
  function normalizeEvent4CameraReady(_a) {
      var maxZoom = _a.maxZoom;
      var detail = {
          maxZoom: maxZoom,
      };
      return { detail: detail };
  }
  function getEventObject4Camera(eventType, meta, data) {
      var payload;
      switch (eventType) {
          case "error" /* ECameraEventName.Error */:
              payload = normalizeEvent4CameraError(data);
              break;
          case "stop" /* ECameraEventName.Stop */:
              payload = {};
              break;
          case "scancode" /* ECameraEventName.Scancode */:
          case "scanCode" /* ECameraEventName.ScanCode */:
              payload = normalizeEvent4CameraScancode(data);
              break;
          case "ready" /* ECameraEventName.Ready */:
              payload = normalizeEvent4CameraReady(data);
              break;
      }
      if (payload) {
          return normalizeCompositeEvent(eventType, meta, payload);
      }
  }

  function getEventName4Canvas(platformEventName, data) {
      switch (platformEventName) {
          case "nbcomponent.canvas.onLongTap" /* ECompositeElementPlatformEventName.Canvas.LongTap */:
              return "longTap" /* ECanvasEventName.LongTap */;
          case "nbcomponent.canvas.onTap" /* ECompositeElementPlatformEventName.Canvas.Tap */:
              return "tap" /* ECanvasEventName.Tap */;
          case "nbcomponent.canvas.onTouchCancel" /* ECompositeElementPlatformEventName.Canvas.TouchCancel */:
              return "touchCancel" /* ECanvasEventName.TouchCancel */;
          case "nbcomponent.canvas.onTouchEnd" /* ECompositeElementPlatformEventName.Canvas.TouchEnd */:
              return "touchEnd" /* ECanvasEventName.TouchEnd */;
          case "nbcomponent.canvas.onTouchMove" /* ECompositeElementPlatformEventName.Canvas.TouchMove */:
              return "touchMove" /* ECanvasEventName.TouchMove */;
          case "nbcomponent.canvas.onTouchStart" /* ECompositeElementPlatformEventName.Canvas.TouchStart */:
              return "touchStart" /* ECanvasEventName.TouchStart */;
      }
  }
  function gePlatformEvents4Canvas() {
      return [
          "nbcomponent.canvas.onLongTap" /* ECompositeElementPlatformEventName.Canvas.LongTap */,
          "nbcomponent.canvas.onTap" /* ECompositeElementPlatformEventName.Canvas.Tap */,
          "nbcomponent.canvas.onTouchCancel" /* ECompositeElementPlatformEventName.Canvas.TouchCancel */,
          "nbcomponent.canvas.onTouchEnd" /* ECompositeElementPlatformEventName.Canvas.TouchEnd */,
          "nbcomponent.canvas.onTouchMove" /* ECompositeElementPlatformEventName.Canvas.TouchMove */,
          "nbcomponent.canvas.onTouchStart" ];
  }
  function getEventObject4Canvas(eventType, meta, data) {
      switch (eventType) {
          case "tap" /* ECanvasEventName.Tap */:
          case "longTap" /* ECanvasEventName.LongTap */:
              return normalizeCompositeEvent(eventType, meta, {
                  detail: data.detail,
              });
          case "touchCancel" /* ECanvasEventName.TouchCancel */:
          case "touchEnd" /* ECanvasEventName.TouchEnd */:
          case "touchMove" /* ECanvasEventName.TouchMove */:
          case "touchStart" /* ECanvasEventName.TouchStart */:
              return normalizeCompositeEvent(eventType, meta, {
                  changedTouches: data.changedTouches,
                  touches: data.touches,
              });
      }
  }

  function getEventName4Input(platformEventName, data) {
      switch (platformEventName) {
          case "nbcomponent.input.blur" /* ECompositeElementPlatformEventName.Input.Blur */:
              return "blur" /* EInputEventName.Blur */;
          case "nbcomponent.input.keydown" /* ECompositeElementPlatformEventName.Input.Confirm */:
              return "confirm" /* EInputEventName.Confirm */;
          case "nbcomponent.input.focus" /* ECompositeElementPlatformEventName.Input.Focus */:
              return "focus" /* EInputEventName.Focus */;
          case "nbcomponent.input.input" /* ECompositeElementPlatformEventName.Input.Input */:
              return "input" /* EInputEventName.Input */;
      }
  }
  function gePlatformEvents4Input() {
      return [
          "nbcomponent.input.blur" /* ECompositeElementPlatformEventName.Input.Blur */,
          "nbcomponent.input.keydown" /* ECompositeElementPlatformEventName.Input.Confirm */,
          "nbcomponent.input.focus" /* ECompositeElementPlatformEventName.Input.Focus */,
          "nbcomponent.input.input" ];
  }
  function getEventHandle4Inpu4Input(proxy, payload) {
      proxy.invokeRenderMethod("setKeyboardCursor" /* ESharedAppxPageRenderMethod.SetKeyboardCursor */, [payload]);
  }
  function getEventObject4Input(eventType, meta, data) {
      var elementId = meta.elementId;
      if (elementId && elementId.substr) {
          // 这里的 id 是同层 id，为与 input 组件的根元素区分
          // 同层节点的 id 是 'xxx__object' 格式
          // 这里需要还原
          elementId = elementId.substr(0, elementId.length - 8);
          // 同时，作为返回给用户的事件对象
          // 应该以用户给的 id 为准
          // 当用户 id 冲突的时候，会拼成 [id]_appxObject_[index] 格式
          // 这里将之还原
          var index = elementId.indexOf('_appxObject_');
          if (index > -1) {
              elementId = elementId.substring(0, index);
          }
      }
      var result;
      switch (eventType) {
          case "input" /* EInputEventName.Input */: {
              var _a = data, marked = _a.marked, value = _a.value, cursor = _a.cursor;
              if (marked !== 'Y') {
                  var detail = { value: value };
                  if (cursor !== undefined) {
                      detail.cursor = cursor;
                  }
                  result = normalizeCompositeEvent(eventType, meta, {
                      detail: detail,
                  }, elementId);
              }
              break;
          }
          case "blur" /* EInputEventName.Blur */:
          case "focus" /* EInputEventName.Focus */: {
              var value = data.value;
              result = normalizeCompositeEvent(eventType, meta, {
                  detail: {
                      value: value,
                  },
              }, elementId);
              break;
          }
          case "confirm" /* EInputEventName.Confirm */: {
              var _b = data, value = _b.value, keyCode = _b.keyCode;
              if (keyCode === 13) {
                  result = normalizeCompositeEvent(eventType, meta, {
                      detail: {
                          value: value,
                      },
                  }, elementId);
              }
              break;
          }
      }
      return result;
  }

  function getPlatformEvents4Inside() {
      return zephyrGetInsideCompositePlatformEvents();
  }

  function getEventName4LivePlayer(platformEventName, data) {
      switch (platformEventName) {
          case "nbcomponent.live-player.onError" /* ECompositeElementPlatformEventName.LivePlayer.Error */:
              return "error" /* ELivePlayerEventName.Error */;
          case "nbcomponent.live-player.onFullScreenChange" /* ECompositeElementPlatformEventName.LivePlayer.FullScreenChange */:
              return "fullscreenChange" /* ELivePlayerEventName.FullScreenChange */;
          case "nbcomponent.live-player.onTimeUpdate" /* ECompositeElementPlatformEventName.LivePlayer.TimeUpdate */:
              return "timeUpdate" /* ELivePlayerEventName.TimeUpdate */;
          case "nbcomponent.live-player.onChangeState" /* ECompositeElementPlatformEventName.LivePlayer.StateChange */:
              return "stateChange" /* ELivePlayerEventName.StateChange */;
          case "nbcomponent.live-player.onUserAction" /* ECompositeElementPlatformEventName.LivePlayer.UserAction */:
              return "userAction" /* ELivePlayerEventName.UserAction */;
          case "nbcomponent.live-player.onInfo" /* ECompositeElementPlatformEventName.LivePlayer.Info */:
              return "info" /* ELivePlayerEventName.Info */;
      }
  }
  function gePlatformEvents4LivePlayer() {
      return [
          "nbcomponent.live-player.onError" /* ECompositeElementPlatformEventName.LivePlayer.Error */,
          "nbcomponent.live-player.onFullScreenChange" /* ECompositeElementPlatformEventName.LivePlayer.FullScreenChange */,
          "nbcomponent.live-player.onTimeUpdate" /* ECompositeElementPlatformEventName.LivePlayer.TimeUpdate */,
          "nbcomponent.live-player.onChangeState" /* ECompositeElementPlatformEventName.LivePlayer.StateChange */,
          "nbcomponent.live-player.onUserAction" /* ECompositeElementPlatformEventName.LivePlayer.UserAction */,
          "nbcomponent.live-player.onInfo" ];
  }
  function getEventObject4LivePlayer(eventType, meta, data) {
      var payload;
      switch (eventType) {
          case "fullscreenChange" /* ELivePlayerEventName.FullScreenChange */:
              var _a = data, direction = _a.direction, fullScreen = _a.fullScreen;
              payload = { detail: { direction: direction, fullScreen: fullScreen } };
              break;
          case "timeUpdate" /* ELivePlayerEventName.TimeUpdate */:
              var _b = data, currentTime = _b.currentTime, userPlayDuration = _b.userPlayDuration, videoDuration = _b.videoDuration;
              payload = { detail: { currentTime: currentTime, userPlayDuration: userPlayDuration, videoDuration: videoDuration } };
              break;
          case "stateChange" /* ELivePlayerEventName.StateChange */:
              var _c = data, code = _c.code, videoHeight = _c.videoHeight, videoWidth = _c.videoWidth;
              payload = { detail: { code: code, videoHeight: videoHeight, videoWidth: videoWidth } };
              break;
          case "error" /* ELivePlayerEventName.Error */:
              var _d = data, error = _d.error, errorMessage = _d.errorMessage;
              payload = { detail: { error: error, errorMessage: errorMessage } };
              break;
          case "userAction" /* ELivePlayerEventName.UserAction */:
              var _e = data, value = _e.value, tag = _e.tag;
              payload = { detail: value !== undefined ? { tag: tag, value: value } : { tag: tag } };
              break;
          case "info" /* ELivePlayerEventName.Info */:
              var _f = data, key = _f.key, infoValue = _f.value;
              payload = { detail: { key: key, value: infoValue } };
              break;
      }
      if (payload) {
          return normalizeCompositeEvent(eventType, meta, payload);
      }
  }

  function getEventName4LivePusher(platformEventName, data) {
      switch (platformEventName) {
          case "nbcomponent.live-pusher.onError" /* ECompositeElementPlatformEventName.LivePusher.Error */:
              return "error" /* ELivePusherEventName.Error */;
          case "nbcomponent.live-pusher.onNetStatus" /* ECompositeElementPlatformEventName.LivePusher.NetStatus */:
              return "netStatus" /* ELivePusherEventName.NetStatus */;
          case "nbcomponent.live-pusher.onChangeState" /* ECompositeElementPlatformEventName.LivePusher.StateChange */:
              return "stateChange" /* ELivePusherEventName.StateChange */;
      }
  }
  function gePlatformEvents4LivePusher() {
      return [
          "nbcomponent.live-pusher.onError" /* ECompositeElementPlatformEventName.LivePusher.Error */,
          "nbcomponent.live-pusher.onNetStatus" /* ECompositeElementPlatformEventName.LivePusher.NetStatus */,
          "nbcomponent.live-pusher.onChangeState" ];
  }
  function normalizeEvent4LivePusherNetStatusChange(_a) {
      var info = _a.info;
      var detail = {
          info: info,
      };
      return { detail: detail };
  }
  function normalizeEvent4LivePusherStateChange(_a) {
      var code = _a.code, message = _a.message;
      var detail = {
          code: code,
          message: message,
      };
      return { detail: detail };
  }
  function normalizeEvent4LivePusherError(_a) {
      var error = _a.error, errorMessage = _a.errorMessage;
      var detail = {
          error: error,
          errorMessage: errorMessage,
      };
      return { detail: detail };
  }
  function getEventObject4LivePusher(eventType, meta, data) {
      var payload;
      switch (eventType) {
          case "netStatus" /* ELivePusherEventName.NetStatus */:
              payload = normalizeEvent4LivePusherNetStatusChange(data);
              break;
          case "stateChange" /* ELivePusherEventName.StateChange */:
              payload = normalizeEvent4LivePusherStateChange(data);
              break;
          case "error" /* ELivePusherEventName.Error */:
              payload = normalizeEvent4LivePusherError(data);
              break;
      }
      if (payload) {
          return normalizeCompositeEvent(eventType, meta, payload);
      }
  }

  function getEventName4Lottie(platformEventName, data) {
      switch (platformEventName) {
          case "nbcomponent.lottieview.animationCancel" /* ECompositeElementPlatformEventName.Lottie.AnimationCancel */:
              return "animationCancel" /* ELottieEventName.AnimationCancel */;
          case "nbcomponent.lottieview.animationEnd" /* ECompositeElementPlatformEventName.Lottie.AnimationEnd */:
              return ["animationEnd" /* ELottieEventName.AnimationEnd */, "complete" /* ELottieEventName.Complete */];
          case "nbcomponent.lottieview.animaitionRepeat" /* ECompositeElementPlatformEventName.Lottie.AnimationRepeat */:
              return ["animationRepeat" /* ELottieEventName.AnimationRepeat */, "loopComplete" /* ELottieEventName.LoopComplete */];
          case "nbcomponent.lottieview.animationStart" /* ECompositeElementPlatformEventName.Lottie.AnimationStart */:
              return "animationStart" /* ELottieEventName.AnimationStart */;
          case "nbcomponent.lottieview.dataFailed" /* ECompositeElementPlatformEventName.Lottie.DataFailed */:
              return "dataFailed" /* ELottieEventName.DataFailed */;
          case "nbcomponent.lottieview.dataReady" /* ECompositeElementPlatformEventName.Lottie.DataReady */:
              return "dataReady" /* ELottieEventName.DataReady */;
      }
  }
  function gePlatformEvents4Lottie() {
      return [
          "nbcomponent.lottieview.animationCancel" /* ECompositeElementPlatformEventName.Lottie.AnimationCancel */,
          "nbcomponent.lottieview.animationEnd" /* ECompositeElementPlatformEventName.Lottie.AnimationEnd */,
          "nbcomponent.lottieview.animaitionRepeat" /* ECompositeElementPlatformEventName.Lottie.AnimationRepeat */,
          "nbcomponent.lottieview.animationStart" /* ECompositeElementPlatformEventName.Lottie.AnimationStart */,
          "nbcomponent.lottieview.dataFailed" /* ECompositeElementPlatformEventName.Lottie.DataFailed */,
          "nbcomponent.lottieview.dataReady" ];
  }
  function getEventObject4Lottie(eventType, meta, data) {
      switch (eventType) {
          case "animationCancel" /* ELottieEventName.AnimationCancel */:
          case "animationEnd" /* ELottieEventName.AnimationEnd */:
          case "animationRepeat" /* ELottieEventName.AnimationRepeat */:
          case "animationStart" /* ELottieEventName.AnimationStart */:
          case "complete" /* ELottieEventName.Complete */:
          case "dataFailed" /* ELottieEventName.DataFailed */:
          case "dataReady" /* ELottieEventName.DataReady */:
          case "loopComplete" /* ELottieEventName.LoopComplete */:
              return normalizeCompositeEvent(eventType, meta, null);
      }
  }

  function getEventName4Map(platformEventName, data) {
      switch (platformEventName) {
          case "nbcomponent.map.bindcallouttap" /* ECompositeElementPlatformEventName.Map.CallOutTap */:
              return "calloutTap" /* EMapEventName.CalloutTap */;
          case "nbcomponent.map.bindcontroltap" /* ECompositeElementPlatformEventName.Map.ControlTap */:
              return "controlTap" /* EMapEventName.ControlTap */;
          case "nbcomponent.map.bindmarkermove" /* ECompositeElementPlatformEventName.Map.MarkerMove */:
              return "markerMove" /* EMapEventName.MarkerMove */;
          case "nbcomponent.map.bindmarkermoveend" /* ECompositeElementPlatformEventName.Map.MarkerMoveEnd */:
              return "markerMoveEnd" /* EMapEventName.MarkerMoveEnd */;
          case "nbcomponent.map.bindmarkertap" /* ECompositeElementPlatformEventName.Map.MarkerTap */:
              return "markerTap" /* EMapEventName.MarkerTap */;
          case "nbcomponent.map.bindpolylinemoveend" /* ECompositeElementPlatformEventName.Map.PolylineMoveEnd */:
              return "polylineMoveEnd" /* EMapEventName.PolylineMoveEnd */;
          case "nbcomponent.map.bindregionchange" /* ECompositeElementPlatformEventName.Map.RegionChange */:
              return "regionChange" /* EMapEventName.RegionChange */;
          case "nbcomponent.map.bindtap" /* ECompositeElementPlatformEventName.Map.Tap */:
              return "tap" /* EMapEventName.Tap */;
          case "nbcomponent.map.bindpoitap" /* ECompositeElementPlatformEventName.Map.PoiTap */:
              return "poiTap" /* EMapEventName.PoiTap */;
          case "nbcomponent.map.bindpaneltap" /* ECompositeElementPlatformEventName.Map.PanelTap */:
              return "panelTap" /* EMapEventName.PanelTap */;
          case "nbcomponent.map.bindindoormapstatechange" /* ECompositeElementPlatformEventName.Map.IndoorMapStateChange */:
              return "indoorMapStateChange" /* EMapEventName.IndoorMapStateChange */;
          case "nbcomponent.map.bindmapinitcomplete" /* ECompositeElementPlatformEventName.Map.InitComplete */:
              return "initComplete" /* EMapEventName.InitComplete */;
      }
  }
  function gePlatformEvents4Map() {
      return [
          "nbcomponent.map.bindcallouttap" /* ECompositeElementPlatformEventName.Map.CallOutTap */,
          "nbcomponent.map.bindcontroltap" /* ECompositeElementPlatformEventName.Map.ControlTap */,
          "nbcomponent.map.bindmarkermove" /* ECompositeElementPlatformEventName.Map.MarkerMove */,
          "nbcomponent.map.bindmarkermoveend" /* ECompositeElementPlatformEventName.Map.MarkerMoveEnd */,
          "nbcomponent.map.bindmarkertap" /* ECompositeElementPlatformEventName.Map.MarkerTap */,
          "nbcomponent.map.bindpolylinemoveend" /* ECompositeElementPlatformEventName.Map.PolylineMoveEnd */,
          "nbcomponent.map.bindregionchange" /* ECompositeElementPlatformEventName.Map.RegionChange */,
          "nbcomponent.map.bindtap" /* ECompositeElementPlatformEventName.Map.Tap */,
          "nbcomponent.map.bindpoitap" /* ECompositeElementPlatformEventName.Map.PoiTap */,
          "nbcomponent.map.bindpaneltap" /* ECompositeElementPlatformEventName.Map.PanelTap */,
          "nbcomponent.map.bindindoormapstatechange" /* ECompositeElementPlatformEventName.Map.IndoorMapStateChange */,
          "nbcomponent.map.bindmapinitcomplete" ];
  }
  function getEventObject4Map(eventType, meta, data) {
      var payload;
      switch (eventType) {
          case "tap" /* EMapEventName.Tap */:
              payload = normalizeEvent4MapTap(data);
              break;
          case "calloutTap" /* EMapEventName.CalloutTap */:
              payload = normalize4MapCalloutTap(data);
              break;
          case "controlTap" /* EMapEventName.ControlTap */:
              payload = normalizeEvent4MapControlTap(data);
              break;
          case "markerMove" /* EMapEventName.MarkerMove */:
              payload = normalize4MapMarkerMove(data);
              break;
          case "markerMoveEnd" /* EMapEventName.MarkerMoveEnd */:
              payload = normalize4MapMarkerMoveEnd(data);
              break;
          case "markerTap" /* EMapEventName.MarkerTap */:
              payload = normalizeEvent4MapMarkerTap(data);
              break;
          case "polylineMoveEnd" /* EMapEventName.PolylineMoveEnd */:
              payload = normalize4PolylineMoveEnd(data);
              break;
          case "regionChange" /* EMapEventName.RegionChange */:
              payload = normalize4MapRegionChange(data);
              break;
          case "poiTap" /* EMapEventName.PoiTap */:
              payload = normalize4PoiTap(data);
              break;
          case "panelTap" /* EMapEventName.PanelTap */:
              payload = normalize4PanelTap(data);
              break;
          case "indoorMapStateChange" /* EMapEventName.IndoorMapStateChange */:
              payload = normalize4IndoorMapStateChange(data);
              break;
          case "initComplete" /* EMapEventName.InitComplete */:
              payload = {};
              break;
      }
      if (payload) {
          return normalizeCompositeEvent(eventType, meta, payload);
      }
  }
  function normalize4MapRegionChange(regionChangePayload) {
      return {
          causedBy: regionChangePayload.causedBy,
          latitude: regionChangePayload.latitude,
          longitude: regionChangePayload.longitude,
          rotate: regionChangePayload.rotate,
          scale: regionChangePayload.scale,
          skew: regionChangePayload.skew,
          type: regionChangePayload.regionChangedType,
      };
  }
  function normalizeEvent4MapTap(tapPayload) {
      return {
          latitude: tapPayload.latitude,
          longitude: tapPayload.longitude,
      };
  }
  function normalizeEvent4MapMarkerTap(markerTapPayload) {
      return {
          children: markerTapPayload.children,
          hasChildren: markerTapPayload.hasChildren,
          latitude: markerTapPayload.latitude,
          longitude: markerTapPayload.longitude,
          markerId: markerTapPayload.markerId,
      };
  }
  function normalizeEvent4MapControlTap(controlTap) {
      return {
          controlId: controlTap.controlId,
      };
  }
  function normalize4MapCalloutTap(calloutTap) {
      return {
          latitude: calloutTap.latitude,
          layoutId: calloutTap.layoutId,
          longitude: calloutTap.longitude,
          markerId: calloutTap.markerId,
      };
  }
  function normalize4MapMarkerMove(markerMove) {
      var detail = {
          markerId: markerMove.markerId,
          pastPoints: markerMove.pastPoints,
      };
      return { detail: detail };
  }
  function normalize4MapMarkerMoveEnd(markerMove) {
      var detail = {
          markerId: markerMove.markerId,
      };
      return { detail: detail };
  }
  function normalize4PolylineMoveEnd(polylineMoveEnd) {
      var detail = {
          polylineId: polylineMoveEnd.polylineId,
      };
      return { detail: detail };
  }
  function normalize4PoiTap(payload) {
      var detail = {
          latitude: payload.latitude,
          longitude: payload.longitude,
          name: payload.name,
          poiId: payload.poiId,
      };
      return { detail: detail };
  }
  function normalize4PanelTap(payload) {
      var detail = {
          layoutId: payload.layoutId,
          panelId: payload.panelId,
      };
      return { detail: detail };
  }
  function normalize4IndoorMapStateChange(payload) {
      var detail = {
          building: payload.building,
          state: payload.state,
      };
      return { detail: detail };
  }

  function getEventName4RtcRoom(platformEventName, data) {
      switch (platformEventName) {
          case "nbcomponent.rtc-room.error" /* ECompositeElementPlatformEventName.RtcRoom.Error */:
              return "error" /* ERtcRoomEventName.Error */;
          case "nbcomponent.rtc-room.audioPlayoutMode" /* ECompositeElementPlatformEventName.RtcRoom.AudioPlayoutMode */:
              return "audioPlayoutMode" /* ERtcRoomEventName.AudioPlayoutMode */;
          case "nbcomponent.rtc-room.enterRoom" /* ECompositeElementPlatformEventName.RtcRoom.EnterRoom */:
              return "enterRoom" /* ERtcRoomEventName.EnterRoom */;
          case "nbcomponent.rtc-room.firstRender" /* ECompositeElementPlatformEventName.RtcRoom.FirstRender */:
              return "firstRender" /* ERtcRoomEventName.FirstRender */;
          case "nbcomponent.rtc-room.networkQuality" /* ECompositeElementPlatformEventName.RtcRoom.NetworkQuality */:
              return "networkQuality" /* ERtcRoomEventName.NetworkQuality */;
          case "nbcomponent.rtc-room.networkType" /* ECompositeElementPlatformEventName.RtcRoom.NetworkType */:
              return "networkType" /* ERtcRoomEventName.NetworkType */;
          case "nbcomponent.rtc-room.participantEnter" /* ECompositeElementPlatformEventName.RtcRoom.ParticipantEnter */:
              return "participantEnter" /* ERtcRoomEventName.ParticipantEnter */;
          case "nbcomponent.rtc-room.participantLeave" /* ECompositeElementPlatformEventName.RtcRoom.ParticipantLeave */:
              return "participantLeave" /* ERtcRoomEventName.ParticipantLeave */;
          case "nbcomponent.rtc-room.receiveMessage" /* ECompositeElementPlatformEventName.RtcRoom.ReceiveMessage */:
              return "receiveMessage" /* ERtcRoomEventName.ReceiveMessage */;
          case "nbcomponent.rtc-room.receiveRecordId" /* ECompositeElementPlatformEventName.RtcRoom.ReceiveRecordId */:
              return "receiveRecordId" /* ERtcRoomEventName.ReceiveRecordId */;
          case "nbcomponent.rtc-room.renderStop" /* ECompositeElementPlatformEventName.RtcRoom.RenderStop */:
              return "renderStop" /* ERtcRoomEventName.RenderStop */;
          case "nbcomponent.rtc-room.roomInfo" /* ECompositeElementPlatformEventName.RtcRoom.RoomInfo */:
              return "roomInfo" /* ERtcRoomEventName.RoomInfo */;
          case "nbcomponent.rtc-room.reply" /* ECompositeElementPlatformEventName.RtcRoom.Reply */:
              return "reply" /* ERtcRoomEventName.Reply */;
      }
  }
  function gePlatformEvents4RtcRoom() {
      return [
          "nbcomponent.rtc-room.error" /* ECompositeElementPlatformEventName.RtcRoom.Error */,
          "nbcomponent.rtc-room.audioPlayoutMode" /* ECompositeElementPlatformEventName.RtcRoom.AudioPlayoutMode */,
          "nbcomponent.rtc-room.enterRoom" /* ECompositeElementPlatformEventName.RtcRoom.EnterRoom */,
          "nbcomponent.rtc-room.firstRender" /* ECompositeElementPlatformEventName.RtcRoom.FirstRender */,
          "nbcomponent.rtc-room.networkQuality" /* ECompositeElementPlatformEventName.RtcRoom.NetworkQuality */,
          "nbcomponent.rtc-room.networkType" /* ECompositeElementPlatformEventName.RtcRoom.NetworkType */,
          "nbcomponent.rtc-room.participantEnter" /* ECompositeElementPlatformEventName.RtcRoom.ParticipantEnter */,
          "nbcomponent.rtc-room.participantLeave" /* ECompositeElementPlatformEventName.RtcRoom.ParticipantLeave */,
          "nbcomponent.rtc-room.receiveMessage" /* ECompositeElementPlatformEventName.RtcRoom.ReceiveMessage */,
          "nbcomponent.rtc-room.receiveRecordId" /* ECompositeElementPlatformEventName.RtcRoom.ReceiveRecordId */,
          "nbcomponent.rtc-room.renderStop" /* ECompositeElementPlatformEventName.RtcRoom.RenderStop */,
          "nbcomponent.rtc-room.roomInfo" /* ECompositeElementPlatformEventName.RtcRoom.RoomInfo */,
          "nbcomponent.rtc-room.reply" ];
  }
  function normalizeEvent4RtcRoomRoomInfo(_a) {
      var roomId = _a.roomId, token = _a.token;
      var detail = {
          roomId: roomId,
          token: token,
      };
      return { detail: detail };
  }
  function normalizeEvent4RtcRoomParticipantEnter(_a) {
      var users = _a.users;
      var detail = {
          users: users,
      };
      return { detail: detail };
  }
  function normalizeEvent4RtcRoomError(_a) {
      var error = _a.error, errorMessage = _a.errorMessage;
      var detail = {
          error: error,
          errorMessage: errorMessage,
      };
      return { detail: detail };
  }
  function normalizeEvent4RtcRoomParticipantLeave(_a) {
      var leaveInfo = _a.leaveInfo, users = _a.users;
      var detail = {
          leaveInfo: leaveInfo,
          users: users,
      };
      return { detail: detail };
  }
  function normalizeEvent4RtcRoomAudioPlayoutMode(_a) {
      var mode = _a.mode;
      var detail = {
          mode: mode,
      };
      return { detail: detail };
  }
  function normalizeEvent4RtcRoomNetworkType(_a) {
      var network = _a.network;
      var detail = {
          network: network,
      };
      return { detail: detail };
  }
  function normalizeEvent4RtcRoomNetworkQuality(_a) {
      var isLocal = _a.isLocal, quality = _a.quality;
      var detail = {
          isLocal: isLocal,
          quality: quality,
      };
      return { detail: detail };
  }
  function normalizeEvent4RtcRoomReceiveRecordId(_a) {
      var recordId = _a.recordId;
      var detail = {
          recordId: recordId,
      };
      return { detail: detail };
  }
  function normalizeEvent4RtcRoomFirstRender(_a) {
      var userId = _a.userId;
      var detail = {
          userId: userId,
      };
      return { detail: detail };
  }
  function normalizeEvent4RtcRoomRenderStop(_a) {
      var userId = _a.userId;
      var detail = {
          userId: userId,
      };
      return { detail: detail };
  }
  function normalizeEvent4RtcRoomReceiveMessage(_a) {
      var message = _a.message, messageId = _a.messageId, timestamp = _a.timestamp, userId = _a.userId;
      var detail = {
          message: message,
          messageId: messageId,
          timestamp: timestamp,
          userId: userId,
      };
      return { detail: detail };
  }
  function normalizeEvent4RtcRoomReplay(_a) {
      var invitedId = _a.invitedId, replyType = _a.replyType;
      var detail = {
          invitedId: invitedId,
          replyType: replyType,
      };
      return { detail: detail };
  }
  function getEventObject4RtcRoom(eventType, meta, data) {
      var payload;
      switch (eventType) {
          case "roomInfo" /* ERtcRoomEventName.RoomInfo */:
              payload = normalizeEvent4RtcRoomRoomInfo(data);
              break;
          case "enterRoom" /* ERtcRoomEventName.EnterRoom */:
              payload = { detail: {} };
              break;
          case "error" /* ERtcRoomEventName.Error */:
              payload = normalizeEvent4RtcRoomError(data);
              break;
          case "participantEnter" /* ERtcRoomEventName.ParticipantEnter */:
              payload = normalizeEvent4RtcRoomParticipantEnter(data);
              break;
          case "participantLeave" /* ERtcRoomEventName.ParticipantLeave */:
              payload = normalizeEvent4RtcRoomParticipantLeave(data);
              break;
          case "audioPlayoutMode" /* ERtcRoomEventName.AudioPlayoutMode */:
              payload = normalizeEvent4RtcRoomAudioPlayoutMode(data);
              break;
          case "networkType" /* ERtcRoomEventName.NetworkType */:
              payload = normalizeEvent4RtcRoomNetworkType(data);
              break;
          case "networkQuality" /* ERtcRoomEventName.NetworkQuality */:
              payload = normalizeEvent4RtcRoomNetworkQuality(data);
              break;
          case "receiveRecordId" /* ERtcRoomEventName.ReceiveRecordId */:
              payload = normalizeEvent4RtcRoomReceiveRecordId(data);
              break;
          case "firstRender" /* ERtcRoomEventName.FirstRender */:
              payload = normalizeEvent4RtcRoomFirstRender(data);
              break;
          case "renderStop" /* ERtcRoomEventName.RenderStop */:
              payload = normalizeEvent4RtcRoomRenderStop(data);
              break;
          case "receiveMessage" /* ERtcRoomEventName.ReceiveMessage */:
              payload = normalizeEvent4RtcRoomReceiveMessage(data);
              break;
          case "reply" /* ERtcRoomEventName.Reply */:
              payload = normalizeEvent4RtcRoomReplay(data);
              break;
      }
      if (payload) {
          return normalizeCompositeEvent(eventType, meta, payload);
      }
  }

  function getEventObject4Video(eventType, meta, data) {
      var payload = getEventPayload4Video(eventType, void 0, data);
      if (payload) {
          return normalizeCompositeEvent(eventType, meta, payload);
      }
  }
  function gePlatformEvents4Video() {
      return [
          "nbcomponent.video.onChangeState" /* ECompositeElementPlatformEventName.Video.ChangeState */,
          "nbcomponent.video.onError" /* ECompositeElementPlatformEventName.Video.Error */,
          "nbcomponent.video.onFullScreenChange" /* ECompositeElementPlatformEventName.Video.FullScreenChange */,
          "nbcomponent.video.onTap" /* ECompositeElementPlatformEventName.Video.Tap */,
          "nbcomponent.video.onTimeUpdate" /* ECompositeElementPlatformEventName.Video.TimeUpdate */,
          "nbcomponent.video.onUserAction" /* ECompositeElementPlatformEventName.Video.UserAction */,
          "nbcomponent.video.onQualityList" /* ECompositeElementPlatformEventName.Video.QualityList */,
          "nbcomponent.video.onInfo" ];
  }

  function getEventName4WebView(platformEventName, data, proxy) {
      switch (platformEventName) {
          case "nbcomponent.webview.onFromMessage" /* ECompositeElementPlatformEventName.WebView.Message */:
              {
                  var _a = data, callback_1 = _a.callback, type = _a.type, param = _a.param, element_1 = _a.element;
                  if (type === "message" /* EZCompositeElement4WebviewMessageEvent.Message */) {
                      return "message" /* EWebViewEventName.Message */;
                  }
                  else if (type === "webViewShare" /* EZCompositeElement4WebviewMessageEvent.WebViewShare */) {
                      proxy.invokeHostBridgeCallProxy('startShare', {
                          bizType: 'H5App_DD',
                          sendEvent: true,
                      }, kBridgeAppxDomain4Empty);
                  }
                  else {
                      switch (type) {
                          case "navigateTo" /* EZCompositeElement4WebviewMessageEvent.NavigateTo */:
                          case "navigateBack" /* EZCompositeElement4WebviewMessageEvent.NavigateBack */:
                          case "reLaunch" /* EZCompositeElement4WebviewMessageEvent.ReLaunch */:
                          case "redirectTo" /* EZCompositeElement4WebviewMessageEvent.RedirectTo */:
                          case "switchTab" /* EZCompositeElement4WebviewMessageEvent.SwitchTab */:
                          case "getLocation" /* EZCompositeElement4WebviewMessageEvent.GetLocation */:
                              proxy.invokeHostBridgeCallProxy(type, param, kBridgeAppxDomain4Empty, function (res) {
                                  proxy.invokeHostBridgeCallProxy('NBComponent.sendMessage', {
                                      actionType: 'postMessage',
                                      data: {
                                          callback: callback_1,
                                          res: {
                                              res: res,
                                              type: 'response',
                                          },
                                      },
                                      element: element_1,
                                      viewId: proxy.pageId,
                                  }, kBridgeAppxDomain4Empty);
                              });
                      }
                  }
              }
              break;
          case "nbcomponent.webview.onLoad" /* ECompositeElementPlatformEventName.WebView.Load */:
              return "load" /* EWebViewEventName.Load */;
          case "nbcomponent.webview.onError" /* ECompositeElementPlatformEventName.WebView.Error */:
              return "error" /* EWebViewEventName.Error */;
      }
  }
  function gePlatformEvents4WebView() {
      return [
          "nbcomponent.webview.onError" /* ECompositeElementPlatformEventName.WebView.Error */,
          "nbcomponent.webview.onLoad" /* ECompositeElementPlatformEventName.WebView.Load */,
          "nbcomponent.webview.onFromMessage" ];
  }
  function getEventObject4WebView(eventType, meta, data) {
      var payload = normalizeEvent4WebView(eventType, data);
      if (payload) {
          return normalizeCompositeEvent(eventType, meta, payload);
      }
  }
  function normalizeEvent4WebView(type, event) {
      switch (type) {
          case "error" /* EWebViewEventName.Error */:
              return { detail: { src: event.webViewUrl } };
          case "load" /* EWebViewEventName.Load */:
              return { detail: { src: event.webViewUrl } };
          case "message" /* EWebViewEventName.Message */:
              return { detail: event.detail };
      }
  }

  function getUserEventObject(tagName, eventType, meta, eventData) {
      if (eventData) {
          var getEvent = void 0;
          switch (tagName) {
              case "ai-camera" /* EZCompositeTagName.AiCamera */:
                  getEvent = getEventObject4AiCamera;
                  break;
              case "ar" /* EZCompositeTagName.Ar */:
                  getEvent = getEventObject4Ar;
                  break;
              case "camera" /* EZCompositeTagName.Camera */:
                  getEvent = getEventObject4Camera;
                  break;
              case "canvas" /* EZCompositeTagName.Canvas */:
                  getEvent = getEventObject4Canvas;
                  break;
              case "input" /* EZCompositeTagName.Input */:
                  getEvent = getEventObject4Input;
                  break;
              case "live-player" /* EZCompositeTagName.LivePlayer */:
                  getEvent = getEventObject4LivePlayer;
                  break;
              case "live-pusher" /* EZCompositeTagName.LivePusher */:
                  getEvent = getEventObject4LivePusher;
                  break;
              case "lottieview" /* EZCompositeTagName.Lottie */:
                  getEvent = getEventObject4Lottie;
                  break;
              case "map" /* EZCompositeTagName.Map */:
                  getEvent = getEventObject4Map;
                  break;
              case "video" /* EZCompositeTagName.Video */:
                  getEvent = getEventObject4Video;
                  break;
              case "web-view" /* EZCompositeTagName.WebView */:
                  getEvent = getEventObject4WebView;
                  break;
              case "ad" /* EZCompositeTagName.Ad */:
                  getEvent = getEventObject4Ad;
                  break;
              case "rtc-room" /* EZCompositeTagName.RtcRoom */:
                  getEvent = getEventObject4RtcRoom;
                  break;
          }
          if (getEvent) {
              return getEvent(eventType, meta, eventData);
          }
      }
  }
  function getUserEventReturnHandler(tagName, eventType) {
      switch (tagName) {
          case "input" /* EZCompositeTagName.Input */:
              switch (eventType) {
                  case "input" /* EInputEventName.Input */:
                      return getEventHandle4Inpu4Input;
              }
      }
  }
  function getCompositePlatformEvents() {
      return [
          gePlatformEvents4AiCamera(),
          gePlatformEvents4Camera(),
          gePlatformEvents4Canvas(),
          gePlatformEvents4Input(),
          gePlatformEvents4Lottie(),
          gePlatformEvents4LivePlayer(),
          gePlatformEvents4LivePusher(),
          gePlatformEvents4Map(),
          gePlatformEvents4Video(),
          gePlatformEvents4WebView(),
          gePlatformEvents4Ad(),
          gePlatformEvents4Ar(),
          gePlatformEvents4RtcRoom(),
          getPlatformEvents4Inside() ];
  }
  function handlePlatformEvent(tagName, platformEventName, eventData, proxy) {
      var getEventName;
      switch (tagName) {
          case "ai-camera" /* EZCompositeTagName.AiCamera */:
              getEventName = getEventName4AiCamera;
              break;
          case "ar" /* EZCompositeTagName.Ar */:
              getEventName = getEventName4Ar;
              break;
          case "camera" /* EZCompositeTagName.Camera */:
              getEventName = getEventName4Camera;
              break;
          case "canvas" /* EZCompositeTagName.Canvas */:
              getEventName = getEventName4Canvas;
              break;
          case "input" /* EZCompositeTagName.Input */:
              getEventName = getEventName4Input;
              break;
          case "live-player" /* EZCompositeTagName.LivePlayer */:
              getEventName = getEventName4LivePlayer;
              break;
          case "live-pusher" /* EZCompositeTagName.LivePusher */:
              getEventName = getEventName4LivePusher;
              break;
          case "lottieview" /* EZCompositeTagName.Lottie */:
              getEventName = getEventName4Lottie;
              break;
          case "map" /* EZCompositeTagName.Map */:
              getEventName = getEventName4Map;
              break;
          case "video" /* EZCompositeTagName.Video */:
              getEventName = getEventName4Video;
              break;
          case "web-view" /* EZCompositeTagName.WebView */:
              getEventName = getEventName4WebView;
              break;
          case "ad" /* EZCompositeTagName.Ad */:
              getEventName = getEventName4Ad;
              break;
          case "rtc-room" /* EZCompositeTagName.RtcRoom */:
              getEventName = getEventName4RtcRoom;
              break;
      }
      if (getEventName) {
          return getEventName(platformEventName, eventData, proxy);
      }
  }

  var ZRuntimeHostCompositeElementSharedEventHub = /** @class */ /*#__PURE__*/ (function () {
      function ZRuntimeHostCompositeElementSharedEventHub(coordinator) {
          this.metaById = {};
          this.pendingEventHandlersById = {};
          this.coordinator = coordinator;
          this.whenElementReady = this.whenElementReady.bind(this);
      }
      ZRuntimeHostCompositeElementSharedEventHub.prototype.dispose = function () {
          this.coordinator = null;
          this.metaById = {};
          this.pendingEventHandlersById = {};
      };
      ZRuntimeHostCompositeElementSharedEventHub.prototype.refresh = function (coordinator) {
          this.coordinator = coordinator;
      };
      ZRuntimeHostCompositeElementSharedEventHub.prototype.addElement = function (compositeElementId, logicTargetId, compositeElementTagName, compositeElementEvent, dataset, userDefinedId, tagOrder // TODO: 去掉 ? 符号
      ) {
          var event = {};
          for (var _i = 0, compositeElementEvent_1 = compositeElementEvent; _i < compositeElementEvent_1.length; _i++) {
              var _a = compositeElementEvent_1[_i], eventName = _a[0], eventHandlerName = _a[1];
              event[eventName] = eventHandlerName;
          }
          var meta = (this.metaById[compositeElementId] = {
              dataset: dataset || {},
              elementId: compositeElementId,
              event: event,
              logicTargetId: logicTargetId,
              tagName: compositeElementTagName,
              tagOrder: tagOrder,
              userDefinedId: userDefinedId,
          });
          var callbacks = this.pendingEventHandlersById[compositeElementId];
          if (callbacks) {
              for (var _b = 0, callbacks_1 = callbacks; _b < callbacks_1.length; _b++) {
                  var callback = callbacks_1[_b];
                  callback(meta);
              }
              this.pendingEventHandlersById[compositeElementId] = [];
          }
      };
      ZRuntimeHostCompositeElementSharedEventHub.prototype.updateElement = function (compositeElementId, compositeElementEvent, dataset, userDefinedAttrId) {
          var compositeElementMeta = this.metaById[compositeElementId];
          if (compositeElementMeta) {
              if (compositeElementEvent) {
                  var compositeElementMetaEvent = compositeElementMeta.event;
                  for (var _i = 0, compositeElementEvent_2 = compositeElementEvent; _i < compositeElementEvent_2.length; _i++) {
                      var _a = compositeElementEvent_2[_i], eventName = _a[0], eventHandlerName = _a[1];
                      compositeElementMetaEvent[eventName] = eventHandlerName;
                  }
              }
              if (dataset) {
                  var datasetMeta = compositeElementMeta.dataset;
                  for (var _b = 0, dataset_1 = dataset; _b < dataset_1.length; _b++) {
                      var _c = dataset_1[_b], key = _c[0], value = _c[1];
                      datasetMeta[key] = value;
                  }
              }
              if (userDefinedAttrId != null) {
                  compositeElementMeta.userDefinedId = userDefinedAttrId;
              }
          }
      };
      ZRuntimeHostCompositeElementSharedEventHub.prototype.removeElement = function (compositeElementId) {
          this.metaById[compositeElementId] = null;
      };
      ZRuntimeHostCompositeElementSharedEventHub.prototype.handleEvent = function (event) {
          var _a;
          var elementId = (_a = event.data) === null || _a === void 0 ? void 0 : _a.element;
          if (elementId) {
              // 要等待前端的组件创建信息回来之后再发送事件
              this.whenElementReady(elementId, this.internalHandleEvent.bind(this, event));
          }
      };
      ZRuntimeHostCompositeElementSharedEventHub.prototype.whenElementReady = function (compositeElementId, callback) {
          var meta = this.metaById[compositeElementId];
          if (meta) {
              callback(meta);
          }
          else {
              var pendings = this.pendingEventHandlersById;
              if (!pendings[compositeElementId]) {
                  pendings[compositeElementId] = [];
              }
              pendings[compositeElementId].push(callback);
          }
      };
      ZRuntimeHostCompositeElementSharedEventHub.prototype.internalHandleEvent = function (event, meta) {
          var this$1 = this;

          // return if destroy
          if (!this.coordinator) {
              return;
          }
          if (!meta) {
              // 必须先过一次 getCompositeUserEvent4Handler，不能提前 return
              return;
          }
          var platformEventName = event.type;
          var tagName = meta.tagName;
          /**
           * 从真实的事件名称回查用户事件名称
           */
          var eventMetas = meta.event;
          var userEventName4Handler = this.handlePlatformEvent(tagName, platformEventName, event.data, this.coordinator, meta);
          if (!userEventName4Handler) {
              this.handleInsideElement(event, meta, tagName, platformEventName, eventMetas);
              return;
          }
          var userEventName4HandlerArray = Array.isArray(userEventName4Handler)
              ? userEventName4Handler
              : [userEventName4Handler];
          var coordinator = this.coordinator;
          for (var _i = 0, userEventName4HandlerArray_1 = userEventName4HandlerArray; _i < userEventName4HandlerArray_1.length; _i++) {
              var userEventName = userEventName4HandlerArray_1[_i];
              var eventHandlerName = eventMetas && eventMetas[userEventName];
              if (eventHandlerName) {
                  // 往指定 targetId 上执行消息
                  var eventFire2User = this$1.getUserEventObject(tagName, userEventName, meta, event.data, platformEventName);
                  if (eventFire2User) {
                      var eventReturnHandler = this$1.getUserEventReturnHandler(tagName, userEventName);
                      var userDefinedId = meta.userDefinedId;
                      coordinator.invokeHostTargetMethod(meta.logicTargetId, eventHandlerName, eventFire2User, eventReturnHandler ? eventReturnHandler.bind(null, coordinator) : null, getZRuntimeElementEventEventExtraInfo(eventFire2User, userDefinedId, userDefinedId));
                  }
              }
          }
      };
      return ZRuntimeHostCompositeElementSharedEventHub;
  }());

  var ZRuntimeHostCompositeElementEventHub = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(ZRuntimeHostCompositeElementEventHub, _super);
      function ZRuntimeHostCompositeElementEventHub(coordinator, dynamicComposite) {
          var _this = _super.call(this, coordinator) || this;
          _this.getUserEventReturnHandler = getUserEventReturnHandler;
          _this.dynamicComposite = dynamicComposite;
          return _this;
      }
      ZRuntimeHostCompositeElementEventHub.prototype.handlePlatformEvent = function (tagName, platformEventName, eventData, proxy, meta) {
          return (handlePlatformEvent(tagName, platformEventName, eventData, proxy) ||
              this.getDynamicUserEventName(platformEventName, getEventTargetTagName(meta.tagOrder)));
      };
      ZRuntimeHostCompositeElementEventHub.prototype.getUserEventObject = function (tagName, eventType, meta, eventData, platformEventName) {
          var _a;
          var _b, _c;
          var stringTag = getEventTargetTagName(meta.tagOrder);
          var eventObject = getUserEventObject(tagName, eventType, meta, eventData) ||
              (this.getDynamicUserEventName(platformEventName, stringTag) === eventType
                  ? normalizeCompositeEvent(eventType, meta)
                  : null);
          if (eventObject) {
              var dynamicComposite = this.dynamicComposite;
              if (dynamicComposite && eventData) {
                  var detailFields = (_c = (_b = dynamicComposite[stringTag]) === null || _b === void 0 ? void 0 : _b.detail) === null || _c === void 0 ? void 0 : _c[eventType];
                  if (Array.isArray(detailFields)) {
                      var detail = eventObject.detail;
                      for (var _i = 0, detailFields_1 = detailFields; _i < detailFields_1.length; _i++) {
                          var field = detailFields_1[_i];
                          var value = eventData[field];
                          if (value !== undefined) {
                              if (detail) {
                                  if (detail[field] === undefined) {
                                      detail[field] = value;
                                  }
                              }
                              else {
                                  detail = (_a = {},
                                      _a[field] = value,
                                      _a);
                              }
                          }
                      }
                      if (detail) {
                          eventObject.detail = detail;
                      }
                  }
              }
              return eventObject;
          }
      };
      ZRuntimeHostCompositeElementEventHub.prototype.handleInsideElement = function (event, meta, tagName, platformEventName, eventMetas) {
          var insideElementConfig = this.getInsideCompositeElementConfig(tagName);
          if (!(insideElementConfig && insideElementConfig.context)) {
              return;
          }
          /*
          context: {
            eventPrefix?: `nbcomponent.${c}.${e}`,
            event: {
              error: {
                error: true | '10.2.8' | 10002008, //用于决定当前运行时的事件对象是否包含此key 未来精细化处理，暂时无用
                errorMessage: true,
              },
              roomInfo: {
                roomId: true,
                token: true,
              },
              enterRoom: {},
              participantEnter: {
                users: true,
              },
            }
          }
          */
          // 同层组件可能不需要不需要对应的Context，有Context时也不一定会有事件
          // 一般新增的同层组件  eventPrefix 不需要定制，默认值就行
          var _a = insideElementConfig.context, insideEventCfg = _a.event, eventPrefix = _a.eventPrefix;
          if (insideEventCfg) {
              var userEventName4Handler4Inside = platformEventName.substr((eventPrefix || "nbcomponent.".concat(tagName, ".")).length);
              // eg:
              // platformEventName: 'nbcomponent.lottieview.animationCancel' => 'animationCancel'
              // eventHandlerName 'animationCancel'
              // userEventName4Handler4Inside 约定一个组件事件只会对应一个容器层native 事件，故无需封装成数组
              var eventHandlerName = eventMetas && eventMetas[userEventName4Handler4Inside];
              if (eventHandlerName) {
                  var eventTargetKeys = Object.keys(insideEventCfg[userEventName4Handler4Inside]);
                  var payload = {};
                  if (eventTargetKeys.length > 0) {
                      payload.detail = {};
                      for (var _i = 0, eventTargetKeys_1 = eventTargetKeys; _i < eventTargetKeys_1.length; _i++) {
                          var eventTargetKey = eventTargetKeys_1[_i];
                          payload.detail[eventTargetKey] = event.data[eventTargetKey];
                      }
                  }
                  // 往指定 targetId 上执行消息
                  var eventFire2User = normalizeCompositeEvent4Inside(userEventName4Handler4Inside, meta, payload, tagName);
                  if (eventFire2User) {
                      var userDefinedId = meta.userDefinedId;
                      this.coordinator.invokeHostTargetMethod(meta.logicTargetId, eventHandlerName, eventFire2User, undefined, // 目前不会有eventReturnHandler
                      getZRuntimeElementEventEventExtraInfo(eventFire2User, userDefinedId, userDefinedId));
                  }
              }
          }
      };
      ZRuntimeHostCompositeElementEventHub.prototype.getDynamicUserEventName = function (platformEventName, stringTag) {
          var _a;
          var dynamicComposite = this.dynamicComposite;
          if (dynamicComposite) {
              var dynamicEvent = (_a = dynamicComposite === null || dynamicComposite === void 0 ? void 0 : dynamicComposite[stringTag]) === null || _a === void 0 ? void 0 : _a.event;
              if (dynamicEvent) {
                  var dynamicUserName = dynamicEvent[platformEventName];
                  // 动态配置里
                  // 一个原生事件仅允许映射到一个用户事件
                  if (typeof dynamicUserName === 'string') {
                      return dynamicUserName;
                  }
              }
          }
      };
      ZRuntimeHostCompositeElementEventHub.prototype.getInsideCompositeElementConfig = function (name) {
          var config = this.insideCompositeElementCfg;
          if (!config && zephyrGetInsideCompositeElementConfigImpl) {
              config = this.insideCompositeElementCfg = zephyrGetInsideCompositeElementConfigImpl();
          }
          if (config) {
              return config[name];
          }
      };
      return ZRuntimeHostCompositeElementEventHub;
  }(ZRuntimeHostCompositeElementSharedEventHub));

  function getCanIUse4ZephyrWeb(supportCompositeElement) {
      var supportAd = !(/* ad:undefined */ undefined) && supportCompositeElement;
      var supportAiCamera = !(/* ai-camera:undefined */ undefined) && supportCompositeElement;
      var supportAR = !(/* ar:undefined */ undefined) && supportCompositeElement;
      var supportCamera = !(/* camera:undefined */ undefined) && supportCompositeElement;
      var supportLivePlayer = !(/* live-player:undefined */ undefined) && supportCompositeElement;
      var supportLivePusher = !(/* live-pusher:undefined */ undefined) && supportCompositeElement;
      var supportLottie = !(/* lottie:undefined */ undefined) && supportCompositeElement;
      // todo 未来针对IDE 还需要支持从启动参数读取IDE当前版本支持的native组件列表
      return {
          ad: supportAd ? 1 : 0,
          'ai-camera': supportAiCamera
              ? {
                  'apply-mic-permission-when-init': 1,
                  'engine-version': (zephyrInsideFeatureRuntimeVersion >= /* c_ai_camera_cameraVersion_2_7_7:10.2.30 */ 10002030) ? 1 : 0,
                  'extra-info': (zephyrInsideFeatureRuntimeVersion >= /* c_ai_camera_extra_info_24_0:10.1.90 */ 10001090) ? 1 : 0,
                  onReady: (zephyrInsideFeatureRuntimeVersion >= /* c_aicamera_onReady_24_3:10.1.95 */ 10001095) ? 1 : 0,
                  onRecognizeResult: 1,
                  orientation: 1,
                  'output-dimension': 1,
                  'record-video-only': (zephyrInsideFeatureRuntimeVersion >= /* c_ai_camera_record_video_only_24_0:10.1.90 */ 10001090) ? 1 : 0,
              }
              : 0,
          ar: supportAR
              ? {
                  'track-face-beauty': 1,
                  'track-face-smile': 1,
              }
              : 0,
          button: {
              onGetIDNumber: 1,
              onGetPhoneNumber: 1,
              onGetUserInfo: 1,
              onLaunchApp: 1,
              'open-type': {
                  contactShare: 1,
                  getAuthorize: 1,
                  launchApp: 1,
                  lifestyle: 1,
                  share: 1,
              },
              'share-target': {
                  weibo: (zephyrInsideFeatureRuntimeVersion >= /* c_button_share-target_24_0:10.1.85 */ 10001085) ? 1 : 0,
              },
          },
          camera: supportCamera
              ? {
                  'apply-mic-permission-when-init': 1,
                  'engine-version': (zephyrInsideFeatureRuntimeVersion >= /* c_camera_cameraVersion_2_7_7:10.2.30 */ 10002030) ? 1 : 0,
                  'extra-info': (zephyrInsideFeatureRuntimeVersion >= /* c_camera_extra_info_24_0:10.1.90 */ 10001090) ? 1 : 0,
                  'frame-format': 1,
                  'frame-size': 1,
                  mode: 1,
                  onReady: (zephyrInsideFeatureRuntimeVersion >= /* c_camera_onReady_24_3:10.1.95 */ 10001095) ? 1 : 0,
                  onScanCode: {
                      return: {
                          detail: {
                              fullResult: (zephyrInsideFeatureRuntimeVersion >= /* c_camera_onScanCode_scanCodeFullRequest_2_7_7:10.2.30 */ 10002030)
                                  ? 1
                                  : 0,
                          },
                      },
                  },
                  onScancode: {
                      return: {
                          detail: {
                              fullResult: (zephyrInsideFeatureRuntimeVersion >= /* c_camera_onScanCode_scanCodeFullRequest_2_7_7:10.2.30 */ 10002030)
                                  ? 1
                                  : 0,
                          },
                      },
                  },
                  'output-dimension': (zephyrInsideFeatureRuntimeVersion >= /* c_camera_output-dimension_23_0:10.1.80 */ 10001080) ? 1 : 0,
                  'record-video-only': (zephyrInsideFeatureRuntimeVersion >= /* c_camera_record_video_only_24_0:10.1.90 */ 10001090) ? 1 : 0,
                  'scan-code-full-result': (zephyrInsideFeatureRuntimeVersion >= /* c_camera_needScanCodeDetail_2_7_7:10.2.30 */ 10002030) ? 1 : 0,
              }
              : 0,
          cdp: !(/* cdp:undefined */ undefined) && supportCompositeElement ? 1 : 0,
          checkbox: {
              color: 1,
              controlled: 1,
          },
          'common-extra': 1,
          'contact-button': !(/* contact-button:undefined */ undefined)
              ? {
                  color: 1,
                  'ext-info': 1,
                  icon: 1,
                  size: 1,
              }
              : 0,
          'cover-image': !(/* cover-image:undefined */ undefined) ? 1 : 0,
          'cover-view': !(/* cover-view:undefined */ undefined) ? 1 : 0,
          'error-view': {
              fullscreen: 1,
              message: 1,
              'message-color': 1,
              title: 1,
              'title-color': 1,
              type: 1,
          },
          form: {
              'report-submit': 1,
          },
          image: {
              catchTap: 1,
              'default-source': 1,
              mode: {
                  aspectFill: 1,
                  aspectFit: 1,
                  bottom: 1,
                  'bottom left': 1,
                  'bottom right': 1,
                  center: 1,
                  heightFix: 1,
                  left: 1,
                  right: 1,
                  scaleToFill: 1,
                  top: 1,
                  'top left': 1,
                  'top right': 1,
                  widthFix: 1,
              },
          },
          lifestyle: !(/* lifestyle:undefined */ undefined)
              ? {
                  memo: 1,
                  onFollow: 1,
              }
              : 0,
          'live-player': supportLivePlayer
              ? {
                  'extra-info': (zephyrInsideFeatureRuntimeVersion >= /* c_live-player_extra-info_23_0:10.1.82 */ 10001082) ? 1 : 0,
                  'floating-mode': (zephyrInsideFeatureRuntimeVersion >= /* c_live_player_floating_mode_24_6:10.1.92 */ 10001092)
                      ? {
                          app: (zephyrInsideFeatureRuntimeVersion >= /* c_live_player_floating_mode_app_24_7:10.1.99 */ 10001099) ? 1 : 0,
                      }
                      : 0,
                  onInfo: (zephyrInsideFeatureRuntimeVersion >= /* c_live_player_on_info_2_6_8:10.2.15 */ 10002015) ? 1 : 0,
                  onStateChange: {
                      videoHeight: (zephyrInsideFeatureRuntimeVersion >= /* c_livePlayer_onStateChange_videoWH_2_7_15:10.2.53 */ 10002053) ? 1 : 0,
                      videoWidth: (zephyrInsideFeatureRuntimeVersion >= /* c_livePlayer_onStateChange_videoWH_2_7_15:10.2.53 */ 10002053) ? 1 : 0,
                  },
                  onTimeUpdate: (zephyrInsideFeatureRuntimeVersion >= /* c_live_player_onTimeUpdate_2_7_0:10.2.18 */ 10002018) ? 1 : 0,
                  onUserAction: (zephyrInsideFeatureRuntimeVersion >= /* c_live_player_floating_mode_24_6:10.1.92 */ 10001092) ? 1 : 0,
              }
              : 0,
          'live-pusher': supportLivePusher
              ? {
                  'enable-agc': (zephyrInsideFeatureRuntimeVersion >= /* c_live_pusher_enableAgc_24_4:10.1.95 */ 10001095) ? 1 : 0,
                  'enable-ans': (zephyrInsideFeatureRuntimeVersion >= /* c_live_pusher_enableAns_24_4:10.1.95 */ 10001095) ? 1 : 0,
                  onStateChange: {
                      return: {
                          message: (zephyrInsideFeatureRuntimeVersion >= /* c_live_pusher_onStateChange_24_4:10.1.95 */ 10001095) ? 1 : 0,
                      },
                  },
                  record: (zephyrInsideFeatureRuntimeVersion >= /* c_live_pusher_record_24_4:10.1.95 */ 10001095) ? 1 : 0,
              }
              : 0,
          lottie: supportLottie
              ? {
                  'assets-path': 1,
                  config: (zephyrInsideFeatureRuntimeVersion >= /* c_lottie_config_2_6_6:10.2.6 */ 10002006) ? 1 : 0,
                  'django-id': 1,
                  djangoId: 1,
                  downgrade: (zephyrInsideFeatureRuntimeVersion >= /* c_lottie_downgrade_2_6_6:10.2.6 */ 10002006) ? 1 : 0,
                  'downgrade-level': (zephyrInsideFeatureRuntimeVersion >= /* c_lottie_downgrade-level_22_0:10.1.78 */ 10001078) ? 1 : 0,
                  md5: 1,
                  optimize: 1,
                  placeholder: 1,
                  'render-type': 1,
                  scene: (zephyrInsideFeatureRuntimeVersion >= /* c_lottie_scene_23_0:10.1.80 */ 10001080) ? 1 : 0,
                  'variable-lottie': 1,
                  'variable-map': 1,
              }
              : 0,
          map: supportCompositeElement
              ? {
                  'custom-map-style': 1,
                  'default-scale': 1,
                  'enable-building': (zephyrInsideFeatureRuntimeVersion >= /* c_map_enable_building_2_7_2:10.2.20 */ 10002020) ? 1 : 0,
                  'enable-overlooking': (zephyrInsideFeatureRuntimeVersion >= /* c_map_enable_overlooking_2_7_2:10.2.20 */ 10002020) ? 1 : 0,
                  'enable-poi': (zephyrInsideFeatureRuntimeVersion >= /* c_map_enable_poi_2_7_2:10.2.20 */ 10002020) ? 1 : 0,
                  'enable-rotate': (zephyrInsideFeatureRuntimeVersion >= /* c_map_enable_rotate_2_7_2:10.2.20 */ 10002020) ? 1 : 0,
                  'enable-satellite': (zephyrInsideFeatureRuntimeVersion >= /* c_map_enable-satellite_22_0:10.1.78 */ 10001078) ? 1 : 0,
                  'enable-scroll': (zephyrInsideFeatureRuntimeVersion >= /* c_map_enable_scroll_2_7_2:10.2.20 */ 10002020) ? 1 : 0,
                  'enable-traffic': (zephyrInsideFeatureRuntimeVersion >= /* c_map_enable_traffic_2_7_2:10.2.20 */ 10002020) ? 1 : 0,
                  'enable-zoom': (zephyrInsideFeatureRuntimeVersion >= /* c_map_enable_zoom_2_7_2:10.2.20 */ 10002020) ? 1 : 0,
                  'ground-overlays': 1,
                  'include-padding': 1,
                  'include-points-animation': 1,
                  'include-scale': (/* c_map_includeScale_24_1:false */ false) ? 1 : 0,
                  'limit-region': 1,
                  'map-type': (zephyrInsideFeatureRuntimeVersion >= /* c_map_map-type_24_0:10.1.92 */ 10001092) ? 1 : 0,
                  'max-scale': (zephyrInsideFeatureRuntimeVersion >= /* c_map_max-scale_24_0:10.1.92 */ 10001092) ? 1 : 0,
                  'min-scale': (zephyrInsideFeatureRuntimeVersion >= /* c_map_min-scale_24_0:10.1.92 */ 10001092) ? 1 : 0,
                  onCalloutTap: {
                      return: {
                          latitude: 1,
                          layoutId: 1,
                          longitude: 1,
                      },
                  },
                  onIndoorMapStateChange: (/* c_map_onIndoorMapStateChange_24_0:false */ false) ? 1 : 0,
                  onInitComplete: (zephyrInsideFeatureRuntimeVersion >= /* c_map_onInitComplete_2_7_2:10.2.20 */ 10002020) ? 1 : 0,
                  onMarkerMove: 1,
                  onMarkerMoveEnd: 1,
                  onMarkerTap: {
                      return: {
                          children: (zephyrInsideFeatureRuntimeVersion >= /* c_map_onMarkerTap_23_0:10.1.80 */ 10001080) ? 1 : 0,
                          hasChildren: (zephyrInsideFeatureRuntimeVersion >= /* c_map_onMarkerTap_23_0:10.1.80 */ 10001080) ? 1 : 0,
                          latitude: 1,
                          longitude: 1,
                      },
                  },
                  onPanelTap: (zephyrInsideFeatureRuntimeVersion >= /* c_map_panels_23_0:10.1.92 */ 10001092) ? 1 : 0,
                  onPoiTap: (zephyrInsideFeatureRuntimeVersion >= /* c_map_onPoiTap_22_0:10.1.78 */ 10001078) ? 1 : 0,
                  onPolylineMoveEnd: 1,
                  onRegionChange: {
                      return: {
                          latitude: 1,
                          longitude: 1,
                          rotate: (zephyrInsideFeatureRuntimeVersion >= /* c_map_onRegionChange_24_0:10.1.92 */ 10001092) ? 1 : 0,
                          scale: 1,
                          skew: (zephyrInsideFeatureRuntimeVersion >= /* c_map_onRegionChange_24_0:10.1.92 */ 10001092) ? 1 : 0,
                          type: 1,
                      },
                  },
                  onTap: {
                      return: {
                          latitude: 1,
                          longitude: 1,
                      },
                  },
                  optimize: 1,
                  panels: (zephyrInsideFeatureRuntimeVersion >= /* c_map_panels_23_0:10.1.92 */ 10001092) ? 1 : 0,
                  'poi-filters': (/* c_map_poiFilters_24_1:false */ false) ? 1 : 0,
                  rotate: 1,
                  // scale: 1, // appx 1.0里没有 意味着从上线开始就已经支持此属性
                  setting: 1,
                  'show-compass': (zephyrInsideFeatureRuntimeVersion >= /* c_map_show_compass_2_7_2:10.2.20 */ 10002020) ? 1 : 0,
                  'show-indoormap': (/* c_map_show-indoormap_24_0:false */ false) ? 1 : 0,
                  'show-scale': (zephyrInsideFeatureRuntimeVersion >= /* c_map_show_scale_2_7_2:10.2.20 */ 10002020) ? 1 : 0,
                  skew: 1,
                  'tile-overlay': 1,
              }
              : 0,
          'match-media': 1,
          'movable-area': 1,
          'movable-view': {
              onTouchCancel: 1,
              onTouchEnd: 1,
              onTouchMove: 1,
              onTouchStart: 1,
          },
          'page-container': 1,
          'picker-view': {
              'indicator-class': 1,
              'mask-class': 1,
              'mask-style': 1,
              onLongTap: 1,
              onPickEnd: 1,
              onPickStart: 1,
              onTap: 1,
          },
          'picker-view-column': {
              onLongTap: 1,
              onTap: 1,
          },
          radio: {
              color: 1,
          },
          'rich-text': {
              onLongTap: {
                  return: {
                      detail: {
                          marks: 1,
                      },
                  },
              },
              onTap: {
                  return: {
                      detail: {
                          marks: 1,
                      },
                  },
              },
          },
          'rtc-room': supportCompositeElement
              ? {
                  aliyunInfo: 1,
                  autoplay: 1,
                  channelId: 1,
                  disableInteractive: (zephyrInsideFeatureRuntimeVersion >= /* c_rtc_room_disableInteractive_2_7_5:10.2.28 */ 10002028) ? 1 : 0,
                  'enable-proximity-monitor': (zephyrInsideFeatureRuntimeVersion >= /* c_rtc_room_enable_proximity_monitor_2_7_22:10.2.70 */ 10002070)
                      ? 1
                      : 0,
                  'enable-video-only-mode': (zephyrInsideFeatureRuntimeVersion >= /* c_rtc_room_enable_video_only_mode_2_8_0:10.2.90 */ 10002090)
                      ? 1
                      : 0,
                  enableCamera: 1,
                  extraInfo: 1,
                  fps: 1,
                  maxBitrate: 1,
                  minBitrate: 1,
                  mute: 1,
                  onAudioPlayMode: 1,
                  onEnterRoom: 1,
                  onError: 1,
                  onFirstRender: 1,
                  onNetworkQuality: 1,
                  onNetworkType: 1,
                  onParticipantEnter: 1,
                  onParticipantLeave: 1,
                  onReceiveMessage: (zephyrInsideFeatureRuntimeVersion >= /* c_rtc_room_onReceiveMessage_23_5:10.1.88 */ 10001088) ? 1 : 0,
                  onReceiveRecordId: 1,
                  onRenderStop: 1,
                  onReplay: (zephyrInsideFeatureRuntimeVersion >= /* c_rtc_room_onReply_24_0:10.1.90 */ 10001090) ? 1 : 0,
                  onRoomInfo: 1,
                  privateMapKey: 1,
                  record: 1,
                  resolution: 1,
                  roomId: 1,
                  signature: 1,
                  token: 1,
                  userId: 1,
              }
              : 0,
          'scroll-view': {
              disableLowerScroll: {
                  always: 1,
                  'out-of-bounds': 1,
              },
              disableUpperScroll: {
                  always: 1,
                  'out-of-bounds': 1,
              },
              'enable-back-to-top': 1,
              onTouchCancel: 1,
              onTouchEnd: 1,
              onTouchMove: 1,
              onTouchStart: 1,
          },
          swiper: {
              'active-class': 1,
              'adjust-height': {
                  current: 1,
                  first: 1,
                  highest: 1,
                  none: 1,
              },
              'changing-class': 1,
              'disable-programmatic-animation': 1,
              'disable-touch': 1,
              'display-multiple-items': 1,
              'easing-function': {
                  default: 1,
                  easeInCubic: 1,
                  easeInOutCubic: 1,
                  easeOutCubic: 1,
                  linear: 1,
              },
              'next-margin': 1,
              onAnimationEnd: 1,
              onChange: {
                  isChanging: 1,
              },
              onTouchCancel: 1,
              onTouchEnd: 1,
              onTouchMove: 1,
              onTouchStart: 1,
              onTransition: {
                  return: {
                      detail: {
                          dx: 1,
                          dy: 1,
                      },
                  },
              },
              'previous-margin': 1,
              'snap-to-edge': 1,
              'swipe-ratio': 1,
              'swipe-speed': 1,
              'touch-angle': 1,
          },
          switch: {
              color: 1,
              controlled: 1,
          },
          textarea: {
              adjustPosition: supportCompositeElement ? 1 : 0,
              confirmType: (zephyrInsideFeatureRuntimeVersion >= 10002080 && zephyrInsideFeatureRuntimePlatform === "android") ? 1 : 0,
              controlled: 1,
              cursor: supportCompositeElement ? 1 : 0,
              cursorSpacing: supportCompositeElement ? 1 : 0,
              fixed: supportCompositeElement ? 1 : 0,
              selectionEnd: supportCompositeElement ? 1 : 0,
              selectionStart: supportCompositeElement ? 1 : 0,
              showConfirmBar: supportCompositeElement ? 1 : 0,
          },
          view: {
              onAnimationEnd: 1,
              onAnimationIteration: 1,
              onAnimationStart: 1,
              onAppear: 1,
              onDisappear: 1,
              onFirstAppear: 1,
              onTransitionEnd: 1,
          },
          'web-view': supportCompositeElement
              ? {
                  'allow-overlay': (zephyrInsideFeatureRuntimeVersion >= /* c_webView_allowOverlay_2_7_0:10.2.18 */ 10002018) ? 1 : 0,
                  'app-id': 1,
                  mini: 1,
                  onError: (zephyrInsideFeatureRuntimeVersion >= /* c_webView_onError_2_7_3:10.2.20 */ 10002020) ? 1 : 0,
                  onLoad: (zephyrInsideFeatureRuntimeVersion >= /* c_webView_onLoad_2_7_3:10.2.20 */ 10002020) ? 1 : 0,
              }
              : 0,
      };
  }
  function getCanIUse4ZephyrWebWithRuntime(supportCompositeElement, startupParams) {
      var canvasHasType = supportCompositeElement &&
          startupParams.hasNativeCanvas &&
          "".concat(startupParams.inPageRenderType).indexOf('canvas') > -1;
      var isNativeInput = getLyraNativeComponentSupportStatus(startupParams, 'input') && supportCompositeElement;
      var isNativeVideo = getLyraNativeComponentSupportStatus(startupParams, 'video') && supportCompositeElement;
      return {
          canvas: {
              onReady: 1,
              type: canvasHasType ? 1 : 0,
          },
          input: {
              'always-system': 1,
              'confirm-hold': isNativeInput ? 1 : 0,
              'confirm-type': isNativeInput ? 1 : 0,
              controlled: 1,
              cursor: isNativeInput ? 1 : 0,
              'random-number': 1,
              'selection-end': isNativeInput ? 1 : 0,
              'selection-start': isNativeInput ? 1 : 0,
              type: {
                  digitpad: isNativeInput ? 1 : 0,
                  idcardpad: isNativeInput ? 1 : 0,
                  numberpad: isNativeInput ? 1 : 0,
              },
          },
          video: {
              direction: isNativeVideo ? 1 : 0,
              'enable-history': isNativeVideo ? 1 : 0,
              'floating-mode': isNativeVideo && (zephyrInsideFeatureRuntimeVersion >= /* c_video_floating_mode_24_6:10.1.92 */ 10001092)
                  ? {
                      app: (zephyrInsideFeatureRuntimeVersion >= /* c_video_floating_mode_app_24_7:10.1.99 */ 10001099) ? 1 : 0,
                  }
                  : 0,
              'hide-play': isNativeVideo ? 1 : 0,
              'hide-poster': isNativeVideo ? 1 : 0,
              'initial-time': isNativeVideo ? 1 : 0,
              loop: isNativeVideo ? 1 : 0,
              'mobilenet-hint-type': isNativeVideo ? 1 : 0,
              muted: isNativeVideo && (/* a_videoContext_mute_24_2:true */ true) ? 1 : 0,
              onFullScreenChange: isNativeVideo ? 1 : 0,
              onInfo: isNativeVideo && (zephyrInsideFeatureRuntimeVersion >= /* c_video_on_info_24_3:10.1.92 */ 10001092) ? 1 : 0,
              onLoading: isNativeVideo ? 1 : 0,
              onQualityList: isNativeVideo && (zephyrInsideFeatureRuntimeVersion >= /* c_video_onQualityList_23_0:10.1.82 */ 10001082) ? 1 : 0,
              onRenderStart: isNativeVideo ? 1 : 0,
              onStop: isNativeVideo ? 1 : 0,
              onTap: isNativeVideo
                  ? {
                      return: {
                          detail: {
                              ptInView: 1,
                          },
                      },
                  }
                  : 0,
              onTimeUpdate: {
                  return: {
                      detail: {
                          userPlayDuration: isNativeVideo ? 1 : 0,
                          videoDuration: isNativeVideo ? 1 : 0,
                      },
                  },
              },
              onUserAction: isNativeVideo ? 1 : 0,
              'poster-size': isNativeVideo ? 1 : 0,
              'show-center-play-btn': isNativeVideo ? 1 : 0,
              'show-fullscreen-btn': isNativeVideo ? 1 : 0,
              'show-mute-btn': isNativeVideo ? 1 : 0,
              'show-thin-progress-bar': isNativeVideo ? 1 : 0,
          },
      };
  }

  function getCanIUse4ZephyrWebExtra() {
      return {
          'add-to-home': 1,
          'focus-on-fortune': 1,
          'life-follow': 1,
          mkt: 1,
          spread: 1,
          ucdp: 1,
          webp: 1,
          'zm-credit-assessment': 1,
          'zm-evaluation': 1,
      };
  }

  var sharedZRuntime$1;
  function enableZephyrRuntimeFeature4WebWorker(k, v) {
      enableZephyrRuntimeFeature(k, v);
      switch (k) {
          case 12 /* EZephyrFrameworkRuntimeFeature.useSlotProviderCreator */:
              if (v) {
                  setCreateSlotProviderImplToSwitchable();
              }
              break;
          case 47 /* EZephyrFrameworkRuntimeFeature.enablePlaceholderBypass */:
              if (v) {
                  sharedZRuntime$1.h["$P" /* ECompilerRuntimeHelperSymbol.PlaceholderSwitchDefine */] = helperBypassContainerFactoryCreate;
              }
              break;
          case 49 /* EZephyrFrameworkRuntimeFeature.enableCaptureEvent */:
              if (v) {
                  var runtimeFeatureFlag = sharedZRuntime$1.h["z" /* ECompilerRuntimeHelperSymbol.RuntimeFeatureFlag */];
                  if (!runtimeFeatureFlag) {
                      runtimeFeatureFlag = 0;
                  }
                  sharedZRuntime$1.h["z" /* ECompilerRuntimeHelperSymbol.RuntimeFeatureFlag */] = runtimeFeatureFlag | 1 /* ERuntimeSupportedFlag.Capture */;
              }
              break;
          case 11 /* EZephyrFrameworkRuntimeFeature.useSlotLazyConstructor */:
              if (v) {
                  sharedZRuntime$1.TargetConstructor = TargetConstructorSlotLazy4HostSide;
              }
              break;
          case 20 /* EZephyrFrameworkRuntimeFeature.enableHMR */:
              if (v) {
                  // 为了减少 SlotBlock Class 带来的混合失败情况，当 HMR 模式时，强制 fallback 存在
                  var originalCreateSlotContent_1 = helper$2["cs" /* ECompilerRuntimeHelperSymbol.CreateSlotContent */];
                  var originalHydrateSlotContent_1 = helper$2["ls" /* ECompilerRuntimeHelperSymbol.HydrateSlotContent */];
                  helper$2["cs" /* ECompilerRuntimeHelperSymbol.CreateSlotContent */] = function (b, c, fallbackFactory, e, f, g) {
                      return originalCreateSlotContent_1(b, c, fallbackFactory || createEmptyblockFactory, e, f, g);
                  };
                  helper$2["ls" /* ECompilerRuntimeHelperSymbol.HydrateSlotContent */] = function (parentNodesContext, b, c, fallbackFactory, e, f, g) {
                      return originalHydrateSlotContent_1(parentNodesContext, b, c, fallbackFactory || createEmptyblockFactory, e, f, g);
                  };
              }
      }
  }
  function getZRuntime4HostSideImpl() {
      var _a;
      return _a = {
              PageConstructor: PageConstructor4HostSide,
              SlotBlockConstructor: SlotBlockConstructor4HostSide,
              TargetConstructor: TargetConstructorSlotLazy4HostSide
          },
          _a["h" /* ECompilerRuntimeContextSymbol.Helper */] = helper$2,
          _a.createSlotProvider4Immediate = createSlotProvider4Immediate,
          _a.createSlotProvider4Lazy = createSlotProvider4Lazy,
          _a.enableFeature = enableZephyrRuntimeFeature4WebWorker,
          _a.setInsideRuntime = setZephyrInsideFeatureRuntime,
          _a;
  }
  function getZRuntime4HostSide$1() {
      if (!sharedZRuntime$1) {
          sharedZRuntime$1 = getZRuntime4HostSideImpl();
      }
      return sharedZRuntime$1;
  }

  function getUserAgentInPlatformWeb() {
      return typeof navigator !== 'undefined' ? navigator.swuserAgent || navigator.userAgent || '' : '';
  }
  var reiOS = /iPhone|iPad/i;
  var envStartupParamsGetter;
  function isAriver(userAgent) {
      var AriverVersion = userAgent.match(/Ariver\/(\d+\.\d+\.\d+)/);
      return !!AriverVersion;
  }
  /**
   * 后面这两个正则懒加载
   */
  var platformType = getPlatformTypeImpl();
  function getPlatformTypeImpl() {
      var finalPlatformType;
      if (typeof navigator !== 'undefined') {
          var userAgent = getUserAgentInPlatformWeb();
          finalPlatformType =
              userAgent.indexOf('Android') > -1
                  ? 2 /* IWeb2SharedEnvPlatform.Android */
                  : userAgent.match(reiOS)
                      ? 1 /* IWeb2SharedEnvPlatform.iOS */
                      : 0 /* IWeb2SharedEnvPlatform.Unknown */;
      }
      else if (typeof WXEnvironment !== 'undefined') {
          // Native 平台，需要适配下符号
          finalPlatformType = WXEnvironment.platform === 'iOS' ? 1 /* IWeb2SharedEnvPlatform.iOS */ : 2 /* IWeb2SharedEnvPlatform.Android */;
      }
      else {
          finalPlatformType = 1 /* IWeb2SharedEnvPlatform.iOS */;
          if (typeof console !== 'undefined') {
              // tslint:disable-next-line
              console.log('[APPX][Env] userAgent not found');
          }
      }
      return finalPlatformType;
  }
  function getPlatformType() {
      return platformType;
  }
  function isUCVersionAvailable(userAgent) {
      var UCVersion = getUCVersion(userAgent);
      return !!((UCVersion && UCVersion[0]) || '');
  }
  function getSupportCompositeElement(userAgent) {
      return platformType === 1 /* IWeb2SharedEnvPlatform.iOS */ || isUCVersionAvailable(userAgent);
  }
  function getPlatformString(userAgent, startupParams) {
      var container = isAriver(userAgent) ? 'ariver' : 'nebula';
      if (platformType === 1 /* IWeb2SharedEnvPlatform.iOS */) {
          return "iOS-".concat(container);
      }
      else if (platformType === 2 /* IWeb2SharedEnvPlatform.Android */ && startupParams) {
          var isV8 = startupParams.isV8Worker === 'true' || startupParams.isV8Worker === true ? 'V8' : 'sw';
          return "Android-".concat(container, "-").concat(isV8);
      }
      else {
          return 'unknown';
      }
  }
  function setEnvStartupParamsGetter(v) {
      envStartupParamsGetter = v;
  }
  function getStartupParams() {
      return envStartupParamsGetter();
  }

  var workerGlobal = /*#__PURE__*/ new Function('return this')();

  var sharedAndroidApplicationId;

  function safeParseJSON(str) {
      try {
          return JSON.parse(str);
      }
      catch (ex) { }
  }
  function protectViewIdAsNumber(option) {
      var finalOption = option;
      if (finalOption && finalOption.viewId && typeof finalOption.viewId === 'string') {
          var viewIdAsNumber = parseInt(finalOption.viewId, 10);
          if (viewIdAsNumber === viewIdAsNumber && viewIdAsNumber > 0) {
              finalOption.viewId = viewIdAsNumber;
          }
      }
      return finalOption;
  }

  var sharedAlipayJSBridge;
  function ensureSharedAlipayJSBridge() {
      return sharedAlipayJSBridge || (sharedAlipayJSBridge = workerGlobal.AlipayJSBridge);
  }
  function getHostBridgeCall4AlipayBridge() {
      if (ensureSharedAlipayJSBridge() && sharedAlipayJSBridge.call) {
          return invokeHostBridgeCall4AlipayBridge;
      }
  }
  function invokeHostBridgeCall4AlipayBridge(viewId, name, option, callback) {
      option = protectViewIdAsNumber(option);
      sharedAlipayJSBridge.call(name, option, callback);
  }

  var sharedKernelEventListener;
  var sharedJSAPICallbackListener;
  function setupKernelEventListener4Push(impl) {
      sharedKernelEventListener = impl;
  }

  function normalizeRemoteBridgeCallUrl(payload) {
      var query = encodeURIComponent(payload);
      return "https://alipay.kylinbridge/?data=".concat(query);
  }

  var sharedAlipayJSBridge$1;
  function getHostBridgeCallSync4AlipayBridge() {
      if (!sharedAlipayJSBridge$1) {
          sharedAlipayJSBridge$1 = workerGlobal.AlipayJSBridge;
      }
      if (sharedAlipayJSBridge$1 && sharedAlipayJSBridge$1.callSync) {
          return invokeHostBridgeCallSync4AlipayBridge;
      }
  }
  function invokeHostBridgeCallSync4AlipayBridge(viewId, name, option) {
      option = protectViewIdAsNumber(option);
      return sharedAlipayJSBridge$1.callSync(name, option);
  }

  // const global = /*#__PURE__*/ getWorkerGlobal();
  var globalImportScripts;
  var sharedRequestSyncIdBase = 0;
  function getHostBridgeCallSync4KylinBridge() {
      globalImportScripts = workerGlobal.importScripts;
      return invokeHostBridgeCallSync4KylinBridge;
  }
  function invokeHostBridgeCallSync4KylinBridge(viewId, name, option) {
      option = protectViewIdAsNumber(option);
      var data;
      var payload = normalizeRemoteBridgeCallSyncPayload(name, option, function (response) {
          data = response;
      });
      var url = normalizeRemoteBridgeCallUrl(payload);
      try {
          globalImportScripts(url);
      }
      catch (ex) { }
      return typeof data === 'string' ? safeParseJSON(data) : data;
  }
  function normalizeRemoteBridgeCallSyncPayload(name, option, callback) {
      var callbackId = "_sw_jsonp_".concat(++sharedRequestSyncIdBase);
      workerGlobal[callbackId] = function (data) {
          workerGlobal[callbackId] = null;
          // 回调
          callback(data);
      };
      var actionData = {
          action: name,
          applicationId: sharedAndroidApplicationId,
          callback: callbackId,
          data: option,
      };
      var payload = JSON.stringify(actionData);
      return payload;
  }

  var sharedHostInvokeBridgeCallImpl;

  var sharedEventEmitter;
  function getSharedEventEmitter() {
      if (!sharedEventEmitter) {
          sharedEventEmitter = new SharedEventEmitter();
      }
      return sharedEventEmitter;
  }

  var Event = /** @class */ /*#__PURE__*/ (function () {
      // tslint:enable object-literal-sort-keys variable-name
      function Event(type, data, engineType) {
          this.type = String(type);
          this.engineType = engineType;
          this.data = data;
          this._preventDefault = false;
      }
      Event.prototype.preventDefault = function () {
          this._preventDefault = true;
      };
      Event.prototype.isDefaultPrevented = function () {
          return !!this._preventDefault;
      };
      return Event;
  }());
  function createEvent4WebEngine(eventName, payload) {
      var data;
      var rest;
      var type;
      var param = payload.param;
      var instanceId = payload.viewId + '';
      var isAndroidObjectParam = param && typeof param === 'object' && getPlatformType() === 2 /* IWeb2SharedEnvPlatform.Android */;
      if (isAndroidObjectParam) {
          // data 取出来用于先构造 Event
          // rest 则用来往 Event 挂其他数据
          // 但是 type 属性不能被覆盖，所以要提出来
          (data = param.data, type = param.type, rest = __rest(param, ["data", "type"]));
      }
      else {
          data = param;
      }
      if (data) {
          data.instanceId = instanceId;
      }
      else {
          data = { instanceId: instanceId };
      }
      var event = new Event(eventName, data, 1 /* ESharedAppxPageEngineType.WebEngine */);
      if (rest) {
          try {
              Object.assign(event, rest);
          }
          catch (e) {
              // 和 1.0 不一样的是
              // 1.0 的 event 是普通对象，而 2.0 用的是 Event
              // 意味着一些 Event 的只读属性是不可以被赋值的
              // 这里兜底下
          }
      }
      return event;
  }

  function setupPushEventListener() {
      if (workerGlobal.document) {
          workerGlobal.document.addEventListener('push', pushEventHandler4StandardWorker);
      }
      else {
          workerGlobal.addEventListener('push', pushEventHandler4ServiceWorker);
      }
  }
  function pushEventHandler4StandardWorker(pushEvent) {
      var data = pushEvent.data;
      if (data) {
          if (data.func || data.beforeunload) {
              // 构造一个 event
              var event = createEvent4WebEngine(data.func || 'beforeunload', data);
              if (sharedKernelEventListener) {
                  sharedKernelEventListener(event);
              }
              if (event.isDefaultPrevented() && typeof pushEvent.preventDefault === 'function') {
                  pushEvent.preventDefault();
              }
          }
          else if (data.requestId) {
              sharedJSAPICallbackListener();
          }
      }
  }
  function pushEventHandler4ServiceWorker(pushEvent) {
      var data = safeParseJSON(pushEvent.data.text()) || {};
      if (data) {
          if (data.func || data.beforeunload) {
              // 构造一个 event
              var clientId = data.param ? data.param.clientId : null;
              var event = createEvent4WebEngine(data.func || 'beforeunload', data);
              if (sharedKernelEventListener) {
                  sharedKernelEventListener(event);
              }
              if (!event.isDefaultPrevented() && clientId) {
                  // 坑人
                  sharedHostInvokeBridgeCallImpl();
              }
          }
          else if (data.requestId) {
              sharedJSAPICallbackListener();
          }
      }
  }

  function getUpperExtraAPIGlobalName(apiName) {
      if (apiName === 'createInsuranceXReplaySession') {
          return 'AppXXreplay';
      }
      return "AppX".concat(apiName.replace(/^\w/, function ($0) { return $0.toUpperCase(); }));
  }
  function getExterAPIAppId(extraAPIName) {
      switch (extraAPIName) {
          case 'faceVerify':
          case 'zimIdentity':
              return '63300057';
          case 'createInsuranceXReplaySession':
              return '63300191';
      }
  }
  function allowXReplay(domain, switchManager) {
      if (domain && isAppxDomain4Extension(domain)) {
          // 插件校验
          var plugins = switchManager.get("enableXreplayPluginIds" /* ESharedAppxSwitchManagerName.EnableXreplayPluginIds */);
          if (plugins && Array.isArray(plugins) && plugins.indexOf(domain.value) >= 0) {
              return true;
          }
          else {
              return false;
          }
      }
      else {
          // 应用校验
          if (!switchManager.get("enableXreplayApp" /* ESharedAppxSwitchManagerName.EnableXreplayApp */)) {
              return false;
          }
      }
      return true;
  }
  function getBridgeCanIUseEvaluate4ExtraAPI(getRuntime, domain, parts, evaluateMap) {
      var runtime = getRuntime();
      if (!runtime) {
          return;
      }
      // 已经处理过了
      if (checkCanIUse$1(evaluateMap, parts)) {
          return 1;
      }
      var bridge = runtime.getBridge();
      if (parts[0] === 'ap' && getInsideConfig4ClientName() === 'ap' && parts.length > 1) {
          var extraAPIName = parts[1];
          if (extraAPIName === 'createInsuranceXReplaySession') {
              if (!allowXReplay(domain, runtime.getSwitchManager())) {
                  return;
              }
          }
          var upperExtraAPIName = getUpperExtraAPIGlobalName(extraAPIName);
          var exterAPIAppId = getExterAPIAppId(extraAPIName);
          if (exterAPIAppId) {
              if (!workerGlobal[upperExtraAPIName]) {
                  loadInternalExtraResource(bridge.callInternalAPISync.bind(bridge), bridge.extraInfo, exterAPIAppId);
              }
              var apiGlobalSymbol = workerGlobal[upperExtraAPIName];
              if (apiGlobalSymbol) {
                  var apiCanIUse = apiGlobalSymbol.canIUse || {};
                  if (typeof apiGlobalSymbol.canIUse === 'function') {
                      apiCanIUse = apiGlobalSymbol.canIUse({
                          compareSystemVersion: compareSystemVersion.bind(null, runtime.getEnv().clientVersionSequence),
                      });
                  }
                  var subPart = evaluateMap[parts[0]];
                  if (typeof subPart !== 'object') {
                      subPart = evaluateMap[parts[0]] = {};
                  }
                  subPart[parts[1]] = apiCanIUse;
              }
              // 如果传入 ap.faceVerify.xxx.yyy
              if (checkCanIUse$1(evaluateMap, parts)) {
                  return 1;
              }
              else {
                  return 0;
              }
          }
      }
      return;
  }
  function compareSystemVersion(actualClientVersionSeq, expectClientVersionString) {
      var expectClientVersionSeq = getClientVersionSequence(expectClientVersionString);
      if (actualClientVersionSeq < expectClientVersionSeq) {
          return -1;
      }
      else if (actualClientVersionSeq > expectClientVersionSeq) {
          return 1;
      }
      else {
          return 0;
      }
  }
  function checkCanIUse$1(map, parts) {
      if (!parts.length) {
          return false;
      }
      var current = map;
      for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
          var part = parts_1[_i];
          current = current && current[part];
          if (!current) {
              return false;
          }
      }
      return true;
  }
  function loadInternalExtraResource(callInternalSync, extraInfo, resAppId) {
      // const bridge = getRuntime().getBridge();
      var internalExtraResourceLoadMap = extraInfo["internalExtraResourceLoadMap" /* EBridgeExtraInfoKey.internalExtraResourceLoadMap */];
      if (!internalExtraResourceLoadMap) {
          internalExtraResourceLoadMap = extraInfo["internalExtraResourceLoadMap" /* EBridgeExtraInfoKey.internalExtraResourceLoadMap */] = {};
      }
      var response = callInternalSync('addPkgRes', {
          resAppId: resAppId,
      });
      var urls = response && response.urls;
      if (urls && Array.isArray(urls)) {
          // 兼容 iOS 82-85 客户端，见 appx/af-appx#1320
          for (var _i = 0, urls_1 = urls; _i < urls_1.length; _i++) {
              var url = urls_1[_i];
              if (internalExtraResourceLoadMap[url]) {
                  continue;
              }
              if (/faceverify\.worker\.js$/.test(url)) {
                  workerGlobal.importScripts(url);
                  internalExtraResourceLoadMap[url] = resAppId;
                  return;
              }
          }
          for (var _a = 0, urls_2 = urls; _a < urls_2.length; _a++) {
              var url = urls_2[_a];
              if (internalExtraResourceLoadMap[url]) {
                  continue;
              }
              if (/index\.worker\.js$/.test(url)) {
                  workerGlobal.importScripts(url);
                  internalExtraResourceLoadMap[url] = resAppId;
                  return;
              }
          }
      }
  }

  var faceVerify = {
      fnOptionIndex: 0,
      fn: function (option) {
          performInternalExtraAPI(this, 'faceVerify', option);
      },
  };
  var zimIdentity = {
      fnOptionIndex: 0,
      fn: function (option) {
          performInternalExtraAPI(this, 'zimIdentity', option);
      },
  };
  var createInsuranceXReplaySession = {
      fnOptionIndex: 0,
      fn: function (option) {
          if (!allowXReplay(this.appxDomain, this.runtime().getSwitchManager())) {
              return;
          }
          return performInternalExtraAPI(this, 'createInsuranceXReplaySession', option);
      },
  };
  function performInternalExtraAPI(callContext, extraAPIName, option) {
      var appId = getExterAPIAppId(extraAPIName);
      if (!appId) {
          return;
      }
      var extraFn = workerGlobal[getUpperExtraAPIGlobalName(extraAPIName)];
      if (!extraFn) {
          loadInternalExtraResource(callContext.callInternalAPISync.bind(callContext), callContext.getBridgeExtraInfo(), appId);
          extraFn = workerGlobal[getUpperExtraAPIGlobalName(extraAPIName)];
      }
      if (extraFn) {
          return extraFn(__assign(__assign({}, option), { 
              // 这里其实不用塞，业务上也没用到
              // 如果强制设置了 callBridge，基本上就没权限了。。
              __appxDomain: callContext.appxDomain.value }), {
              callBridge: callContext.callDefaultBridge.bind(callContext),
              callBridgeSync: callContext.callDefaultBridgeSync.bind(callContext),
              invokeExternalMethod: callContext.invokeExternalElementMethod.bind(callContext),
          });
      }
      else if (option) {
          var unionCallback = extractBridgeCallback(option.success, option.fail, option.complete);
          if (unionCallback) {
              unionCallback({
                  error: -1,
                  errorMessage: 'system error',
              });
          }
      }
  }

  function getBridgeAPI4ExtraAPI() {
      if (getInsideConfig4ClientName() === 'ap') {
          return [
              {
                  keys: ['faceVerify', 'zimIdentity', 'createInsuranceXReplaySession'],
                  namespace: 'ap',
                  values: {
                      createInsuranceXReplaySession: createInsuranceXReplaySession,
                      faceVerify: faceVerify,
                      zimIdentity: zimIdentity,
                  },
              } ];
      }
      else {
          return [];
      }
  }

  function getZRuntime4HostAndCompositeImpl() {
      var getZRuntime4HostSideImpl;
      var ZRuntimeHostCompositeElementEventHubImpl;
      var getCompositePlatformEventsImpl;
      if ( typeof $ZephyrWebWorker !== 'undefined') {
          getZRuntime4HostSideImpl = $ZephyrWebWorker.getZRuntime4HostSide;
          ZRuntimeHostCompositeElementEventHubImpl = $ZephyrWebWorker.ZRuntimeHostCompositeElementEventHub;
          getCompositePlatformEventsImpl = $ZephyrWebWorker.getCompositePlatformEvents;
      }
      else {
          ifIsMiniProgramEnv(function () {
              getZRuntime4HostSideImpl = getZRuntime4HostSide$1;
          });
          ZRuntimeHostCompositeElementEventHubImpl = ZRuntimeHostCompositeElementEventHub;
          getCompositePlatformEventsImpl = getCompositePlatformEvents;
      }
      return {
          ZRuntimeHostCompositeElementEventHubImpl: ZRuntimeHostCompositeElementEventHubImpl,
          getCompositePlatformEventsImpl: getCompositePlatformEventsImpl,
          getZRuntime4HostSideImpl: getZRuntime4HostSideImpl,
      };
  }

  // tslint:disable object-literal-sort-keys
  function getBridgeCanIUse4Core$1() {
      var canIUse = {
          component: {
              pageEvents: 1,
              onError: 1,
          },
          page: {
              setData: {
                  callback: 1,
              },
              $spliceData: 1,
              onOptionMenuClick: 1,
              onPopMenuClick: 1,
              onTabItemTap: 1,
              events: {
                  onLoad: 1,
                  onShow: 1,
                  onReady: 1,
                  onHide: 1,
                  onTabItemTap: 1,
                  onPageScroll: 1,
                  onReachBottom: 1,
                  beforeTabItemTap: 1,
                  onBack: 1,
                  onOptionMenuClick: 1,
                  onPopMenuClick: 1,
                  onTitleClick: 1,
                  onSelectedTabItemTap: (insideFeatureRuntimeVersion >= /* f_page_events_onSelectedTabItemTap_2_7_0:10.2.18 */ 10002018) ? 1 : 0,
              },
              onShareAppMessage: {
                  return: {
                      searchTip: (insideFeatureRuntimeVersion >= /* f_share_return_searchTip_24_0:10.1.82 */ 10001082) ? 1 : 0,
                      scImgUrl: (insideFeatureRuntimeVersion >= /* f_share_return_scImgUrl_2_7_13:10.2.50 */ 10002050) ? 1 : 0,
                  },
                  async: 1,
              },
          },
      };
      return canIUse;
  }

  // tslint:disable object-literal-sort-keys
  function getBridgeCanIUse4My(runtime, platform) {
      var supportDecibelChange = (insideFeatureRuntimeVersion >= /* a_getRecorderManager_onDecibelChange_2_6_2:10.2.0 */ 10002000) ? 1 : 0;
      var switchManager = runtime.getSwitchManager();
      var enableNavigateToMiniProgramQuery = switchManager.get("NavigateToMiniProgramQuery" /* ESharedAppxSwitchManagerName.NavigateToMiniProgramQuery */) === 0 ? 0 : 1;
      return {
          // TODO: 调整框架实现接口 在调整完注入后加后面的逻辑
          createCanvasContext: 1,
          onAccelerometerChange: {
              callback: {
                  timestamp: (insideFeatureRuntimeVersion >= /* a_onAccelerometerChange_timestamp_2_7_5:10.2.30 */ 10002030) ? 1 : 0,
              },
          },
          onCompassChange: {
              callback: {
                  timestamp: (insideFeatureRuntimeVersion >= /* a_onCompassChange_timestamp_2_7_5:10.2.30 */ 10002030) ? 1 : 0,
              },
          },
          onContinuousLocation: 1,
          offContinuousLocation: 1,
          startContinuousLocation: 1,
          stopContinuousLocation: 1,
          alert: {
              object: {
                  confirmColor: 1,
              },
          },
          chooseImage: {
              object: {
                  sizeType: 1,
              },
              return: {
                  tempFiles: 1,
              },
          },
          chooseVideo: {
              return: {
                  tempFilePath: 1,
                  filePath: 1,
              },
          },
          closeSocket: {
              object: {
                  code: 1,
                  reason: 1,
              },
          },
          confirm: {
              object: {
                  cancelColor: 1,
                  confirmColor: 1,
              },
          },
          connectSocket: {
              object: {
                  protocols: 1,
                  multiple: 1,
              },
              return: {
                  send: 1,
                  close: 1,
                  onMessage: 1,
                  onOpen: 1,
                  onClose: 1,
                  onError: 1,
                  offMessage: 1,
                  offOpen: 1,
                  offClose: 1,
                  offError: 1,
              },
          },
          createInnerAudioContext: {
              return: {
                  isRecordAudioPlayState: 1,
                  onCanPlay: 1,
                  playbackRate: (insideFeatureRuntimeVersion >= /* a_InnerAudioContext_playbackRate_2_6_0:10.1.99 */ 10001099) ? 1 : 0,
                  supportBackgroundPlay: (insideFeatureRuntimeVersion >= /* a_innerAudioContext_supportBackgroundPlay_2_7_2:10.2.20 */ 10002020) ? 1 : 0,
              },
          },
          datePicker: {
              object: {
                  format: {
                      yyyy: 1,
                      'yyyy-MM': 1,
                  },
              },
          },
          env: {
              clientName: 1,
              clientVersion: 1,
              language: 1,
              platform: 1,
          },
          downloadFile: {
              return: {
                  abort: 1,
                  onProgressUpdate: 1,
                  tempFilePath: 1,
              },
          },
          getBackgroundAudioManager: {
              return: {
                  isRecordAudioPlayState: 1,
                  onCanPlay: 1,
                  playbackRate: (insideFeatureRuntimeVersion >= /* a_backgroundAudioManager_playbackRate_2_6_0:10.1.99 */ 10001099) ? 1 : 0,
              },
          },
          getFileSystemManager: {
              return: {
                  zip: (insideFeatureRuntimeVersion >= /* a_getFileSystemManager_zip_2_6_7:10.2.10 */ 10002010) ? 1 : 0,
                  accessSync: 1,
                  appendFileSync: 1,
                  copyFileSync: 1,
                  mkdirSync: 1,
                  readdirSync: 1,
                  readFileSync: 1,
                  renameSync: 1,
                  rmdirSync: 1,
                  saveFileSync: 1,
                  unlinkSync: 1,
                  writeFileSync: 1,
                  statSync: 1,
                  getFileInfoSync: 1,
                  getSavedFileListSync: 1,
                  removeSavedFileSync: 1,
              },
          },
          getIDNumber: {
              object: {
                  protocols: 1,
              },
          },
          getImageInfo: {
              return: {
                  orientation: 1,
                  type: 1,
              },
          },
          getLocation: {
              object: {
                  type: 1,
              },
          },
          getOpenUserInfo: {
              object: {
                  protocols: 1,
              },
          },
          getPhoneNumber: {
              object: {
                  protocols: 1,
              },
          },
          getRunData: {
              object: {
                  protocols: 1,
              },
          },
          getRecorderManager: {
              onFrameRecorded: 1,
              offFrameRecorded: 1,
              pause: 1,
              resume: 1,
              onPause: 1,
              offPause: 1,
              onResume: 1,
              offResume: 1,
              onDecibelChange: supportDecibelChange,
              offDecibelChange: supportDecibelChange,
          },
          getSystemInfo: {
              return: {
                  storage: 1,
                  currentBattery: 1,
                  brand: 1,
                  fontSizeSetting: 1,
                  isIphoneXSeries: platform === 'ios' ? 1 : 0,
                  safeArea: (insideFeatureRuntimeVersion >= 10002020 && insideFeatureRuntimePlatform === "ios") ? 1 : 0,
              },
          },
          isSpeechRecognizeAvailable: {
              object: {
                  extraInfo: (insideFeatureRuntimeVersion >= /* a_isSpeechRecognizeAvailable_extraInfo_2_6_7:10.2.10 */ 10002010) ? 1 : 0,
              },
          },
          // 使用 联调设置 方案: https://opendocs.alipay.com/mini/ide/integration-testing 明确不开放envVersion
          navigateToMiniProgram: {
              object: {
                  query: enableNavigateToMiniProgramQuery,
                  // envVersion: 1,
                  version: 1,
              },
          },
          navigateToMiniService: {
              object: {
                  servicePage: 1,
              },
          },
          openRpc: {
              object: {
                  protocols: 1,
              },
          },
          openTaobao: {
              object: {
                  extraQuery: 1,
                  isLite: 1,
              },
          },
          pageScrollTo: 1,
          previewImage: {
              object: {
                  enableSavePhoto: 1,
                  enableShowPhotoDownload: 1,
              },
          },
          prompt: {
              object: {
                  cancelColor: 1,
                  confirmColor: 1,
              },
          },
          request: {
              object: {
                  dataType: {
                      arraybuffer: 1,
                  },
                  data: {
                      arraybuffer: 1,
                  },
                  method: {
                      DELETE: (insideFeatureRuntimeVersion >= /* a_request_method_delete_24_4:10.1.95 */ 10001095) ? 1 : 0,
                  },
              },
          },
          saveImage: {
              object: {
                  showActionSheet: 1,
                  cusHandleResult: 1,
              },
          },
          scan: {
              object: {
                  hideAlbum: 1,
                  actionType: 1,
                  onlyFromCamera: 1,
                  scanType: 1,
              },
              return: {
                  result: 1,
                  scanType: 1,
                  rawData: 1,
                  imageChannel: 1,
              },
          },
          showActionSheet: {
              object: {
                  badges: 1,
              },
          },
          textToSpeech: {
              object: {
                  align: (insideFeatureRuntimeVersion >= /* a_textToSpeech_align_2_6_6:10.2.6 */ 10002006) ? 1 : 0,
              },
          },
          uploadFile: {
              return: {
                  abort: 1,
                  onProgressUpdate: 1,
              },
          },
          showAuthGuide: {
              object: {
                  authType: {
                      BLUETOOTH: (insideFeatureRuntimeVersion >= /* a_showAuthGuide_authType_2_7_10:10.2.33 */ 10002033) ? 1 : 0,
                  },
              },
          },
          canvasToTempFilePath: {
              object: {
                  canvas: (insideFeatureRuntimeVersion >= /* f_canvasToTempFilePath_2_7_15:10.2.35 */ 10002035) ? 1 : 0,
              },
          },
          getAccessibilityManager: {
              return: {
                  announce: (insideFeatureRuntimeVersion >= /* a_getAccessibilityManager_announce_2_7_23:10.2.0 */ 10002000) ? 1 : 0,
                  isScreenReaderEnabled: (insideFeatureRuntimeVersion >= /* a_getAccessibilityManager_isScreenReaderEnabled_2_7_23:10.1.87 */ 10001087)
                      ? 1
                      : 0,
              },
          },
      };
  }

  function getCanIUse4CubeEngine(runtime, clientVersionSequence, platform) {
      return [getBridgeCanIUse4Core$1(), getBridgeCanIUse4My(runtime, platform), getCanIUse4ZephyrNative()];
  }

  var MapContextPrivateTranslateMarker$1 = {
      private: true,
      d: function (option, resolve) {
          var runtime = this.runtime();
          var page = this.getPageInstance();
          if (page) {
              page.invokeRenderMethod("mapTranslateMarker" /* ESharedAppxPageRenderMethod.MapTranslateMarker */, [option.element, option.data], resolve);
          }
      },
  };

  var ContextPrivateSendMessageAction$1 = {
      private: true,
      d: function (opt, resolve) {
          var elementId = opt.element;
          var action = opt.action;
          var param = opt.data;
          var pageInstance = this.getPageInstance();
          if (pageInstance) {
              pageInstance.invokeClientElementMethod(elementId, action, [param], function (_, payload) { return resolve(payload); });
          }
          else {
              resolve({
                  error: 1,
                  errorMessage: 'page not found',
              });
          }
      },
  };

  var createMapContext$1 = {
      create: createAPI4MapContext,
      createOptionIndex: 1,
      linked: {
          ContextPrivateSendMessageAction: ContextPrivateSendMessageAction$1,
          MapContextPrivateSetProps: {},
          MapContextPrivateTranslateMarker: MapContextPrivateTranslateMarker$1,
      },
  };
  var createVideoContext$1 = {
      create: createApi4VideoContext,
      createOptionIndex: 1,
      linked: {
          ContextPrivateSendMessageAction: ContextPrivateSendMessageAction$1,
          VideoContextPrivatePause: VideoContextPrivatePause,
          VideoContextPrivatePlay: VideoContextPrivatePlay,
          VideoContextPrivateSeek: VideoContextPrivateSeek,
          VideoContextPrivateStop: VideoContextPrivateStop,
      },
  };
  var createLottieContext$1 = {
      create: createAPI4LottieContext,
      createOptionIndex: 1,
      linked: {
          ContextPrivateSendMessageAction: ContextPrivateSendMessageAction$1,
      },
  };
  var createLivePlayerContext$1 = {
      create: createAPI4LivePlayerContext,
      createOptionIndex: 1,
      linked: {
          ContextPrivateSendMessageAction: ContextPrivateSendMessageAction$1,
      },
  };
  var createLivePusherContext$1 = {
      create: createAPI4LivePusherContext,
      createOptionIndex: 1,
      linked: {
          ContextPrivateSendMessageAction: ContextPrivateSendMessageAction$1,
      },
  };

  var CompositePublicAPI$1 = {
      __proto__: null,
      createMapContext: createMapContext$1,
      createVideoContext: createVideoContext$1,
      createLottieContext: createLottieContext$1,
      createLivePlayerContext: createLivePlayerContext$1,
      createLivePusherContext: createLivePusherContext$1
  };

  function encodeTextWithReplace(s) {
      return s.replace(/([!,;])/g, '!$1');
  }
  function encodeClip$1() {
      return "p" /* ECanvasTextEncoderActionMap.clip */ + ';';
  }
  function encodeFill$1() {
      return "L" /* ECanvasTextEncoderActionMap.fill */ + ';';
  }
  function encodeRect$1(x, y, width, height) {
      return "".concat("w" /* ECanvasTextEncoderActionMap.rect */).concat(x, ",").concat(y, ",").concat(width, ",").concat(height, ";");
  }
  function encodeFillRect$1(x, y, width, height) {
      return "".concat("n" /* ECanvasTextEncoderActionMap.fillRect */).concat(x, ",").concat(y, ",").concat(width, ",").concat(height, ";");
  }
  function encodeStrokeRect$1(x, y, width, height) {
      return "".concat("s" /* ECanvasTextEncoderActionMap.strokeRect */).concat(x, ",").concat(y, ",").concat(width, ",").concat(height, ";");
  }
  function encodeClearRect$1(x, y, width, height) {
      return "".concat("c" /* ECanvasTextEncoderActionMap.clearRect */).concat(x, ",").concat(y, ",").concat(width, ",").concat(height, ";");
  }
  function encodeStroke$1() {
      return "".concat("x" /* ECanvasTextEncoderActionMap.stroke */, ";");
  }
  function encodeScale$1(x, y) {
      return "".concat("k" /* ECanvasTextEncoderActionMap.scale */).concat(x, ",").concat(y, ";");
  }
  function encodeRotate$1(angle) {
      return "".concat("r" /* ECanvasTextEncoderActionMap.rotate */).concat(angle, ";");
  }
  function encodeTranslate$1(x, y) {
      return "".concat("l" /* ECanvasTextEncoderActionMap.translate */).concat(x, ",").concat(y, ";");
  }
  function encodeSave$1() {
      return "".concat("v" /* ECanvasTextEncoderActionMap.save */, ";");
  }
  function encodeRestore$1() {
      return "".concat("e" /* ECanvasTextEncoderActionMap.restore */, ";");
  }
  function encodeFillText$1(text, x, y, maxWidth) {
      if (maxWidth === void 0) { maxWidth = 100000000; }
      return "".concat("T" /* ECanvasTextEncoderActionMap.fillText */).concat(encodeTextWithReplace(text), ",").concat(x, ",").concat(y, ",").concat(maxWidth, ";");
  }
  function encodeMoveTo$1(x, y) {
      return "".concat("g" /* ECanvasTextEncoderActionMap.moveTo */).concat(x, ",").concat(y, ";");
  }
  function encodeLineTo$1(x, y) {
      return "".concat("i" /* ECanvasTextEncoderActionMap.lineTo */).concat(x, ",").concat(y, ";");
  }
  function encodeArcTo$1(x1, y1, x2, y2, radius) {
      return "".concat("h" /* ECanvasTextEncoderActionMap.arcTo */).concat(x1, ",").concat(y1, ",").concat(x2, ",").concat(y2, ",").concat(radius, ";");
  }
  function encodeArc$1(x, y, radius, startDeg, endDeg, anticlockwise) {
      if (anticlockwise === void 0) { anticlockwise = false; }
      return "".concat("y" /* ECanvasTextEncoderActionMap.arc */).concat(x, ",").concat(y, ",").concat(radius, ",").concat(startDeg, ",").concat(endDeg).concat(anticlockwise ? ',1' : '', ";");
  }
  function encodeTransform$1(a, b, c, d, e, f) {
      return "".concat("f" /* ECanvasTextEncoderActionMap.transform */).concat(a, ",").concat(b, ",").concat(c, ",").concat(d, ",").concat(e, ",").concat(f, ";");
  }
  function encodeSetTransform$1(a, b, c, d, e, f) {
      return "".concat("t" /* ECanvasTextEncoderActionMap.setTransform */).concat(a, ",").concat(b, ",").concat(c, ",").concat(d, ",").concat(e, ",").concat(f, ";");
  }
  function encodeBeginPath$1() {
      return "".concat("b" /* ECanvasTextEncoderActionMap.beginPath */, ";");
  }
  function encodeClosePath$1() {
      return "".concat("o" /* ECanvasTextEncoderActionMap.closePath */, ";");
  }
  function encodeQuadraticCurveTo$1(cpx, cpy, x, y) {
      return "".concat("u" /* ECanvasTextEncoderActionMap.quadraticCurveTo */).concat(cpx, ",").concat(cpy, ",").concat(x, ",").concat(y, ";");
  }
  function encodeBezierCurveTo$1(cp1x, cp1y, cp2x, cp2y, x, y) {
      return "".concat("z" /* ECanvasTextEncoderActionMap.bezierCurveTo */).concat(cp1x, ",").concat(cp1y, ",").concat(cp2x, ",").concat(cp2y, ",").concat(x, ",").concat(y, ";");
  }
  function encodeGradient$1(gradient, isStroke) {
      var args = gradient.args + ',' + gradient.positions.length + ','; // 字符串
      args += gradient.positions.join(',');
      args += ',';
      args += gradient.colors.join(',');
      if (isStroke) {
          args += ',1';
      }
      if (gradient.class === 'linearGradient') {
          return "".concat("D" /* ECanvasTextEncoderActionMap.linearGradient */).concat(args, ";");
      }
      else {
          return "".concat("H" /* ECanvasTextEncoderActionMap.radialGradient */).concat(args, ";");
      }
  }
  function encodeDrawImage$1(imageID, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {
      if (sWidth === undefined) {
          // drawImage(x, 100, 100);
          return "".concat("d" /* ECanvasTextEncoderActionMap.drawImage */).concat(imageID.id, ",").concat(imageID.width, ",").concat(imageID.height, ",").concat(0, ",").concat(0, ",").concat(imageID.width, ",").concat(imageID.height, ",").concat(sx, ",").concat(sy, ",").concat(imageID.width, ",").concat(imageID.height, ";");
      }
      if (dx === undefined) {
          // drawImage(x, 100, 100, 100, 100);
          return "".concat("d" /* ECanvasTextEncoderActionMap.drawImage */).concat(imageID.id, ",").concat(imageID.width, ",").concat(imageID.height, ",").concat(0, ",").concat(0, ",").concat(imageID.width, ",").concat(imageID.height, ",").concat(sx, ",").concat(sy, ",").concat(sWidth, ",").concat(sHeight, ";");
      }
      return "".concat("d" /* ECanvasTextEncoderActionMap.drawImage */).concat(imageID.id, ",").concat(imageID.width, ",").concat(imageID.height, ",").concat(sx, ",").concat(sy, ",").concat(sWidth, ",").concat(sHeight, ",").concat(dx, ",").concat(dy, ",").concat(dWidth, ",").concat(dHeight, ";");
  }
  function encodeFont$1(font) {
      return "".concat("j" /* ECanvasTextEncoderActionMap.font */).concat(font, ";");
  }
  function encodeSetLineDash$1(gaps) {
      return "".concat("I" /* ECanvasTextEncoderActionMap.setLineDash */).concat(gaps.length, ",").concat(gaps.join(','), ";");
  }
  function encodeStrokeText$1(text, x, y, maxWidth) {
      if (maxWidth === void 0) { maxWidth = 100000000; }
      return "".concat("U" /* ECanvasTextEncoderActionMap.strokeText */).concat(encodeTextWithReplace(text), ",").concat(x, ",").concat(y, ",").concat(maxWidth, ";");
  }
  function encodeFillStyle$1(color) {
      return "".concat("F" /* ECanvasTextEncoderActionMap.fillStyle */).concat(color, ";");
  }
  function encodeStrokeStyle$1(color) {
      return "".concat("S" /* ECanvasTextEncoderActionMap.strokeStyle */).concat(color, ";");
  }
  function encodeSetGlobalAlpha$1(alpha) {
      return "".concat("a" /* ECanvasTextEncoderActionMap.globalAlpha */).concat(alpha, ";");
  }
  function encodeSetLineWidth$1(width) {
      return "".concat("W" /* ECanvasTextEncoderActionMap.lineWidth */).concat(width, ";");
  }
  function encodeSetLineCap$1(cap) {
      return "".concat("C" /* ECanvasTextEncoderActionMap.lineCap */).concat(cap, ";");
  }
  function encodeSetLineJoin$1(lineJoin) {
      return "".concat("J" /* ECanvasTextEncoderActionMap.lineJoin */).concat(lineJoin, ";");
  }
  function encodeSetMiterLimit$1(limit) {
      return "".concat("M" /* ECanvasTextEncoderActionMap.miterLimit */).concat(limit, ";");
  }
  function encodeTextBaselineValue(value) {
      var baseline = 0;
      switch (value) {
          case 'alphabetic':
              baseline = 0;
              break;
          case 'middle':
              baseline = 1;
              break;
          case 'top':
              baseline = 2;
              break;
          case 'hanging':
              baseline = 3;
              break;
          case 'bottom':
              baseline = 4;
              break;
          case 'ideographic':
              baseline = 5;
              break;
          default:
              baseline = 0;
              break;
      }
      return baseline;
  }
  function encodeSetTextBaseline$1(baseline) {
      return "".concat("E" /* ECanvasTextEncoderActionMap.textBaseline */).concat(encodeTextBaselineValue(baseline), ";");
  }
  function encodeSetLineDashOffset$1(offset) {
      return "".concat("N" /* ECanvasTextEncoderActionMap.lineDashOffset */).concat(offset, ";");
  }
  function encodeTextAlignValue(value) {
      var align = 0;
      switch (value) {
          case 'start':
              align = 0;
              break;
          case 'end':
              align = 1;
              break;
          case 'left':
              align = 2;
              break;
          case 'center':
              align = 3;
              break;
          case 'right':
              align = 4;
              break;
          default:
              align = 0;
      }
      return align;
  }
  function encodeSetTextAlign$1(align) {
      return "".concat("A" /* ECanvasTextEncoderActionMap.textAlign */).concat(encodeTextAlignValue(align), ";");
  }
  function encodeSetGlobalCompositeOperation$1(operation) {
      return "".concat("V" /* ECanvasTextEncoderActionMap.globalCompositeOperation */).concat(operation, ";");
  }
  function encodeShadowFamily$1(offsetX, offsetY, blur, color) {
      return "".concat("X" /* ECanvasTextEncoderActionMap.shadowOffsetX */).concat(offsetX, ";").concat("Y" /* ECanvasTextEncoderActionMap.shadowOffsetY */).concat(offsetY, ";").concat("Z" /* ECanvasTextEncoderActionMap.shadowBlur */).concat(blur, ";").concat("K" /* ECanvasTextEncoderActionMap.shadowColor */).concat(color, ";");
  }
  function encodeDrawCanvas$1(canvasId, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {
      if (sWidth === undefined) {
          return "".concat("R" /* ECanvasTextEncoderActionMap.drawCanvas */).concat(canvasId, ",").concat(sx, ",").concat(sy, ";");
      }
      if (dx === undefined) {
          return "".concat("R" /* ECanvasTextEncoderActionMap.drawCanvas */).concat(canvasId, ",").concat(sx, ",").concat(sy, ",").concat(sWidth, ",").concat(sHeight, ";");
      }
      return "".concat("R" /* ECanvasTextEncoderActionMap.drawCanvas */).concat(canvasId, ",").concat(sx, ",").concat(sy, ",").concat(sWidth, ",").concat(sHeight, ",").concat(dx, ",").concat(dy, ",").concat(dWidth, ",").concat(dHeight, ";");
  }
  function encodePattern$1(image, repeat, isStroke) {
      if (isStroke === void 0) { isStroke = false; }
      return "".concat("G" /* ECanvasTextEncoderActionMap.pattern */).concat(image.id, ",").concat(image.width, ",").concat(image.height, ",").concat(repeat).concat(isStroke ? ',1' : '', ";");
  }

  var CanvasTextEncoder = {
      __proto__: null,
      encodeClip: encodeClip$1,
      encodeFill: encodeFill$1,
      encodeRect: encodeRect$1,
      encodeFillRect: encodeFillRect$1,
      encodeStrokeRect: encodeStrokeRect$1,
      encodeClearRect: encodeClearRect$1,
      encodeStroke: encodeStroke$1,
      encodeScale: encodeScale$1,
      encodeRotate: encodeRotate$1,
      encodeTranslate: encodeTranslate$1,
      encodeSave: encodeSave$1,
      encodeRestore: encodeRestore$1,
      encodeFillText: encodeFillText$1,
      encodeMoveTo: encodeMoveTo$1,
      encodeLineTo: encodeLineTo$1,
      encodeArcTo: encodeArcTo$1,
      encodeArc: encodeArc$1,
      encodeTransform: encodeTransform$1,
      encodeSetTransform: encodeSetTransform$1,
      encodeBeginPath: encodeBeginPath$1,
      encodeClosePath: encodeClosePath$1,
      encodeQuadraticCurveTo: encodeQuadraticCurveTo$1,
      encodeBezierCurveTo: encodeBezierCurveTo$1,
      encodeGradient: encodeGradient$1,
      encodeDrawImage: encodeDrawImage$1,
      encodeFont: encodeFont$1,
      encodeSetLineDash: encodeSetLineDash$1,
      encodeStrokeText: encodeStrokeText$1,
      encodeFillStyle: encodeFillStyle$1,
      encodeStrokeStyle: encodeStrokeStyle$1,
      encodeSetGlobalAlpha: encodeSetGlobalAlpha$1,
      encodeSetLineWidth: encodeSetLineWidth$1,
      encodeSetLineCap: encodeSetLineCap$1,
      encodeSetLineJoin: encodeSetLineJoin$1,
      encodeSetMiterLimit: encodeSetMiterLimit$1,
      encodeTextBaselineValue: encodeTextBaselineValue,
      encodeSetTextBaseline: encodeSetTextBaseline$1,
      encodeSetLineDashOffset: encodeSetLineDashOffset$1,
      encodeTextAlignValue: encodeTextAlignValue,
      encodeSetTextAlign: encodeSetTextAlign$1,
      encodeSetGlobalCompositeOperation: encodeSetGlobalCompositeOperation$1,
      encodeShadowFamily: encodeShadowFamily$1,
      encodeDrawCanvas: encodeDrawCanvas$1,
      encodePattern: encodePattern$1
  };

  function getEncoder4Canvas(type, version) {
      switch (type) {
          case "Text" /* EEncodeProtocol.Text */:
              return CanvasTextEncoder;
          default:
              throw new Error('unsupported protocol ' + type);
      }
  }

  /**
   * Canvas 各种暴露的 Context API
   * public 方法都是用户可以直接使用的
   * private 方法不要暴露给用户
   * - 正常来说
   *  都是直接调用 Encoder
   * - 对于 drawImage 有一些特殊处理
   *  包含 asyncAction 还有 drawContext 的间接调用
   */
  var CanvasContext = /** @class */ /*#__PURE__*/ (function () {
      /**
       * 后续在这里确定版本协议与协议版本
       * @param elementAttrId canvasElementID
       */
      function CanvasContext(elementAttrId) {
          /**
           * isCanvas
           */
          this.isCanvasContext = true;
          /**
           * 当前调用 draw api 之前是不是需要加载图片
           */
          this.containsAsyncAction = false;
          /**
           * 当插入一个 asyncAction 的时候就要把 action 送到 actionsQueue 里面
           */
          this.actionsQueue = [];
          /**
           * 异步 action 队列
           *  现在里面存放的
           */
          this.asyncActionsQueue = [];
          /**
           * actions 字符串
           * 会发送到 Native
           */
          this.actions = '';
          /**
           * 编码使用的协议
           */
          this.protocol = "Text" /* EEncodeProtocol.Text */;
          /**
           * 编码使用的协议版本
           */
          this.version = "1" /* EEncodeVersion.One */;
          /**
           * 已经加载了的图片
           */
          this.loadedImage = {};
          // @MARK 字体相关 API
          /**
           * 保存字体的状态
           * 用于 measureText 时候获取当前字体属性
           */
          this.fontStyle = {
              font: '10px Arial',
              fontFamily: 'Arial',
              fontSize: 10,
              fontStyle: 'normal',
              fontWeight: 'normal',
          };
          this.id = elementAttrId;
          this.encoder = getEncoder4Canvas(this.protocol, this.version);
      }
      Object.defineProperty(CanvasContext.prototype, "fillStyle", {
          set: function (value) {
              this.setFillStyle(value);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContext.prototype, "font", {
          set: function (font) {
              this.setFont(font);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContext.prototype, "fontSize", {
          set: function (value) {
              this.setFontSize(value);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContext.prototype, "strokeStyle", {
          set: function (value) {
              this.setStrokeStyle(value);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContext.prototype, "globalAlpha", {
          set: function (alpha) {
              this.setGlobalAlpha(alpha);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContext.prototype, "lineWidth", {
          set: function (width) {
              this.setLineWidth(width);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContext.prototype, "lineCap", {
          set: function (lineCap) {
              this.setLineCap(lineCap);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContext.prototype, "lineJoin", {
          set: function (lineJoin) {
              this.setLineJoin(lineJoin);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContext.prototype, "miterLimit", {
          set: function (limit) {
              this.setMiterLimit(limit);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContext.prototype, "textBaseline", {
          set: function (baseline) {
              this.setTextBaseline(baseline);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContext.prototype, "lineDashOffset", {
          set: function (offset) {
              this.setLineDashOffset(offset);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContext.prototype, "textAlign", {
          set: function (align) {
              this.setTextAlign(align);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(CanvasContext.prototype, "globalCompositeOperation", {
          set: function (op) {
              this.setGlobalCompositeOperation(op);
          },
          enumerable: false,
          configurable: true
      });
      CanvasContext.prototype.getElementId = function () {
          return this.id;
      };
      CanvasContext.prototype.setFillStyle = function (color) {
          if (isCanvasGradient(color)) {
              this.addAction(this.encoder.encodeGradient(color, false));
          }
          else if (isCanvasPattern(color)) {
              this.fillOrStrokePattern(color, false);
          }
          else {
              this.addAction(this.encoder.encodeFillStyle(color || ''));
          }
      };
      CanvasContext.prototype.fillRect = function (x, y, width, height) {
          this.addAction(this.encoder.encodeFillRect(x, y, width, height));
      };
      CanvasContext.prototype.strokeRect = function (x, y, width, height) {
          this.addAction(this.encoder.encodeStrokeRect(x, y, width, height));
      };
      CanvasContext.prototype.beginPath = function () {
          this.addAction(this.encoder.encodeBeginPath());
      };
      CanvasContext.prototype.arc = function (x, y, radius, startDeg, endDeg, anticlockwise) {
          if (anticlockwise === void 0) { anticlockwise = false; }
          this.addAction(this.encoder.encodeArc(x, y, radius, startDeg, endDeg, !!anticlockwise));
      };
      CanvasContext.prototype.fill = function () {
          this.addAction(this.encoder.encodeFill());
      };
      CanvasContext.prototype.clip = function () {
          this.addAction(this.encoder.encodeClip());
      };
      CanvasContext.prototype.rect = function (x, y, width, height) {
          this.addAction(this.encoder.encodeRect(x, y, width, height));
      };
      CanvasContext.prototype.stroke = function () {
          this.addAction(this.encoder.encodeStroke());
      };
      CanvasContext.prototype.scale = function (x, y) {
          this.addAction(this.encoder.encodeScale(x, y));
      };
      CanvasContext.prototype.rotate = function (angle) {
          this.addAction(this.encoder.encodeRotate(angle));
      };
      CanvasContext.prototype.translate = function (x, y) {
          this.addAction(this.encoder.encodeTranslate(x, y));
      };
      CanvasContext.prototype.save = function () {
          this.addAction(this.encoder.encodeSave());
      };
      CanvasContext.prototype.restore = function () {
          this.addAction(this.encoder.encodeRestore());
      };
      CanvasContext.prototype.clearRect = function (x, y, width, height) {
          this.addAction(this.encoder.encodeClearRect(x, y, width, height));
      };
      CanvasContext.prototype.fillText = function (text, x, y, maxWidth) {
          if (maxWidth === void 0) { maxWidth = 100000000; }
          this.addAction(this.encoder.encodeFillText(text, x, y, maxWidth));
      };
      CanvasContext.prototype.moveTo = function (x, y) {
          this.addAction(this.encoder.encodeMoveTo(x, y));
      };
      CanvasContext.prototype.lineTo = function (x, y) {
          this.addAction(this.encoder.encodeLineTo(x, y));
      };
      CanvasContext.prototype.arcTo = function (x1, y1, x2, y2, radius) {
          this.addAction(this.encoder.encodeArcTo(x1, y1, x2, y2, radius));
      };
      CanvasContext.prototype.transform = function (a, b, c, d, e, f) {
          this.addAction(this.encoder.encodeTransform(a, b, c, d, e, f));
      };
      CanvasContext.prototype.setTransform = function (a, b, c, d, e, f) {
          this.addAction(this.encoder.encodeSetTransform(a, b, c, d, e, f));
      };
      CanvasContext.prototype.closePath = function () {
          this.addAction(this.encoder.encodeClosePath());
      };
      CanvasContext.prototype.quadraticCurveTo = function (cpx, cpy, x, y) {
          this.addAction(this.encoder.encodeQuadraticCurveTo(cpx, cpy, x, y));
      };
      CanvasContext.prototype.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
          this.addAction(this.encoder.encodeBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y));
      };
      CanvasContext.prototype.setLineDash = function (gaps) {
          if (gaps.length % 2 === 1) {
              var doubleGaps = __spreadArray$1(__spreadArray$1([], gaps, true), gaps, true);
              this.addAction(this.encoder.encodeSetLineDash(doubleGaps));
          }
          else {
              this.addAction(this.encoder.encodeSetLineDash(gaps));
          }
      };
      CanvasContext.prototype.strokeText = function (text, x, y, maxWidth) {
          if (maxWidth === void 0) { maxWidth = 100000000; }
          this.addAction(this.encoder.encodeStrokeText(text, x, y, maxWidth));
      };
      /**
       * strokeStyle
       * @param color
       */
      CanvasContext.prototype.setStrokeStyle = function (color) {
          if (isCanvasGradient(color)) {
              this.addAction(this.encoder.encodeGradient(color, true));
          }
          else if (isCanvasPattern(color)) {
              this.fillOrStrokePattern(color, true);
          }
          else {
              this.addAction(this.encoder.encodeStrokeStyle(color || ''));
          }
      };
      /**
       * @param alpha
       */
      CanvasContext.prototype.setGlobalAlpha = function (alpha) {
          this.addAction(this.encoder.encodeSetGlobalAlpha(alpha));
      };
      /**
       * @param width
       */
      CanvasContext.prototype.setLineWidth = function (width) {
          this.addAction(this.encoder.encodeSetLineWidth(width));
      };
      /**
       * @param lineCap
       */
      CanvasContext.prototype.setLineCap = function (lineCap) {
          this.addAction(this.encoder.encodeSetLineCap(lineCap));
      };
      /**
       * @param lineJoin
       */
      CanvasContext.prototype.setLineJoin = function (lineJoin) {
          this.addAction(this.encoder.encodeSetLineJoin(lineJoin));
      };
      /**
       * @param limit
       */
      CanvasContext.prototype.setMiterLimit = function (limit) {
          this.addAction(this.encoder.encodeSetMiterLimit(limit));
      };
      /**
       * @param baseline
       */
      CanvasContext.prototype.setTextBaseline = function (baseline) {
          this.addAction(this.encoder.encodeSetTextBaseline(baseline));
      };
      /**
       * @param offset
       */
      CanvasContext.prototype.setLineDashOffset = function (offset) {
          this.addAction(this.encoder.encodeSetLineDashOffset(offset));
      };
      /**
       * @param align
       */
      CanvasContext.prototype.setTextAlign = function (align) {
          this.addAction(this.encoder.encodeSetTextAlign(align));
      };
      /**
       * @param op
       */
      CanvasContext.prototype.setGlobalCompositeOperation = function (op) {
          this.addAction(this.encoder.encodeSetGlobalCompositeOperation(op));
      };
      /**
       * @param offsetX
       * @param offsetY
       * @param blur
       * @param color
       */
      CanvasContext.prototype.setShadow = function (offsetX, offsetY, blur, color) {
          if (offsetX === void 0) { offsetX = 0; }
          if (offsetY === void 0) { offsetY = 0; }
          if (blur === void 0) { blur = 0; }
          if (color === void 0) { color = 'black'; }
          this.addAction(this.encoder.encodeShadowFamily(offsetX, offsetY, blur, color));
      };
      /**
       * 设置字体大小
       * @param size
       */
      CanvasContext.prototype.setFontSize = function (size) {
          this.fontStyle.fontSize = size;
          var font = this.fontStyle.font.replace(/\d+\.?\d*px/, size + 'px');
          this.updateFont(font);
      };
      /**
       * <font-style> <font-weight> font-size font-family
       * @param font String
       */
      CanvasContext.prototype.setFont = function (font) {
          this.parseAndSaveFont(font);
          this.updateFont(font);
      };
      CanvasContext.prototype.createRadialGradient = function (x0, y0, r0, x1, y1, r1) {
          return {
              addColorStop: function (position, color) {
                  this.positions.push(position);
                  this.colors.push(color);
              },
              args: "".concat(x0, ",").concat(y0, ",").concat(r0, ",").concat(x1, ",").concat(y1, ",").concat(r1),
              class: 'radialGradient',
              colors: [],
              positions: [],
          };
      };
      CanvasContext.prototype.createCircularGradient = function (x, y, r) {
          return {
              addColorStop: function (position, color) {
                  this.positions.push(position);
                  this.colors.push(color);
              },
              args: "".concat(x, ",").concat(y, ",0,").concat(x, ",").concat(y, ",").concat(r),
              class: 'radialGradient',
              colors: [],
              positions: [],
          };
      };
      CanvasContext.prototype.createLinearGradient = function (x0, y0, x1, y1) {
          return {
              addColorStop: function (position, color) {
                  this.positions.push(position);
                  this.colors.push(color);
              },
              args: "".concat(x0, ",").concat(y0, ",").concat(x1, ",").concat(y1),
              class: 'linearGradient',
              colors: [],
              positions: [],
          };
      };
      /**
       * 支持三种draw
       * 1. 送一个 CanvasContext 进来
       *    调用 drawCanvas API
       * 2. 送一个 imageURL 进来
       *    检查缓存
       *      1. 缓存为空
       *          异步加载 加一个 Async Action
       *      2. 缓存不为空
       *          内容合法 id !== -1 直接添加一个 drawImage 的 Action
       *          内容不合法 忽略，可能之前已经加载失败了，那就不要了
       *  3. 送一个 object 进来
       *    ImageInfo 符合 IImageLoadData 的结构
       *    直接塞一个 drawImage Action
       * @param imageOrContext
       * @param sx
       * @param sy
       * @param sWidth
       * @param sHeight
       * @param dx
       * @param dy
       * @param dWidth
       * @param dHeight
       */
      CanvasContext.prototype.drawImage = function (imageOrContext, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {
          /**
           * 对象类的
           */
          if (imageOrContext && typeof imageOrContext === 'object') {
              if (isCanvasValidImageInfo(imageOrContext)) {
                  /**
                   * 用户自己 preloadCanvasImage 拿到的结果
                   */
                  return this.addAction(this.encoder.encodeDrawImage(imageOrContext, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight));
              }
              else if (isCanvasContextDrawable(imageOrContext)) {
                  /**
                   * 用户要 drawCanvas
                   */
                  return this.addAction(this.encoder.encodeDrawCanvas(imageOrContext.getElementId(), sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight));
              }
          }
          /**
           * 字符串类型的
           */
          if (imageOrContext && typeof imageOrContext === 'string') {
              var imageUrl = imageOrContext;
              var imageInfo = this.loadedImage[imageUrl];
              if (!imageInfo) {
                  /**
                   * 需要异步加载
                   */
                  this.containsAsyncAction = true;
                  this.addAsyncAction({
                      dHeight: dHeight,
                      dWidth: dWidth,
                      dx: dx,
                      dy: dy,
                      sHeight: sHeight,
                      sWidth: sWidth,
                      sx: sx,
                      sy: sy,
                      type: 'loadImage',
                      url: imageUrl,
                  });
              }
              else {
                  /**
                   * 已经加载好了，不需要异步加载
                   */
                  if (isCanvasValidImageInfo(imageInfo)) {
                      this.addAction(this.encoder.encodeDrawImage(imageInfo, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight));
                  }
              }
          }
      };
      CanvasContext.prototype.getImageData = function (platformAPI, opt, callback) {
          opt.elementId = this.id;
          return platformAPI.asyncCall('canvasGetImageDataPrivate4Native', opt, callback);
      };
      CanvasContext.prototype.putImageData = function (platformAPI, opt, callback) {
          opt.elementId = this.id;
          return platformAPI.asyncCall('canvasPutImageDataPrivate4Native', opt, callback);
      };
      CanvasContext.prototype.toDataURL = function (platformAPI, opt, callback) {
          opt.elementId = this.id;
          return platformAPI.asyncCall('canvasToDataURLPrivate4Native', opt, callback);
      };
      CanvasContext.prototype.toTempFilePath = function (platformAPI, opt, callback) {
          opt.elementId = this.id;
          return platformAPI.asyncCall('canvasToTempFilePathPrivate4Native', opt, callback);
      };
      CanvasContext.prototype.measureTextAsync = function (platformAPI, text, callback) {
          if (typeof callback === 'function') {
              callback(this.measureText(platformAPI, text));
          }
      };
      CanvasContext.prototype.measureText = function (platformAPI, text) {
          var result = {};
          platformAPI.invokeRenderMethodImmediately("measureText" /* ESharedAppxPageRenderMethod.MeasureText */, [text, this.fontStyle.font], function (err, res) {
              result = res;
          });
          return result;
      };
      /**
       * 小程序 Canvas 特定 API
       * 向 Native 发送绘制命令
       * @param invokeMethod
       * @param reserve
       * @param callback
       */
      CanvasContext.prototype.draw = function (platformAPI, reserve, callback) {
          var _this = this;
          if (this.actions === '' && this.containsAsyncAction === false) {
              if (callback) {
                  setTimeout(callback, 0);
              }
              return;
          }
          if (this.containsAsyncAction) {
              this.resolveAsyncActions(this.id, platformAPI.loadImage, function (actions) {
                  _this.commitDrawFrame(platformAPI.invokeClientElementMethod, reserve, actions, callback);
              });
          }
          else {
              this.commitDrawFrame(platformAPI.invokeClientElementMethod, reserve, this.actions, callback);
          }
          this.reset();
      };
      CanvasContext.prototype.createPattern = function (image, repeat) {
          return {
              class: 'pattern',
              image: image,
              repeat: repeat,
          };
      };
      CanvasContext.prototype.addAsyncAction = function (action) {
          this.actionsQueue.push(this.actions);
          this.asyncActionsQueue.push(action);
          this.actions = '';
      };
      /**
       * 添加 action
       * @param s
       */
      CanvasContext.prototype.addAction = function (s) {
          this.actions += s;
      };
      CanvasContext.prototype.reset = function () {
          this.containsAsyncAction = false;
          this.actionsQueue = [];
          this.asyncActionsQueue = [];
          this.actions = '';
      };
      CanvasContext.prototype.resolveAsyncActions = function (elementId, loadImage, done) {
          var _this = this;
          /**
           * cache status
           */
          var asyncActionsQueue = this.asyncActionsQueue;
          var actionsQueue = this.actionsQueue;
          var lastDrawImageToDrawActions = this.actions;
          var len = asyncActionsQueue.length;
          var urls = [];
          var action = '';
          if (len !== actionsQueue.length) ;
          for (var _i = 0, asyncActionsQueue_1 = asyncActionsQueue; _i < asyncActionsQueue_1.length; _i++) {
              var asyncAction = asyncActionsQueue_1[_i];
              // 没找到才推进去
              if (urls.indexOf(asyncAction.url) === -1) {
                  urls.push(asyncAction.url);
              }
          }
          loadImage(elementId, urls, function (result) {
              /**
               * 映射成 url to id 的 map
               */
              if (result.loaded) {
                  _this.loadedImage = __assign(__assign({}, _this.loadedImage), result.loaded);
              }
              /**
               * 开始遍历同步 actions 和异步 actions 做合并
               */
              for (var i = 0; i < len; i++) {
                  action += actionsQueue[i];
                  // encode
                  var asyncAction = asyncActionsQueue[i];
                  var texture = _this.loadedImage[asyncAction.url];
                  if (!texture) {
                      continue;
                  }
                  var textureId = texture.id;
                  if (textureId === -1 || textureId === '-1' || textureId === undefined || textureId === null) {
                      continue;
                  }
                  if (isCanvasAsyncAction4Image(asyncAction)) {
                      action += _this.encoder.encodeDrawImage(texture, asyncAction.sx, asyncAction.sy, asyncAction.sWidth, asyncAction.sHeight, asyncAction.dx, asyncAction.dy, asyncAction.dWidth, asyncAction.dHeight);
                  }
                  else if (isCanvasAsyncAction4Pattern(asyncAction)) {
                      action += _this.encoder.encodePattern(texture, asyncAction.repeat, asyncAction.isStroke);
                  }
              }
              /**
               * 最后接上「最后一个 drawImage」 到 「draw」 中间的 actions
               */
              action += lastDrawImageToDrawActions;
              done(action);
          });
      };
      CanvasContext.prototype.fillOrStrokePattern = function (pattern, isStroke) {
          var image = pattern.image;
          if (image && typeof image === 'string') {
              var imageInfo = this.loadedImage[image];
              if (imageInfo) {
                  if (isCanvasValidImageInfo(imageInfo)) {
                      // 已经加载过的图片
                      this.addAction(this.encoder.encodePattern(imageInfo, pattern.repeat, isStroke));
                  }
              }
              else {
                  // 异步加载图片去
                  this.containsAsyncAction = true;
                  this.addAsyncAction({
                      isStroke: isStroke,
                      repeat: pattern.repeat,
                      type: 'pattern',
                      url: image,
                  });
              }
          }
          if (image && typeof image === 'object') {
              if (isCanvasValidImageInfo(image)) {
                  this.addAction(this.encoder.encodePattern(image, pattern.repeat, isStroke));
              }
          }
      };
      /**
       * + parse 字体字符串
       * + 更新当前 Context 内的字体状态
       * + <font-style> <font-weight> font-size font-family
       * @param font
       */
      CanvasContext.prototype.parseAndSaveFont = function (font) {
          var this$1 = this;

          this.fontStyle.font = font;
          var matches = font.match(/^(([\w\-]+\s)*)(\d+px)(\/(\d+\.?\d*(px)?))?\s+(.*)/);
          if (matches) {
              var fontStyles = matches[1].trim().split(/\s/);
              this.fontStyle.fontSize = parseFloat(matches[3]);
              this.fontStyle.fontFamily = matches[7];
              for (var _i = 0, fontStyles_1 = fontStyles; _i < fontStyles_1.length; _i++) {
                  var s = fontStyles_1[_i];
                  if (['italic', 'oblique', 'normal'].indexOf(s) > -1) {
                      this$1.fontStyle.fontStyle = s;
                  }
                  else if (['bold', 'normal'].indexOf(s) > -1) {
                      this$1.fontStyle.fontWeight = s;
                  }
              }
          }
      };
      /**
       * 根据当前字体状态向 Native 发送指令更新字体
       */
      CanvasContext.prototype.updateFont = function (font) {
          this.fontStyle.font = font;
          this.addAction(this.encoder.encodeFont(this.fontStyle.font));
      };
      /**
       * 向 Native 发送 draw 指令
       * @param invokeMethod
       * @param reserve
       * @param actions
       * @param callback
       */
      CanvasContext.prototype.commitDrawFrame = function (invokeMethod, reserve, actions, callback) {
          invokeMethod(this.id, 'draw', [!!reserve, actions, this.version, Date.now(), null], function () { return typeof callback === 'function' && callback(); });
      };
      return CanvasContext;
  }());

  function isNumber$1(v) {
      return typeof v === 'number';
  }
  var canvasGetImageDataPrivate4Native = {
      private: true,
      d: function (finalOptions, resolve) {
          if (!isNumber$1(finalOptions.width)) {
              throw new Error('getImageData 必须传入 width 参数，且 width 必须为数字');
          }
          if (!isNumber$1(finalOptions.height)) {
              throw new Error('getImageData 必须传入 height 参数，且 height 必须为数字');
          }
          if (!isNumber$1(finalOptions.x)) {
              throw new Error('getImageData 必须传入 x 参数，且 x 必须为数字');
          }
          if (!isNumber$1(finalOptions.y)) {
              throw new Error('getImageData 必须传入 y 参数，且 y 必须为数字');
          }
          var page = this.getPageInstance();
          if (page) {
              page.invokeClientElementMethod(finalOptions.elementId, 'getImageData', [finalOptions.x, finalOptions.y, finalOptions.width, finalOptions.height], function (_, res) {
                  res.data = new Uint8ClampedArray(res.data);
                  resolve(res);
              });
          }
      },
  };
  var canvasPutImageDataPrivate4Native = {
      private: true,
      d: function (finalOptions, resolve) {
          if (!(finalOptions.data instanceof Uint8ClampedArray)) {
              throw new Error('putImageData 必须传入 data 参数，且 data 必须为 Uint8ClampedArray');
          }
          if (!isNumber$1(finalOptions.width)) {
              throw new Error('putImageData 必须传入 width 参数，且 width 必须为数字');
          }
          if (!isNumber$1(finalOptions.height)) {
              throw new Error('putImageData 必须传入 height 参数，且 height 必须为数字');
          }
          if (!isNumber$1(finalOptions.x)) {
              throw new Error('putImageData 必须传入 x 参数，且 x 必须为数字');
          }
          if (!isNumber$1(finalOptions.y)) {
              throw new Error('putImageData 必须传入 y 参数，且 y 必须为数字');
          }
          var page = this.getPageInstance();
          if (page) {
              page.invokeClientElementMethod(finalOptions.elementId, 'putImageData', [
                  // 先这样跑起来
                  // 之后考虑把这个东西搬出去
                  JSON.stringify(Array.prototype.slice.call(finalOptions.data)),
                  finalOptions.x,
                  finalOptions.y,
                  finalOptions.width,
                  finalOptions.height ], function (_, res) { return resolve(res); });
          }
      },
  };
  var canvasToDataURLPrivate4Native = {
      private: true,
      d: function (finalOptions, resolve) {
          var page = this.getPageInstance();
          if (page) {
              page.invokeClientElementMethod(finalOptions.elementId, 'toDataURL', [
                  finalOptions.x || 0,
                  finalOptions.y || 0,
                  finalOptions.width || -1,
                  finalOptions.height || -1,
                  finalOptions.destWidth || -1,
                  finalOptions.destHeight || -1,
                  finalOptions.fileType || 'png',
                  finalOptions.quality || 1 ], function (_, res) {
                  if (res && res.base64) {
                      resolve(res.base64);
                  }
                  else {
                      resolve(res);
                  }
              });
          }
      },
  };
  var canvasToTempFilePathPrivate4Native = {
      private: true,
      d: function (finalOptions, resolve) {
          var page = this.getPageInstance();
          if (page) {
              page.invokeClientElementMethod(finalOptions.elementId, 'toTempFilePath', [
                  finalOptions.x || 0,
                  finalOptions.y || 0,
                  finalOptions.width || -1,
                  finalOptions.height || -1,
                  finalOptions.destWidth || -1,
                  finalOptions.destHeight || -1,
                  finalOptions.fileType || 'png',
                  finalOptions.quality || 1 ], function (_, res) { return resolve(res); });
          }
      },
  };
  var canvasContextLinked4Native = {
      canvasGetImageDataPrivate4Native: canvasGetImageDataPrivate4Native,
      canvasPutImageDataPrivate4Native: canvasPutImageDataPrivate4Native,
      canvasToDataURLPrivate4Native: canvasToDataURLPrivate4Native,
      canvasToTempFilePathPrivate4Native: canvasToTempFilePathPrivate4Native,
  };

  function getNativeCanvasContext(canvasElementId, appxDomain, callContext) {
      /**
       * 异步调用 JSAPI
       */
      var asyncCall = callContext.runtime().getBridge().getScope(appxDomain).call;
      /**
       * canvas invoke render
       * @param funcName
       * @param arg
       * @param callback
       */
      var invokeRenderMethodImmediately = function (funcName, arg, callback) {
          var page = callContext.getPageInstance();
          if (page) {
              page.invokeRenderMethodImmediately(funcName, arg, callback);
          }
      };
      /**
       * canvas invokeMethod
       * @param elementId
       * @param method
       * @param args
       * @param callback
       */
      var invokeClientElementMethod = function (elementId, method, args, callback) {
          var page = callContext.getPageInstance();
          if (page) {
              page.invokeClientElementMethod(elementId, method, args, callback);
          }
      };
      /**
       * canvas 加载图片
       * @param urls
       * @param callback
       */
      function loadImage(elementId, urls, callback) {
          var page = callContext.getPageInstance();
          if (page) {
              page.invokeClientElementMethod(elementId, 'canvasPreloadImageInRender', [urls], function (_, res) {
                  // 这里 res 保证与容器结果一致
                  callback(res);
              });
          }
      }
      /**
       * 创建 Context
       */
      var context = new CanvasContext(canvasElementId);
      var platformAPI = {
          asyncCall: asyncCall,
          invokeClientElementMethod: invokeClientElementMethod,
          invokeRenderMethodImmediately: invokeRenderMethodImmediately,
          loadImage: loadImage,
      };
      /**
       * 这堆 bind 需要治理一下
       */
      context.draw = context.draw.bind(context, platformAPI);
      if ((/* a_canvasContext_measureText_24_3:true */ true)) {
          context.measureText = context.measureText.bind(context, platformAPI);
          context.measureTextAsync = context.measureTextAsync.bind(context, platformAPI);
      }
      else {
          // 确保枚举不到
          var descriptor = {
              enumerable: false,
          };
          Object.defineProperties(context, {
              measureText: descriptor,
              measureTextAsync: descriptor,
          });
      }
      context.getImageData = context.getImageData.bind(context, platformAPI);
      context.putImageData = context.putImageData.bind(context, platformAPI);
      context.toDataURL = context.toDataURL.bind(context, platformAPI);
      context.toTempFilePath = context.toTempFilePath.bind(context, platformAPI);
      return context;
  }
  var createCanvasContext = {
      createOptionIndex: 1,
      create: function (elementId) {
          return getNativeCanvasContext(elementId, this.appxDomain, this);
      },
      linked: canvasContextLinked4Native,
  };

  var createCanvasContext4Hybrid = {
      createOptionIndex: 1,
      create: function (elementId) {
          var finalCanvasId = this.getRewriteIdWithAppxDomain(elementId);
          var pageInstance = this.getPageInstance();
          if (pageInstance && pageInstance.getEngineType() === 2 /* ESharedAppxPageEngineType.CubeEngine */) {
              return getNativeCanvasContext(finalCanvasId, this.appxDomain, this);
          }
          else {
              return getCanvasContextInStandard(finalCanvasId, this.appxDomain, this);
          }
      },
      linked: __assign(__assign({}, canvasContextLinked4Native), canvasContextLinked4Standard),
  };

  function getBridgeAPI4NativeCanvas() {
      return {
          keys: ['createCanvasContext'],
          linked: true,
          values: {
              createCanvasContext: createCanvasContext,
          },
      };
  }

  function getBridgeAPI4HybridCanvas() {
      return {
          keys: ['createCanvasContext'],
          linked: true,
          values: {
              createCanvasContext: createCanvasContext4Hybrid,
          },
      };
  }

  function getBridgeApi4MyCompositeElementPublic$1() {
      return {
          keys: Object.keys(CompositePublicAPI$1),
          linked: true,
          values: CompositePublicAPI$1,
      };
  }

  var _createCanvas$1 = {
      fnOptionIndex: 0,
      fn: function (_a) {
          var _this = this;
          var id = _a.id, success = _a.success;
          var pageInstance = this.getPageInstance();
          if (pageInstance) {
              if (pageInstance.getEngineType() === 2 /* ESharedAppxPageEngineType.CubeEngine */) {
                  var viewId = this.assignedViewId;
                  var realId = this.getRewriteIdWithAppxDomain(id);
                  if (success && typeof success === 'function' && typeof callCreateCanvas === 'function') {
                      success(callCreateCanvas(viewId, realId));
                  }
              }
              // 为了不动 web-support-worker 这里暂时先直接把 web 的实现拿过来了
              else {
                  var viewId_1 = this.assignedViewId;
                  var realId_1 = this.getRewriteIdWithAppxDomain(id);
                  pageInstance.whenCompositeElementReady(realId_1, function () {
                      if (success && typeof success === 'function') {
                          var createNativeCanvas = getNativeFunctionIfExisted("__createCanvas" /* ENativeV8PluginFunctionName.createCanvas */, _this.runtime().getKernel().getFrameworkContextSymbol);
                          success(setupVideoRecorderForNativeCanvas(createNativeCanvas(String(viewId_1), String(realId_1)), _this.getBridgeExtraInfo(), _this.runtime().getSwitchManager().get("fixTempFilePath" /* ESharedAppxSwitchManagerName.FixTempFilePath */) !== 0));
                      }
                  });
              }
          }
      },
  };
  var _createOffscreenCanvas$1 = {
      fnOptionIndex: false,
      fn: function (widthOrOption, height) {
          var viewId = this.assignedViewId;
          var pageInstance = this.getPageInstance();
          if (pageInstance) {
              if (pageInstance.getEngineType() === 2 /* ESharedAppxPageEngineType.CubeEngine */) {
                  if (typeof callCreateOffscreenCanvas !== 'function') {
                      info$1$1('createOffscreenCanvas failed');
                      return;
                  }
                  if (widthOrOption && typeof widthOrOption === 'object' && widthOrOption !== null) {
                      return callCreateOffscreenCanvas(viewId, widthOrOption.width, widthOrOption.height);
                  }
                  return callCreateOffscreenCanvas.apply(void 0, __spreadArray$1([viewId], arguments, false));
              }
              else {
                  var createNativeOffscreenCanvas = getNativeFunctionIfExisted("__createOffscreenCanvas" /* ENativeV8PluginFunctionName.createOffscreenCanvas */, this.runtime().getKernel().getFrameworkContextSymbol);
                  if (widthOrOption && typeof widthOrOption === 'object') {
                      return createNativeOffscreenCanvas(widthOrOption.width, widthOrOption.height, widthOrOption.type);
                  }
                  else {
                      return createNativeOffscreenCanvas.apply(void 0, arguments);
                  }
              }
          }
      },
  };

  function getBridgeAPI4BindingCanvas() {
      return {
          keys: ['_createCanvas', '_createOffscreenCanvas'],
          values: {
              _createCanvas: _createCanvas$1,
              _createOffscreenCanvas: _createOffscreenCanvas$1,
          },
      };
  }

  // Cube 专属的下一期做 这部分 API 根据栈顶转发
  // import { getBridgeApi4MyCompositeElementPublic } from './platform';
  function setupBridge4HybridEngine(runtime) {
      var _a;
      var _b = runtime.getEnv(), clientVersionSequence = _b.clientVersionSequence, platform = _b.platform, userAgent = _b.userAgent;
      var apiMap = __spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1([
          getBridgeAPI4Core(),
          getBridgeAPI4My(),
          getBridgeAPI4MyManager(),
          // FS, TCP, UDP
          getBridgeAPI4MyLinked(),
          getBridgeAPI4MyProto()
      ], getBridgeAPI4InsideFeature(platform), true), getBridgeAPI4InsideFeature4AppContext(), true), [
          getBridgeAPI4MySync()
      ], false), getBridgeAPI4AP4Inside(), true), [
          getBridgeAPI4MyAP4Root(),
          getBridgeAPI4MyPlatformRequired(platform),
          getBridgeApi4MyCompositeElementPublic(),
          getBridgeAPI4HybridCanvas()
      ], false), getBridgeAPI4NativeBinding(), true), [
          getBridgeAPI4BindingCanvas(),
          getBridgeAPI4Snapshot(),
          getBridgeAPI4MyApp(),
          getBridgeAPI4SelectedTextRange()
      ], false), getBridgeAPI4RDS(), true), [
          getBridgeAPI4IntersectionObserver(),
          getBridgeAPI4AppContext()
      ], false), getBridgeAPI4ExtraAPI(), true), getBridgeAPI4InsideAPI({
          platform: platform,
          version: clientVersionSequence,
      }), true);
      var publicProxyApiMap = [getBridgeAPI4MyPublicProxy(), getBridgeAPI4MyPublicProxyWithCache()];
      var isWebSupportCompositeElement = getSupportCompositeElement(userAgent);
      var bridge = getBridge(apiMap, publicProxyApiMap, (_a = {
              defaultType: 1 /* ESharedAppxPageEngineType.WebEngine */,
              evaluate: [getBridgeCanIUseEvaluate4ExtraAPI]
          },
          _a[1 /* ESharedAppxPageEngineType.WebEngine */] = function (runtimeGetter) { return [
              getBridgeCanIUse4Core(true),
              getCanIUseMap(runtime, false, isWebSupportCompositeElement, platform),
              getCanIUse4ZephyrWeb(isWebSupportCompositeElement),
              getCanIUse4ZephyrWebExtra(),
              getBridgeCanIUse4CoreWithRuntime(true, runtimeGetter),
              getCanIUse4ZephyrWebWithRuntime(isWebSupportCompositeElement, runtimeGetter() && runtimeGetter().getEnv().originalStartupParams) ]; },
          _a[2 /* ESharedAppxPageEngineType.CubeEngine */] = function () { return getCanIUse4CubeEngine(runtime, clientVersionSequence, platform); },
          _a), function () { return runtime; });
      // native specific setup
      var publicInstance = bridge.defaultScope.publicInstance;
      Object.defineProperty(publicInstance, 'renderTarget', {
          configurable: true,
          enumerable: true,
          get: function () {
              var nav = runtime.getNav();
              var topInstance = nav && nav.getTopInstance();
              if (topInstance && topInstance.getEngineType() === 2 /* ESharedAppxPageEngineType.CubeEngine */) {
                  return 'native';
              }
              else {
                  return 'web';
              }
          },
          set: function (v) {
              // ignore
          },
      });
      publicInstance.SDKVersion = kAppxVersion;
      exportBridgeAPI4PublicInstance(publicInstance, runtime.getKernel().userAgent);
      runtime.setBridge(bridge);
  }

  function setupBridge4RuntimeTypePage(runtime) {
      var _a;
      var platform = runtime.getEnv().platform;
      var apiMap = __spreadArray$1(__spreadArray$1([
          getBridgeAPI4Core(),
          getBridgeAPI4My(),
          getBridgeAPI4MySync(),
          getBridgeAPI4MyPlatformRequired(platform)
      ], getBridgeAPI4AP4Inside(true), true), [
          getBridgeAPI4MyAP4Root(),
          getBridgeAPI4NativeCanvas(),
          getBridgeApi4MyCompositeElementPublic$1() ], false);
      var publicProxy4ApiMap = [getBridgeAPI4MyPublicProxy(), getBridgeAPI4MyPublicProxyWithCache()];
      var bridge = getBridge(apiMap, publicProxy4ApiMap, (_a = {
              defaultType: 2 /* ESharedAppxPageEngineType.CubeEngine */,
              evaluate: []
          },
          _a[2 /* ESharedAppxPageEngineType.CubeEngine */] = function () { return [
              getBridgeCanIUse4Core(false),
              getCanIUseMap(runtime, true, false, platform) ]; },
          _a[1 /* ESharedAppxPageEngineType.WebEngine */] = function () { return []; },
          _a), function () { return runtime; });
      // native specific setup
      var publicInstance = bridge.defaultScope.publicInstance;
      publicInstance.renderTarget = 'native';
      publicInstance.SDKVersion = kAppxVersion;
      exportBridgeAPI4PublicInstance(publicInstance, runtime.getKernel().userAgent);
      runtime.setBridge(bridge);
  }

  function setupBridge4RuntimeTypeApp(runtime) {
      var _a;
      var _b = runtime.getEnv(), clientVersionSequence = _b.clientVersionSequence, platform = _b.platform;
      var apiMap = __spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1(__spreadArray$1([
          getBridgeAPI4Core(),
          getBridgeAPI4My(),
          getBridgeAPI4MyManager(),
          // FS, TCP, UDP
          getBridgeAPI4MyLinked(),
          getBridgeAPI4MyProto()
      ], getBridgeAPI4InsideFeature(platform), true), getBridgeAPI4InsideFeature4AppContext(), true), [
          getBridgeAPI4MySync(),
          getBridgeAPI4MyPlatformRequired(platform)
      ], false), getBridgeAPI4AP4Inside(true), true), [
          getBridgeAPI4MyAP4Root(),
          getBridgeAPI4NativeCanvas(),
          getBridgeAPI4BindingCanvas(),
          getBridgeApi4MyCompositeElementPublic$1(),
          getBridgeAPI4MyApp()
      ], false), getBridgeAPI4InsideAPI({
          platform: platform,
          version: clientVersionSequence,
      }), true);
      var publicProxyApiMap = [getBridgeAPI4MyPublicProxy(), getBridgeAPI4MyPublicProxyWithCache()];
      var bridge = getBridge(apiMap, publicProxyApiMap, (_a = {
              defaultType: 2 /* ESharedAppxPageEngineType.CubeEngine */,
              evaluate: []
          },
          _a[2 /* ESharedAppxPageEngineType.CubeEngine */] = function () { return getCanIUse4CubeEngine(runtime, clientVersionSequence, platform); },
          _a[1 /* ESharedAppxPageEngineType.WebEngine */] = function () { return []; },
          _a), function () { return runtime; });
      // native specific setup
      var publicInstance = bridge.defaultScope.publicInstance;
      publicInstance.renderTarget = 'native';
      publicInstance.SDKVersion = kAppxVersion;
      exportBridgeAPI4PublicInstance(publicInstance, runtime.getKernel().userAgent);
      runtime.setBridge(bridge);
  }

  function setupBridge(runtime, isHybridEngine) {
      switch (runtime.type) {
          case 0 /* ESharedAppxRuntimeContextType.App */:
              if (isHybridEngine) {
                  return setupBridge4HybridEngine(runtime);
              }
              else {
                  return setupBridge4RuntimeTypeApp(runtime);
              }
          case 1 /* ESharedAppxRuntimeContextType.Page */:
              {
                  return setupBridge4RuntimeTypePage(runtime);
              }
      }
  }

  var kBridgeCallIgnoreList = {
      call: true,
      canIUse: true,
      createAnimation: true,
      createAudioContext: true,
      createCanvasContext: true,
      createMapContext: true,
      createVideoContext: true,
      emit: true,
      on: true,
      pageScrollTo: true,
      postMessage: true,
      reportAnalytics: true,
  };

  var CubeNativeNavigationController4Page = /** @class */ /*#__PURE__*/ (function () {
      function CubeNativeNavigationController4Page(appInstanceId) {
          this.currentStack = [];
          this.appInstanceId = appInstanceId;
      }
      CubeNativeNavigationController4Page.prototype.supportChain = function () {
          return false;
      };
      CubeNativeNavigationController4Page.prototype.supportRescue = function () { };
      CubeNativeNavigationController4Page.prototype.supportId = function () {
          return false;
      };
      CubeNativeNavigationController4Page.prototype.isFirstPage = function () {
          return true;
      };
      CubeNativeNavigationController4Page.prototype.popStack = function (instance) {
          instance.onPageUnload();
          var currentStack = this.currentStack;
          var length = currentStack.length;
          while (length--) {
              if (currentStack[length] === instance) {
                  currentStack.splice(length, 1);
                  return;
              }
          }
      };
      CubeNativeNavigationController4Page.prototype.bootstrap = function () {
          this.bindEvent();
      };
      CubeNativeNavigationController4Page.prototype.inited = function () { };
      CubeNativeNavigationController4Page.prototype.prepare = function (type, payload, callback) {
          // nothing
      };
      CubeNativeNavigationController4Page.prototype.failPostNavigation = function (payload) {
          // nothing
      };
      CubeNativeNavigationController4Page.prototype.beforePreparation = function () { };
      CubeNativeNavigationController4Page.prototype.onPageNotFound = function () { };
      CubeNativeNavigationController4Page.prototype.onPageCreate = function (event) {
          var nextPage = this.getInstanceById(event.data.instanceId);
          this.currentPagePath = nextPage.pagePath;
          this.currentStack.push(nextPage);
          var appBehavior = getRuntimeById(this.appInstanceId).getMeta().getAppBehavior();
          var decodeQuery = true;
          if (appBehavior &&
              appBehavior["decodeQuery" /* ESharedAppMetaBehaviorMapValue.DecodeQuery */] === "disable" /* ESharedDecodeQueryBehaviorType.Disable */) {
              decodeQuery = false;
          }
          var launchOptions = getLaunchOptionFromLatestStartupParams(this.getEnv().originalStartupParams, nextPage.pagePath, decodeQuery);
          this.getApp().onLaunch(launchOptions);
          nextPage.bootstrap();
      };
      CubeNativeNavigationController4Page.prototype.getTopViewId = function () {
          var instance = this.getTopInstance();
          var pageId = instance && instance.pageId;
          return pageId ? String(pageId) : '';
      };
      CubeNativeNavigationController4Page.prototype.getBottomViewId = function () {
          return this.getTopViewId();
      };
      CubeNativeNavigationController4Page.prototype.getCurrentStackLength = function () {
          return 1;
      };
      CubeNativeNavigationController4Page.prototype.getTopPagePath = function () {
          return this.currentPagePath;
      };
      CubeNativeNavigationController4Page.prototype.canPopBack = function () {
          return false;
      };
      CubeNativeNavigationController4Page.prototype.needBackHome = function () {
          return false;
      };
      CubeNativeNavigationController4Page.prototype.getTopPagePublicInstance = function () {
          return this.getTopInstance().getPageLogicInstance().publicInstance;
      };
      CubeNativeNavigationController4Page.prototype.dispose = function () { };
      CubeNativeNavigationController4Page.prototype.getTopInstance = function () {
          return this.currentStack[0];
      };
      CubeNativeNavigationController4Page.prototype.getBottomInstance = function () {
          return this.currentStack[0];
      };
      CubeNativeNavigationController4Page.prototype.onPullDownRefresh = function (event) {
          var data = event.data;
          var payload = {
              from: (data && data.from) || 'manual',
          };
          var $page = this.getTopInstance();
          if ($page) {
              $page.invokePageEvent("onPullDownRefresh" /* ESharedAppxEvent.Page.onPullDownRefresh */, 3 /* ISharedAppxPageBaseInstanceEventInvokeType.LegacyAndEvents */, payload);
          }
      };
      CubeNativeNavigationController4Page.prototype.onTitleClick = function (event) {
          var $page = this.getTopInstance();
          if ($page) {
              $page.invokePageEvent("onTitleClick" /* ESharedAppxEvent.Page.onTitleClick */, 3 /* ISharedAppxPageBaseInstanceEventInvokeType.LegacyAndEvents */);
          }
      };
      CubeNativeNavigationController4Page.prototype.getApp = function () {
          return getRuntimeById(this.appInstanceId).getApp();
      };
      CubeNativeNavigationController4Page.prototype.getEnv = function () {
          return getRuntimeById(this.appInstanceId).getEnv();
      };
      CubeNativeNavigationController4Page.prototype.getInstanceById = function (instanceId) {
          return getRuntimeById(this.appInstanceId).getPageManager().getInstanceById(instanceId);
      };
      CubeNativeNavigationController4Page.prototype.bindEvent = function () {
          var eventManager = getRuntimeById(this.appInstanceId).getEventManager();
          eventManager.addEventListener("pageResume" /* ESharedAppxEvent.Native.PageResume */, this.onPageResume.bind(this));
          eventManager.addEventListener("pagePause" /* ESharedAppxEvent.Native.PagePause */, this.onPagePause.bind(this));
          eventManager.addEventListener("appPause" /* ESharedAppxEvent.Native.AppPause */, this.onAppPause.bind(this));
          eventManager.addEventListener("appResume" /* ESharedAppxEvent.Native.AppResume */, this.onAppResume.bind(this));
          eventManager.addEventListener("customPopMenuClicked" /* ESharedAppxEvent.Native.PopMenuClick */, this.onPopMenuClick.bind(this));
          eventManager.addEventListener("firePullToRefresh" /* ESharedAppxEvent.Native.PullDownRefresh */, this.onPullDownRefresh.bind(this));
          eventManager.addEventListener("titleClick" /* ESharedAppxEvent.Native.TitleClick */, this.onTitleClick.bind(this));
      };
      CubeNativeNavigationController4Page.prototype.onPageResume = function (event) {
          this.getTopInstance().onPageResume();
      };
      CubeNativeNavigationController4Page.prototype.onPagePause = function (event) {
          this.getTopInstance().onPagePause();
      };
      CubeNativeNavigationController4Page.prototype.onAppResume = function (event) {
          this.getApp().onResume({});
          this.getTopInstance().onPageResume();
      };
      CubeNativeNavigationController4Page.prototype.onAppPause = function (event) {
          this.getApp().onPause();
          this.getTopInstance().onPagePause();
      };
      CubeNativeNavigationController4Page.prototype.onPopMenuClick = function (event) {
          // 往栈顶发一下
          var data = event.data;
          var payload = __assign(__assign({}, data), { index: Number(data.index) });
          var $page = this.getTopInstance();
          if ($page) {
              $page.invokePageEvent("onPopMenuClick" /* ESharedAppxEvent.Page.onPopMenuClick */, 3 /* ISharedAppxPageBaseInstanceEventInvokeType.LegacyAndEvents */, payload);
          }
      };
      return CubeNativeNavigationController4Page;
  }());

  var CubeNativeNavigationController4Hybrid = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(CubeNativeNavigationController4Hybrid, _super);
      function CubeNativeNavigationController4Hybrid() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      CubeNativeNavigationController4Hybrid.prototype.onPullDownRefresh = function (event) {
          // 避免cube链路下拉刷新时引起建树重绘
          event.preventDefault();
          _super.prototype.onPullDownRefresh.call(this, event);
      };
      return CubeNativeNavigationController4Hybrid;
  }(AppxNavigationController));

  function formatStack4Cube(originalStack) {
      if (typeof originalStack !== 'string') {
          return '';
      }
      var slicedStack = originalStack.slice(0, 1000);
      // 处理一下回车符号
      return slicedStack.split('\n').join('###');
  }
  function reportCubeErrorToRemoteLog(runtime, code, error) {
      var bridge = runtime.getBridge();
      try {
          bridge.callBridge('remoteLog', {
              param1: "H5_CUSTOM_ERROR_CUBE_".concat(code),
              // tslint:disable object-literal-sort-keys
              param3: escapeLogParams({
                  SDKVersion: kAppxVersion,
                  errorMsg: error.message,
                  errorUrl: runtime.getNav() && runtime.getNav().getTopPagePath(),
                  errorStack: formatStack4Cube(error.stack),
              }),
              // tslint:enable object-literal-sort-keys
              seedId: 'H5_CUSTOM_ERROR',
              type: 'error',
          });
      }
      catch (ex) {
          debug$1$1(function () { return "[APPX][Error] reportError invoke RemoteLog fail ".concat(ex && ex.message, " ").concat(ex && ex.stack); });
      }
  }
  var CubeNativeAppxLogger4App = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(CubeNativeAppxLogger4App, _super);
      function CubeNativeAppxLogger4App() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.isTraced = false;
          _this.isChinfoCached = false;
          return _this;
      }
      CubeNativeAppxLogger4App.prototype.reportError = function (code, error) {
          _super.prototype.reportError.call(this, code, error);
          var runtime = getRuntimeById(this.appInstanceId);
          reportCubeErrorToRemoteLog(runtime, code, error);
      };
      CubeNativeAppxLogger4App.prototype.reportPerformance = function (page, clientPerformance) {
          // app 已经启动
          // page 已经启动
          var runtime = getRuntimeById(this.appInstanceId);
          var bridge = runtime.getBridge();
          var isFirstPage = page.getIsFirstPage();
          var perfMap = runtime.getKernel().__PERFORMANCE__ || {};
          var now = Date.now();
          var payload4PageLoaded = {
              loadTime: isFirstPage ? undefined : now - page.initTime,
              state: "pageLoaded" /* IAppxLoggerPerfEventState.PageLoaded */,
              timestamp: now,
          };
          var payload4AppContextCreated = {
              loadTime: perfMap.appContextCreateFinish - perfMap.appContextCreateBegin,
              state: "appContextCreated" /* IAppxLoggerPerfEventState.AppContextCreated */,
              timestamp: perfMap.appContextCreateFinish,
          };
          var payload4FrameworkLoaded = {
              loadTime: perfMap.frameworkBootstrapFinish - perfMap.frameworkBootstrapBegin,
              state: "workerFrameworkLoaded" /* IAppxLoggerPerfEventState.WorkerFrameworkLoaded */,
              timestamp: perfMap.frameworkBootstrapFinish,
          };
          if (isFirstPage) {
              var payload4AppLoaded = {
                  state: "appLoaded" /* IAppxLoggerPerfEventState.AppLoaded */,
                  timestamp: runtime.getApp().launchTime,
              };
              bridge.callInternalAPI('onCubeAppPerfEvent', payload4AppLoaded);
              bridge.callInternalAPI('onCubeAppPerfEvent', payload4AppContextCreated);
              bridge.callInternalAPI('onCubeAppPerfEvent', payload4FrameworkLoaded);
          }
          bridge.callInternalAPI('onCubeAppPerfEvent', payload4PageLoaded);
      };
      CubeNativeAppxLogger4App.prototype.reportPV = function (page) {
          // 每个页面报一下 reportTinyData:pageMonitor
          var runtime = getRuntimeById(page.appInstanceId);
          var startupParams = runtime.getEnv().originalStartupParams;
          var chInfo = startupParams.chInfo, app_startup_type = startupParams.app_startup_type, appId = startupParams.appId, _a = startupParams.appVersion, appVersion = _a === void 0 ? '' : _a, _b = startupParams.version, version = _b === void 0 ? '' : _b, _c = startupParams.cdpchinfo, cdpchinfo = _c === void 0 ? '' : _c, _d = startupParams.scm, scm = _d === void 0 ? '' : _d, _e = startupParams.appx_scm_data, appx_scm_data = _e === void 0 ? '' : _e, _f = startupParams.bizScenario, bizScenario = _f === void 0 ? '' : _f, _g = startupParams.publicId, publicId = _g === void 0 ? '' : _g, trace = startupParams.trace, cdptrace = startupParams.cdptrace, ap_scan_codec_link_token = startupParams.ap_scan_codec_link_token, ap_framework_scheme = startupParams.ap_framework_scheme, queryStartup = startupParams.query, enableTracker = startupParams.enableTracker;
          var param = {
              isAppX: 1,
              spm: __assign({ chInfo: chInfo }, getAutoTrackerConfig(appId, page.pagePath)),
              spmDetail: {
                  ap_scan_codec_link_token: ap_scan_codec_link_token,
                  appId: appId,
                  app_startup_type: app_startup_type,
                  appx_page_token: page.loadTime,
                  appx_scm_data: appx_scm_data,
                  bizScenario: bizScenario,
                  cdpchinfo: cdpchinfo,
                  pluginVersion: undefined,
                  publicId: publicId,
                  query: '',
                  scm: scm,
                  sdkVersion: kAppxVersion,
                  timestamp: Date.now(),
              },
              viewId: page.pageId,
          };
          var bridge = runtime.getBridge();
          var query = page.getQuery();
          if (query) {
              param.spmDetail.query = query;
          }
          var switchManager = runtime.getSwitchManager();
          if (switchManager.get("uepReportDataSwitch" /* ESharedAppxSwitchManagerName.Uep */) === true) {
              param.uep = {
                  appId: appId,
                  appVersion: version || appVersion || '',
                  sdkParams: {
                      query: queryStartup,
                      scheme: ap_framework_scheme,
                      sdkVersion: kAppxVersion,
                  },
                  sdkVersion: kAppxVersion,
                  timestamp: Date.now(),
                  url: page.pagePath + (param.spmDetail.query ? "?".concat(param.spmDetail.query) : ''),
              };
              param.type = 'tiny';
              if (switchManager.get("enableUepPvDefaultValue" /* ESharedAppxSwitchManagerName.EnableUepPvDefaultValue */)) {
                  // reportUEPData 的 update 字段在支付宝客户端 10.2.0 改了默认值。这里强制设置 update，避免 10.2.0 客户端与线上不一致
                  param.uep.update = true;
              }
              if (enableTracker) {
                  param.uep.params = { enableTracker: enableTracker };
              }
              bridge.callInternalAPI('reportUEPData', param);
          }
          else {
              bridge.callInternalAPI('reportTinyData', param);
          }
          var promoData = JSON.stringify({
              chinfo: cdpchinfo || chInfo || '',
              scm: scm,
          });
          // 营销全引导
          if ((trace || cdptrace) && !this.isTraced) {
              // 1.20.0: remove cdptrace
              this.isTraced = true;
              bridge.callInternalAPI('handleLoggingAction', {
                  actionType: 'setPageParams',
                  data: promoData,
              });
          }
          // 渠道链缓存
          if (!this.isChinfoCached) {
              this.isChinfoCached = true;
              bridge.callInternalAPI('handleLoggingAction', {
                  actionType: 'appendChinfo',
                  data: promoData,
              });
          }
      };
      CubeNativeAppxLogger4App.prototype.getAppxVersionMessage = function () {
          var info = _super.prototype.getAppxVersionMessage.call(this);
          if (info && typeof mqEnvironment !== 'undefined') {
              // Hybrid Mode 提示信息
              var cubeSdkVersion = mqEnvironment && mqEnvironment.sdkVersion;
              if (cubeSdkVersion) {
                  info.platform += ",C(".concat(cubeSdkVersion, ")");
              }
          }
          return info;
      };
      return CubeNativeAppxLogger4App;
  }(SharedAppxLogger));

  var CubeNativeAppxLogger4Page = /** @class */ /*#__PURE__*/ (function () {
      function CubeNativeAppxLogger4Page(appInstanceId) {
          this.appInstanceId = appInstanceId;
      }
      CubeNativeAppxLogger4Page.prototype.bootstrap = function () {
          // nothing
      };
      CubeNativeAppxLogger4Page.prototype.inited = function () {
          // nothing
      };
      CubeNativeAppxLogger4Page.prototype.dispose = function () {
          // nothing
      };
      CubeNativeAppxLogger4Page.prototype.remoteLog = function (params) {
          // nothing
      };
      CubeNativeAppxLogger4Page.prototype.logAppLaunch = function () {
          // nothing
      };
      CubeNativeAppxLogger4Page.prototype.hideDebugVersion = function (hide) {
          // nothing
      };
      CubeNativeAppxLogger4Page.prototype.reportError = function (code, error) {
          var runtime = getRuntimeById(this.appInstanceId);
          reportCubeErrorToRemoteLog(runtime, code, error);
      };
      CubeNativeAppxLogger4Page.prototype.updatePerformance = function () {
          // nothing
      };
      CubeNativeAppxLogger4Page.prototype.reportPerformance = function () {
          // nothing
      };
      CubeNativeAppxLogger4Page.prototype.reportPrefetch = function () {
          // nothing
      };
      CubeNativeAppxLogger4Page.prototype.reportPV = function () {
          // nothing
      };
      CubeNativeAppxLogger4Page.prototype.reportExtensionUsageInComponent = function (page, miniExtensionId) {
          // nothing
      };
      return CubeNativeAppxLogger4Page;
  }());

  var AppxStyleRegistry = /** @class */ /*#__PURE__*/ (function () {
      function AppxStyleRegistry() {
          this.fnMap = Object.create(null);
      }
      AppxStyleRegistry.prototype.registerPageStyle = function (pagePath, fn) {
          this.fnMap[pagePath] = fn;
      };
      AppxStyleRegistry.prototype.getPageStyle = function (pagePath) {
          return this.fnMap[pagePath];
      };
      return AppxStyleRegistry;
  }());

  var CubeHybridAppxLogger = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(CubeHybridAppxLogger, _super);
      function CubeHybridAppxLogger() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      CubeHybridAppxLogger.prototype.getPlatformOS = function () {
          var runtime = getRuntimeById(this.appInstanceId);
          return getPlatformString(runtime.getKernel().userAgent, getStartupParams());
      };
      CubeHybridAppxLogger.prototype.getAppxVersionMessage = function () {
          var info = _super.prototype.getAppxVersionMessage.call(this);
          if (info && typeof mqEnvironment !== 'undefined') {
              // Hybrid Mode 提示信息
              var cubeSdkVersion = mqEnvironment && mqEnvironment.sdkVersion;
              if (cubeSdkVersion) {
                  var runtime = getRuntimeById(this.appInstanceId);
                  var meta = runtime.getMeta();
                  var compilerInfo = meta.getCompileInfo();
                  if (compilerInfo && compilerInfo.buildTarget === 'shared') {
                      info.platform += ",H(".concat(cubeSdkVersion, ")");
                  }
                  else {
                      info.platform += ",C(".concat(cubeSdkVersion, ")");
                  }
              }
          }
          return info;
      };
      return CubeHybridAppxLogger;
  }(WebDefaultLogger));

  var $AppxFramework = { helper: helper };
  var AppxMiniExtensionManager4Hybrid = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(AppxMiniExtensionManager4Hybrid, _super);
      function AppxMiniExtensionManager4Hybrid() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      AppxMiniExtensionManager4Hybrid.prototype.setupContextSymbol = function (context, miniExtensionId) {
          var registry = getRegistryByRuntimeId(this.appInstanceId);
          // 这个如果出问题，再降级回容器的「拷贝」方案
          context.setProperty('$AppxRegistry', registry);
          context.setProperty('$AppxFramework', $AppxFramework);
          context.setProperty('__sjsEnvInited', 1);
          var insideBasicCfg = getInsideStaticConfig();
          if (insideBasicCfg && insideBasicCfg.config && insideBasicCfg.config.bridgeName) {
              context.setProperty(insideBasicCfg.config.bridgeName, context.getProperty('my'));
          }
          _super.prototype.setupContextSymbol.call(this, context, miniExtensionId);
      };
      return AppxMiniExtensionManager4Hybrid;
  }(AppxMiniExtensionManager));

  function hideKeyboard$1(proxy, callback) {
      var bridge = proxy.context.bridge;
      var inputProxy = bridge.requireModule('input');
      if (inputProxy && typeof inputProxy.hideKeyboard === 'function') {
          inputProxy.hideKeyboard(function (res) {
              if (res && res.result === true) {
                  callback(null, res);
              }
              else {
                  callback(new Error('input.hideKeyboard failed'));
              }
          });
      }
      else {
          callback(new Error('input.hideKeyboard not found'));
      }
  }

  function loadFontFace$1(proxy, opt, callback) {
      callback(new Error('not support'));
  }

  var pool = '__ANIMATION_END_EVENT_POOL__';
  function mapTranslateMarker(proxy, elementId, arg, callback) {
      var bridge = proxy.context.bridge;
      var dom = bridge.document;
      var mapElement = dom.getRefByAttrId(elementId);
      if (!mapElement[pool]) {
          mapElement[pool] = {};
          mapElement.addEvent('animationEnd', function (e) {
              var id = e.translateMarkerId;
              mapElement[pool][id]();
              mapElement[pool][id] = undefined;
          });
      }
      var _a = arg.animationEnd, animationEnd = _a === void 0 ? function () { } : _a, translateMarkerId = arg.translateMarkerId;
      arg.animationEnd = undefined;
      mapElement[pool][translateMarkerId] = animationEnd;
      mapElement.translateMarker(arg);
  }

  function measureText(proxy, text, font, callback) {
      var bridge = proxy.context.bridge;
      var antCommonModule = bridge.requireModule('antCommon');
      if (antCommonModule && antCommonModule.callComponentStaticMethodSync) {
          var result = antCommonModule.callComponentStaticMethodSync('external-canvas', 'measureText', [text, font]);
          callback(null, result);
      }
  }

  function pageScrollTo$1(proxy, opt, callback) {
      var bridge = proxy.context.bridge;
      var rootScroller = bridge.document.getRef('_root');
      var expectedTop = opt && opt.scrollTop;
      if (rootScroller && rootScroller.scrollTop) {
          if (typeof expectedTop === 'number') {
              rootScroller.scrollTop("".concat(expectedTop, "px"));
          }
      }
      callback(null);
  }

  function selectQuery(proxy, actions, callback) {
      var bridge = proxy.context.bridge;
      var document = bridge.document;
      var featureManager = document.featureManager;
      var moduleProxy = bridge.requireModule('dom');
      if (moduleProxy && typeof moduleProxy.selectorQuery === 'function') {
          var queries_1 = [];
          var results_1 = [];
          var reverseMappingIdx_1 = Object.create(null);
          if (featureManager.hasFeature('selector_query')) {
              actions.forEach(function (action) {
                  var _a = action.selector, type = _a.type, value = _a.value;
                  var selectAll = type === 'all';
                  if (!selectAll && value === 'viewport') {
                      queries_1.push({
                          all: selectAll,
                          selector: '',
                          type: 'viewport',
                      });
                  }
                  else {
                      queries_1.push({
                          all: selectAll,
                          selector: value,
                          type: action.type,
                      });
                  }
              });
              if (queries_1.length) {
                  moduleProxy.selectorQuery(queries_1, function (response) {
                      callback(null, response);
                  });
              }
              else {
                  callback(null, []);
              }
              return;
          }
          // 一圈数据转换后发起模块调用
          actions.forEach(function (action, actionIndex) {
              if (action.selector.type === 'all') {
                  results_1[actionIndex] = [];
                  // 先只选一个节点
                  var nodeIds = getRefsBySelector(document, action.selector.value);
                  for (var _i = 0, nodeIds_1 = nodeIds; _i < nodeIds_1.length; _i++) {
                      var ref = nodeIds_1[_i];
                      // 这块 ref 是一定有的
                      queries_1.push({
                          ref: ref,
                          type: action.type,
                      });
                      reverseMappingIdx_1[queries_1.length - 1] = actionIndex;
                  }
              }
              else if (action.selector.type === 'single') {
                  results_1[actionIndex] = null;
                  var ref = void 0;
                  var actionType = void 0;
                  if (action.selector.value === 'viewport') {
                      ref = '_root';
                      if (action.type === 'rect') {
                          actionType = 'viewport';
                      }
                      else if (action.type === 'scroll') {
                          actionType = 'scroll';
                      }
                  }
                  else {
                      ref = getRefsBySelector(document, action.selector.value)[0];
                      actionType = action.type;
                  }
                  if (ref) {
                      // 单个查询不能保证一定存在 ref
                      queries_1.push({
                          ref: ref,
                          type: actionType,
                      });
                      reverseMappingIdx_1[queries_1.length - 1] = actionIndex;
                  }
              }
              else {
                  results_1[actionIndex] = null;
              }
          });
          if (queries_1.length) {
              moduleProxy.selectorQuery(queries_1, function (response) {
                  var list = response.result;
                  list.forEach(function (item, itemIndex) {
                      var reverseIndex = reverseMappingIdx_1[itemIndex];
                      var indexedResults = results_1[reverseIndex];
                      if (Array.isArray(indexedResults)) {
                          indexedResults.push(item);
                      }
                      else {
                          results_1[reverseIndex] = item;
                      }
                  });
                  callback(null, results_1);
              });
          }
          else {
              callback(null, results_1);
          }
      }
      else {
          // native 没实现这个，直接报错
          callback(new Error('dom.selectorQuery not found'));
      }
  }
  function getRefsBySelector(document, selector) {
      if (/^#/.test(selector)) {
          var node = document.getRefByAttrId(selector.replace(/^#/, ''));
          return [node && node.ref];
      }
      else if (/^\./.test(selector)) {
          return document.getRefsByAttrClassName(selector.replace(/^./, ''));
      }
      else {
          return [];
      }
  }

  function setTitleCloseClicked(proxy, callback) {
      if (proxy.platform) {
          proxy.platform.setTitleCloseClicked(true);
      }
  }

  var RenderMethod = {
      hideKeyboard: hideKeyboard$1,
      loadFontFace: loadFontFace$1,
      mapTranslateMarker: mapTranslateMarker,
      measureText: measureText,
      pageScrollTo: pageScrollTo$1,
      selectQuery: selectQuery,
      setTitleCloseClicked: setTitleCloseClicked,
  };

  function bridgeCallByPageId(appInstanceId, pageId, name, optionOrCallback, callback) {
      debug$1$1(function () { return "[APPX] CubePagePluginJSContext:bridgeCallByPageId ".concat(name); });
      var runtime = getRuntimeById(appInstanceId);
      var opt;
      var cb;
      if (typeof optionOrCallback === 'function') {
          opt = {};
          cb = optionOrCallback;
      }
      else {
          opt = optionOrCallback;
          cb = callback;
      }
      runtime.getKernel().__BRIDGE_CALL__(pageId, name, opt, function (result) {
          debug$1$1(function () { return "[APPX] CubePagePluginJSContext:bridgeCallByPageId callback ".concat(JSON.stringify(result)); });
          if (cb) {
              cb(result);
          }
      });
  }
  // 闭包方式避免外部能拿到 runtime 对象
  function createAlipayJSBridge(appInstanceId, pageId) {
      return {
          _fetchQueue: function () {
              return '[]';
          },
          call: bridgeCallByPageId.bind(null, appInstanceId, pageId),
          get startupParams() {
              var runtime = getRuntimeById(appInstanceId);
              // FIXME 等启动参数通过 startApp 传入后再改这个
              return runtime.getEnv().startupParams;
          },
      };
  }

  // import { getRuntimeById } from '@ali/antcube-appx-core';
  // 先空实现，后面改成支持 EventEmitter
  function createDocument(appInstanceId, pageId) {
      return {
          addEventListener: function () { },
          removeEventListener: function () { },
      };
  }

  function createNavigator(appInstanceId, pageId) {
      return {
          userAgent: getRuntimeById(appInstanceId).getKernel().userAgent || '',
      };
  }

  function createWindow(appInstanceId, pageId, AlipayJSBridge, document) {
      // 来个空对象吧
      var self = {
          AlipayJSBridge: AlipayJSBridge,
          document: document,
      };
      self.self = self;
      self.window = self;
      return self;
  }

  /**
   * 需要提供 window, document(EventEmitter), AlipayJSBridge
   */
  var CubePageJSContext = /** @class */ /*#__PURE__*/ (function () {
      function CubePageJSContext(appInstanceId, pageId) {
          this.bridge = createAlipayJSBridge(appInstanceId, pageId);
          this.document = createDocument();
          this.window = createWindow(appInstanceId, pageId, this.bridge, this.document);
          this.navigator = createNavigator(appInstanceId);
      }
      CubePageJSContext.prototype.getSymbols = function () {
          return {
              AlipayJSBridge: this.bridge,
              document: this.document,
              navigator: this.navigator,
              self: this.window,
              window: this.window,
          };
      };
      return CubePageJSContext;
  }());

  var CubePagePluginJSContext = /** @class */ /*#__PURE__*/ (function () {
      function CubePagePluginJSContext(appInstanceId, pageId) {
          this.appInstanceId = appInstanceId;
          this.pageId = pageId;
      }
      CubePagePluginJSContext.prototype.bootstrap = function () {
          var _this = this;
          getRuntimeById(this.appInstanceId)
              .getKernel()
              .__SET_PAGE_CONTEXT_GETTER__(this.pageId, function () {
              return _this.getContext().getSymbols();
          });
      };
      CubePagePluginJSContext.prototype.dispose = function () {
          getRuntimeById(this.appInstanceId).getKernel().__SET_PAGE_CONTEXT_GETTER__(this.pageId, null);
      };
      CubePagePluginJSContext.prototype.getContext = function () {
          if (!this.context) {
              this.context = new CubePageJSContext(this.appInstanceId, this.pageId);
          }
          return this.context;
      };
      return CubePagePluginJSContext;
  }());

  function normalizeScrollEventOffset$1(nativeEvent) {
      var contentOffset = nativeEvent.contentOffset;
      if (contentOffset) {
          if (typeof contentOffset === 'string') {
              try {
                  contentOffset = JSON.parse(contentOffset);
              }
              catch (ex) {
                  contentOffset = {
                      x: 0,
                      y: 0,
                  };
              }
          }
      }
      return contentOffset;
  }
  function onRootScrollerScrollToLower(appInstanceId, pageInstanceId, event) {
      var runtime = getRuntimeById(appInstanceId);
      var page = runtime.getPageManager().getInstanceById(pageInstanceId);
      page.invokePageEvent("onReachBottom" /* ESharedAppxEvent.Page.onReachBottom */, 3 /* ISharedAppxPageBaseInstanceEventInvokeType.LegacyAndEvents */);
  }
  function onRootScrollerScroll(appInstanceId, pageInstanceId, event) {
      var runtime = getRuntimeById(appInstanceId);
      var page = runtime.getPageManager().getInstanceById(pageInstanceId);
      var contentOffset = normalizeScrollEventOffset$1(event);
      var y = 0;
      if (contentOffset) {
          y = contentOffset.y;
      }
      page.invokePageEvent("onPageScroll" /* ESharedAppxEvent.Page.onScroll */, 3 /* ISharedAppxPageBaseInstanceEventInvokeType.LegacyAndEvents */, {
          scrollTop: y,
      });
  }
  function registerPageAnimationAndFont(bridge, style, runtime) {
      if (!style) {
          return;
      }
      try {
          var $KeyFramesMap = style['@KEYFRAMES'];
          if ($KeyFramesMap && Object.keys($KeyFramesMap).length > 0) {
              var $animation = bridge.requireModule('animation');
              $animation.loadKeyframes($KeyFramesMap);
          }
      }
      catch (ex) { }
      try {
          var $FontFacesMap_1 = style['@FONTFACE'];
          if ($FontFacesMap_1) {
              var success = addRule4FontFace(bridge, $FontFacesMap_1);
              if (!success) {
                  info$1$1('[APPX][FontFace] addRule4FontFace fail once');
                  runtime.getKernel().setTimeout(function () {
                      var success2nd = addRule4FontFace(bridge, $FontFacesMap_1);
                      if (!success2nd) {
                          info$1$1('[APPX][FontFace] addRule4FontFace fail twice');
                      }
                  }, 1);
              }
          }
      }
      catch (ex) { }
  }
  function addRule4FontFace(bridge, $FontFacesMap) {
      var fonts = objectKeys($FontFacesMap);
      var $dom = bridge.requireModule('dom');
      if ($dom && $dom.addRule) {
          for (var _i = 0, fonts_1 = fonts; _i < fonts_1.length; _i++) {
              var fontName = fonts_1[_i];
              $dom.addRule('fontFace', $FontFacesMap[fontName]);
          }
          return true;
      }
  }

  function noop$8() { }
  function setupDebugProxy(clientProxy) {
      var runtime = getRuntimeById(clientProxy.appInstanceId);
      if (runtime) {
          var _a = runtime.getEnv().originalStartupParams || {}, channelId = _a.channelId, devtoolShadowRootEnabled = _a.devtoolShadowRootEnabled;
          var devtoolHook = void 0;
          var Connection = void 0;
          if (typeof __APPXNG_DEVTOOL_HOOK__ === 'object' && __APPXNG_DEVTOOL_HOOK__) {
              info$1$1('[APPX] devtool setupDebugProxy init');
              devtoolHook = __APPXNG_DEVTOOL_HOOK__.init;
              Connection = __APPXNG_DEVTOOL_HOOK__.Connection;
          }
          var zruntime = getZRuntime4ClientSide();
          if (devtoolHook) {
              info$1$1('[APPX] devtool setupDebugProxy zephyr feature enable');
              zruntime.enableFeature(9 /* EZephyrFrameworkRuntimeFeature.elementLinkTree */, true);
              zruntime.enableFeature(19 /* EZephyrFrameworkRuntimeFeature.enableAutomator */, true);
          }
          var debugProxy = zruntime.getDebugProxy();
          if (devtoolHook && Connection && channelId) {
              info$1$1('[APPX] devtool setupDebugProxy zephyr feature enable');
              var devtool = devtoolHook(clientProxy, debugProxy, new Connection("wss://hpmweb.alipay.com/bugme/client_w/".concat(channelId)));
              if (devtoolShadowRootEnabled) {
                  devtool.enableShadowRootElements();
                  info$1$1('[APPX] devtool enable shadowRootElement');
              }
              info$1$1('[APPX] devtool setupDebugProxy success');
          }
      }
  }
  var NativeSharedFlexiblePlatformRenderer = /** @class */ /*#__PURE__*/ (function () {
      function NativeSharedFlexiblePlatformRenderer(proxy) {
          this.proxy = proxy;
          var bridge = proxy.context.bridge;
          if (bridge) {
              this.document = bridge.document;
              this.bridge = bridge;
          }
      }
      NativeSharedFlexiblePlatformRenderer.prototype.bootstrap = function (readyCallback) {
          setupDebugProxy(this.proxy);
          readyCallback();
      };
      NativeSharedFlexiblePlatformRenderer.prototype.afterRenderInit = function () { };
      NativeSharedFlexiblePlatformRenderer.prototype.dispose = function () { };
      NativeSharedFlexiblePlatformRenderer.prototype.onError = function (code, error) { };
      NativeSharedFlexiblePlatformRenderer.prototype.reportClientActionRecords = function () { };
      NativeSharedFlexiblePlatformRenderer.prototype.invokeClientElementMethod = function (attributeId, method, args, callback) {
          var document = this.bridge.document;
          debug$1$1(function () {
              return "[APPX] CubeNativeLocalRenderInstance::invokeClientElementMethod ".concat(JSON.stringify(attributeId), "/").concat(method, "/").concat(JSON.stringify(args));
          });
          var errorMessage;
          if (document) {
              var node = document.getRefByAttrId(attributeId);
              if (node) {
                  if (typeof node[method] === 'function') {
                      return node[method].apply(node, args.concat([function (payload) { return (callback ? callback(null, payload) : null); }]));
                  }
                  else {
                      errorMessage = 'method not found';
                  }
              }
              else {
                  errorMessage = 'node not found';
              }
          }
          else {
              errorMessage = 'document not found';
          }
          if (typeof callback === 'function' && errorMessage) {
              callback(new Error(errorMessage));
          }
      };
      NativeSharedFlexiblePlatformRenderer.prototype.invokeRenderMethod = function (method, args, callback) {
          // 拿到 module, method 发送一把
          debug$1$1(function () { return "[APPX] CubeNativeLocalRenderInstance::invokeRenderMethod ".concat(method, "/").concat(JSON.stringify(args)); });
          // const moduleProxy = this.bridge.requireModule(moduleName);
          var errorMessage;
          var renderMethod = RenderMethod[method];
          if (typeof renderMethod === 'function') {
              renderMethod.apply(void 0, __spreadArray$1(__spreadArray$1([this.proxy], args, false), [callback || noop$8], false));
          }
          else {
              errorMessage = "method ".concat(method, " not found");
          }
          if (typeof callback === 'function' && errorMessage) {
              callback(new Error("invokeRenderMethod error: ".concat(errorMessage)));
          }
      };
      NativeSharedFlexiblePlatformRenderer.prototype.getEventTaskManager = function () {
          var runtime = getRuntimeById(this.proxy.appInstanceId);
          var event = runtime.getBridge().event;
          return event.taskManager;
      };
      NativeSharedFlexiblePlatformRenderer.prototype.setMessageWaitingQueue = function (waitingQueue) {
          throw new Error('unsupport waiting');
      };
      NativeSharedFlexiblePlatformRenderer.prototype.setHostReadyWaitingQueue = function (waitingQueue) {
          throw new Error('unsupport waiting');
      };
      NativeSharedFlexiblePlatformRenderer.prototype.getMountBody = function () {
          return null; // document.getElementById('__react-content');
      };
      NativeSharedFlexiblePlatformRenderer.prototype.getMountPageBody = function () {
          return null;
      };
      NativeSharedFlexiblePlatformRenderer.prototype.getMountTabBarBody = function () {
          return null;
      };
      NativeSharedFlexiblePlatformRenderer.prototype.beforeRenderInit = function (pageOption) {
          // TODO 获取一下 native 注册样式
          try {
              var runtime = getRuntimeById(this.proxy.appInstanceId);
              var styleFn = runtime.getStyleRegistry().getPageStyle(this.proxy.pagePath);
              if (styleFn) {
                  var style = (pageOption.style = styleFn());
                  registerPageAnimationAndFont(this.bridge, style, runtime);
                  // 通过形状判断出style是cube-target 下沉样式 需要在此阶段merge 框架样式
                  if (style && Array.isArray(style.rules)) {
                      var frameworkStyle = getFrameworkStyle();
                      var mergeStyle_1 = cubestylemerge(frameworkStyle, style);
                      var doc = this.getDocument();
                      doc.addPageStyle(mergeStyle_1);
                      if ("development" !== 'development') {
                          info$1$1('[APPX] styleTarget:cube');
                          debug$1$1(function () {
                              return "[APPX] CubeNativeLocalRenderInstance::beforeRenderInit add cube-style: ".concat(JSON.stringify(mergeStyle_1));
                          });
                      }
                  }
                  else {
                      if ("development" !== 'development') {
                          info$1$1('[APPX] styleTarget:native');
                      }
                  }
              }
          }
          catch (ex) {
          }
      };
      NativeSharedFlexiblePlatformRenderer.prototype.onPageNotFound = function () { };
      NativeSharedFlexiblePlatformRenderer.prototype.afterRenderInitMessage = function () { };
      NativeSharedFlexiblePlatformRenderer.prototype.afterRenderMountMessage = function () {
          setPerformancePoint4Client(9 /* IAppxLoggerPerfEventPoint4PageBootPerf4Client.PageLoaded */);
      };
      NativeSharedFlexiblePlatformRenderer.prototype.afterRenderMountCommit = function () {
          var clientProxy = this.proxy;
          var documentInstance = clientProxy.renderer.documentInstance;
          if (clientProxy.hasPublicMethod(1 /* EAppxWeb2MessagePayload4S2CCallbackRequestPayload4RenderMountPublicMethod.onPageScroll */)) {
              documentInstance.setScrollListener(onRootScrollerScroll.bind(null, this.proxy.appInstanceId, this.proxy.pageId));
          }
          if (clientProxy.hasPublicMethod(2 /* EAppxWeb2MessagePayload4S2CCallbackRequestPayload4RenderMountPublicMethod.onReachBottom */)) {
              documentInstance.setScrollBottomListener(onRootScrollerScrollToLower.bind(null, this.proxy.appInstanceId, this.proxy.pageId));
          }
      };
      NativeSharedFlexiblePlatformRenderer.prototype.onDynamicMiniExtensionLoad = function () { };
      NativeSharedFlexiblePlatformRenderer.prototype.isPagePaused = function () {
          return false;
      };
      NativeSharedFlexiblePlatformRenderer.prototype.setTitleCloseClicked = function (v) {
          this.titleCloseClicked = v;
      };
      NativeSharedFlexiblePlatformRenderer.prototype.isTitleCloseClicked = function () {
          return this.titleCloseClicked;
      };
      NativeSharedFlexiblePlatformRenderer.prototype.getDocument = function () {
          return this.document;
      };
      NativeSharedFlexiblePlatformRenderer.prototype.getHydratableRoot = function () { };
      NativeSharedFlexiblePlatformRenderer.prototype.getMiniExtensionManager = function () {
          return null;
      };
      NativeSharedFlexiblePlatformRenderer.prototype.getPluginInfo4PluginId = function (pluginId) {
          return null;
      };
      NativeSharedFlexiblePlatformRenderer.prototype.setStaticExtensionWaitingQueue = function (waitingQueue) {
          throw new Error('unsupport waiting');
      };
      NativeSharedFlexiblePlatformRenderer.prototype.getResponsive = function () {
          return true;
      };
      NativeSharedFlexiblePlatformRenderer.prototype.observeIntersection = function (request) { };
      NativeSharedFlexiblePlatformRenderer.prototype.unobserveIntersection = function (id) { };
      NativeSharedFlexiblePlatformRenderer.prototype.querySelector = function (ownerTargetId, strict, selector, all) { };
      return NativeSharedFlexiblePlatformRenderer;
  }());

  var CubeHybridPageFlexibleInstance = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(CubeHybridPageFlexibleInstance, _super);
      function CubeHybridPageFlexibleInstance() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      CubeHybridPageFlexibleInstance.prototype.bootstrap = function (tabProps) {
          _super.prototype.bootstrap.call(this, tabProps);
          if (isPageFlexibleInstanceProxyTypeLocal(this)) {
              this.plugin.jscontext = new CubePagePluginJSContext(this.appInstanceId, this.pageId);
              this.plugin.jscontext.bootstrap();
          }
      };
      CubeHybridPageFlexibleInstance.prototype.getEngineType = function () {
          if (isPageFlexibleInstanceProxyTypeLocal(this)) {
              return 2 /* ESharedAppxPageEngineType.CubeEngine */;
          }
          else {
              return 1 /* ESharedAppxPageEngineType.WebEngine */;
          }
      };
      CubeHybridPageFlexibleInstance.prototype.dispose = function () {
          if (this.plugin.jscontext) {
              this.plugin.jscontext.dispose();
              this.plugin.jscontext = null;
          }
          _super.prototype.dispose.call(this);
      };
      return CubeHybridPageFlexibleInstance;
  }(PageFlexibleInstance));

  var CubeHybridPageInstanceManager = /** @class */ /*#__PURE__*/ (function (_super) {
      __extends$1(CubeHybridPageInstanceManager, _super);
      function CubeHybridPageInstanceManager(appInstanceId) {
          return _super.call(this, appInstanceId) || this;
      }
      CubeHybridPageInstanceManager.prototype.bootstrap = function () {
          this.bindEvent();
      };
      CubeHybridPageInstanceManager.prototype.onCreatePage = function (pagePath, pageId, context) {
          debug$1$1(function () {
              return "[APPX] PageRegistry::onCreatePage ".concat(JSON.stringify(pagePath), " pageId(").concat(pageId, ") Vue(").concat(!!context.Vue, ") bridge(").concat(!!context.bridge, ") query(").concat(context.query, ")");
          });
          var runtime = getRuntimeById(this.appInstanceId);
          if (runtime.getMeta().hasPagePath(pagePath)) {
              if (!runtime.getRegistry().getPageLogicOption(pagePath)) {
                  /**
                   * https://yuque.antfin-inc.com/cubejs/cube/errorlog
                   * 阶段: 5(页面初始化)
                   * 捕获方式: 1
                   */
                  var message = "[APPX][Page][Create] pageOption not registered: ".concat(pagePath);
                  info$1$1(message);
                  var error = new Error(message);
                  reportHostError(runtime.getKernel(), 12 /* ESharedAppxSpecificErrorCode.HostFrameworkError */, error);
              }
              else {
                  runtime.getPageManager().createInstance(pagePath, pageId, context);
              }
          }
          else {
              /**
               * https://yuque.antfin-inc.com/cubejs/cube/errorlog
               * 阶段: 5(页面初始化)
               * 捕获方式: 1(assert)
               */
              var message = "[APPX][Page][Create] pagePath not found: ".concat(pagePath);
              info$1$1(message);
              var error = new Error(message);
              reportHostError(runtime.getKernel(), 12 /* ESharedAppxSpecificErrorCode.HostFrameworkError */, error);
              // TODO: 发给 onPageNotFound 生命周期
          }
      };
      CubeHybridPageInstanceManager.prototype.bindEvent = function () {
          var _this = this;
          if (!this.binded) {
              this.binded = true;
              getRuntimeById(this.appInstanceId)
                  .getEventManager()
                  .addEventListener("pageCreateContext" /* ESharedAppxEvent.Internal.PageCreateContext */, function (event) {
                  info$1$1("[APPX][Page][Create] path(".concat(event && event.data && event.data.pagePath, ")"));
                  // 解析 pagePath, query
                  var _a = getPageInfoFromHash(event.data.pagePath), pagePath = _a.pagePath, queryString = _a.queryString;
                  try {
                      _this.onCreatePage(pagePath, event.data.instanceId, {
                          Vue: event.data.context.Vue,
                          bridge: event.data.context.weex,
                          proxyType: 1 /* ESharedAppxFlexibleProxyType.Local */,
                          query: queryString,
                      });
                  }
                  catch (ex) {
                      /**
                       * https://yuque.antfin-inc.com/cubejs/cube/errorlog
                       * 阶段: 5(页面初始化)
                       * 捕获方式: 2(try-catch)
                       */
                      var runtime = getRuntimeById(_this.appInstanceId);
                      reportHostError(runtime.getKernel(), 12 /* ESharedAppxSpecificErrorCode.HostFrameworkError */, ex, '[APPX][Page][Create] error ');
                  }
              });
          }
      };
      return CubeHybridPageInstanceManager;
  }(PageInstanceManager));

  function setupImpl4RuntimeTypeApp() {
      setRuntimeDependencyImpl(0 /* ESharedAppxRuntimeDependencyType.Logger */, 0 /* ESharedAppxRuntimeContextType.App */, CubeNativeAppxLogger4App);
      setRuntimeDependencyImpl(2 /* ESharedAppxRuntimeDependencyType.PageInstanceManager */, 0 /* ESharedAppxRuntimeContextType.App */, CubeHybridPageInstanceManager);
      setRuntimeDependencyImpl(3 /* ESharedAppxRuntimeDependencyType.Navigation */, 0 /* ESharedAppxRuntimeContextType.App */, CubeNativeNavigationController4Hybrid);
      setRuntimeDependencyImpl(4 /* ESharedAppxRuntimeDependencyType.Meta */, 0 /* ESharedAppxRuntimeContextType.App */, AppxBaseMeta4App);
      setRuntimeDependencyImpl(6 /* ESharedAppxRuntimeDependencyType.MiniExtensionManager */, 0 /* ESharedAppxRuntimeContextType.App */, EmptyAppxMiniExtensionManager);
      setRuntimeDependencyImpl(7 /* ESharedAppxRuntimeDependencyType.PageStateManager */, 0 /* ESharedAppxRuntimeContextType.App */, EmptyAppxPageStateManager4AppxNg);
      setRuntimeDependencyImpl(8 /* ESharedAppxRuntimeDependencyType.LazyLoadManager */, 0 /* ESharedAppxRuntimeContextType.App */, SharedAppxLazyLoadManager);
  }
  function setupImpl4RuntimeTypePage() {
      setRuntimeDependencyImpl(3 /* ESharedAppxRuntimeDependencyType.Navigation */, 1 /* ESharedAppxRuntimeContextType.Page */, CubeNativeNavigationController4Page);
      setRuntimeDependencyImpl(0 /* ESharedAppxRuntimeDependencyType.Logger */, 1 /* ESharedAppxRuntimeContextType.Page */, CubeNativeAppxLogger4Page);
      setRuntimeDependencyImpl(2 /* ESharedAppxRuntimeDependencyType.PageInstanceManager */, 1 /* ESharedAppxRuntimeContextType.Page */, CubeHybridPageInstanceManager);
      setRuntimeDependencyImpl(4 /* ESharedAppxRuntimeDependencyType.Meta */, 1 /* ESharedAppxRuntimeContextType.Page */, AppxBaseMeta4Page);
      setRuntimeDependencyImpl(6 /* ESharedAppxRuntimeDependencyType.MiniExtensionManager */, 1 /* ESharedAppxRuntimeContextType.Page */, EmptyAppxMiniExtensionManager);
      setRuntimeDependencyImpl(7 /* ESharedAppxRuntimeDependencyType.PageStateManager */, 1 /* ESharedAppxRuntimeContextType.Page */, EmptyAppxPageStateManager4AppxNg);
      setRuntimeDependencyImpl(8 /* ESharedAppxRuntimeDependencyType.LazyLoadManager */, 1 /* ESharedAppxRuntimeContextType.Page */, SharedAppxLazyLoadManager);
  }
  /**
   * 进行依赖注入初始化
   */
  function setupImpl() {
      setKernelErrorReporterImpl(function (kernel, code, ex) {
          if (code !== 11 /* ESharedAppxSpecificErrorCode.HostGlobalError */ &&
              code !== 16 /* ESharedAppxSpecificErrorCode.KernelReportError */) {
              if (typeof kernel.__REPORT_ERROR__ === 'function') {
                  kernel.__REPORT_ERROR__(ex);
              }
          }
      });
      setupImpl4RuntimeTypeApp();
      {
          setupImpl4RuntimeTypePage();
      }
      {
          setZRuntime4ClientSideImpl(getZRuntime());
          getZRuntime4ClientSide().enableFeature(1 /* EZephyrFrameworkRuntimeFeature.forceIterationUpdate */, true);
          setPlatformRendererImpl(NativeSharedFlexiblePlatformRenderer);
          setSimpleClientRendererImpl(SimpleClientRenderer);
          setPageFlexibleImpl(CubeHybridPageFlexibleInstance);
      }
      setAppImpl(AppBaseInstance);
      setPagePluginShareImpl(SharedPagePluginShare);
      setBridgeIgnoreList(kBridgeCallIgnoreList);
  }

  function setupImpl4HybridEngine() {
      setRuntimeDependencyImpl(3 /* ESharedAppxRuntimeDependencyType.Navigation */, 0 /* ESharedAppxRuntimeContextType.App */, CubeNativeNavigationController4Hybrid);
      var _a = getZRuntime4HostAndCompositeImpl(), getCompositePlatformEventsImpl = _a.getCompositePlatformEventsImpl, ZRuntimeHostCompositeElementEventHubImpl = _a.ZRuntimeHostCompositeElementEventHubImpl, getZRuntime4HostSideImpl = _a.getZRuntime4HostSideImpl;
      setHostCompositeEvents(getCompositePlatformEventsImpl());
      setHostCompositeEventHubImpl(ZRuntimeHostCompositeElementEventHubImpl);
      setZRuntime4HostSideImpl(getZRuntime4HostSideImpl());
      setAppImpl(AppBaseInstance);
      setPagePluginShareImpl(SharedPagePluginShare);
      setRuntimeDependencyImpl(0 /* ESharedAppxRuntimeDependencyType.Logger */, 0 /* ESharedAppxRuntimeContextType.App */, CubeHybridAppxLogger);
      setRuntimeDependencyImpl(2 /* ESharedAppxRuntimeDependencyType.PageInstanceManager */, 0 /* ESharedAppxRuntimeContextType.App */, CubeHybridPageInstanceManager);
      setRuntimeDependencyImpl(4 /* ESharedAppxRuntimeDependencyType.Meta */, 0 /* ESharedAppxRuntimeContextType.App */, AppxBaseMeta4App);
      setRuntimeDependencyImpl(6 /* ESharedAppxRuntimeDependencyType.MiniExtensionManager */, 0 /* ESharedAppxRuntimeContextType.App */, AppxMiniExtensionManager4Hybrid);
      setRuntimeDependencyImpl(7 /* ESharedAppxRuntimeDependencyType.PageStateManager */, 0 /* ESharedAppxRuntimeContextType.App */, EmptyAppxPageStateManager4AppxNg);
      setRuntimeDependencyImpl(8 /* ESharedAppxRuntimeDependencyType.LazyLoadManager */, 0 /* ESharedAppxRuntimeContextType.App */, SharedAppxLazyLoadManager);
      setZRuntime4ClientSideImpl(getZRuntime());
      getZRuntime4ClientSide().enableFeature(1 /* EZephyrFrameworkRuntimeFeature.forceIterationUpdate */, true);
      setPlatformRendererImpl(NativeSharedFlexiblePlatformRenderer);
      setSimpleClientRendererImpl(SimpleClientRenderer);
      setPageFlexibleImpl(CubeHybridPageFlexibleInstance);
  }

  var originalFunction;
  function patchAppGlobalForSecurity(accessor) {
      originalFunction = accessor.getProperty('Function');
      if ('undefined' !== typeof originalFunction) {
          var fakeGlobalObject_1 = {};
          var FakeFunctionSymbol = function FakeFunction(code) {
              if (/return\s+this/.test(code)) {
                  return function () {
                      return fakeGlobalObject_1;
                  };
              }
          };
          FakeFunctionSymbol.prototype = originalFunction.prototype;
          FakeFunctionSymbol.prototype.constructor = FakeFunctionSymbol;
          accessor.setProperty('Function', FakeFunctionSymbol);
          debug$1$1(function () { return '[APPX] patchAppGlobalForSecurity at Function'; });
      }
      accessor.setProperty('eval', null);
      var originalWxEnv = accessor.getProperty('wxEnvironment') || accessor.getProperty('WXEnvironment');
      accessor.setProperty('wxEnvironment', undefined);
      accessor.setProperty('WXEnvironment', undefined);
      accessor.setProperty('$$cubeEnv', originalWxEnv);
      accessor.setProperty('mqEnvironment', null);
  }

  var FrozenAppxStyle = Object.freeze(getComponentStyle());
  var FrozenAppxHelper = Object.freeze(helper);
  function polygonKernelBridgeCallTransform(call, viewId, method, param, callback) {
      return call(method, param, callback);
  }
  function polygonKernelBridgeCallSyncTransform(callSync, viewId, method, param) {
      return callSync(method, param);
  }
  function patchPolygonKernel(kernel) {
      kernel.__BRIDGE_CALL__ = polygonKernelBridgeCallTransform.bind(null, kernel.__BRIDGE_CALL__);
      kernel.__BRIDGE_CALL_SYNC__ = polygonKernelBridgeCallSyncTransform.bind(null, kernel.__BRIDGE_CALL_SYNC__);
  }
  /**
   * 该方法注册到 AppContext 上，由构建产物进行执行，kernel 由
   * @param kernel
   * @param meta
   * @param styleRegistry
   */
  function createAppxContextRuntime(kernel, meta, pageMeta, styleRegistry, accessor, type, isHybridEngine) {
      debug$1$1(function () { return '[APPX] bootstrap:appContextSetup'; });
      if (type === 1 /* ESharedAppxRuntimeContextType.Page */) {
          patchPolygonKernel(kernel);
      }
      var runtime = registerRuntime(kernel, meta, pageMeta, accessor, type);
      runtime.setStyleRegistry(styleRegistry);
      setupBridge(runtime, isHybridEngine);
      runtime.inited();
      return runtime;
  }
  /**
   *
   * @param global 需要暴露到的全局作用域
   * @param runtime
   * @example
   * $AppxRegistry
   *  registerPageLogicOptions(Page),
   *  registerAppLogicOptions(App),
   *  registerComponentLogicOptions(Component),
   *  registerPageLogicConfig,
   *  registerAppLogicConfig,
   *  registerComponentLogicConfig,
   *  registerPageRenderConfig,
   *  registerComponentRenderConfig,
   */
  function registerSymbolToAppContext(accessor, runtime) {
      // 挂载到 AppJSContext 的 global 供用户访问
      accessor.setProperty('my', runtime.getBridge().defaultScope.publicInstance);
      var insideBasicCfg = getInsideStaticConfig();
      if (insideBasicCfg && insideBasicCfg.config && insideBasicCfg.config.bridgeName) {
          accessor.setProperty(insideBasicCfg.config.bridgeName, runtime.getBridge().defaultScope.publicInstance);
      }
      accessor.setProperty('getApp', function () {
          var app = runtime.getApp();
          return app && app.publicInstance;
      });
      accessor.setProperty('getCurrentPages', function () {
          var nav = runtime.getNav();
          if (nav) {
              return nav.currentStack.map(function (d) { return d.getPageLogicInstance().publicInstance; });
          }
          else {
              return [];
          }
      });
      accessor.setProperty('$global', {});
      {
          setLogs4CoreEnable();
          accessor.setProperty('$AppxRuntime', runtime);
          accessor.setProperty('$AppxGetLogs', getLogs4Core);
      }
      var $AppxRegistry = runtime.getRegistry();
      accessor.setProperty('$AppxRegistry', $AppxRegistry);
      if (!accessor.getProperty('$AppxStyleRegistry')) {
          accessor.setProperty('$AppxStyleRegistry', runtime.getStyleRegistry());
      }
      patchAppGlobalForSecurity(accessor);
  }
  function setupGlobalContext() {
      debug$1$1(function () { return '[APPX] bootstrap:globalContextSetup'; });
      setupImpl();
  }
  function setupReportErrorToRuntimeGetter(runtime) {
      var kernel = runtime.getKernel();
      var appInstanceId = kernel.appInstanceId;
      kernel.__SET_RUNTIME_ERROR_REPORTER__(function (error) {
          reportHostError(appInstanceId, 16 /* ESharedAppxSpecificErrorCode.KernelReportError */, error);
      });
  }
  function setupCurrentPageIdGetter(runtime) {
      runtime.getKernel().__SET_CURRENT_PAGE_ID_GETTER__(function () {
          return runtime.getNav().getTopViewId();
      });
  }
  function setupErrorListener(accessor, getKernel) {
      accessor.setProperty('onerror', function (error) {
          debug$1$1(function () { return "[APPX][Error] enter global.onerror: ".concat(error); });
          var kernel = getKernel();
          if (!kernel) {
              // 没法定位到 kernel 不上报，依赖 native 异常上报
              debug$1$1(function () { return '[APPX][Error] ErrorListener kernel not found'; });
              return;
          }
          try {
              if (typeof error === 'string') {
                  error = new Error(error);
              }
              reportHostError(kernel, 11 /* ESharedAppxSpecificErrorCode.HostGlobalError */, error);
          }
          catch (ex) {
              // 不处理
              debug$1$1(function () { return "[APPX][Error] ErrorListener fail ".concat(ex && ex.message, " ").concat(ex && ex.stack); });
          }
      });
      accessor.getProperty('Promise').prototype._onerror = function (error) {
          debug$1$1(function () { return "[APPX][Error] enter global.onunhandledrejection: ".concat(error); });
          var kernel = getKernel();
          if (!kernel) {
              // 没法定位到 kernel 不上报，依赖 native 异常上报
              debug$1$1(function () { return '[APPX][Error] ErrorListener kernel not found'; });
              return;
          }
          try {
              reportHostError(kernel, 15 /* ESharedAppxSpecificErrorCode.HostUnhandledRejection */, error);
              var runtime = getRuntimeById(kernel.appInstanceId);
              reportUnhandledRejectionToApp(runtime, {
                  promise: this,
                  reason: error,
              });
          }
          catch (ex) {
              // 不处理
              debug$1$1(function () { return "[APPX][Error] ErrorListener fail ".concat(ex && ex.message, " ").concat(ex && ex.stack); });
          }
      };
  }
  /**
   *
   * @param appGlobal
   * @description
   *  在 Android v8 上，跨JSContext 操作 GlobalObject 会遇到 'TypeError: no access'
   *  需要外部传入 accessor 代理，这里做老版本iOS兼容
   */
  function getPropertyAccessorPolyfill(appGlobal) {
      return {
          getProperty: function (key) {
              return appGlobal[key];
          },
          setProperty: function (key, value) {
              appGlobal[key] = value;
          },
      };
  }
  /**
   * 往 AppContext 上下文进行 polyfill 注册
   * @param accessor
   */
  function setupPolyfill(accessor) {
      var appContextObject = accessor.getProperty('Object');
      try {
          if (!appContextObject.assign) {
              appContextObject.assign = function (target) {
                  var arguments$1 = arguments;

                  var args = [];
                  for (var _i = 1; _i < arguments.length; _i++) {
                      args[_i - 1] = arguments$1[_i];
                  }
                  for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
                      var source = args_1[_a];
                      for (var key in source) {
                          if (Object.prototype.hasOwnProperty.call(source, key)) {
                              target[key] = source[key];
                          }
                      }
                  }
                  return target;
              };
          }
      }
      catch (ex) {
          // 如果 v8 不能获取认为成功
      }
  }

  var globalBootstraped = false;
  function setGlobalBootstraped() {
      globalBootstraped = true;
  }
  function isGlobalBootstraped() {
      return globalBootstraped;
  }
  function setupPlatformElements(kernel) {
      var zruntime = getZRuntime4ClientSide();
      var custemElements = kernel.__GET_PLATFORM_ELEMENTS__();
      if (custemElements.length) {
          debug$1$1(function () { return "[APPX] CustomElements: ".concat(JSON.stringify(custemElements)); });
          if (zruntime.registerPlatformElement) {
              var platformElements_1 = custemElements
                  .map(function (e) {
                  if (e.type) {
                      return {
                          events: e.events
                              ? e.events.reduce(function (prev, cur) {
                                  prev[cur] = true;
                                  return prev;
                              }, {})
                              : {},
                          props: e.attrs || [],
                          tag: e.type,
                      };
                  }
              })
                  .filter(Boolean);
              debug$1$1(function () { return "[APPX] PlatfromElements: ".concat(JSON.stringify(platformElements_1)); });
              zruntime.registerPlatformElement(platformElements_1);
          }
      }
  }

  function getDevtoolsHook(accessor) {
      if (typeof __APPXNG_DEVTOOL_HOOK__ === 'undefined') {
          return null;
      }
      else {
          return __APPXNG_DEVTOOL_HOOK__;
      }
  }

  function setupDevtoolsHook(accessor, runtime) {
      var hooks = getDevtoolsHook();
      if (hooks !== null && typeof hooks.registerAppxHook === 'function') {
          info$1$1('[APPX] devtool setupDevtoolsHook start');
          var interceptorFactories = {
              appBaseInstanceInterceptor: getAppBaseInstanceInterceptor,
              appLifecycleManagerInterceptor: getAppLifecycleManagerInterceptor,
              bridgeAsyncCallContextMethodInterceptor: getBridgeAsyncCallContextMethodInteceptor,
              bridgeSyncCallContextMethodInterceptor: getBridgeSyncCallContextMethodInteceptor,
              componentFlexibleLogicInstanceMethodInterceptor: getComponentFlexibleLogicInstanceMethodInteceptor,
              pageFlexibleInstanceMethodInteceptor: getPageFlexibleInstanceMethodInteceptor,
              pageFlexibleLogicInstanceMethodInterceptor: getPageFlexibleLogicInstanceMethodInteceptor,
              pageLifecycleManagerInterceptor: getPageLifecycleManagerInterceptor,
          };
          var interceptors = {};
          var _loop_1 = function (key) {
              var factory = interceptorFactories[key];
              var interceptorInstance;
              Object.defineProperty(interceptors, key, {
                  configurable: true,
                  enumerable: true,
                  get: function () {
                      if (!interceptorInstance) {
                          interceptorInstance = factory();
                      }
                      return interceptorInstance;
                  },
                  set: function (v) {
                      interceptorInstance = v;
                  },
              });
          };
          for (var _i = 0, _a = Object.keys(interceptorFactories); _i < _a.length; _i++) {
              var key = _a[_i];
              _loop_1(key);
          }
          hooks.registerAppxHook(runtime, interceptors);
          info$1$1('[APPX] devtool setupDevtoolsHook finish');
      }
  }

  function getQueryFromPolygonKernel(kernel) {
      var query = '';
      if (typeof kernel.documentUrl === 'string') {
          // 第一个 ? 之前包括 ? 移除，或者全移除
          query = kernel.documentUrl.replace(/^.*?(\?|$)/, '');
      }
      return query;
  }
  var CubeAppExportInstance = /** @class */ /*#__PURE__*/ (function () {
      function CubeAppExportInstance(kernel, bridge) {
          this.kernel = kernel;
          this.bridge = bridge;
          // setInsideKernel({
          //   __GET_STARTUP_PARAMS__: kernel.__GET_STARTUP_PARAMS__,
          //   userAgent: kernel.userAgent,
          // });
          // initInsideEnv();
      }
      CubeAppExportInstance.prototype.getAppContextExport = function () {
          if (!this.appContextExport) {
              this.appContextExport = this.getAppContextExportInternal();
          }
          return this.appContextExport;
      };
      CubeAppExportInstance.prototype.dispose = function () {
          if (this.runtime) {
              this.runtime.dispose();
              this.runtime = null;
          }
      };
      // 初始化 AppContext 出来只包含 bootstrap, 其他挂载等创建之后再挂载
      CubeAppExportInstance.prototype.getAppContextExportInternal = function () {
          var _this = this;
          var $AppxFramework = {
              bootstrapInAppContext: function (meta, style, appGlobal, accessor) {
                  if (!accessor) {
                      accessor = getPropertyAccessorPolyfill(appGlobal);
                  }
                  return _this.bootstrapInAppContext({
                      accessor: accessor,
                      meta: meta,
                      pageMeta: undefined,
                      runtimeProtocol: 0,
                      style: style,
                  });
              },
              bootstrapInAppContextByProtocol: function (runtimeOption) {
                  var protocolVersion = 'runtimeProtocol' in runtimeOption ? runtimeOption.runtimeProtocol : 0;
                  if (protocolVersion >= kCubeRuntimeSupportMin && protocolVersion <= kCubeRuntimeSupportMax) {
                      // 2.4.0 case 95
                      // 2.3.10 case 94
                      // 2.3.8 case 93
                      // 2.3.6 case 92:
                      // 2.3.3, 2.3.4, 2.3.5 case 90:
                      // 2.3.2, 2.3.4 case 82:
                      // 2.3.1 case 81:
                      // 2.3.0 case 80:
                      // 2.2.3 case 73:
                      // 2.2.2 case 72:
                      // 2.2.1 case 71:
                      // 2.2.0 case 70:
                      // 2.1.9 case 7:
                      // 2.1.6, 2.1.8 case 6:
                      // 2.1.4, 2.1.5 case 5:
                      // 2.1.3 case 4:
                      // 2.1.1, 2.1.2 case 3:
                      // 2.1.0 case 2:
                      // 2.0.0, 2.0.1 case 1:
                      return _this.bootstrapInAppContext(runtimeOption);
                  }
                  else {
                      var message = "[APPX][Bootstrap] protocol(".concat(protocolVersion, ") not accept");
                      info$1$1(message);
                      _this.kernel.__FATAL_ERROR__(message, '');
                      throw new Error(message);
                  }
              },
              bootstrapInPageContextByProtocol: function (runtimeOption) {
                  {
                      var protocolVersion = 'runtimeProtocol' in runtimeOption ? runtimeOption.runtimeProtocol : 0;
                      if (protocolVersion >= kCubeRuntimeSupportMin && protocolVersion <= kCubeRuntimeSupportMax) {
                          // 2.3.10 case 94
                          // 2.3.8 case 93
                          // 2.3.6 case 92:
                          // 2.3.3, 2.3.4, 2.3.6 case 90:
                          // 2.3.1 case 81:
                          // 2.3.0 case 80:
                          // 2.2.3 case 73:
                          // 2.2.2 case 72:
                          // 2.2.1 case 71:
                          // 2.2.0 case 70:
                          // 2.1.9 case 7:
                          // 2.1.6, 2.1.8 case 6:
                          // 2.1.4, 2.1.5 case 5:
                          // 2.1.3 case 4:
                          // 2.1.1, 2.1.2 case 3:
                          // 2.1.0 case 2:
                          // 2.0.0, 2.0.1 case 1:
                          return _this.bootstrapInPageContext(runtimeOption);
                      }
                      else {
                          var message = "[APPX][Bootstrap] protocol(".concat(protocolVersion, ") not accept");
                          info$1$1(message);
                          _this.kernel.__FATAL_ERROR__(message, '');
                          throw new Error(message);
                      }
                  }
              },
              helper: FrozenAppxHelper,
              style: FrozenAppxStyle,
          };
          return {
              $AppxFramework: $AppxFramework,
          };
      };
      CubeAppExportInstance.prototype.bootstrapInPageContext = function (option) {
          var _this = this;
          {
              debug$1$1(function () { return '[APPX] bootstrap:begin'; });
              var clientInfo = extractClientInfo(this.kernel.userAgent);
              setInsideFeatureRuntime(clientInfo.clientName, clientInfo.clientVersionSequence, clientInfo.platform);
              var accessor = option.accessor;
              setupErrorListener(accessor, function () { return _this.kernel; });
              setupPolyfill(accessor);
              var runtime_1 = createAppxContextRuntime(this.kernel, option.meta, option.pageMeta, option.style, accessor, 1 /* ESharedAppxRuntimeContextType.Page */, false);
              var registry = createOptionRegistryImpl(function () { return runtime_1; });
              runtime_1.setRegistry(registry);
              registerSymbolToAppContext(accessor, runtime_1);
              // clear symbol
              // accessor.setProperty('Vue', null);
              // accessor.setProperty('weex', null);
              // accessor.setProperty('mquick', null);
              // accessor.setProperty('__POLYGON_KERNEL__', null);
              try {
                  info$1$1('[APPX][User] code:start');
                  option.callback(runtime_1);
                  info$1$1('[APPX][User] code:finish');
              }
              catch (ex) {
                  info$1$1('[APPX][User] code:error' + (ex && ex.stack));
                  throw ex;
              }
              runtime_1.getPageManager().createInstance(option.pagePath, '1', {
                  Vue: null,
                  bridge: this.bridge,
                  proxyType: 1 /* ESharedAppxFlexibleProxyType.Local */,
                  query: getQueryFromPolygonKernel(this.kernel),
              });
              debug$1$1(function () { return '[APPX] bootstrap:finish'; });
          }
      };
      CubeAppExportInstance.prototype.bootstrapInAppContext = function (option) {
          var _this = this;
          if (!this.runtime) {
              var timeBegin = Date.now();
              try {
                  info$1$1("[APPX][Bootstrap][App] bootstrap:enter(".concat(option && option.runtimeProtocol, ")"));
                  var clientInfo = extractClientInfo(this.kernel.userAgent);
                  setInsideFeatureRuntime(clientInfo.clientName, clientInfo.clientVersionSequence, clientInfo.platform);
                  var meta = option.meta, style = option.style, accessor = option.accessor, pageMeta = option.pageMeta;
                  setupErrorListener(accessor, function () { return _this.kernel; });
                  setupPolyfill(accessor);
                  var runtime_2 = createAppxContextRuntime(this.kernel, meta, pageMeta, style, accessor, 0 /* ESharedAppxRuntimeContextType.App */, false);
                  this.runtime = runtime_2;
                  var registry = createOptionRegistryImpl(function () { return runtime_2; });
                  runtime_2.setRegistry(registry);
                  registerSymbolToAppContext(accessor, this.runtime);
                  setupCurrentPageIdGetter(this.runtime);
                  setupReportErrorToRuntimeGetter(this.runtime);
                  setupDevtoolsHook(accessor, this.runtime);
                  info$1$1('[APPX][Bootstrap][App] bootstrap:finish');
              }
              catch (ex) {
                  var message = "[APPX][Bootstrap][App] bootstrap fail ".concat(ex && ex.message);
                  var stack = ex && ex.stack;
                  info$1$1("".concat(message, "/").concat(stack));
                  this.kernel.__FATAL_ERROR__(message, stack);
                  throw ex;
              }
              var timeEnd = Date.now();
              try {
                  this.kernel.__PERFORMANCE__.frameworkBootstrapBegin = timeBegin;
                  this.kernel.__PERFORMANCE__.frameworkBootstrapFinish = timeEnd;
              }
              catch (ex) { }
              // 执行业务回调
              if (typeof option.callback === 'function') {
                  info$1$1('[APPX][User] code:start');
                  option.callback.call(null);
                  info$1$1('[APPX][User] code:finish');
              }
          }
      };
      return CubeAppExportInstance;
  }());

  var sharedCubeAppExportInstanceMap = Object.create(null);
  /**
   * @description 由 GlobalJSContext.createAppContext 调用，获取 CubeKernel 并启动
   *
   * @param 需要传入 Kernel
   * @returns 导出的 AppJSContext.symbols
   */
  function bootstrapInGlobalContext(kernel, bridge) {
      try {
          var appInstanceId = kernel && kernel.appInstanceId;
          info$1$1("[APPX][Bootstrap][Global] bootstrap:enter ({".concat(appInstanceId, ") (").concat(kAppxVersion$1, ")"));
          if (!isGlobalBootstraped()) {
              setupGlobalContext();
              setupPlatformElements(kernel);
              setGlobalBootstraped();
          }
          // 环境隔离后，开发者不可能拿到一个有效的 kernel，在这里创建不了环境
          var cubeAppExportInstance = new CubeAppExportInstance(kernel, bridge);
          sharedCubeAppExportInstanceMap[appInstanceId] = cubeAppExportInstance;
          var symbols = cubeAppExportInstance.getAppContextExport();
          info$1$1('[APPX][Bootstrap][Global] bootstrap:finish');
          return symbols;
      }
      catch (ex) {
          /**
           * https://yuque.antfin-inc.com/cubejs/cube/errorlog
           * 阶段: 2(应用上下文初始化)
           * 捕获方式: 2
           */
          var message = "[APPX][Bootstrap][Global] bootstrapInGlobalContext fail ".concat(ex && ex.message);
          var stack = ex && ex.stack;
          info$1$1("".concat(message, "/").concat(stack));
          kernel.__FATAL_ERROR__(message, stack);
          throw ex;
      }
  }
  function destroyAppInGlobalContext(appInstanceId) {
      var cubeAppExportInstance = sharedCubeAppExportInstanceMap[appInstanceId];
      if (cubeAppExportInstance) {
          cubeAppExportInstance.dispose();
          delete sharedCubeAppExportInstanceMap[appInstanceId];
      }
  }

  function bootstrapInAppContext4HybridEngine(kernel, option) {
      var timeBegin = Date.now();
      try {
          info$1$1("[APPX][Hybrid][Bootstrap] bootstrap:enter(".concat(option && option.runtimeProtocol, "):(").concat(option && Object.keys(option), ")"));
          var clientInfo = extractClientInfo(kernel.userAgent);
          setInsideFeatureRuntime(clientInfo.clientName, clientInfo.clientVersionSequence, clientInfo.platform);
          var meta = option.meta, style = option.style, accessor = option.accessor, pageMeta = option.pageMeta;
          setupErrorListener(accessor, function () { return kernel; });
          // TODO setupErrorListener4Promise UnhandledPromise
          setupPolyfill(accessor);
          // setInsideKernel({
          //   __GET_STARTUP_PARAMS__: kernel.__GET_STARTUP_PARAMS__,
          //   userAgent: kernel.userAgent,
          // });
          // initInsideEnv();
          var runtime_1 = createAppxContextRuntime(kernel, meta, pageMeta, option.style || new AppxStyleRegistry(), option.accessor, 0 /* ESharedAppxRuntimeContextType.App */, true);
          var registry = createOptionRegistryImpl(function () { return runtime_1; });
          runtime_1.setRegistry(registry);
          registerSymbolToAppContext(accessor, runtime_1);
          var zephyrFlag = runtime_1.getRegistry().getCompileInfoZephyrFlagWithMiniExtension();
          setupZephyrRuntimeFeature(runtime_1, getZRuntime4HostSide(), zephyrFlag, clientInfo);
          // TODO
          info$1$1('[APPX][Hybrid][Bootstrap] index:begin');
          if (option.clientInfo) {
              option.clientInfo.callback();
          }
          // compatible
          if (option.clientCallback) {
              option.clientCallback();
          }
          info$1$1('[APPX][Hybrid][Bootstrap] index:finish');
          info$1$1('[APPX][Hybrid][Bootstrap] bootstrap:finish');
      }
      catch (ex) {
          var message = "[APPX][Hybrid][Bootstrap] bootstrap fail ".concat(ex && ex.message, "/").concat(ex && ex.stack);
          var stack = ex && ex.stack;
          info$1$1("".concat(message, "/").concat(stack));
          kernel.__FATAL_ERROR__(message, stack);
          throw ex;
      }
      var timeEnd = Date.now();
      try {
          kernel.__PERFORMANCE__.frameworkBootstrapBegin = timeBegin;
          kernel.__PERFORMANCE__.frameworkBootstrapFinish = timeEnd;
      }
      catch (ex) { }
      // 执行业务回调
      if (typeof option.callback === 'function') {
          info$1$1('[APPX][User] code:start');
          option.callback.call(null);
          info$1$1('[APPX][User] code:finish');
      }
  }
  function getAppContext(kernel, event, dep) {
      var $AppxFramework = {
          bootstrapInAppContextByProtocol: function (runtimeOption) {
              var protocolVersion = 'runtimeProtocol' in runtimeOption ? runtimeOption.runtimeProtocol : 0;
              if (protocolVersion >= kCubeRuntimeSupportMin && protocolVersion <= kCubeRuntimeSupportMax) {
                  return bootstrapInAppContext4HybridEngine(kernel, runtimeOption);
              }
              else {
                  var message = "[APPX][Bootstrap] protocol(".concat(protocolVersion, ") not accept");
                  info$1$1(message);
                  kernel.__FATAL_ERROR__(message, '');
                  throw new Error(message);
              }
          },
          helper: FrozenAppxHelper,
          style: FrozenAppxStyle,
      };
      var appBizJSContext = {
          $AppxFramework: $AppxFramework,
          AFAppX: {
              $AppxFramework: $AppxFramework,
          },
          __CREATE_PAGE_INSTANCE__: kernel.__CREATE_PAGE_INSTANCE__,
          __WEEX_CALL_JAVASCRIPT__: dep.receiveTasks,
          __securityPatched: 1,
          getJSFMVersion: dep.getJSFMVersion,
          isSupportCubeStyle: true,
          navigator: {
              userAgent: kernel.userAgent,
          },
          // no console override
          // console
      };
      return appBizJSContext;
  }

  function evaluateScriptInContext(script, contextSymbols) {
      script = script.replace(/^javascript:/, '');
      debug$1$1(function () { return "[APPX][Hybrid] evaluateScriptInContext: ".concat(script); });
      var keys = contextSymbols ? Object.keys(contextSymbols) : [];
      var values = keys.map(function (k) { return contextSymbols[k]; });
      var fn = new (Function.bind.apply(Function, __spreadArray$1(__spreadArray$1([void 0], keys, false), [script], false)))();
      debug$1$1(function () { return "[APPX][Hybrid] evaluateScriptInContext fn ".concat(typeof fn); });
      var result = fn.apply(void 0, values);
      return result;
  }
  function getEventReturnCode(type) {
      switch (type) {
          case 0 /* ESharedEventDispatchReturnCode.SUCCESS */:
              return 'SUCCESS';
          case 2 /* ESharedEventDispatchReturnCode.CALLBACK_NOT_FOUND */:
              return 'CALLBACK_NOT_FOUND';
          case 3 /* ESharedEventDispatchReturnCode.CALLBACK_TOO_MUCH */:
              return 'CALLBACK_TOO_MUCH';
          case 1 /* ESharedEventDispatchReturnCode.CALL_EXCEPTION */:
              return 'CALL_EXCEPTION';
      }
  }
  function normalizeEventData$1(data) {
      if (data && typeof data === 'object' && typeof data.data === 'object') {
          // for android event
          return data.data;
      }
      else {
          return data;
      }
  }
  function createEvent4CubeEngine(eventName, data) {
      var event = new Event(eventName, normalizeEventData$1(data), 2 /* ESharedAppxPageEngineType.CubeEngine */);
      return event;
  }
  function handlerWebMessage(appInstanceId, event) {
      var eventData = event.data;
      if (eventData.t === 1 /* EAppxWeb2MessageKey.C2S_PageInit */) {
          if (event.ports && event.ports.length >= 1) {
              var port_1 = event.ports[0];
              // 开始页面创建
              var payload = eventData.p;
              var runtime = getRuntimeById(appInstanceId);
              // 先看 viewId 是否存在，需要重新连接
              var pageManager = runtime.getPageManager();
              var viewId_1 = payload.viewId.toString();
              // 如果已经被 Unload 的 Page，会自动进行 destroyInstance ，保证这里获取不到
              // 但是栈里还存在，需要等 postprocess 去处理
              var $page_1 = pageManager.getInstanceById(viewId_1);
              debug$1$1(function () { return '[APPX] web-worker handlerGlobalMessage' + viewId_1 + ' pagefound(' + !!$page_1 + ') port' + port_1.preconnect; });
              if ($page_1) {
                  debug$1$1(function () { return "[APPX][ReConnect][Hybrid] page reconnecting ".concat($page_1.pagePath, "/").concat($page_1.pageId); });
                  // $page.onReConnect(port);
                  // const coordinator = $page.coordinator as IAppxRemoteAsyncHostCoordinator;
                  // coordinator.onReConnect(port);
              }
              else {
                  // 再看 pagePath 是否分包，等待下载完成
                  pageManager.onCreatePage(payload.pagePath, payload.viewId.toString(), {
                      Vue: null,
                      bridge: null,
                      port: port_1,
                      proxyType: 2 /* ESharedAppxFlexibleProxyType.Remote */,
                      query: payload.queryString,
                  });
              }
          }
      }
  }

  function noop$9() { }
  function createWebCompatibleKernel(appInstanceId, dep, bootstrapOption) {
      var __BRIDGE_CALL__ = getHostBridgeCall4AlipayBridge();
      var __BRIDGE_CALL_SYNC__ = getHostBridgeCallSync4AlipayBridge() || getHostBridgeCallSync4KylinBridge();
      var eventEmitter = getSharedEventEmitter();
      var __EVENT_ADD_LISTENER__ = eventEmitter.addEventListener.bind(eventEmitter);
      var __EVENT_REMOVE_LISTENER__ = eventEmitter.removeEventListener.bind(eventEmitter);
      setupKernelEventListener4Push(function (event) {
          debug$1$1(function () { return "[APPX][Hybrid][Event] ".concat(event.type, " ").concat(JSON.stringify(event.data)); });
          eventEmitter.dispatchEvent(event.type, event);
      });
      setupPushEventListener();
      workerGlobal.addEventListener('message', function (event) {
          debug$1$1(function () { return "[APPX][Hybrid][Message] ".concat(event.ports, " ").concat(JSON.stringify(event.data)); });
          handlerWebMessage(appInstanceId, event);
      });
      var pageContextMap = {};
      var __CREATE_PAGE_INSTANCE__ = function (pagePath, instanceId) {
          var context = dep.createPageInstance(instanceId, true);
          eventEmitter.dispatchEvent('pageCreateContext', {
              data: {
                  context: context,
                  instanceId: instanceId,
                  pagePath: pagePath,
              },
          });
      };
      var __EVENT_INVOKE__ = function (eventName, payload, needReturn) {
          debug$1$1(function () { return "[APPX][Event][Hybrid:Cube] ".concat(eventName, " ").concat(JSON.stringify(payload), " ").concat(needReturn); });
          if (eventName === 'evaluateScriptInPageContext') {
              // RenderJS
              var _a = payload, script = _a.script, instanceId_1 = _a.instanceId;
              var contextGetter = pageContextMap[instanceId_1];
              if (typeof contextGetter === 'function') {
                  debug$1$1(function () { return "[APPX][Hybrid] evaluateScriptInPageContext found page ".concat(instanceId_1); });
                  var contextSymbols = contextGetter();
                  var returnValue = void 0;
                  var error = void 0;
                  try {
                      returnValue = evaluateScriptInContext(script, contextSymbols);
                  }
                  catch (ex) {
                      debug$1$1(function () { return "[APPX][Hybrid] evaluateScriptInPageContext fail ".concat(ex && ex.stack); });
                      error = ex;
                  }
                  return {
                      code: error
                          ? getEventReturnCode(1 /* ESharedEventDispatchReturnCode.CALL_EXCEPTION */)
                          : getEventReturnCode(0 /* ESharedEventDispatchReturnCode.SUCCESS */),
                      prevented: false,
                      result: returnValue,
                      success: !!error,
                  };
              }
              else {
                  return {
                      code: getEventReturnCode(2 /* ESharedEventDispatchReturnCode.CALLBACK_NOT_FOUND */),
                      prevented: false,
                      result: undefined,
                      success: false,
                  };
              }
          }
          else {
              // RenderEvent
              var event = createEvent4CubeEngine(eventName, payload);
              if (needReturn) {
                  var returnContext = {
                      code: undefined,
                      returnValue: undefined,
                  };
                  eventEmitter.dispatchEvent(eventName, event, returnContext);
                  var shouldPreventEvent = event.isDefaultPrevented();
                  if (returnContext.code !== 0 /* ESharedEventDispatchReturnCode.SUCCESS */) {
                      shouldPreventEvent = false;
                  }
                  return {
                      code: getEventReturnCode(returnContext.code),
                      prevent: shouldPreventEvent,
                      prevented: shouldPreventEvent,
                      result: returnContext.returnValue,
                      success: returnContext.code === 0 /* ESharedEventDispatchReturnCode.SUCCESS */,
                  };
              }
              else {
                  eventEmitter.dispatchEvent(eventName, event);
                  return {
                      code: getEventReturnCode(0 /* ESharedEventDispatchReturnCode.SUCCESS */),
                      prevent: event.isDefaultPrevented(),
                      prevented: event.isDefaultPrevented(),
                      result: null,
                      success: true,
                  };
              }
          }
      };
      var __IMPORT_SCRIPT__ = function (url) {
          try {
              workerGlobal.importScripts(url);
              return true;
          }
          catch (ex) {
              // tslint:disable-next-line
              console.error(ex);
              return false;
          }
      };
      var kernel = {
          Promise: Promise,
          __BRIDGE_CALL_SYNC__: __BRIDGE_CALL_SYNC__,
          __BRIDGE_CALL__: __BRIDGE_CALL__,
          // unused
          __BRIDGE_GET_PREFETCH_DATA__: noop$9,
          __BRIDGE_REMOVE_PREFETCH_DATA__: noop$9,
          // TODO
          __CREATE_PAGE_INSTANCE__: __CREATE_PAGE_INSTANCE__,
          __ENTER_BATCHING__: noop$9,
          __EVENT_ADD_LISTENER__: __EVENT_ADD_LISTENER__,
          __EVENT_INVOKE__: __EVENT_INVOKE__,
          __EVENT_REMOVE_LISTENER__: __EVENT_REMOVE_LISTENER__,
          __EXIT_BATCHING__: noop$9,
          __FATAL_ERROR__: function (message, stack) {
              var error = new Error(message);
              if (stack) {
                  error.stack = stack;
              }
              throw error;
          },
          __GET_PLATFORM_ELEMENTS__: function () { return dep.getCustomComponents(); },
          __GET_STARTUP_PARAMS__: function () { return bootstrapOption.startupParams; },
          __IMPORT_SCRIPT__: __IMPORT_SCRIPT__,
          __PERFORMANCE__: {},
          __REPORT_ERROR__: function (err) {
              // tslint:disable-next-line
              console.error(err);
          },
          __SET_CURRENT_PAGE_ID_GETTER__: noop$9,
          __SET_PAGE_CONTEXT_GETTER__: function (instanceId, fn) {
              pageContextMap[instanceId] = fn;
          },
          __SET_RUNTIME_ERROR_REPORTER__: noop$9,
          appInstanceId: appInstanceId,
          clearInterval: clearInterval,
          clearTimeout: clearTimeout,
          isDisableAppContext: false,
          isUsingExtensionMode: false,
          setInterval: setInterval,
          setTimeout: setTimeout,
          userAgent: bootstrapOption.userAgent,
          getFrameworkContextSymbol: function (key) {
              return workerGlobal[key];
          },
      };
      return {
          event: eventEmitter,
          kernel: kernel,
      };
  }

  function createAppContextInGlobalContext(platformDep, appInstanceId, option) {
      info$1$1("[APPX][Context][Global] getAppContext (".concat(appInstanceId, ") (").concat(kAppxVersion$1, ")"));
      // createKernel
      var _a = createWebCompatibleKernel(appInstanceId, platformDep, option), kernel = _a.kernel, event = _a.event;
      platformDep.setCubeAppInstanceKernel(appInstanceId, null, kernel);
      var startupParams = kernel.__GET_STARTUP_PARAMS__();
      setEnvStartupParamsGetter(function () { return startupParams; });
      // setupGlobalContext
      if (!isGlobalBootstraped()) {
          setupImpl4HybridEngine();
          setupPlatformElements(kernel);
          setGlobalBootstraped();
      }
      // getAppContext export
      var symbols = getAppContext(kernel, event, platformDep);
      return symbols;
  }

  var Event$1 = function Event (type) {
    this.type = String(type);
    this.engineType = 2; /** ESharedAppxPageEngineType.CubeEngine **/
    this._preventDefault = false;
  };
  Event$1.prototype.preventDefault = function preventDefault () {
    this._preventDefault = true;
  };
  Event$1.prototype.isDefaultPrevented = function isDefaultPrevented () {
    return !!this._preventDefault
  };
  Event$1.prototype.initEvent = function initEvent (type) {
    this.type = String(type);
  };

  function createEvent4CubeEngineJSFM (type) {
    return new Event$1(type)
  }

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  /**
   * @fileOverview
   * Polyfill `setTimeout` on Android V8 using native method
   * `setTimeoutNative(callbackId, time)` and JS method
   * `setTimeoutCallback(callbackId)`.
   * This polyfill is only used in virtual-DOM diff & flush agorithm. Not
   * accessed by JS Bundle code (The timer APIs polyfill for JS Bundle is in
   * `html5/default/app/ctrl.js`).
   */

  // const originalSetTimeout = global.setTimeout
  var setTimeoutNative = global.setTimeoutNative;

  /**
   * Set up native timer
   */
  /* istanbul ignore next */
  function setNativeTimer () {
    if (typeof setTimeout === 'undefined' &&
    typeof setTimeoutNative === 'function') {
      var timeoutMap = {};
      var timeoutId = 0;

      global.setTimeout = function (cb, time) {
        timeoutMap[++timeoutId] = cb;
        setTimeoutNative(timeoutId.toString(), time);
      };

      global.setTimeoutCallback = function (id) {
        if (typeof timeoutMap[id] === 'function') {
          timeoutMap[id]();
          delete timeoutMap[id];
        }
      };
    }
  }

  // /* istanbul ignore next */
  // export function resetNativeTimer () {
  //   global.setTimeout = originalSetTimeout
  //   global.setTimeoutCallback = null
  // }

  setNativeTimer();

  // 先把 setTimeout 设置好

  var WXEnvironment$1 = global.WXEnvironment;

  var scheduler;
  var nativePromise = global.Promise;
  /* istanbul ignore next */
  if (WXEnvironment$1 && WXEnvironment$1.platform === 'iOS') {
    // 可以再根据 iOS 8/9+ 区分判断
    scheduler = function (flush) {
      setTimeout(flush, 0);
    };
  }
  else {
    // v8 一定有
    scheduler = function (flush) {
      nativePromise.resolve().then(flush);
    };
  }

  var NativeMicroScheduler = scheduler;

  function commonjsRequire () {
  	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var es6Promise = createCommonjsModule(function (module, exports) {
  /*!
   * @overview es6-promise - a tiny implementation of Promises/A+.
   * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
   * @license   Licensed under MIT license
   *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
   * @version   v4.2.5+7f2b526d
   */

  (function (global, factory) {
  	 module.exports = factory() ;
  }(this, (function () {
  function objectOrFunction(x) {
    var type = typeof x;
    return x !== null && (type === 'object' || type === 'function');
  }

  function isFunction(x) {
    return typeof x === 'function';
  }



  var _isArray = void 0;
  if (Array.isArray) {
    _isArray = Array.isArray;
  } else {
    _isArray = function (x) {
      return Object.prototype.toString.call(x) === '[object Array]';
    };
  }

  var isArray = _isArray;

  var len = 0;
  var vertxNext = void 0;
  var customSchedulerFn = void 0;

  var asap = function asap(callback, arg) {
    queue[len] = callback;
    queue[len + 1] = arg;
    len += 2;
    if (len === 2) {
      // If len is 2, that means that we need to schedule an async flush.
      // If additional callbacks are queued before the queue is flushed, they
      // will be processed by this flush that we are scheduling.
      if (customSchedulerFn) {
        customSchedulerFn(flush);
      } else {
        scheduleFlush();
      }
    }
  };

  function setScheduler(scheduleFn) {
    customSchedulerFn = scheduleFn;
  }

  function setAsap(asapFn) {
    asap = asapFn;
  }

  var browserWindow = typeof window !== 'undefined' ? window : undefined;
  var browserGlobal = browserWindow || {};
  var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
  var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

  // test for web worker but not in IE10
  var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

  // node
  function useNextTick() {
    // node version 0.10.x displays a deprecation warning when nextTick is used recursively
    // see https://github.com/cujojs/when/issues/410 for details
    return function () {
      return process.nextTick(flush);
    };
  }

  // vertx
  function useVertxTimer() {
    if (typeof vertxNext !== 'undefined') {
      return function () {
        vertxNext(flush);
      };
    }

    return useSetTimeout();
  }

  function useMutationObserver() {
    var iterations = 0;
    var observer = new BrowserMutationObserver(flush);
    var node = document.createTextNode('');
    observer.observe(node, { characterData: true });

    return function () {
      node.data = iterations = ++iterations % 2;
    };
  }

  // web worker
  function useMessageChannel() {
    var channel = new MessageChannel();
    channel.port1.onmessage = flush;
    return function () {
      return channel.port2.postMessage(0);
    };
  }

  function useSetTimeout() {
    // Store setTimeout reference so es6-promise will be unaffected by
    // other code modifying setTimeout (like sinon.useFakeTimers())
    var globalSetTimeout = setTimeout;
    return function () {
      return globalSetTimeout(flush, 1);
    };
  }

  var queue = new Array(1000);
  function flush() {
    for (var i = 0; i < len; i += 2) {
      var callback = queue[i];
      var arg = queue[i + 1];

      callback(arg);

      queue[i] = undefined;
      queue[i + 1] = undefined;
    }

    len = 0;
  }

  function attemptVertx() {
    try {
      var vertx = Function('return this')().require('vertx');
      vertxNext = vertx.runOnLoop || vertx.runOnContext;
      return useVertxTimer();
    } catch (e) {
      return useSetTimeout();
    }
  }

  var scheduleFlush = void 0;
  // Decide what async method to use to triggering processing of queued callbacks:
  if (isNode) {
    scheduleFlush = useNextTick();
  } else if (BrowserMutationObserver) {
    scheduleFlush = useMutationObserver();
  } else if (isWorker) {
    scheduleFlush = useMessageChannel();
  } else if (browserWindow === undefined && typeof commonjsRequire === 'function') {
    scheduleFlush = attemptVertx();
  } else {
    scheduleFlush = useSetTimeout();
  }

  function then(onFulfillment, onRejection) {
    var parent = this;

    var child = new this.constructor(noop);

    if (child[PROMISE_ID] === undefined) {
      makePromise(child);
    }

    var _state = parent._state;


    if (_state) {
      var callback = arguments[_state - 1];
      asap(function () {
        return invokeCallback(_state, child, callback, parent._result);
      });
    } else {
      subscribe(parent, child, onFulfillment, onRejection);
    }

    return child;
  }

  /**
    `Promise.resolve` returns a promise that will become resolved with the
    passed `value`. It is shorthand for the following:

    ```javascript
    let promise = new Promise(function(resolve, reject){
      resolve(1);
    });

    promise.then(function(value){
      // value === 1
    });
    ```

    Instead of writing the above, your code now simply becomes the following:

    ```javascript
    let promise = Promise.resolve(1);

    promise.then(function(value){
      // value === 1
    });
    ```

    @method resolve
    @static
    @param {Any} value value that the returned promise will be resolved with
    Useful for tooling.
    @return {Promise} a promise that will become fulfilled with the given
    `value`
  */
  function resolve$1(object) {
    /*jshint validthis:true */
    var Constructor = this;

    if (object && typeof object === 'object' && object.constructor === Constructor) {
      return object;
    }

    var promise = new Constructor(noop);
    resolve(promise, object);
    return promise;
  }

  var PROMISE_ID = Math.random().toString(36).substring(2);

  function noop() {}

  var PENDING = void 0;
  var FULFILLED = 1;
  var REJECTED = 2;

  var TRY_CATCH_ERROR = { error: null };

  function selfFulfillment() {
    return new TypeError("You cannot resolve a promise with itself");
  }

  function cannotReturnOwn() {
    return new TypeError('A promises callback cannot return that same promise.');
  }

  function getThen(promise) {
    try {
      return promise.then;
    } catch (error) {
      TRY_CATCH_ERROR.error = error;
      return TRY_CATCH_ERROR;
    }
  }

  function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
    try {
      then$$1.call(value, fulfillmentHandler, rejectionHandler);
    } catch (e) {
      return e;
    }
  }

  function handleForeignThenable(promise, thenable, then$$1) {
    asap(function (promise) {
      var sealed = false;
      var error = tryThen(then$$1, thenable, function (value) {
        if (sealed) {
          return;
        }
        sealed = true;
        if (thenable !== value) {
          resolve(promise, value);
        } else {
          fulfill(promise, value);
        }
      }, function (reason) {
        if (sealed) {
          return;
        }
        sealed = true;

        reject(promise, reason);
      }, 'Settle: ' + (promise._label || ' unknown promise'));

      if (!sealed && error) {
        sealed = true;
        reject(promise, error);
      }
    }, promise);
  }

  function handleOwnThenable(promise, thenable) {
    if (thenable._state === FULFILLED) {
      fulfill(promise, thenable._result);
    } else if (thenable._state === REJECTED) {
      reject(promise, thenable._result);
    } else {
      subscribe(thenable, undefined, function (value) {
        return resolve(promise, value);
      }, function (reason) {
        return reject(promise, reason);
      });
    }
  }

  function handleMaybeThenable(promise, maybeThenable, then$$1) {
    if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
      handleOwnThenable(promise, maybeThenable);
    } else {
      if (then$$1 === TRY_CATCH_ERROR) {
        reject(promise, TRY_CATCH_ERROR.error);
        TRY_CATCH_ERROR.error = null;
      } else if (then$$1 === undefined) {
        fulfill(promise, maybeThenable);
      } else if (isFunction(then$$1)) {
        handleForeignThenable(promise, maybeThenable, then$$1);
      } else {
        fulfill(promise, maybeThenable);
      }
    }
  }

  function resolve(promise, value) {
    if (promise === value) {
      reject(promise, selfFulfillment());
    } else if (objectOrFunction(value)) {
      handleMaybeThenable(promise, value, getThen(value));
    } else {
      fulfill(promise, value);
    }
  }

  function publishRejection(promise) {
    if (promise._onerror) {
      promise._onerror(promise._result);
    }

    publish(promise);
  }

  function fulfill(promise, value) {
    if (promise._state !== PENDING) {
      return;
    }

    promise._result = value;
    promise._state = FULFILLED;

    if (promise._subscribers.length !== 0) {
      asap(publish, promise);
    }
  }

  function reject(promise, reason) {
    if (promise._state !== PENDING) {
      return;
    }
    promise._state = REJECTED;
    promise._result = reason;

    asap(publishRejection, promise);
  }

  function subscribe(parent, child, onFulfillment, onRejection) {
    var _subscribers = parent._subscribers;
    var length = _subscribers.length;


    parent._onerror = null;

    _subscribers[length] = child;
    _subscribers[length + FULFILLED] = onFulfillment;
    _subscribers[length + REJECTED] = onRejection;

    if (length === 0 && parent._state) {
      asap(publish, parent);
    }
  }

  function publish(promise) {
    var subscribers = promise._subscribers;
    var settled = promise._state;

    if (subscribers.length === 0) {
      return;
    }

    var child = void 0,
        callback = void 0,
        detail = promise._result;

    for (var i = 0; i < subscribers.length; i += 3) {
      child = subscribers[i];
      callback = subscribers[i + settled];

      if (child) {
        invokeCallback(settled, child, callback, detail);
      } else {
        callback(detail);
      }
    }

    promise._subscribers.length = 0;
  }

  function tryCatch(callback, detail) {
    try {
      return callback(detail);
    } catch (e) {
      TRY_CATCH_ERROR.error = e;
      return TRY_CATCH_ERROR;
    }
  }

  function invokeCallback(settled, promise, callback, detail) {
    var hasCallback = isFunction(callback),
        value = void 0,
        error = void 0,
        succeeded = void 0,
        failed = void 0;

    if (hasCallback) {
      value = tryCatch(callback, detail);

      if (value === TRY_CATCH_ERROR) {
        failed = true;
        error = value.error;
        value.error = null;
      } else {
        succeeded = true;
      }

      if (promise === value) {
        reject(promise, cannotReturnOwn());
        return;
      }
    } else {
      value = detail;
      succeeded = true;
    }

    if (promise._state !== PENDING) ; else if (hasCallback && succeeded) {
      resolve(promise, value);
    } else if (failed) {
      reject(promise, error);
    } else if (settled === FULFILLED) {
      fulfill(promise, value);
    } else if (settled === REJECTED) {
      reject(promise, value);
    }
  }

  function initializePromise(promise, resolver) {
    try {
      resolver(function resolvePromise(value) {
        resolve(promise, value);
      }, function rejectPromise(reason) {
        reject(promise, reason);
      });
    } catch (e) {
      reject(promise, e);
    }
  }

  var id = 0;
  function nextId() {
    return id++;
  }

  function makePromise(promise) {
    promise[PROMISE_ID] = id++;
    promise._state = undefined;
    promise._result = undefined;
    promise._subscribers = [];
  }

  function validationError() {
    return new Error('Array Methods must be provided an Array');
  }

  var Enumerator = function () {
    function Enumerator(Constructor, input) {
      this._instanceConstructor = Constructor;
      this.promise = new Constructor(noop);

      if (!this.promise[PROMISE_ID]) {
        makePromise(this.promise);
      }

      if (isArray(input)) {
        this.length = input.length;
        this._remaining = input.length;

        this._result = new Array(this.length);

        if (this.length === 0) {
          fulfill(this.promise, this._result);
        } else {
          this.length = this.length || 0;
          this._enumerate(input);
          if (this._remaining === 0) {
            fulfill(this.promise, this._result);
          }
        }
      } else {
        reject(this.promise, validationError());
      }
    }

    Enumerator.prototype._enumerate = function _enumerate(input) {
      var this$1 = this;

      for (var i = 0; this._state === PENDING && i < input.length; i++) {
        this$1._eachEntry(input[i], i);
      }
    };

    Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
      var c = this._instanceConstructor;
      var resolve$$1 = c.resolve;


      if (resolve$$1 === resolve$1) {
        var _then = getThen(entry);

        if (_then === then && entry._state !== PENDING) {
          this._settledAt(entry._state, i, entry._result);
        } else if (typeof _then !== 'function') {
          this._remaining--;
          this._result[i] = entry;
        } else if (c === Promise$1) {
          var promise = new c(noop);
          handleMaybeThenable(promise, entry, _then);
          this._willSettleAt(promise, i);
        } else {
          this._willSettleAt(new c(function (resolve$$1) {
            return resolve$$1(entry);
          }), i);
        }
      } else {
        this._willSettleAt(resolve$$1(entry), i);
      }
    };

    Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
      var promise = this.promise;


      if (promise._state === PENDING) {
        this._remaining--;

        if (state === REJECTED) {
          reject(promise, value);
        } else {
          this._result[i] = value;
        }
      }

      if (this._remaining === 0) {
        fulfill(promise, this._result);
      }
    };

    Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
      var enumerator = this;

      subscribe(promise, undefined, function (value) {
        return enumerator._settledAt(FULFILLED, i, value);
      }, function (reason) {
        return enumerator._settledAt(REJECTED, i, reason);
      });
    };

    return Enumerator;
  }();

  /**
    `Promise.all` accepts an array of promises, and returns a new promise which
    is fulfilled with an array of fulfillment values for the passed promises, or
    rejected with the reason of the first passed promise to be rejected. It casts all
    elements of the passed iterable to promises as it runs this algorithm.

    Example:

    ```javascript
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
    let promises = [ promise1, promise2, promise3 ];

    Promise.all(promises).then(function(array){
      // The array here would be [ 1, 2, 3 ];
    });
    ```

    If any of the `promises` given to `all` are rejected, the first promise
    that is rejected will be given as an argument to the returned promises's
    rejection handler. For example:

    Example:

    ```javascript
    let promise1 = resolve(1);
    let promise2 = reject(new Error("2"));
    let promise3 = reject(new Error("3"));
    let promises = [ promise1, promise2, promise3 ];

    Promise.all(promises).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(error) {
      // error.message === "2"
    });
    ```

    @method all
    @static
    @param {Array} entries array of promises
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when all `promises` have been
    fulfilled, or rejected if any of them become rejected.
    @static
  */
  function all(entries) {
    return new Enumerator(this, entries).promise;
  }

  /**
    `Promise.race` returns a new promise which is settled in the same way as the
    first passed promise to settle.

    Example:

    ```javascript
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });

    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 2');
      }, 100);
    });

    Promise.race([promise1, promise2]).then(function(result){
      // result === 'promise 2' because it was resolved before promise1
      // was resolved.
    });
    ```

    `Promise.race` is deterministic in that only the state of the first
    settled promise matters. For example, even if other promises given to the
    `promises` array argument are resolved, but the first settled promise has
    become rejected before the other promises became fulfilled, the returned
    promise will become rejected:

    ```javascript
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });

    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        reject(new Error('promise 2'));
      }, 100);
    });

    Promise.race([promise1, promise2]).then(function(result){
      // Code here never runs
    }, function(reason){
      // reason.message === 'promise 2' because promise 2 became rejected before
      // promise 1 became fulfilled
    });
    ```

    An example real-world use case is implementing timeouts:

    ```javascript
    Promise.race([ajax('foo.json'), timeout(5000)])
    ```

    @method race
    @static
    @param {Array} promises array of promises to observe
    Useful for tooling.
    @return {Promise} a promise which settles in the same way as the first passed
    promise to settle.
  */
  function race(entries) {
    /*jshint validthis:true */
    var Constructor = this;

    if (!isArray(entries)) {
      return new Constructor(function (_, reject) {
        return reject(new TypeError('You must pass an array to race.'));
      });
    } else {
      return new Constructor(function (resolve, reject) {
        var length = entries.length;
        for (var i = 0; i < length; i++) {
          Constructor.resolve(entries[i]).then(resolve, reject);
        }
      });
    }
  }

  /**
    `Promise.reject` returns a promise rejected with the passed `reason`.
    It is shorthand for the following:

    ```javascript
    let promise = new Promise(function(resolve, reject){
      reject(new Error('WHOOPS'));
    });

    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```

    Instead of writing the above, your code now simply becomes the following:

    ```javascript
    let promise = Promise.reject(new Error('WHOOPS'));

    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```

    @method reject
    @static
    @param {Any} reason value that the returned promise will be rejected with.
    Useful for tooling.
    @return {Promise} a promise rejected with the given `reason`.
  */
  function reject$1(reason) {
    /*jshint validthis:true */
    var Constructor = this;
    var promise = new Constructor(noop);
    reject(promise, reason);
    return promise;
  }

  function needsResolver() {
    throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
  }

  function needsNew() {
    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
  }

  /**
    Promise objects represent the eventual result of an asynchronous operation. The
    primary way of interacting with a promise is through its `then` method, which
    registers callbacks to receive either a promise's eventual value or the reason
    why the promise cannot be fulfilled.

    Terminology
    -----------

    - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
    - `thenable` is an object or function that defines a `then` method.
    - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
    - `exception` is a value that is thrown using the throw statement.
    - `reason` is a value that indicates why a promise was rejected.
    - `settled` the final resting state of a promise, fulfilled or rejected.

    A promise can be in one of three states: pending, fulfilled, or rejected.

    Promises that are fulfilled have a fulfillment value and are in the fulfilled
    state.  Promises that are rejected have a rejection reason and are in the
    rejected state.  A fulfillment value is never a thenable.

    Promises can also be said to *resolve* a value.  If this value is also a
    promise, then the original promise's settled state will match the value's
    settled state.  So a promise that *resolves* a promise that rejects will
    itself reject, and a promise that *resolves* a promise that fulfills will
    itself fulfill.


    Basic Usage:
    ------------

    ```js
    let promise = new Promise(function(resolve, reject) {
      // on success
      resolve(value);

      // on failure
      reject(reason);
    });

    promise.then(function(value) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```

    Advanced Usage:
    ---------------

    Promises shine when abstracting away asynchronous interactions such as
    `XMLHttpRequest`s.

    ```js
    function getJSON(url) {
      return new Promise(function(resolve, reject){
        let xhr = new XMLHttpRequest();

        xhr.open('GET', url);
        xhr.onreadystatechange = handler;
        xhr.responseType = 'json';
        xhr.setRequestHeader('Accept', 'application/json');
        xhr.send();

        function handler() {
          if (this.readyState === this.DONE) {
            if (this.status === 200) {
              resolve(this.response);
            } else {
              reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
            }
          }
        };
      });
    }

    getJSON('/posts.json').then(function(json) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```

    Unlike callbacks, promises are great composable primitives.

    ```js
    Promise.all([
      getJSON('/posts'),
      getJSON('/comments')
    ]).then(function(values){
      values[0] // => postsJSON
      values[1] // => commentsJSON

      return values;
    });
    ```

    @class Promise
    @param {Function} resolver
    Useful for tooling.
    @constructor
  */

  var Promise$1 = function () {
    function Promise(resolver) {
      this[PROMISE_ID] = nextId();
      this._result = this._state = undefined;
      this._subscribers = [];

      if (noop !== resolver) {
        typeof resolver !== 'function' && needsResolver();
        this instanceof Promise ? initializePromise(this, resolver) : needsNew();
      }
    }

    /**
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.
     ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```
     Chaining
    --------
     The return value of `then` is itself a promise.  This second, 'downstream'
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.
     ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return 'default name';
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `'default name'`
    });
     findUser().then(function (user) {
      throw new Error('Found user, but still unhappy');
    }, function (reason) {
      throw new Error('`findUser` rejected and we're unhappy');
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
     ```js
    findUser().then(function (user) {
      throw new PedagogicalException('Upstream error');
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```
     Assimilation
    ------------
     Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.
     ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```
     If the assimliated promise rejects, then the downstream promise will also reject.
     ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```
     Simple Example
    --------------
     Synchronous Example
     ```javascript
    let result;
     try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```
     Errback Example
     ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```
     Promise Example;
     ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```
     Advanced Example
    --------------
     Synchronous Example
     ```javascript
    let author, books;
     try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```
     Errback Example
     ```js
     function foundBooks(books) {
     }
     function failure(reason) {
     }
     findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```
     Promise Example;
     ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    }).catch(function(reason){
      // something went wrong
    });
    ```
     @method then
    @param {Function} onFulfilled
    @param {Function} onRejected
    Useful for tooling.
    @return {Promise}
    */

    /**
    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
    as the catch block of a try/catch statement.
    ```js
    function findAuthor(){
    throw new Error('couldn't find that author');
    }
    // synchronous
    try {
    findAuthor();
    } catch(reason) {
    // something went wrong
    }
    // async with promises
    findAuthor().catch(function(reason){
    // something went wrong
    });
    ```
    @method catch
    @param {Function} onRejection
    Useful for tooling.
    @return {Promise}
    */


    Promise.prototype.catch = function _catch(onRejection) {
      return this.then(null, onRejection);
    };

    /**
      `finally` will be invoked regardless of the promise's fate just as native
      try/catch/finally behaves
    
      Synchronous example:
    
      ```js
      findAuthor() {
        if (Math.random() > 0.5) {
          throw new Error();
        }
        return new Author();
      }
    
      try {
        return findAuthor(); // succeed or fail
      } catch(error) {
        return findOtherAuther();
      } finally {
        // always runs
        // doesn't affect the return value
      }
      ```
    
      Asynchronous example:
    
      ```js
      findAuthor().catch(function(reason){
        return findOtherAuther();
      }).finally(function(){
        // author was either found, or not
      });
      ```
    
      @method finally
      @param {Function} callback
      @return {Promise}
    */


    Promise.prototype.finally = function _finally(callback) {
      var promise = this;
      var constructor = promise.constructor;

      if (isFunction(callback)) {
        return promise.then(function (value) {
          return constructor.resolve(callback()).then(function () {
            return value;
          });
        }, function (reason) {
          return constructor.resolve(callback()).then(function () {
            throw reason;
          });
        });
      }

      return promise.then(callback, callback);
    };

    return Promise;
  }();

  Promise$1.prototype.then = then;
  Promise$1.all = all;
  Promise$1.race = race;
  Promise$1.resolve = resolve$1;
  Promise$1.reject = reject$1;
  Promise$1._setScheduler = setScheduler;
  Promise$1._setAsap = setAsap;
  Promise$1._asap = asap;

  /*global self*/
  function polyfill() {
    var local = void 0;

    if (typeof global !== 'undefined') {
      local = global;
    } else if (typeof self !== 'undefined') {
      local = self;
    } else {
      try {
        local = Function('return this')();
      } catch (e) {
        throw new Error('polyfill failed because global object is unavailable in this environment');
      }
    }

    var P = local.Promise;

    if (P) {
      var promiseToString = null;
      try {
        promiseToString = Object.prototype.toString.call(P.resolve());
      } catch (e) {
        // silently ignored
      }

      if (promiseToString === '[object Promise]' && !P.cast) {
        return;
      }
    }

    local.Promise = Promise$1;
  }

  // Strange compat..
  Promise$1.polyfill = polyfill;
  Promise$1.Promise = Promise$1;

  return Promise$1;

  })));




  });
  var es6Promise_1 = es6Promise.Promise;

  // 1. 把原生的 Promise.resolve().then 存下来用来做 scheduler

  // 4. 导出符号，以及获取标准 Promise 的方式
  es6Promise_1._setScheduler(NativeMicroScheduler);
  es6Promise_1.toString = function () {
    return 'function Promise() { [native code] }'
  };

  global.Promise = es6Promise_1;

  function getUniquePromise () {
    var PromiseUnique = function Promise (resolver) {
      es6Promise_1.call(this, resolver);
    };
    PromiseUnique.resolve = function (object) {
      return es6Promise_1.resolve.call(PromiseUnique, object)
    };
    PromiseUnique.reject = function (object) {
      return es6Promise_1.reject.call(PromiseUnique, object)
    };
    PromiseUnique.all = function (entries) {
      return es6Promise_1.all.call(PromiseUnique, entries)
    };
    PromiseUnique.race = function (entries) {
      return es6Promise_1.race.call(PromiseUnique, entries)
    };
    PromiseUnique.prototype = Object.create(es6Promise_1.prototype);
    PromiseUnique.prototype.constructor = PromiseUnique;
    PromiseUnique.prototype._onerror = function (ex) { info(("[APPX][JSFM] unhandleredPromiseRejection " + ex + "/" + (ex && ex.stack))); };
    return PromiseUnique
  }

  function normalizeEventData$2 (data) {
    if (data && typeof data === 'object' && typeof data.data === 'object') {
      // for android event
      return data.data
    }
    else {
      return data
    }
  }

  /* global __BRIDGE_CALL_SYNC__, __BRIDGE_CALL__, __REPORT_ERROR__, __FATAL_ERROR__, __TIMEOUT_DISPATCH__, __CANCEL_TIMEOUT__ */

  function setCubeAppInstanceId (app, id) {
    Object.defineProperty(app, '[[AppInstanceId]]', { value: id });
  }

  function getCubeAppInstanceId (app) {
    return app['[[AppInstanceId]]']
  }

  var EVENT_INVOKE_CODE = {
    SUCCESS: 'SUCCESS',
    CALL_EXCEPTION: 'CALL_EXCEPTION',
    CALLBACK_NOT_FOUND: 'CALLBACK_NOT_FOUND',
    CALLBACK_TOO_MUCH: 'CALLBACK_TOO_MUCH'
  };

  function evaluateScriptInContext$1 (script, contextMap) {
    script = script.replace(/^javascript:/, '');

    debug(function () { return ("[APPX][JSFM] evaluateScriptInContext: " + script); });

    var keys = contextMap ? Object.keys(contextMap) : [];
    var values = keys.map(function (k) { return contextMap[k]; });

    var fn = new (Function.prototype.bind.apply( Function, [ null ].concat( keys,
      [script]
    ) ));

    debug(function () { return ("[APPX][JSFM] evaluateScriptInContext fn " + (typeof fn)); });

    var result = fn.apply(void 0, values);

    return result
  }

  function reportErrorByAppInstanceId (error, appInstanceId) {
    if (typeof __REPORT_ERROR__ === 'function') {
      __REPORT_ERROR__(error, appInstanceId);
    }
  }

  /**
   *
   */
  var SharedAppInstance = function SharedAppInstance (appInstanceId, option) {
    if ( option === void 0 ) { option = {}; }

    setCubeAppInstanceId(this, String(appInstanceId));
    this.userAgent = option.userAgent || '';
    this.eventHub = {};
    this.bridgeCallbackPoll = {};
    this.timeCallbackPoll = {};
    this.timeNativeCallbackPoll = {};
    this.pageContextGetterPoll = {};
    this.timeCallbackId = 1;
    this.timeNativeCallbackId = 1;
    this.option = option;
    this.disposed = false;
    this.batchingTimeout = false;
    this.batchingQueue = [];
  };

  SharedAppInstance.prototype.getPlatformElements = function getPlatformElements () {
    return getCustomComponents()
  };

  SharedAppInstance.prototype.fatalError = function fatalError (message, stack) {
    if (typeof __FATAL_ERROR__ === 'function') {
      __FATAL_ERROR__(message, stack, getCubeAppInstanceId(this));
    }
  };

  SharedAppInstance.prototype.reportError = function reportError (err) {
    reportErrorByAppInstanceId(err, getCubeAppInstanceId(this));
  };

  SharedAppInstance.prototype.reportErrorToRuntime = function reportErrorToRuntime (err) {
    try {
      if (typeof this.runtimeErrorReporter === 'function') {
        this.runtimeErrorReporter(err);
      }
    }
    catch (ex) { }
  };

  SharedAppInstance.prototype.setRuntimeErrorReporter = function setRuntimeErrorReporter (reporter) {
    this.runtimeErrorReporter = reporter;
  };

  SharedAppInstance.prototype.setCurrentPageIdGetter = function setCurrentPageIdGetter (fn) {
    this.currentPageIdGetter = fn;
  };

  SharedAppInstance.prototype.getCurrentPageId = function getCurrentPageId () {
    var fn = this.currentPageIdGetter;
    // '' is default
    var pageInstanceId = '';
    try {
      if (typeof fn === 'function') {
        pageInstanceId = fn() || pageInstanceId;
      }
    }
    catch (ex) {}
    return pageInstanceId
  };

  SharedAppInstance.prototype.setPageContextGetter = function setPageContextGetter (instanceId, fn) {
    this.pageContextGetterPoll[instanceId] = fn;
  };

  SharedAppInstance.prototype.evaluateScriptInPageContext = function evaluateScriptInPageContext (arg) {
    var script = arg.script;
    var instanceId = arg.instanceId;

    var pageContextGetter = this.pageContextGetterPoll[instanceId];
    var result;
    var error;
    if (typeof pageContextGetter === 'function') {
      debug(function () { return ("[APPX][JSFM] evaluateScriptInPageContext found page " + instanceId); });

      var context = pageContextGetter();

      debug(function () { return ("[APPX][JSFM] evaluateScriptInPageContext context " + (context && Object.keys(context))); });

      try {
        result = evaluateScriptInContext$1(script, context);
        debug(function () { return '[APPX][JSFM] evaluateScriptInPageContext success'; });
      }
      catch (ex) {
        debug(function () { return ("[APPX][JSFM] evaluateScriptInPageContext fail " + (ex && ex.stack)); });

        error = ex;
      }
      return {
        success: !!error,
        code: error ? EVENT_INVOKE_CODE.CALL_EXCEPTION : EVENT_INVOKE_CODE.SUCCESS,
        result: result,
        prevented: false
      }
    }
    else {
      return {
        success: false,
        code: EVENT_INVOKE_CODE.CALLBACK_NOT_FOUND,
        result: result,
        prevented: false
      }
    }
  };

  SharedAppInstance.prototype.eventDispatch = function eventDispatch (eventName, argObj, needReturn) {
    if (this.disposed) { return }

    debug(function () { return ("gggin [APPX][JSFM][EVENT_INVOKE] " + eventName + ", argObj.toString(): " + argObj.toString()); });
    // debug(function () { return ("gggin [APPX][JSFM][EVENT_INVOKE] " + eventName + " " + (JSON.stringify(argObj))); });

    var callbacks = [];
    if (this.eventHub[eventName]) {
      callbacks = this.eventHub[eventName];
    }

    debug(function () { return ("[APPX][JSFM] eventDispatch " + eventName + " " + (callbacks.length)); });

    if (eventName === 'evaluateScriptInPageContext') {
      return this.evaluateScriptInPageContext(argObj)
    }

    argObj = normalizeEventData$2(argObj);

    var event = createEvent4CubeEngineJSFM(eventName);
    event.data = argObj;

    if (needReturn) {
      // callbacks.length should <= 1
      var result;
      var success = false;
      var code = '';
      var prevented = false;
      if (!callbacks) {
        code = EVENT_INVOKE_CODE.CALLBACK_NOT_FOUND;
      }
      else if (callbacks.length === 1) {
        try {
          result = callbacks[0].call(null, event);
          success = true;
          prevented = event.isDefaultPrevented();
          code = EVENT_INVOKE_CODE.SUCCESS;
        }
        catch (ex) {
          debug(function () { return ("[APPX][JSFM] eventDispatch error " + (ex.message)); });
          code = EVENT_INVOKE_CODE.CALL_EXCEPTION;
        }
      }
      else if (callbacks.length === 0) {
        code = EVENT_INVOKE_CODE.CALLBACK_NOT_FOUND;
      }
      else {
        code = EVENT_INVOKE_CODE.CALLBACK_TOO_MUCH;
      }

      return {
        success: success,
        code: code,
        result: result,
        prevented: prevented,
        prevent: prevented // 双字段面向容器兼容
      }
    }
    else {
      callbacks.forEach(function (cb) {
        event.data = argObj;
        try {
          cb(event);
        }
        catch (ex) {}
      });
      return {
        success: true,
        code: EVENT_INVOKE_CODE.SUCCESS,
        result: null,
        prevented: event.isDefaultPrevented(),
        prevent: event.isDefaultPrevented() // 双字段面向容器兼容
      }
    }
  };

  SharedAppInstance.prototype.eventAddListener = function eventAddListener (eventName, callback) {
    if (this.disposed) { return }
    debug(function () { return ("[APPX][JSFM] eventAddListener " + eventName); });
    if (typeof callback !== 'function') {
      return
    }
    var callbacks = this.eventHub[eventName] = this.eventHub[eventName] || [];
    if (callbacks.indexOf(callback) >= 0) {
      return
    }
    callbacks.push(callback);
  };

  SharedAppInstance.prototype.eventRemoveListener = function eventRemoveListener (eventName, callback) {
    if (this.disposed) { return }
    if (typeof callback !== 'function') {
      return
    }
    this.eventHub[eventName] = this.eventHub[eventName] || [];
    this.eventHub[eventName] = this.eventHub[eventName].filter(function (d) { return d !== callback; });
  };

  SharedAppInstance.prototype.bridgeCallSync = function bridgeCallSync (viewId, apiName, params) {
    if (this.disposed) { return }
    if (typeof apiName !== 'string') {
      return
    }
    if (typeof params !== 'object') {
      params = null;
    }

    var callbackId = apiName + "_" + ((new Date()).getTime()) + "_" + (Math.random());

    return __BRIDGE_CALL_SYNC__(getCubeAppInstanceId(this), viewId, apiName, params, callbackId)
  };

  SharedAppInstance.prototype.bridgeCall = function bridgeCall (viewId, apiName, params, callback) {
    debug(function () { return ("[APPX][JSFM] cubeAppInstance.bridgeCall: " + viewId + ", " + apiName); });

    if (this.disposed) { return }
    if (typeof apiName !== 'string') {
      return
    }
    if (typeof params === 'function') {
      params = null;
      callback = params;
    }
    else if (typeof params !== 'object') {
      params = null;
    }

    var callbackId = apiName + "_" + ((new Date()).getTime()) + "_" + (Math.random());
    if (typeof callback === 'function') {
      this.bridgeCallbackPoll[callbackId] = callback;
    }

    debug(function () { return ("[APPX][JSFM] cubeAppInstance.bridgeCall: " + callbackId); });

    __BRIDGE_CALL__(getCubeAppInstanceId(this), viewId, apiName, params, callbackId);
  };

  SharedAppInstance.prototype.bridgeInvokeCallback = function bridgeInvokeCallback (callbackId, params, keepAlive) {
    debug(function () { return ("[APPX][JSFM] cubeAppInstance.bridgeInvokeCallback: " + callbackId); });

    var callack = this.bridgeCallbackPoll[callbackId];

    if (typeof callack === 'function') {
      if (!keepAlive) {
        delete this.bridgeCallbackPoll[callbackId];
      }
      this.setTimeout(function () {
        callack(params);
      }, 0);
    }
  };

  SharedAppInstance.prototype.invokeTimeout = function invokeTimeout (id) {
    var fn = this.timeNativeCallbackPoll[id];
    delete this.timeNativeCallbackPoll[id];
    if (typeof fn === 'function') {
      fn();
    }
  };

  SharedAppInstance.prototype.setTimeoutToNative = function setTimeoutToNative (fn, time) {
    if (typeof __TIMEOUT_DISPATCH__ === 'function') {
      var id = this.timeNativeCallbackId++;
      this.timeNativeCallbackPoll[id] = fn;
      __TIMEOUT_DISPATCH__(getCubeAppInstanceId(this), id, time);
    }
    else {
      setTimeout(fn, time);
    }
  };

  SharedAppInstance.prototype.enterBatching = function enterBatching () {
    this.batchingTimeout = true;
  };

  SharedAppInstance.prototype.exitBatching = function exitBatching () {
      var this$1 = this;

    this.batchingTimeout = false;
    var queue = this.batchingQueue;
    if (queue.length) {
      // 清空下 batching 队列
      this.batchingQueue = [];
      var poll = this.timeCallbackPoll;
      var loop = function ( index ) {
        var ref = queue[index];
          var id = ref[0];
          var time = ref[1];
        var callback = function () {
          var fn = poll[id];
          delete poll[id];
          // ignore error
          if (typeof fn === 'function') {
            fn.apply(null, arguments);
          }
        };
        this$1.setTimeoutToNative(callback, time);
      };

        for (var index = 0; index < queue.length; index++) { loop( index ); }
    }
  };

  SharedAppInstance.prototype.setTimeout = function setTimeout (fn, time) {
    if (this.disposed) { return }
    var id = this.timeCallbackId++;
    var poll = this.timeCallbackPoll;
    poll[id] = fn;

    if (this.batchingTimeout) {
      this.batchingQueue.push([id, time]);
    }
    else {
      var callback = function () {
        var fn = poll[id];
        delete poll[id];
        // ignore error
        if (typeof fn === 'function') {
          fn.apply(null, arguments);
        }
      };
      this.setTimeoutToNative(callback, time);
    }

    return id
  };

  SharedAppInstance.prototype.clearTimeout = function clearTimeout (id) {
    if (typeof __CANCEL_TIMEOUT__ === 'function') {
      __CANCEL_TIMEOUT__(getCubeAppInstanceId(this), id);
    }
    return delete this.timeCallbackPoll[id]
  };

  SharedAppInstance.prototype.setInterval = function setInterval (fn, time) {
    if (this.disposed) { return }
    var id = this.timeCallbackId++;
    var poll = this.timeCallbackPoll;
    poll[id] = fn;
    var callback = function () {
      var fn = poll[id];
      var ex;
      if (typeof fn === 'function') {
        try {
          fn.apply(null, arguments);
        }
        catch (e) {
          ex = e;
        }
        setTimeout(callback, time);
        // 就算报错也要再执行下次
        if (ex) {
          throw ex
        }
      }
      else {
        // 没有 fn 就没必要做了
        delete poll[id];
      }
    };
    this.setTimeoutToNative(callback, time);
    return id
  };

  SharedAppInstance.prototype.clearInterval = function clearInterval (id) {
    if (typeof __CANCEL_TIMEOUT__ === 'function') {
      __CANCEL_TIMEOUT__(getCubeAppInstanceId(this), id);
    }
    return delete this.timeCallbackPoll[id]
  };

  SharedAppInstance.prototype.dispose = function dispose () {
      var this$1 = this;

    this.eventHub = {};
    // 因为持有引用，不能覆盖新的，需要把老的消掉
    Object.keys(this.bridgeCallbackPoll).forEach(function (id) {
      this$1.bridgeCallbackPoll[id] = null;
    });
    Object.keys(this.timeCallbackPoll).forEach(function (id) {
      this$1.timeCallbackPoll[id] = null;
    });
    Object.keys(this.timeNativeCallbackPoll).forEach(function (id) {
      this$1.timeNativeCallbackPoll[id] = null;
    });
    this.pageContextGetterPoll = {};
    this.option = {};
    this.currentPageIdGetter = null;
    this.disposed = true;
  };

  var cubeAppInstanceMap = Object.create(null);
  var cubeKernelMap = Object.create(null);

  function setCubeAppInstanceKernel (appInstanceId, appInstance, kernel) {
    cubeAppInstanceMap[appInstanceId] = appInstance;
    cubeKernelMap[appInstanceId] = kernel;
  }

  function getCubeAppInstance (appInstanceId) {
    return cubeAppInstanceMap[appInstanceId]
  }

  function getCubeAppKernel (appInstanceId) {
    return cubeKernelMap[appInstanceId]
  }

  function eventInvokeToApp (appInstanceId, a, b, c) {
    var kernel = getCubeAppKernel(appInstanceId);
    if (kernel) {
      return kernel.__EVENT_INVOKE__(a, b, c)
    }
    else {
      return {
        success: true,
        code: EVENT_INVOKE_CODE.CALLBACK_NOT_FOUND,
        result: null,
        prevented: false
      }
    }
  }

  function bridgeCallbackToApp (appInstanceId, a, b, c) {
    var kernel = getCubeAppKernel(appInstanceId);
    if (kernel) {
      return kernel.__BRIDGE_CALLBACK__(a, b, c)
    }
  }

  function createPageInstanceToApp (appInstanceId, pagePath, instanceId) {
    var kernel = getCubeAppKernel(appInstanceId);
    if (kernel) {
      return kernel.__CREATE_PAGE_INSTANCE__(pagePath, instanceId)
    }
  }

  /* global mqEnvironment */
  /**
   * CubeKit 版本分布
   * - 10.1.50: 1.0.0.20181102001
   * - 10.1.52: 1.0.1.
   * - 10.1.55: 1.0.2.
   */
  var kCubeKitSDKVersionAvaliablePrefix = '1.0.';

  function checkCubeKitVersion () {
    // 如果此函数抛出异常，外部直接 FATAL_ERROR
    var currentCubeKitVersion = mqEnvironment['sdkVersion'];
    var foundIndex = currentCubeKitVersion.indexOf(kCubeKitSDKVersionAvaliablePrefix);
    if (foundIndex === 0) {
      // 符合 prefix
      debug(function () { return ("[APPX][JSFM] checkCubeKitVersion success " + currentCubeKitVersion); });
    }
    else {
      var message = "[APPX][JSFM] CubeKit actual(" + currentCubeKitVersion + ") but expect(" + kCubeKitSDKVersionAvaliablePrefix + ")";
      info(message);
      throw new Error(message)
    }
  }

  function noop$a () {}

  function getCubeKernelFromCubeAppInstance (cubeApp) {
    var setTimeout = function (fn, time) { return cubeApp.setTimeout(fn, time); };
    var clearTimeout = function (id) { return cubeApp.clearTimeout(id); };
    var setInterval = function (fn, time) { return cubeApp.setInterval(fn, time); };
    var clearInterval = function (id) { return cubeApp.clearInterval(id); };
    var __EVENT_INVOKE__ = function (a, b, c) { return cubeApp.eventDispatch(a, b, c); };
    var __BRIDGE_CALL__ = function (a, b, c, d) { return cubeApp.bridgeCall(a, b, c, d); };
    var __BRIDGE_CALLBACK__ = function (a, b, c) { return cubeApp.bridgeInvokeCallback(a, b, c); };
    var __BRIDGE_CALL_SYNC__ = function (a, b, c) { return cubeApp.bridgeCallSync(a, b, c); };
    var __EVENT_ADD_LISTENER__ = function (a, b) { return cubeApp.eventAddListener(a, b); };
    var __EVENT_REMOVE_LISTENER__ = function (a, b) { return cubeApp.eventRemoveListener(a, b); };
    var __SET_PAGE_CONTEXT_GETTER__ = function (a, b) { return cubeApp.setPageContextGetter(a, b); };
    var __SET_CURRENT_PAGE_ID_GETTER__ = function (a) { return cubeApp.setCurrentPageIdGetter(a); };
    var __SET_RUNTIME_ERROR_REPORTER__ = function (e) { return cubeApp.setRuntimeErrorReporter(e); };
    var __TIMEOUT_INVOKE__ = function (id) {
      try {
        cubeApp.invokeTimeout(id);
      }
      catch (ex) {
        cubeApp.reportErrorToRuntime(ex);
      }
    };
    var __REPORT_ERROR__ = function (err) { return cubeApp.reportError(err); };
    var __FATAL_ERROR__ = function (msg, stack) { return cubeApp.fatalError(msg, stack); };
    var __GET_STARTUP_PARAMS__ = function () { return cubeApp.option.startupParams; };
    var __ENTER_BATCHING__ = function () { return cubeApp.enterBatching(); };
    var __EXIT_BATCHING__ = function () { return cubeApp.exitBatching(); };
    var __GET_PLATFORM_ELEMENTS__ = function () { return cubeApp.getPlatformElements(); };
    return {
      appInstanceId: getCubeAppInstanceId(cubeApp),
      userAgent: cubeApp.userAgent,
      __BRIDGE_CALL__: __BRIDGE_CALL__,
      __BRIDGE_CALLBACK__: __BRIDGE_CALLBACK__,
      __BRIDGE_CALL_SYNC__: __BRIDGE_CALL_SYNC__,
      __BRIDGE_GET_PREFETCH_DATA__: noop$a,
      __BRIDGE_REMOVE_PREFETCH_DATA__: noop$a,
      __ENTER_BATCHING__: __ENTER_BATCHING__,
      __EVENT_ADD_LISTENER__: __EVENT_ADD_LISTENER__,
      __EVENT_REMOVE_LISTENER__: __EVENT_REMOVE_LISTENER__,
      __EVENT_INVOKE__: __EVENT_INVOKE__,
      __EXIT_BATCHING__: __EXIT_BATCHING__,
      __FATAL_ERROR__: __FATAL_ERROR__,
      __GET_PLATFORM_ELEMENTS__: __GET_PLATFORM_ELEMENTS__,
      __GET_STARTUP_PARAMS__: __GET_STARTUP_PARAMS__,
      __PERFORMANCE__: {},
      __REPORT_ERROR__: __REPORT_ERROR__,
      __SET_CURRENT_PAGE_ID_GETTER__: __SET_CURRENT_PAGE_ID_GETTER__,
      __SET_PAGE_CONTEXT_GETTER__: __SET_PAGE_CONTEXT_GETTER__,
      __SET_RUNTIME_ERROR_REPORTER__: __SET_RUNTIME_ERROR_REPORTER__,
      __TIMEOUT_INVOKE__: __TIMEOUT_INVOKE__,
      Promise: getUniquePromise(),
      setTimeout: setTimeout,
      clearTimeout: clearTimeout,
      setInterval: setInterval,
      clearInterval: clearInterval,
      getFrameworkContextSymbol: noop$a
    }
  }

  /* global __IMPORT_SCRIPT__ */

  var kCubeAppBundleUrlKey = 'CubeKitExternalAppKey';
  /**
   * 用于 Cube 小程序通信实例
   */
  var CubeTinyAppInstance = (function (SharedAppInstance) {
    function CubeTinyAppInstance () {
      SharedAppInstance.apply(this, arguments);
    }

    if ( SharedAppInstance ) { CubeTinyAppInstance.__proto__ = SharedAppInstance; }
    CubeTinyAppInstance.prototype = Object.create( SharedAppInstance && SharedAppInstance.prototype );
    CubeTinyAppInstance.prototype.constructor = CubeTinyAppInstance;

    CubeTinyAppInstance.prototype.importScripts = function importScripts () {
      var arguments$1 = arguments;

      var this$1 = this;
      var urls = [], len = arguments.length;
      while ( len-- ) { urls[ len ] = arguments$1[ len ]; }

      urls.forEach(function (url) {
        this$1.importScript(url);
      });
    };

    CubeTinyAppInstance.prototype.importScript = function importScript (url) {
      if (this.disposed) { return }
      debug(function () { return ("[APPX][JSFM] cubeAppInstance.importScript(" + url + ") - begin"); });
      if (typeof url !== 'string') {
        throw new Error(("The script url (" + (String(url)) + ") is not string"))
      }
      var absoluteUrl = this.normalizeUrl(url);
      if (!absoluteUrl) {
        throw new Error(("The script url (" + (String(url)) + ") can not be resolved"))
      }

      var ret = __IMPORT_SCRIPT__(getCubeAppInstanceId(this), absoluteUrl, false);
      if (!ret) {
        throw new Error(("importScript with url (" + absoluteUrl + ") failed"))
      }
      debug(function () { return ("[APPX][JSFM] cubeAppInstance.importScript(" + absoluteUrl + ") - finish"); });
    };

    CubeTinyAppInstance.prototype.normalizeUrl = function normalizeUrl (url) {
      var bundleUrl = this.option[kCubeAppBundleUrlKey] || '';
      if (/^http/.test(url)) {
        return url
      }
      else if (/^\.\./.test(url)) {
        return
      }
      else if (/^\//.test(url)) {
        var reHost = /^(https?):\/\/([^/]+)\//;
        var match = url.match(reHost);
        if (match) {
          return ((match[1]) + "://" + (match[2]) + url)
        }
      }
      else if (/^\.\//.test(url)) {
        return ((bundleUrl.replace(/\/[^/]*$/, '')) + "/" + (url.slice(2)))
      }
      else {
        return ((bundleUrl.replace(/\/[^/]*$/, '')) + "/" + url)
      }
    };

    return CubeTinyAppInstance;
  }(SharedAppInstance));

  function createCubeTinyKernel (appInstanceId, option, createPageInstance) {
    if ( option === void 0 ) { option = {}; }

    var cubeTinyAppInstance = new CubeTinyAppInstance(appInstanceId, option);
    var kernel = getCubeTinyKernelFromCubeTinyAppInstance(cubeTinyAppInstance, createPageInstance);

    setCubeAppInstanceKernel(appInstanceId, cubeTinyAppInstance, kernel);

    return kernel
  }

  function destroyCubeTinyAppInstanceKernel (appInstanceId) {
    var cubeAppInstance = getCubeAppInstance(appInstanceId);
    if (cubeAppInstance) {
      // 清理所有持有关系
      cubeAppInstance.dispose();
    }
    setCubeAppInstanceKernel(appInstanceId, null, null);
  }

  function getCubeTinyKernelFromCubeTinyAppInstance (cubeApp, createPageInstance) {
    var sharedKernel = getCubeKernelFromCubeAppInstance(cubeApp);
    var __CREATE_PAGE_INSTANCE__ = function (pagePath, instanceId) {
      var context = createPageInstance(instanceId);
      sharedKernel.__EVENT_INVOKE__('pageCreateContext', {
        pagePath: pagePath,
        instanceId: instanceId,
        context: context
      });
    };
    var __IMPORT_SCRIPT__ = function (url) { return cubeApp.importScript(url); };

    Object.assign(sharedKernel, {
      __CREATE_PAGE_INSTANCE__: __CREATE_PAGE_INSTANCE__,
      __IMPORT_SCRIPT__: __IMPORT_SCRIPT__
    });

    return sharedKernel
  }

  /**
   * 用于 Cube 小程序通信实例
   */
  var CubePolygonAppInstance = (function (SharedAppInstance) {
    function CubePolygonAppInstance (appInstanceId, pageInstanceId, option) {
      SharedAppInstance.call(this, appInstanceId, option);
      this.pageInstanceId = pageInstanceId;
      this.documentUrl = option.documentUrl;
      this.startupParams = option.startupParams;
    }

    if ( SharedAppInstance ) { CubePolygonAppInstance.__proto__ = SharedAppInstance; }
    CubePolygonAppInstance.prototype = Object.create( SharedAppInstance && SharedAppInstance.prototype );
    CubePolygonAppInstance.prototype.constructor = CubePolygonAppInstance;

    CubePolygonAppInstance.prototype.bridgeCall = function bridgeCall (apiName, params, callback) {
      return SharedAppInstance.prototype.bridgeCall.call(this, this.pageInstanceId, apiName, params, callback)
    };

    CubePolygonAppInstance.prototype.bridgeCallSync = function bridgeCallSync (apiName, params) {
      return SharedAppInstance.prototype.bridgeCallSync.call(this, this.pageInstanceId, apiName, params)
    };

    CubePolygonAppInstance.prototype.getCurrentPageId = function getCurrentPageId () {
      return this.pageInstanceId
    };

    return CubePolygonAppInstance;
  }(SharedAppInstance));

  var polygonPageInstanceId2AppInstanceIdMap = Object.create(null);

  function createCubePolygonKernel (appInstanceId, pageInstanceId, option) {
    if ( option === void 0 ) { option = {}; }

    var cubePolygonAppInstance = new CubePolygonAppInstance(appInstanceId, pageInstanceId, option);
    var kernel = getCubePolygonKernelFromCubePolygonAppInstance(cubePolygonAppInstance);

    setCubeAppInstanceKernel(appInstanceId, cubePolygonAppInstance, kernel);
    setCubePolygonInstanceKernel(pageInstanceId, appInstanceId);

    return kernel
  }

  function destroyCubePolygonAppInstanceKernel (pageInstanceId) {
    var appInstanceId = polygonPageInstanceId2AppInstanceIdMap[pageInstanceId];
    if (appInstanceId) {
      var cubeAppInstance = getCubeAppInstance(appInstanceId);
      if (cubeAppInstance) {
        // 清理所有持有关系
        cubeAppInstance.dispose();
      }
      setCubeAppInstanceKernel(appInstanceId, null, null);
      setCubePolygonInstanceKernel(pageInstanceId, null);
    }
  }

  function setCubePolygonInstanceKernel (pageInstanceId, appInstanceId) {
    polygonPageInstanceId2AppInstanceIdMap[pageInstanceId] = appInstanceId;
  }

  function getCubePolygonKernelFromCubePolygonAppInstance (polygonApp) {
    var sharedKernel = getCubeKernelFromCubeAppInstance(polygonApp);
    var documentUrl = polygonApp.documentUrl;
    var startupParams = polygonApp.startupParams;
    return Object.assign(sharedKernel, {
      documentUrl: documentUrl,
      startupParams: startupParams
    })
  }

  var jsdebugCallbackMap = {};
  var jsdebugCallbackId = -1;
  var globalJsdebugRef = global;

  globalJsdebugRef.__jsdebug_callback__ = function (id, res) {
    if (jsdebugCallbackMap[id]) {
      try {
        jsdebugCallbackMap[id](res);
      }
      catch (exp) {
        error('[APPX][JSFM] callback error.', exp);
      }
      jsdebugCallbackMap[id] = null;
    }
  };

  // TODO 废弃这个接口
  var debugRequestSync = function (option) {
    try {
      var result = globalJsdebugRef.__jsdebug_send_request_sync__(option);
      return result
    }
    catch (exp) {
      error('[APPX][JSFM] debug request sync error.', exp);
    }
    return
  };

  // TODO 废弃这个接口
  var debugRequestAsync = function (option, callback) {
    try {
      if (callback) {
        jsdebugCallbackId++;
        jsdebugCallbackMap[jsdebugCallbackId] = callback;
        return globalJsdebugRef.__jsdebug_send_request_async__(option, jsdebugCallbackId)
      }
      return globalJsdebugRef.__jsdebug_send_request_async__(option)
    }
    catch (exp) {
      error('[APPX][JSFM] debug request async error.', exp);
    }
    return
  };

  var getOverlayManager = function (pageId) {
    info('[APPX][JSFM] getOverlayManager (' + pageId + ')');
    var tc = getTaskCenter(pageId);
    var createDOMMask = function () {
      tc.send(
        'dom',
        {
          action: 'addElement'
        },
        [
          '_root',
          {
            type: 'div',
            style: {
              width: '0px',
              height: '0px',
              left: '0px',
              top: '0px',
              position: 'absolute',
              backgroundColor: 'rgba(111,168,220,0.66)'
            },
            attr: {},
            ref: '_overlay'
          },
          -1
        ]
      );
    };
    var hasCreatedMask = false;
    return {
      highlightArea: function (x, y, w, h) {
        if (!hasCreatedMask) {
          createDOMMask();
          hasCreatedMask = true;
        }
        tc.send(
          'dom',
          {
            action: 'updateStyle'
          },
          [
            '_overlay',
            {
              width: w,
              height: h,
              left: x,
              top: y
            }
          ]
        );
      },
      getNodeRect: function (nodeId, cb) {
        var tcCallback = function (ret) {
          cb(ret.result[0]);
        };
        tc.send(
          'module',
          {
            method: 'selectorQuery',
            module: 'dom'
          },
          [
            [
              {
                ref: String(nodeId),
                type: 'rect'
              }
            ],
            tcCallback
          ]
        );
      }
    }
  };

  var Stack = function Stack () {
    this.stack = [];
  };
  Stack.prototype.push = function push (val) {
    this.stack.push(val);
  };
  Stack.prototype.pop = function pop () {
    return this.stack.pop()
  };
  Stack.prototype.peek = function peek () {
    return this.stack[this.stack.length - 1]
  };
  Stack.prototype.size = function size () {
    return this.stack.length
  };

  var stack;
  var getDevtool = function () {
    var devtool = {
      setupDevtoolHook: function setupDevtoolHook (hook) {
        globalJsdebugRef.__APPXNG_DEVTOOL_HOOK__ = hook;
      },
      getOverlayManager: getOverlayManager,
      hasHookRuntimeHelper: false,
      getDevtoolStack: function () {
        return stack || (stack = new Stack())
      }
    };
    // 提示客户端开启调试主要用来开启样式缓存
    if (typeof globalJsdebugRef.callDevtoolsEnable === 'function') {
      info('[APPX][JSFM] cube support devtoolsEnable');
      devtool.enableDevtool = function (docId, callback) {
        jsdebugCallbackId++;
        jsdebugCallbackMap[jsdebugCallbackId] = callback;
        return globalJsdebugRef.callDevtoolsEnable(docId, jsdebugCallbackId)
      };
    }

    if (typeof globalJsdebugRef.callGetMatchedStyles === 'function') {
      info('[APPX][JSFM] cube support getMatchedStyles');
      devtool.getMatchedStylesForNode = function (docId, nodeId, callback) {
        if (typeof callback === 'function') {
          jsdebugCallbackId++;
          jsdebugCallbackMap[jsdebugCallbackId] = callback;
          return globalJsdebugRef.callGetMatchedStyles(docId, nodeId, jsdebugCallbackId)
        }
      };
    }

    if (typeof globalJsdebugRef.callGetComputedStyle === 'function') {
      info('[APPX][JSFM] cube support getComputedStyle');
      devtool.getComputedStyleForNode = function (docId, nodeId, callback) {
        if (typeof callback === 'function') {
          jsdebugCallbackId++;
          jsdebugCallbackMap[jsdebugCallbackId] = callback;
          return globalJsdebugRef.callGetComputedStyle(docId, nodeId, jsdebugCallbackId)
        }
      };
    }

    if (typeof globalJsdebugRef.callHighlightNode === 'function') {
      info('[APPX][JSFM] cube support highlightNode');
      devtool.highlightNode = function (docId, nodeId, config) {
        return globalJsdebugRef.callHighlightNode(docId, nodeId, config)
      };
    }

    if (typeof globalJsdebugRef.callHideHighlight === 'function') {
      info('[APPX][JSFM] cube support hideHighlight');
      devtool.hideHighlight = function (docId) {
        return globalJsdebugRef.callHideHighlight(docId)
      };
    }

    if (typeof globalJsdebugRef.callSetStyleTexts === 'function') {
      info('[APPX][JSFM] cube support setStyleTexts');
      devtool.setStyleTexts = function (docId, payload, callback) {
        if (typeof callback === 'function') {
          jsdebugCallbackId++;
          jsdebugCallbackMap[jsdebugCallbackId] = callback;
          return globalJsdebugRef.callSetStyleTexts(docId, payload, jsdebugCallbackId)
        }
      };
    }

    return devtool
  };

  var devtool = getDevtool();

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  var frameworks;
  var runtimeConfig;

  var versionRegExp = /^\s*\/\/ *(\{[^}]*\}) *\r?\n/;

  /* global nativeLog, __FATAL_ERROR__ */

  /**
   * Detect a JS Bundle code and make sure which framework it's based to. Each JS
   * Bundle should make sure that it starts with a line of JSON comment and is
   * more that one line.
   * @param  {string} code
   * @return {object}
   */
  function getBundleType (code) {
    var result = versionRegExp.exec(code);
    if (result) {
      try {
        var info = JSON.parse(result[1]);
        return info.framework
      }
      catch (e) {}
    }

    // default bundle type
    return 'Weex'
  }

  /**
   * Get js framework version at runtime.
   */
  function getJSFMVersion () {
    // It will be converted into a version string at build time
    return "0.27.1" // eslint-disable-line
  }

  function createServices (id, env, config) {
    // Init JavaScript services for this instance.
    var serviceMap = Object.create(null);
    serviceMap.service = Object.create(null);
    services.forEach(function (ref) {
      var name = ref.name;
      var options = ref.options;

      {
        console.debug(("[JS Runtime] create service " + name + "."));
      }
      var create = options.create;
      if (create) {
        try {
          var result = create(id, env, config);
          Object.assign(serviceMap.service, result);
          Object.assign(serviceMap, result.instance);
        }
        catch (e) {
          console.error(("[JS Runtime] Failed to create service " + name + "."));
        }
      }
    });
    delete serviceMap.service.instance;
    Object.freeze(serviceMap.service);
    return serviceMap
  }

  var instanceTypeMap = {};
  function getFrameworkType (id) {
    return instanceTypeMap[id]
  }

  function destroyAppContext (appInstanceId) {
    info(("[APPX][JSFM] destroyAppContext (" + appInstanceId + ")"));
    debug(function () { return ("[APPX][JSFM] destroyAppContext " + appInstanceId); });
    try {
      destroyAppInGlobalContext(appInstanceId);
      destroyCubeTinyAppInstanceKernel(appInstanceId);
    }
    catch (ex) {
      /**
       * https://yuque.antfin-inc.com/cubejs/cube/errorlog
       * 阶段: 8/9 应用框架销毁/应用上下文销毁
       * 捕获方式: 2
       */
      info(("[APPX][JSFM] destroyAppContext fail " + (ex && ex.message) + "/" + (ex && ex.stack)));
      reportErrorByAppInstanceId(ex, appInstanceId);
    }
  }

  function createAppContext (appInstanceId, options) {
    if ( options === void 0 ) { options = {}; }

    try {
      checkCubeKitVersion();
      return createAppContextImpl(appInstanceId, options)
    }
    catch (ex) {
      var message = "createAppContextError: ";
      var stack = '';
      try {
        message += ex.message;
        stack = ex.stack;
      }
      catch (ex) { }
      __FATAL_ERROR__(message, stack, '');
      throw ex
    }
  }

  function createAppContextImpl (appInstanceId, options) {
    if ( options === void 0 ) { options = {}; }

    info(("[APPX][JSFM] createAppContext:enter (" + appInstanceId + ")"));
    debug(function () { return ("[APPX][JSFM] createAppContext " + appInstanceId + ":" + (JSON.stringify(options))); });

    var appContextCreateBegin = Date.now();
    var kernel = createCubeTinyKernel(
      appInstanceId,
      options,
      function (pageInstanceId) { return createPageInstance$1(pageInstanceId); }
    );

    var context = {
      Promise: kernel.Promise,
      getJSFMVersion: getJSFMVersion,
      navigator: {
        swuserAgent: options.userAgent
      },
      isSupportCubeStyle: false,
      __WEEX_CALL_JAVASCRIPT__: receiveTasks,
      __BRIDGE_CALLBACK__: kernel.__BRIDGE_CALLBACK__,
      __CREATE_PAGE_INSTANCE__: kernel.__CREATE_PAGE_INSTANCE__,
      __EVENT_INVOKE__: kernel.__EVENT_INVOKE__,
      __TIMEOUT_INVOKE__: kernel.__TIMEOUT_INVOKE__,
      // eslint-disable-next-line
      __DEBUGGER__: function (a, b, c, d, e, f, g) { debugger },
      __debug_request_sync__: debugRequestSync,
      __debug_request_async__: debugRequestAsync,
      __DEV_TOOL__: devtool,
      setTimeout: kernel.setTimeout,
      clearTimeout: kernel.clearTimeout,
      setInterval: kernel.setInterval,
      clearInterval: kernel.clearInterval
    };

    if (global.hasFeature && global.hasFeature(appInstanceId, 'style_sheet', '')) {
      context.isSupportCubeStyle = true;
    }

    try {
      // 用于线上隔离环境运行
      debug(function () { return "[APPX][JSFM][Global] AppxFramework bootstrapInGlobal start"; });
      var frameworkSymbols = bootstrapInGlobalContext(kernel, context.weex);
      debug(function () { return "[APPX][JSFM][Global] AppxFramework bootstrapInGlobal finish"; });

      Object.keys(frameworkSymbols).forEach(function (key) {
        context[key] = frameworkSymbols[key];
      });
    }
    catch (ex) {
      info(("[APPX][JSFM] createAppContext:fail " + (ex && ex.message) + "/" + (ex && ex.stack)));
      throw ex
    }

    info("[APPX][JSFM] createAppContext:finish");

    var appContextCreateFinish = Date.now();
    kernel.__PERFORMANCE__['appContextCreateBegin'] = appContextCreateBegin;
    kernel.__PERFORMANCE__['appContextCreateFinish'] = appContextCreateFinish;

    return Object.freeze(context)
  }

  function createPageInstance$1 (instanceId, noFramework) {
    var pageContext = createInstanceContextOriginal(instanceId, {
      bundleType: noFramework ? 'Empty' : 'Vue'
    });
    Object.freeze(pageContext);

    return pageContext
  }

  function createInstanceContext (pageInstanceId, options, data) {
    if ( options === void 0 ) { options = {}; }

    var instanceContext = createInstanceContextOriginal(pageInstanceId, options, data);

    var polygonAppInstanceId = options.appInstanceId;
    if (polygonAppInstanceId) {
      var polygonContext = createPolygonContextImpl(polygonAppInstanceId, pageInstanceId, options);
      Object.assign(instanceContext, polygonContext);
    }

    {
      try {
        debug(function () { return "[APPX][JSFM][Global] AppxFramework bootstrapInGlobal start"; });
        var frameworkSymbols = bootstrapInGlobalContext(instanceContext.__POLYGON_KERNEL__, instanceContext.weex);
        debug(function () { return "[APPX][JSFM][Global] AppxFramework bootstrapInGlobal finish"; });

        Object.keys(frameworkSymbols).forEach(function (key) {
          instanceContext[key] = frameworkSymbols[key];
        });
      }
      catch (ex) {
        info(("[APPX][JSFM] createPageContext:fail " + (ex && ex.message) + "/" + (ex && ex.stack)));
        throw ex
      }
    }

    Object.freeze(instanceContext);
    return instanceContext
  }

  function createPolygonContextImpl (polygonAppInstanceId, pageInstanceId, options) {
    var userAgent = options.userAgent;
    var kernel = createCubePolygonKernel(polygonAppInstanceId, pageInstanceId, options);
    var context = {
      Promise: kernel.Promise,
      navigator: {
        swuserAgent: userAgent
      },
      __POLYGON_KERNEL__: kernel,
      __TIMEOUT_INVOKE__: kernel.__TIMEOUT_INVOKE__,
      __BRIDGE_CALLBACK__: kernel.__BRIDGE_CALLBACK__,
      setTimeout: kernel.setTimeout,
      clearTimeout: kernel.clearTimeout,
      setInterval: kernel.setInterval,
      clearInterval: kernel.clearInterval
    };

    return context
  }

  function destroyInstanceContext4Polygon (polygonPageInstanceId) {
    debug(function () { return '[POLY][JSFM] polygon context destroy start'; });
    destroyCubePolygonAppInstanceKernel(polygonPageInstanceId);
    debug(function () { return '[POLY][JSFM] polygon context destroy end'; });
  }

  /**
   * 这个函数 createPageInstance 也在用
   * @param {*} id
   * @param {*} options
   * @param {*} data
   */
  function createInstanceContextOriginal (id, options, data) {
    if ( options === void 0 ) { options = {}; }

    if (typeof nativeLog === 'function') {
      nativeLog(("[JSFM] createInstanceContext " + id));
    }
    var weex = new WeexInstance(id, options);
    Object.freeze(weex);

    var bundleType = options.bundleType || 'Vue';
    if (bundleType === 'Vue') {
      bundleType = 'EmptyVue';
    }
    instanceTypeMap[id] = bundleType;
    var framework = runtimeConfig.frameworks[bundleType];
    if (!framework) {
      return new Error(("[JS Framework] Invalid bundle type \"" + bundleType + "\"."))
    }
    track(id, 'bundleType', bundleType);

    // prepare js service
    var services = createServices(id, {
      weex: weex,
      config: options,
      created: Date.now(),
      framework: bundleType,
      bundleType: bundleType
    }, runtimeConfig);
    Object.freeze(services);

    // prepare runtime context
    var runtimeContext = Object.create(null);
    Object.assign(runtimeContext, services, {
      weex: weex,
      mquick: weex,
      getJSFMVersion: getJSFMVersion,
      requireModule: function () {
        var arguments$1 = arguments;

        var args = [], len = arguments.length;
        while ( len-- ) { args[ len ] = arguments$1[ len ]; }

        return weex.requireModule.apply(weex, args);
    },
      __WEEX_CALL_JAVASCRIPT__: receiveTasks,
      services: services // Temporary compatible with some legacy APIs in Rax
    });
    Object.freeze(runtimeContext);

    // prepare instance context
    var instanceContext = Object.assign({}, runtimeContext);
    if (typeof framework.createInstanceContext === 'function') {
      Object.assign(instanceContext, framework.createInstanceContext(id, runtimeContext, data));
    }
    return instanceContext
  }

  /**
   * Check which framework a certain JS Bundle code based to. And create instance
   * by this framework.
   * @param {string} id
   * @param {string} code
   * @param {object} config
   * @param {object} data
   */
  function createInstance (id, code, config, data) {
    if (instanceTypeMap[id]) {
      return new Error(("The instance id \"" + id + "\" has already been used!"))
    }

    // Init instance info.
    var bundleType = getBundleType(code);
    instanceTypeMap[id] = bundleType;

    // Init instance config.
    config = JSON.parse(JSON.stringify(config || {}));
    config.env = JSON.parse(JSON.stringify(global.WXEnvironment || {}));
    config.bundleType = bundleType;

    var framework = runtimeConfig.frameworks[bundleType];
    if (!framework) {
      return new Error(("[JS Framework] Invalid bundle type \"" + bundleType + "\"."))
    }
    if (bundleType === 'Weex') {
      console.error("[JS Framework] COMPATIBILITY WARNING: "
        + "Weex DSL 1.0 (.we) framework is no longer supported! "
        + "It will be removed in the next version of WeexSDK, "
        + "your page would be crash if you still using the \".we\" framework. "
        + "Please upgrade it to Vue.js or Rax.");
    }

    var instanceContext = createInstanceContext(id, config, data);
    if (typeof framework.createInstance === 'function') {
      // Temporary compatible with some legacy APIs in Rax,
      // some Rax page is using the legacy ".we" framework.
      if (bundleType === 'Rax' || bundleType === 'Weex') {
        var raxInstanceContext = Object.assign({
          config: config,
          created: Date.now(),
          framework: bundleType
        }, instanceContext);
        return framework.createInstance(id, code, config, data, raxInstanceContext)
      }
      return framework.createInstance(id, code, config, data, instanceContext)
    }
    // console.error(`[JS Framework] Can't find available "createInstance" method in ${bundleType}!`)
    runInContext(code, instanceContext);
  }

  /**
   * Run js code in a specific context.
   * @param {string} code
   * @param {object} context
   */
  function runInContext (code, context) {
    var keys = [];
    var args = [];
    for (var key in context) {
      keys.push(key);
      args.push(context[key]);
    }

    var bundle = "\n    (function (global) {\n      " + code + "\n    })(Object.create(this))\n  ";

    return (new (Function.prototype.bind.apply( Function, [ null ].concat( keys, [bundle]) ))).apply(void 0, args)
  }

  /**
   * Get the JSON object of the root element.
   * @param {string} instanceId
   */
  function getRoot (instanceId) {
    var document = getDoc(instanceId);
    try {
      if (document && document.body) {
        return document.body.toJSON()
      }
    }
    catch (e) {
      console.error("[JS Framework] Failed to get the virtual dom tree.");
      return
    }
  }

  var symbols = {
    AFAppX: {
      getAppContext: function getAppContext (appInstanceId, option) {
        return createAppContextInGlobalContext({
          createPageInstance: function (pageInstanceId, noFramework) { return createPageInstance$1(pageInstanceId, noFramework); },
          globalContext: {
            getProperty: function getProperty (key) {
              return global[key]
            },
            setProperty: function setProperty (key, value) {
              global[key] = value;
            }
          },
          setCubeAppInstanceKernel: setCubeAppInstanceKernel,
          getJSFMVersion: getJSFMVersion,
          receiveTasks: receiveTasks,
          getCustomComponents: getCustomComponents
        }, appInstanceId, option)
      }
    }
  };

  var methods = {
    createInstance: createInstance,
    createInstanceContext: createInstanceContext,
    createAppContext: createAppContext,
    eventInvokeToApp: eventInvokeToApp,
    bridgeCallbackToApp: bridgeCallbackToApp,
    createPageInstanceToApp: createPageInstanceToApp,
    destroyAppContext: destroyAppContext,
    getRoot: getRoot,
    getJSFMVersion: getJSFMVersion,
    getDocument: getDoc,
    registerService: register,
    unregisterService: unregister,
    callJS: function callJS (id, tasks) {
      var framework = frameworks[getFrameworkType(id)];
      if (framework && typeof framework.receiveTasks === 'function') {
        return framework.receiveTasks(id, tasks)
      }
      return receiveTasks(id, tasks)
    }
  };

  /**
   * Register methods which will be called for each instance.
   * @param {string} methodName
   */
  function genInstance (methodName) {
    methods[methodName] = function () {
      var arguments$1 = arguments;

      var args = [], len = arguments.length;
      while ( len-- ) { args[ len ] = arguments$1[ len ]; }

      var id = args[0];
      var type = getFrameworkType(id);
      if (type && frameworks[type]) {
        var result = (ref = frameworks[type])[methodName].apply(ref, args);
        var info = { framework: type };

        // Lifecycle methods
        if (methodName === 'refreshInstance') {
          services.forEach(function (service) {
            var refresh = service.options.refresh;
            if (refresh) {
              refresh(id, { info: info, runtime: runtimeConfig });
            }
          });
          /** refresh not handling instance context */
        }
        else if (methodName === 'destroyInstance') {
          services.forEach(function (service) {
            var destroy = service.options.destroy;
            if (destroy) {
              destroy(id, { info: info, runtime: runtimeConfig });
            }
          });
          delete instanceTypeMap[id];
          destroyInstanceContext4Polygon(id);
        }

        return result
      }
      return new Error("[JS Framework] Using invalid instance id "
        + "\"" + id + "\" when calling " + methodName + ".")
      var ref;
    };
  }

  /**
   * Register methods which init each frameworks.
   * @param {string} methodName
   * @param {function} sharedMethod
   */
  function adaptMethod (methodName, sharedMethod) {
    methods[methodName] = function () {
      var arguments$1 = arguments;

      var args = [], len = arguments.length;
      while ( len-- ) { args[ len ] = arguments$1[ len ]; }

      if (typeof sharedMethod === 'function') {
        sharedMethod.apply(void 0, args);
      }

      // TODO: deprecated
      for (var name in runtimeConfig.frameworks) {
        var framework = runtimeConfig.frameworks[name];
        if (framework && framework[methodName]) {
          framework[methodName].apply(framework, args);
        }
      }
    };
  }

  function init$1 (config) {
    runtimeConfig = config || {};
    frameworks = runtimeConfig.frameworks || {};
    init();

    // Init each framework by `init` method and `config` which contains three
    // virtual-DOM Class: `Document`, `Element` & `Comment`, and a JS bridge method:
    // `sendTasks(...args)`.
    for (var name in frameworks) {
      var framework = frameworks[name];
      if (typeof framework.init === 'function') {
        try {
          framework.init(config);
        }
        catch (e) { }
      }
    }

    adaptMethod('registerComponents', registerComponents);
    adaptMethod('registerModules', registerModules);
    adaptMethod('registerMethods')

    ;['destroyInstance', 'refreshInstance'].forEach(genInstance);

    return {
      methods: methods,
      symbols: symbols
    }
  }

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  var config = {
    Document: Document, Element: Element$1, Comment: Comment, Listener: Listener,
    TaskCenter: TaskCenter,
    sendTasks: function sendTasks () {
      var arguments$1 = arguments;

      var args = [], len = arguments.length;
      while ( len-- ) { args[ len ] = arguments$1[ len ]; }

      if (typeof callNative === 'function') {
        return callNative.apply(void 0, args)
      }
      return (global.callNative || (function () {})).apply(void 0, args)
    }
  };

  Document.handler = config.sendTasks;

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  /* istanbul ignore next */
  function freezePrototype$1 () {
    // Object.freeze(config.Element)
    Object.freeze(config.Comment);
    Object.freeze(config.Listener);
    Object.freeze(config.Document.prototype);
    // Object.freeze(config.Element.prototype)
    Object.freeze(config.Comment.prototype);
    Object.freeze(config.Listener.prototype);
  }

  var runtime = {
    service: { register: register, unregister: unregister, has: has },
    freezePrototype: freezePrototype$1,
    init: init$1,
    config: config
  };

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */
  // @同非，可以移除 BroadcastChannel
  // import BroadcastChannel from './broadcast-channel/index'

  var services$1 = {
    // BroadcastChannel
  };

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  /**
   * Setup frameworks with runtime.
   * You can package more frameworks by
   *  passing them as arguments.
   */
  function setup (frameworks) {
    var init = runtime.init;
    var config = runtime.config;
    config.frameworks = frameworks;
    var native = subversion.native;
    var transformer = subversion.transformer;

    for (var serviceName in services$1) {
      runtime.service.register(serviceName, services$1[serviceName]);
    }

    runtime.freezePrototype();

    // register framework meta info
    global.frameworkVersion = native;
    global.transformerVersion = transformer;

    // init frameworks
    var ref = init(config);
    var globalMethods = ref.methods;
    var symbols = ref.symbols;

    // set global methods
    var loop = function ( methodName ) {
      global[methodName] = function () {
        var arguments$1 = arguments;

        var args = [], len = arguments.length;
        while ( len-- ) { args[ len ] = arguments$1[ len ]; }

        var ret = globalMethods[methodName].apply(globalMethods, args);
        if (ret instanceof Error) {
          console.error(ret.toString());
        }
        return ret
      };
    };

    for (var methodName in globalMethods) { loop( methodName ); }
    for (var symbolName in symbols) {
      global[symbolName] = symbols[symbolName];
    }
  }

  function createInstanceContext$1 (instanceId, runtimeContext, data) {

  }

  function destroyInstance (instanceId) {

  }

  function refreshInstance (instanceId, data) {

  }

  var Empty = {
    __proto__: null,
    createInstanceContext: createInstanceContext$1,
    destroyInstance: destroyInstance,
    refreshInstance: refreshInstance
  };

  function createInstanceContext$2 (instanceId, runtimeContext, data) {
    runtimeContext.weex.requireModule('timer');
    return {
      Vue: function () {}
    }
  }

  function destroyInstance$1 (instanceId) {

  }

  function refreshInstance$1 (instanceId, data) {

  }

  var EmptyVue = {
    __proto__: null,
    createInstanceContext: createInstanceContext$2,
    destroyInstance: destroyInstance$1,
    refreshInstance: refreshInstance$1
  };

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */
  var config$1 = {};

  var instanceMap = {};

  function init$2 (cfg) {
    config$1.Document = cfg.Document;
    config$1.Element = cfg.Element;
    config$1.Comment = cfg.Comment;
    config$1.sendTasks = cfg.sendTasks;
  }

  function createInstance$1 (id, code, options, data, serviceObjects) {
    if ( options === void 0 ) { options = {}; }
    if ( data === void 0 ) { data = {}; }
    if ( serviceObjects === void 0 ) { serviceObjects = {}; }

    var document = new config$1.Document(id, options.bundleUrl);
    var callbacks = {};
    var instance = { id: id, data: data, document: document, callbacks: callbacks };

    var lastCallbackId = 0;
    document.addCallback = function (func) {
      lastCallbackId++;
      callbacks[lastCallbackId] = func;
      return lastCallbackId
    };
    document.handleCallback = function (funcId, data, ifLast) {
      var callback = callbacks[funcId];
      if (ifLast) {
        delete callbacks[funcId];
      }
      return callback(data)
    };
    instanceMap[id] = instance;

    var globalObjects = Object.assign({
      Document: config$1.Document,
      Element: config$1.Element,
      Comment: config$1.Comment,
      sendTasks: function (tasks) { return config$1.sendTasks(id, tasks, -1); },
      options: options,
      document: document
    }, serviceObjects);

    var globalKeys = [];
    var globalValues = [];
    for (var key in globalObjects) {
      globalKeys.push(key);
      globalValues.push(globalObjects[key]);
    }
    globalKeys.push(code);

    var result = new (Function.prototype.bind.apply( Function, [ null ].concat( globalKeys) ));
    result.apply(void 0, globalValues);

    config$1.sendTasks(id, [{ module: 'dom', method: 'createFinish', args: [] }], -1);

    return instance
  }

  function destroyInstance$2 (id) {
    delete instanceMap[id];
  }

  function getRoot$1 (id) {
    return instanceMap[id].document.body.toJSON()
  }

  function receiveTasks$1 (id, tasks) {
    var jsHandlers = {
      fireEvent: function (id, ref, type, data, domChanges) {
        var ref$1 = instanceMap[id];
        var document = ref$1.document;
        var el = document.getRef(ref);
        return document.fireEvent(el, type, data, domChanges)
      },

      callback: function (id, funcId, data, ifLast) {
        var ref = instanceMap[id];
        var document = ref.document;
        return document.handleCallback(funcId, data, ifLast)
      }
    };

    var ref = instanceMap[id] || {};
    var document = ref.document;
    if (document && Array.isArray(tasks)) {
      var results = [];
      tasks.forEach(function (task) {
        var handler = jsHandlers[task.method];
        var args = [].concat( task.args );
        if (typeof handler === 'function') {
          args.unshift(id);
          results.push(handler.apply(void 0, args));
        }
      });
      return results
    }
  }

  var Vanilla = {
    __proto__: null,
    init: init$2,
    createInstance: createInstance$1,
    destroyInstance: destroyInstance$2,
    getRoot: getRoot$1,
    receiveTasks: receiveTasks$1
  };

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  var frameworks$1 = {
    Empty: Empty,
    EmptyVue: EmptyVue,
    Vanilla: Vanilla
  };

  /*
   * Licensed to the Apache Software Foundation (ASF) under one
   * or more contributor license agreements.  See the NOTICE file
   * distributed with this work for additional information
   * regarding copyright ownership.  The ASF licenses this file
   * to you under the Apache License, Version 2.0 (the
   * "License"); you may not use this file except in compliance
   * with the License.  You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing,
   * software distributed under the License is distributed on an
   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   * KIND, either express or implied.  See the License for the
   * specific language governing permissions and limitations
   * under the License.
   */

  setup(frameworks$1);
  freezePrototype();

})));
